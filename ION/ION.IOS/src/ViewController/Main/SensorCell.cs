// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using ION.Core.Sensors;
using ION.Core.Util;

using ION.IOS.Sensors;
using ION.IOS.UI;

namespace ION.IOS.ViewController.Main {
	public partial class SensorCell : UITableViewCell {

    /// <summary>
    /// The action that will be called when the workbench button
    /// is clicked.
    /// </summary>
    public Action onWorkbenchClicked {
      get {
        return __onWorkbenchClicked;
      }
      set {
        __onWorkbenchClicked = value;
        buttonWorkbench.Hidden = __onWorkbenchClicked == null;
      }
    } Action __onWorkbenchClicked;
    /// <summary>
    /// The action that will be called when the analyzer button
    /// is clicked.
    /// </summary>
    /// <value>The on analyzer clicked.</value>
    public Action onAnalyzerClicked { 
      get {
        return __onAnalyzerClicked;
      }
      set {
        __onAnalyzerClicked = value;
        buttonAnalyzer.Hidden = __onAnalyzerClicked == null;
      }
    } Action __onAnalyzerClicked;
    /// <summary>
    /// The action that will be called when the add button is
    /// clicked.
    /// </summary>
    /// <value>The on add clicked.</value>
    public Action onAddClicked {
      get {
        return __onAddClicked;
      } 
      set {
        __onAddClicked = value;
        buttonAdd.Hidden = __onAddClicked == null;
      }
    } Action __onAddClicked;
    /// <summary>
    /// The sensor that is providing real time content updates to this view.
    /// </summary>
    /// <value>The sensor.</value>
    private Sensor sensor { 
      get {
        return __sensor;
      }
      set {
        if (__sensor != null) {
          __sensor.onSensorStateChangedEvent -= OnSensorUpdated;
        }

        __sensor = value;

        if (__sensor != null) {
          __sensor.onSensorStateChangedEvent += OnSensorUpdated;
          OnSensorUpdated(__sensor);
        }
      }
    } Sensor __sensor;

		public SensorCell (IntPtr handle) : base (handle) {
      // Nope
		}

    // Overriden from UITableCellView
    public override void AwakeFromNib() {
      base.AwakeFromNib();
      buttonWorkbench.SetBackgroundImage(UIImage.FromBundle("ButtonGold"), UIControlState.Normal);
      buttonWorkbench.SetBackgroundImage(UIImage.FromBundle("ButtonBlack"), UIControlState.Highlighted);
      buttonWorkbench.TouchUpInside += (object sender, EventArgs e) => {
        Log.D(this, "Workbench clicked");
        if (onWorkbenchClicked != null) {
          onWorkbenchClicked();
        }
      };

      buttonAnalyzer.SetBackgroundImage(UIImage.FromBundle("ButtonGold"), UIControlState.Normal);
      buttonAnalyzer.SetBackgroundImage(UIImage.FromBundle("ButtonBlack"), UIControlState.Highlighted);
      buttonAnalyzer.TouchUpInside += (object sender, EventArgs e) => {
        Log.D(this, "Analyzer clicked");
        if (onAnalyzerClicked != null) {
          onAnalyzerClicked();
        }
      };

      buttonAdd.SetBackgroundImage(UIImage.FromBundle("ButtonGold"), UIControlState.Normal);
      buttonAdd.SetBackgroundImage(UIImage.FromBundle("ButtonBlack"), UIControlState.Highlighted);
      buttonAdd.TouchUpInside += (object sender, EventArgs e) => {
        Log.D(this, "Add clicked");
        if (onAddClicked != null) {
          onAddClicked();
        }
      };
    }

    // Overridden from UITabelCellView
    public override void RemoveFromSuperview() {
      base.RemoveFromSuperview();
      sensor = null;
    }

    /// <summary>
    /// Updates the view to the given sensor.
    /// </summary>
    /// <param name="sensor">Sensor.</param>
    public void Update(Sensor sensor) {
      this.sensor = sensor;
    }

    /// <summary>
    /// The delegate that is called when the view's attached sensor updates.
    /// </summary>
    /// <param name="sensor">Sensor.</param>
    private void OnSensorUpdated(Sensor sensor) {
      labelSensorType.Text = sensor.sensorType.GetTypeString();
      labelSensorMeasurement.Text = sensor.measurement.ToString();
    }
  }
}
