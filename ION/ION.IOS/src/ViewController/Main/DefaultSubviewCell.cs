// This file has been autogenerated from a class added in the UI designer.

using System;

using CoreGraphics;
using Foundation;
using UIKit;

using ION.Core.Sensors.Properties;
using ION.Core.Util;

namespace ION.IOS.ViewController.Main {
	public partial class DefaultSubviewCell : UITableViewCell, IReleasable {

    /// <summary>
    /// The action that will be called when the icon is clicked.
    /// </summary>
    /// <value>The on icon clicked.</value>
    public Action onIconClicked { get; set; }
    /// <summary>
    /// The action that is called when the sensor property is updated.
    /// </summary>
    /// <value>The on sensor property changed.</value>
    public Action onSensorPropertyChanged { get; set; }
    /// <summary>
    /// The sensor property that we are representing.
    /// </summary>
    /// <value>The sensor property.</value>
    public ISensorProperty sensorProperty {
      get {
        return __sensorProperty;
      }
      set {
        if (__sensorProperty != null) {
          __sensorProperty.onSensorPropertyChanged -= OnPropertyChangedDelegate;
        }

        __sensorProperty = value;

        if (__sensorProperty != null) {
          __sensorProperty.onSensorPropertyChanged += OnPropertyChangedDelegate;
        }
      }
    } ISensorProperty __sensorProperty;

		public DefaultSubviewCell (IntPtr handle) : base (handle) {
      // Nope
		}

    // Overridden from IReleasable
    public void Release() {
      sensorProperty = null;
    }

    // Overridden from UITableViewCell
    public override void AwakeFromNib() {
      base.AwakeFromNib();

      buttonIcon.TouchUpInside += (object sender, EventArgs e) => {
        if (onIconClicked != null) {
          onIconClicked();
        }
      };
    }

    // Overridden from UITableViewCell
    public override void PrepareForReuse() {
      base.PrepareForReuse();

      sensorProperty = null;
    }

    private void Update() {
      labelMeasurement.Text = sensorProperty.modifiedMeasurement.ToString();
    }

    /// <summary>
    /// Called when the sensor property changed.
    /// </summary>
    /// <param name="sensor">Sensor.</param>
    private void OnPropertyChangedDelegate(ISensorProperty sensor) {
      if (sensorProperty != null) {
        Update();
      }
      if (onSensorPropertyChanged != null) {
        onSensorPropertyChanged();
      }
    }
	}
}
