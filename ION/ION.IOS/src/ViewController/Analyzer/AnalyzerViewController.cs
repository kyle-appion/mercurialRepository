// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Threading.Tasks;
using ION.Core.Sensors;
using ION.Core.Sensors.Properties;
using CoreGraphics;
using Foundation;
using UIKit;
using AllianceCustomPicker;
using ION.IOS.ViewController.DeviceManager;
using ION.IOS.ViewController.SuperheatSubcool;
using ION.IOS.ViewController.PressureTemperatureChart;
using ION.Core.Content;
using ION.Core.Devices;
using ION.Core.Util;
using ION.IOS.Util;
using ION.IOS.ViewController.Alarms;
using ION.Core.Fluids;
using ION.Core.Measure;

namespace ION.IOS.ViewController.Analyzer {
  
	public partial class AnalyzerViewController : BaseIONViewController {
    public static manualEntry start = new manualEntry ();
    public static actionPopup sensorActions = new actionPopup();
    public static sensorGroup analyzerSensors;
    public static LowHighArea lowHighSensors;
    public static AlliancePicker manualPicker;
    public static ManualView mentryView;

    static bool UserInterfaceIdiomIsPhone {
      get { return UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone; }
    }

		public AnalyzerViewController (IntPtr handle) : base (handle) {
      
		}

    // Overridden from UIViewController
    public override void ViewDidLoad() {
      base.ViewDidLoad();
      View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromBundle ("CarbonBackground"));
      Console.WriteLine("Bounds for device " + View.Bounds);
      lowHighSensors = new LowHighArea (View, this);
      mentryView = new ManualView(View);
      analyzerSensors = new sensorGroup(View, this);

      InitNavigationBar("ic_nav_analyzer", false);

      backAction = () => {
        root.navigation.ToggleMenu();
      };

      createSensors ();

      createPickers ();

      mentryView.mmeasurementType.TouchUpInside += showManualPicker;
      mentryView.dtypeButton.TouchUpInside += showDeviceTypePicker;  

      mentryView.mtextValue.ShouldReturn += (textField) => {
        textField.ResignFirstResponder();
        return true;
      };

      mentryView.mcloseButton.TouchUpInside += delegate {
        mentryView.mtextValue.Text = "";
        mentryView.mView.Hidden = true;
        mentryView.dtypeButton.SetTitle("Pressure", UIControlState.Normal);
        mentryView.dtypeButton.AccessibilityIdentifier = "Pressure";
        manualPicker.PlainPickerItems = start.pressures;
        mentryView.mbuttonText.Text = start.pressures[0];
        mentryView.textValidation.Hidden = true;
        mentryView.mtextValue.ResignFirstResponder();
        this.View.SendSubviewToBack (mentryView.mView);
      };

    }
    /// <summary>
    /// CREATE ALL SENSOR SUBVIEW STARTING POSITIONS AND CENTER POINTS
    /// </summary>
    void createSensors ()
    {
      AnalyserUtilities.CreateSnapArea(analyzerSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea1, "1", analyzerSensors.snapRect1, analyzerSensors, lowHighSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea2, "2", analyzerSensors.snapRect2, analyzerSensors, lowHighSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea3, "3", analyzerSensors.snapRect3, analyzerSensors, lowHighSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea4, "4", analyzerSensors.snapRect4, analyzerSensors, lowHighSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea5, "5", analyzerSensors.snapRect5, analyzerSensors, lowHighSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea6, "6", analyzerSensors.snapRect6, analyzerSensors, lowHighSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea7, "7", analyzerSensors.snapRect7, analyzerSensors, lowHighSensors, View);
      AnalyserUtilities.ApplySnapArea (analyzerSensors.snapArea8, "8", analyzerSensors.snapRect8, analyzerSensors, lowHighSensors, View);

      //UIImageView compressor = new UIImageView(new CGRect(148,92,25,25));
      UIImageView compressor = new UIImageView(new CGRect(.462 * View.Bounds.Width,.161 * View.Bounds.Height,.078 * View.Bounds.Width,.047 * View.Bounds.Height));        
      compressor.Image = UIImage.FromBundle("ic_compressor");
      //UIImageView expansion = new UIImageView(new CGRect(148,286,25,25));
      UIImageView expansion = new UIImageView(new CGRect(.462 * View.Bounds.Width,.503 * View.Bounds.Height,.078 * View.Bounds.Width,.047 * View.Bounds.Height ));
      expansion.Image = UIImage.FromBundle("ic_expansionchamber");

      View.AddSubview(compressor);
      View.AddSubview(expansion);

      AnalyserUtilities.CreateLowHighArea (lowHighSensors, View);
      AnalyserUtilities.AddHighLowArea (lowHighSensors, View);
      AnalyserUtilities.CreateManualViews(mentryView, View);

      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea1, analyzerSensors.animator, analyzerSensors.snap);
      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea2, analyzerSensors.animator, analyzerSensors.snap);
      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea3, analyzerSensors.animator, analyzerSensors.snap);
      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea4, analyzerSensors.animator, analyzerSensors.snap);
      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea5, analyzerSensors.animator, analyzerSensors.snap);
      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea6, analyzerSensors.animator, analyzerSensors.snap);
      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea7, analyzerSensors.animator, analyzerSensors.snap);
      AddSensorGestures (analyzerSensors, analyzerSensors.snapArea8, analyzerSensors.animator, analyzerSensors.snap);

      AddLowHighGestures ();

      mentryView.mView.Layer.CornerRadius = 10;
      ///weird padding added to first snaparea's low side table
      /// this sets the table cells to start directly under the low side area
      analyzerSensors.snapArea1.lowArea.subviewTable.ContentInset = new UIEdgeInsets(-.058f * View.Bounds.Height, 0, 0, 0);
    }

    /// <summary>
    /// CREATE AND SHOW POPUP FOR SINGLE SENSORS
    /// </summary>
    /// <param name="popupType">Popup type.</param>
    void ShowPopup(sensor pressedArea, int popupType){
      if (pressedArea.availableView.Hidden) {        
        ///IF SENSOR IS ACTIVE SET THAT SENSOR'S INFO IN THE POPUP
        pressedArea.sactionView.pdeviceName.Text = pressedArea.topLabel.Text;       
        pressedArea.sactionView.pgaugeValue.Text = pressedArea.middleLabel.Text;
        pressedArea.sactionView.pvalueType.Text = pressedArea.bottomLabel.Text;

        if (pressedArea.currentSensor != null && pressedArea.currentSensor.device.isConnected) {
         
          pressedArea.sactionView.pconnection.Image = UIImage.FromBundle("ic_bluetooth_connected");
          pressedArea.sactionView.pconnectionStatus.Text = "";
          pressedArea.sactionView.connectionColor.BackgroundColor = UIColor.Green;
          pressedArea.sactionView.connectionColor.Hidden = false;

          if (pressedArea.currentSensor.device.battery > 75) {
            pressedArea.sactionView.pbatteryImage.Image = UIImage.FromBundle("img_battery_100");
          } else if (pressedArea.currentSensor.device.battery > 50) {
            pressedArea.sactionView.pbatteryImage.Image = UIImage.FromBundle("img_battery_75");
          } else if (pressedArea.currentSensor.device.battery > 25) {
            pressedArea.sactionView.pbatteryImage.Image = UIImage.FromBundle("img_battery_50");
          } else if (pressedArea.currentSensor.device.battery > 0) {
            pressedArea.sactionView.pbatteryImage.Image = UIImage.FromBundle("img_battery_25");
          } else {
            pressedArea.sactionView.pbatteryImage.Image = UIImage.FromBundle("img_battery_0");
          }
          pressedArea.sactionView.pdeviceImage.Image = pressedArea.deviceImage.Image;

        } else if (pressedArea.currentSensor != null && !pressedArea.isManual) {
          pressedArea.sactionView.pconnection.Image = UIImage.FromBundle("ic_bluetooth_disconnected");
          pressedArea.sactionView.pconnectionStatus.Text = "Disconnected";
          pressedArea.sactionView.pconnectionStatus.TextColor = UIColor.Red;
          pressedArea.sactionView.pdeviceImage.Image = pressedArea.deviceImage.Image;
          pressedArea.sactionView.connectionColor.BackgroundColor = UIColor.Red;
          pressedArea.sactionView.connectionColor.Hidden = false;
          pressedArea.sactionView.conDisButton.Hidden = false;
        } else {
          pressedArea.sactionView.pdeviceImage.Image = UIImage.FromBundle("ic_edit");
          pressedArea.sactionView.pconnectionStatus.Text = "";
          pressedArea.sactionView.pconnection.Image = null;
          pressedArea.sactionView.pconnection.Hidden = true;
          pressedArea.sactionView.pbatteryImage.Image = null;
          pressedArea.sactionView.connectionColor.Hidden = true;
          pressedArea.sactionView.conDisButton.Hidden = true;
        }


        if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == pressedArea.snapArea.AccessibilityIdentifier) {
          pressedArea.sactionView.pLowHigh.Text = "Low Side";
          pressedArea.sactionView.pLowHigh.BackgroundColor = UIColor.Blue;
          pressedArea.sactionView.pLowHigh.Layer.CornerRadius = 6f;
          pressedArea.sactionView.pLowHigh.TextColor = UIColor.White;
        } else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == pressedArea.snapArea.AccessibilityIdentifier) {
          pressedArea.sactionView.pLowHigh.Text = "High Side";
          pressedArea.sactionView.pLowHigh.BackgroundColor = UIColor.Red;
          pressedArea.sactionView.pLowHigh.Layer.CornerRadius = 6f;
          pressedArea.sactionView.pLowHigh.TextColor = UIColor.White;
        } else {
          pressedArea.sactionView.pLowHigh.Text = "Unspecified";
          pressedArea.sactionView.pLowHigh.BackgroundColor = UIColor.White;
          pressedArea.sactionView.pLowHigh.TextColor = UIColor.Black;
        }
        ///SHOW POPUP
        pressedArea.sactionView.aView.Hidden = false;
        View.BringSubviewToFront (pressedArea.sactionView.aView);

        pressedArea.sactionView.pcloseButton.TouchUpInside += delegate {
          pressedArea.sactionView.aView.Hidden = true;
        };

        ///STORE PASSED SENSOR SUBVIEW INFORMATION FOR CHANGES
        sensorActions.pressedSensor = pressedArea;
        sensorActions.pressedView = pressedArea.snapArea;
        sensorActions.addLong = pressedArea.holdGesture;
        sensorActions.addPan = pressedArea.panGesture;
        sensorActions.topLabel = pressedArea.topLabel;
        sensorActions.middleLabel = pressedArea.middleLabel;
        sensorActions.bottomLabel = pressedArea.bottomLabel;
        sensorActions.pressedSensor.isManual = pressedArea.isManual;

        ///SHOW ACTIONSHEET FOR SENSOR OPTIONS
        pressedArea.sactionView.pactionButton.TouchUpInside += handleActionPopup;    

      } 
      else {

        ///SHOW ACTIONSHEET FOR ADDING A NEW SENSOR
        UIAlertController addDeviceSheet;

        addDeviceSheet = UIAlertController.Create ("Add From...", "", UIAlertControllerStyle.Alert);

        addDeviceSheet.AddAction (UIAlertAction.Create ("Device Manager", UIAlertActionStyle.Default, (action) => {
          OnRequestViewer(pressedArea);
        }));

        addDeviceSheet.AddAction (UIAlertAction.Create ("Create Manual Entry", UIAlertActionStyle.Default, (action) => {
          start = new manualEntry();
          start.pressedSensor = pressedArea;
          start.addPan = pressedArea.panGesture;
          start.pressedView = pressedArea.snapArea;
          start.availableView = pressedArea.availableView;
          start.addLong = pressedArea.holdGesture;
          start.addPan = pressedArea.panGesture;
          start.topLabel = pressedArea.topLabel;
          start.middleLabel = pressedArea.middleLabel;
          start.bottomLabel = pressedArea.bottomLabel;
          start.addIcon = pressedArea.addIcon;
          start.isManual = pressedArea.isManual;

          mentryView.mdoneButton.TouchUpInside += handleManualPopup;
          View.BringSubviewToFront(mentryView.mView);
          mentryView.mView.Hidden = false;
        }));

        addDeviceSheet.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (action) => Console.WriteLine ("Cancel Action")));
        this.View.Window.RootViewController.PresentViewController (addDeviceSheet, true, null);
      }
    }

    /// <summary>
    /// EVENT FUNCTION FOR MANUAL ENTRY POPUP
    /// </summary>
    /// <param name="sender">Sender.</param>
    /// <param name="e">E.</param>
    void handleManualPopup(object sender, EventArgs e){
      if (mentryView.mtextValue.Text.Contains(".")) {
        var p1 = mentryView.mtextValue.Text.Split('.');
        var check = p1[1];
        if (check.Length.Equals(0)) {
          mentryView.textValidation.Text = "**Please enter a number after the decimal for this sensor's measurement**";
          mentryView.textValidation.Hidden = false;
          return;
        }
      }
      if (mentryView.mtextValue.Text.Length <= 0) {
        mentryView.textValidation.Text = "**Please enter a value for this sensor's measurement**";
        mentryView.textValidation.Hidden = false;
        return;
      }
      start.pressedView.AddGestureRecognizer (start.addPan);
      start.availableView.Hidden = true;
      start.pressedView.BackgroundColor = UIColor.White;
      start.topLabel.Hidden = false;
      start.middleLabel.Hidden = false;
      start.bottomLabel.Hidden = false;
      start.topLabel.Text = " " + mentryView.dtypeButton.AccessibilityIdentifier;
      start.middleLabel.Text = mentryView.mtextValue.Text;
      start.bottomLabel.Text = mentryView.mbuttonText.Text;
      start.pressedSensor.isManual = true;
      start.addIcon.Hidden = true;

      start.pressedSensor.lowArea.isManual = true;

      start.pressedSensor.lowArea.LabelTop.Text = mentryView.dtypeButton.AccessibilityIdentifier;
      start.pressedSensor.lowArea.LabelMiddle.Text = mentryView.mtextValue.Text;
      start.pressedSensor.lowArea.LabelBottom.Text = mentryView.mbuttonText.Text;
      start.pressedSensor.lowArea.LabelSubview.Text = mentryView.dtypeButton.AccessibilityIdentifier + "'s Subviews";
      start.pressedSensor.lowArea.Connection.Hidden = true;
      start.pressedSensor.lowArea.connectionColor.Hidden = true;
      start.pressedSensor.lowArea.DeviceImage.Image = UIImage.FromBundle("ic_edit");

      start.pressedSensor.highArea.isManual = true;
      start.pressedSensor.highArea.LabelTop.Text = mentryView.dtypeButton.AccessibilityIdentifier;
      start.pressedSensor.highArea.LabelMiddle.Text = mentryView.mtextValue.Text;
      start.pressedSensor.highArea.LabelBottom.Text = mentryView.mbuttonText.Text;
      start.pressedSensor.highArea.LabelSubview.Text = mentryView.dtypeButton.AccessibilityIdentifier + "'s Subviews";
      start.pressedSensor.highArea.Connection.Hidden = true;
      start.pressedSensor.highArea.connectionColor.Hidden = true;
      start.pressedSensor.highArea.DeviceImage.Image = UIImage.FromBundle("ic_edit");

      ///CREATE MANUAL MANIFOLDS
      if(mentryView.dtypeButton.AccessibilityIdentifier.Equals("Pressure")){
        start.pressedSensor.lowArea.manifold = new Manifold(new Sensor(ESensorType.Pressure));
        start.pressedSensor.highArea.manifold = new Manifold(new Sensor(ESensorType.Pressure));
        start.pressedSensor.manualSensor = new ManualDeviceSensor(ESensorType.Pressure);
        start.pressedSensor.lowArea.manualGType = "Pressure";
        start.pressedSensor.highArea.manualGType = "Pressure";       
      } else if (mentryView.dtypeButton.AccessibilityIdentifier.Equals("Temperature")) {
        start.pressedSensor.lowArea.manifold = new Manifold(new Sensor(ESensorType.Temperature));
        start.pressedSensor.highArea.manifold = new Manifold(new Sensor(ESensorType.Temperature));
        start.pressedSensor.manualSensor = new ManualDeviceSensor(ESensorType.Temperature);
        start.pressedSensor.lowArea.manualGType = "Temperature";
        start.pressedSensor.highArea.manualGType = "Temperature";
      } else {
        start.pressedSensor.lowArea.manifold = new Manifold(new Sensor(ESensorType.Vacuum));
        start.pressedSensor.highArea.manifold = new Manifold(new Sensor(ESensorType.Vacuum));
        start.pressedSensor.manualSensor = new ManualDeviceSensor(ESensorType.Vacuum);
        start.pressedSensor.lowArea.manualGType = "Vacuum";
        start.pressedSensor.highArea.manualGType = "Vacuum";
      }
      ///SET MANUALSENSOR MEASUREMENT AND UNIT TYPE
      start.pressedSensor.manualSensor.unit = AnalyserUtilities.getManualUnit(start.pressedSensor.manualSensor.type,mentryView.mbuttonText.Text.ToLower());
      start.pressedSensor.lowArea.manifold.primarySensor.unit = AnalyserUtilities.getManualUnit(start.pressedSensor.manualSensor.type,mentryView.mbuttonText.Text.ToLower());
      start.pressedSensor.highArea.manifold.primarySensor.unit = AnalyserUtilities.getManualUnit(start.pressedSensor.manualSensor.type,mentryView.mbuttonText.Text.ToLower());
      Console.WriteLine("Set manual Unit");
      start.pressedSensor.manualSensor.measurement = new Scalar(start.pressedSensor.lowArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));


      ///CREATE PTCHART AND MANIFOLD MEASUREMENTS
      if(start.pressedSensor.manualSensor.type == ESensorType.Pressure || start.pressedSensor.manualSensor.type == ESensorType.Temperature){
        Console.WriteLine(start.pressedSensor.manualSensor.type.ToString() + " sensor given so making ptChart");
        start.pressedSensor.lowArea.manifold.ptChart = PTChart.New(start.pressedSensor.lowArea.ion, Fluid.EState.Dew);
        start.pressedSensor.lowArea.manifold.primarySensor.measurement = new Scalar(start.pressedSensor.lowArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));
        start.pressedSensor.highArea.manifold.ptChart = PTChart.New(start.pressedSensor.highArea.ion, Fluid.EState.Dew);
        start.pressedSensor.highArea.manifold.primarySensor.measurement = new Scalar(start.pressedSensor.highArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));
      } else {
        Console.WriteLine(start.pressedSensor.manualSensor.type.ToString() + " sensor given so hiding the buttons that allow pt/scsh changes");
        start.pressedSensor.highArea.changeFluid.Hidden = true;
        start.pressedSensor.highArea.changePTFluid.Hidden = true;
        start.pressedSensor.lowArea.changeFluid.Hidden = true;
        start.pressedSensor.lowArea.changePTFluid.Hidden = true;
      }
      
      mentryView.textValidation.Hidden = true;
      mentryView.mdoneButton.TouchUpInside -= handleManualPopup;
      mentryView.dtypeButton.SetTitle("Pressure", UIControlState.Normal);
      mentryView.dtypeButton.AccessibilityIdentifier = "Pressure";
      mentryView.mbuttonText.Text = start.pressures[0];
      mentryView.mtextValue.Text = "";
      manualPicker.PlainPickerItems = start.pressures;
      start = null;
      mentryView.mView.Hidden = true;
      mentryView.mtextValue.ResignFirstResponder();
    }
    /// <summary>
    /// EVENT FUNCTION FOR ACTION POPUP
    /// </summary>
    /// <param name="sender">Sender.</param>
    /// <param name="e">E.</param>
    void handleActionPopup(object sender, EventArgs e)
    {

      UIAlertController addDeviceSheet;

      addDeviceSheet = UIAlertController.Create("Device Actions", "", UIAlertControllerStyle.ActionSheet);

      UIPopoverPresentationController presentationPopover = addDeviceSheet.PopoverPresentationController;
      if (presentationPopover!=null) {
        presentationPopover.SourceView = this.View;
        presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Right;
      }
      if (sensorActions.pressedSensor.isManual.Equals(false)) {
        addDeviceSheet.AddAction(UIAlertAction.Create("Alarms", UIAlertActionStyle.Default, (action) => {
          alarmRequestViewer(sensorActions);
        }));
      }
      addDeviceSheet.AddAction (UIAlertAction.Create ("Rename", UIAlertActionStyle.Default, (action) => {
        renamePopup();
      }));
      addDeviceSheet.AddAction (UIAlertAction.Create ("Remove Sensor", UIAlertActionStyle.Default, (action) => {
        AnalyserUtilities.RemoveDevice(sensorActions, lowHighSensors);
      }));

      addDeviceSheet.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (action) => Console.WriteLine ("Cancel Action")));
      this.View.Window.RootViewController.PresentViewController (addDeviceSheet, true, null);
    }
      /// <summary>
      /// SHOWS THE PICKER FOR THE MEASUREMENT TYPES
      /// </summary>
      /// <param name="sender">Sender.</param>
      /// <param name="e">E.</param>
    void showManualPicker(object sender, EventArgs e){
      manualPicker.Show ();
      mentryView.mtextValue.ResignFirstResponder();
    }
    /// <summary>
    /// SHOWS THE ALERT FOR WHAT TYPE OF DEVICE TO USE
    /// </summary>
    /// <param name="sender">Sender.</param>
    /// <param name="e">E.</param>
    void showDeviceTypePicker(object sender, EventArgs e){
      mentryView.dtypeButton.AccessibilityIdentifier = "Pressure";
      UIAlertController dtypeAlert = UIAlertController.Create ("Choose Device Type", "", UIAlertControllerStyle.Alert);

      dtypeAlert.AddAction (UIAlertAction.Create ("Pressure", UIAlertActionStyle.Default, (action) => {
        mentryView.dtypeButton.SetTitle("Pressure", UIControlState.Normal);
        mentryView.dtypeButton.AccessibilityIdentifier = "Pressure";
        manualPicker.PlainPickerItems = start.pressures;
        mentryView.mbuttonText.Text = start.pressures[0];
      }));
      dtypeAlert.AddAction (UIAlertAction.Create ("Temperature", UIAlertActionStyle.Default, (action) => {
        mentryView.dtypeButton.SetTitle("Temperature", UIControlState.Normal);
        mentryView.dtypeButton.AccessibilityIdentifier = "Temperature";
        manualPicker.PlainPickerItems = start.temperatures;
        mentryView.mbuttonText.Text = start.temperatures[0];
      }));
      dtypeAlert.AddAction (UIAlertAction.Create ("Vacuum", UIAlertActionStyle.Default, (action) => {
        mentryView.dtypeButton.SetTitle("Vacuum", UIControlState.Normal);
        mentryView.dtypeButton.AccessibilityIdentifier = "Vacuum";
        manualPicker.PlainPickerItems = start.vacuum;
        mentryView.mbuttonText.Text = start.vacuum[0];
      }));
      dtypeAlert.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (action) => {}));
      this.View.Window.RootViewController.PresentViewController (dtypeAlert, true, null);
    }
    /// <summary>
    /// POPUP TO DETERMINE LOW/HIGH AREA ACTIONS
    /// </summary>
    /// <param name="pressedArea">LOCATION OF SENSOR</param>
    public void ShowPopup(UITableView tableArea, UIView pressedArea, lowHighSensor lowHighArea, sensor removeSensor, string middleText){    
      UIAlertController addDeviceSheet;
      ///LOW/HIGH AREA IS ASSOCIATED WITH A SINGLE SENSOR ALREADY

        addDeviceSheet = UIAlertController.Create ("Add From...", "", UIAlertControllerStyle.Alert);

        addDeviceSheet.AddAction (UIAlertAction.Create ("Device Manager", UIAlertActionStyle.Default, (action) => {
          if(!AnalyserUtilities.freeSpot(analyzerSensors,removeSensor,lowHighArea.snapArea.AccessibilityIdentifier)){
            showFullAlert();
          } else {
            lhOnRequestViewer(lowHighArea);
          }
        }));

        addDeviceSheet.AddAction (UIAlertAction.Create ("Create Manual Entry", UIAlertActionStyle.Default, (action) => {

          if(!AnalyserUtilities.freeSpot(analyzerSensors,removeSensor, lowHighArea.snapArea.AccessibilityIdentifier)){
            showFullAlert();
          } else {
            start = new manualEntry();
            start.pressedView = pressedArea;
            start.topLabel = lowHighArea.LabelTop;
            start.middleLabel = lowHighArea.LabelMiddle;
            start.bottomLabel = lowHighArea.LabelBottom;
            start.subviewLabel = lowHighArea.LabelSubview;
            mentryView.mView.AccessibilityIdentifier = "Pressure";

            mentryView.mdoneButton.TouchUpInside += handleManualLHPopup;
            View.BringSubviewToFront(mentryView.mView);
            mentryView.mView.Hidden = false;
          }
        }));

      addDeviceSheet.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (action) => {}));

      this.View.Window.RootViewController.PresentViewController (addDeviceSheet, true, null);
    }
    /// <summary>
    /// EVENT FUNCTION FOR LOW HIGH MANUAL POPUP. ASSOCIATES A SINGLE SENSOR TO THE LOW/HIGH AREA WHEN MAKING A MANUAL LOW/HIGH ENTRY
    /// </summary>
    /// <param name="sender">Sender.</param>
    /// <param name="e">E.</param>
    void handleManualLHPopup(object sender, EventArgs e){
      if (mentryView.mtextValue.Text.Contains(".")) {
        var p1 = mentryView.mtextValue.Text.Split('.');
        var check = p1[1];
        if (check.Length.Equals(0)) {
          mentryView.textValidation.Text = "**Please enter a number after the decimal for this sensor's measurement**";
          mentryView.textValidation.Hidden = false;
          return;
        }
      }
      if (mentryView.mtextValue.Text.Length <= 0) {
        Console.WriteLine("User didn't enter anything");
        mentryView.textValidation.Text = "**Please enter a value for this sensor's measurement**";
        mentryView.textValidation.Hidden = false;
        return;
      } 
      if (start.pressedView.AccessibilityIdentifier == "low") {
        for (int i = 0; i < 4; i++) {
          if (!analyzerSensors.viewList[i].availableView.Hidden) {
            var foundSensor = analyzerSensors.viewList[i];
            analyzerSensors.viewList[i].addIcon.Hidden = true;
            analyzerSensors.viewList[i].availableView.Hidden = true;
            analyzerSensors.viewList[i].snapArea.BackgroundColor = UIColor.White;
            analyzerSensors.viewList[i].snapArea.AddGestureRecognizer (analyzerSensors.viewList [i].panGesture);
            analyzerSensors.viewList[i].topLabel.Text = " " + mentryView.dtypeButton.AccessibilityIdentifier + ": " + mentryView.dtypeButton.AccessibilityIdentifier [0] + mentryView.dtypeButton.AccessibilityIdentifier [1] + mentryView.dtypeButton.AccessibilityIdentifier [2] + mentryView.dtypeButton.AccessibilityIdentifier [3];
            analyzerSensors.viewList[i].topLabel.Hidden = false;
            analyzerSensors.viewList[i].topLabel.BackgroundColor = UIColor.Blue;
            analyzerSensors.viewList[i].topLabel.TextColor = UIColor.White;
            analyzerSensors.viewList[i].tLabelBottom.BackgroundColor = UIColor.Blue;
            analyzerSensors.viewList[i].tLabelBottom.Hidden = false;
            analyzerSensors.viewList[i].middleLabel.Text = mentryView.mtextValue.Text;
            analyzerSensors.viewList[i].middleLabel.Hidden = false;
            analyzerSensors.viewList[i].bottomLabel.Text = mentryView.mbuttonText.Text;
            analyzerSensors.viewList[i].bottomLabel.Hidden = false;
            analyzerSensors.viewList[i].sactionView.connectionColor.Hidden = true;
            analyzerSensors.viewList[i].isManual = true;

            analyzerSensors.viewList[i].lowArea.LabelTop.Text = analyzerSensors.viewList[i].topLabel.Text;
            analyzerSensors.viewList[i].lowArea.LabelMiddle.Text = mentryView.mtextValue.Text + ".00";
            analyzerSensors.viewList[i].lowArea.LabelBottom.Text = mentryView.mbuttonText.Text;
            analyzerSensors.viewList[i].lowArea.LabelSubview.Text = analyzerSensors.viewList[i].topLabel.Text + "'s Subviews";
            analyzerSensors.viewList[i].lowArea.connectionColor.Hidden = true;          
            analyzerSensors.viewList[i].lowArea.Connection.Hidden = true;
            analyzerSensors.viewList[i].lowArea.DeviceImage.Image = UIImage.FromBundle("ic_edit");

            analyzerSensors.viewList[i].highArea.LabelTop.Text = analyzerSensors.viewList[i].topLabel.Text;
            analyzerSensors.viewList[i].highArea.LabelMiddle.Text = mentryView.mtextValue.Text;
            analyzerSensors.viewList[i].highArea.LabelBottom.Text = mentryView.mbuttonText.Text;
            analyzerSensors.viewList[i].highArea.LabelSubview.Text = analyzerSensors.viewList[i].topLabel.Text + "'s Subviews";
            analyzerSensors.viewList[i].highArea.connectionColor.Hidden = true;          
            analyzerSensors.viewList[i].highArea.Connection.Hidden = true;
            analyzerSensors.viewList[i].highArea.DeviceImage.Image = UIImage.FromBundle("ic_edit");

            lowHighSensors.lowArea.snapArea.AccessibilityIdentifier = analyzerSensors.viewList[i].snapArea.AccessibilityIdentifier;
            View.BringSubviewToFront(analyzerSensors.viewList[i].lowArea.snapArea);
            analyzerSensors.viewList[i].lowArea.snapArea.Hidden = false;
            analyzerSensors.viewList[i].highArea.snapArea.Hidden = true;

            analyzerSensors.viewList[i].lowArea.isManual = true;
            analyzerSensors.viewList[i].highArea.isManual = true;

            if(mentryView.dtypeButton.AccessibilityIdentifier.Equals("Pressure")){
              analyzerSensors.viewList[i].lowArea.manifold = new Manifold(new Sensor(ESensorType.Pressure));
              analyzerSensors.viewList[i].highArea.manifold = new Manifold(new Sensor(ESensorType.Pressure));
              analyzerSensors.viewList[i].manualSensor = new ManualDeviceSensor(ESensorType.Pressure);
              analyzerSensors.viewList[i].lowArea.manualGType = "Pressure";
              analyzerSensors.viewList[i].highArea.manualGType = "Pressure";
            } else if (mentryView.dtypeButton.AccessibilityIdentifier.Equals("Temperature")) {
              analyzerSensors.viewList[i].lowArea.manifold = new Manifold(new Sensor(ESensorType.Temperature));
              analyzerSensors.viewList[i].highArea.manifold = new Manifold(new Sensor(ESensorType.Temperature));
              analyzerSensors.viewList[i].manualSensor = new ManualDeviceSensor(ESensorType.Temperature);
              analyzerSensors.viewList[i].lowArea.manualGType = "Temperature";
              analyzerSensors.viewList[i].highArea.manualGType = "Temperature";
            } else {
              analyzerSensors.viewList[i].lowArea.manifold = new Manifold(new Sensor(ESensorType.Vacuum));
              analyzerSensors.viewList[i].highArea.manifold = new Manifold(new Sensor(ESensorType.Vacuum));
              analyzerSensors.viewList[i].manualSensor = new ManualDeviceSensor(ESensorType.Vacuum);
              analyzerSensors.viewList[i].lowArea.manualGType = "Vacuum";
              analyzerSensors.viewList[i].highArea.manualGType = "Vacuum";
            }
            analyzerSensors.viewList[i].manualSensor.unit = AnalyserUtilities.getManualUnit(analyzerSensors.viewList[i].manualSensor.type,mentryView.mbuttonText.Text.ToLower());
            analyzerSensors.viewList[i].lowArea.manifold.primarySensor.unit = AnalyserUtilities.getManualUnit(analyzerSensors.viewList[i].manualSensor.type,mentryView.mbuttonText.Text.ToLower());
            analyzerSensors.viewList[i].highArea.manifold.primarySensor.unit = AnalyserUtilities.getManualUnit(analyzerSensors.viewList[i].manualSensor.type,mentryView.mbuttonText.Text.ToLower());
            analyzerSensors.viewList[i].manualSensor.measurement = new Scalar(analyzerSensors.viewList[i].lowArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));

            if(analyzerSensors.viewList[i].manualSensor.type == ESensorType.Pressure || analyzerSensors.viewList[i].manualSensor.type == ESensorType.Temperature){
              Console.WriteLine(analyzerSensors.viewList[i].manualSensor.type.ToString() + " sensor given so making ptChart");
              analyzerSensors.viewList[i].lowArea.manifold.ptChart = PTChart.New(analyzerSensors.viewList[i].lowArea.ion, Fluid.EState.Dew);
              analyzerSensors.viewList[i].lowArea.manifold.primarySensor.measurement = new Scalar(analyzerSensors.viewList[i].lowArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));

              analyzerSensors.viewList[i].highArea.manifold.ptChart = PTChart.New(analyzerSensors.viewList[i].highArea.ion, Fluid.EState.Dew);
              analyzerSensors.viewList[i].highArea.manifold.primarySensor.measurement = new Scalar(analyzerSensors.viewList[i].highArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));

            } else {
              Console.WriteLine(analyzerSensors.viewList[i].manualSensor.type.ToString() + " sensor given so hiding the buttons that allow pt/scsh changes");
              analyzerSensors.viewList[i].highArea.changeFluid.Hidden = true;
              analyzerSensors.viewList[i].highArea.changePTFluid.Hidden = true;
              analyzerSensors.viewList[i].lowArea.changeFluid.Hidden = true;
              analyzerSensors.viewList[i].lowArea.changePTFluid.Hidden = true;
            }

            break;
          }
        }
      } else if (start.pressedView.AccessibilityIdentifier == "high") {
        for (int i = 4; i < 8; i++) {
          if (!analyzerSensors.viewList [i].availableView.Hidden) {
            var foundSensor = analyzerSensors.viewList[i];
            analyzerSensors.viewList[i].addIcon.Hidden = true;
            analyzerSensors.viewList[i].availableView.Hidden = true;
            analyzerSensors.viewList[i].snapArea.BackgroundColor = UIColor.White;
            analyzerSensors.viewList[i].snapArea.AddGestureRecognizer (analyzerSensors.viewList [i].panGesture);
            analyzerSensors.viewList[i].topLabel.Text = " " + mentryView.dtypeButton.AccessibilityIdentifier + ": " + mentryView.dtypeButton.AccessibilityIdentifier [0] + mentryView.dtypeButton.AccessibilityIdentifier [1] + mentryView.dtypeButton.AccessibilityIdentifier [2] + mentryView.dtypeButton.AccessibilityIdentifier [3];
            analyzerSensors.viewList[i].topLabel.Hidden = false;
            analyzerSensors.viewList[i].topLabel.BackgroundColor = UIColor.Red;
            analyzerSensors.viewList[i].topLabel.TextColor = UIColor.White;
            analyzerSensors.viewList[i].tLabelBottom.BackgroundColor = UIColor.Red;
            analyzerSensors.viewList[i].tLabelBottom.Hidden = false;
            analyzerSensors.viewList[i].middleLabel.Text = mentryView.mtextValue.Text + ".00";
            analyzerSensors.viewList[i].middleLabel.Hidden = false;
            analyzerSensors.viewList[i].bottomLabel.Text = mentryView.mbuttonText.Text;
            analyzerSensors.viewList[i].bottomLabel.Hidden = false;
            analyzerSensors.viewList[i].sactionView.connectionColor.Hidden = true;
            analyzerSensors.viewList[i].isManual = true;

            analyzerSensors.viewList[i].lowArea.LabelTop.Text = analyzerSensors.viewList[i].topLabel.Text;
            analyzerSensors.viewList[i].lowArea.LabelMiddle.Text = mentryView.mtextValue.Text + ".00";
            analyzerSensors.viewList[i].lowArea.LabelBottom.Text = mentryView.mbuttonText.Text;
            analyzerSensors.viewList[i].lowArea.LabelSubview.Text = analyzerSensors.viewList[i].topLabel.Text + "'s Subviews";
            analyzerSensors.viewList[i].lowArea.connectionColor.Hidden = true;          
            analyzerSensors.viewList[i].lowArea.Connection.Hidden = true;
            analyzerSensors.viewList[i].lowArea.DeviceImage.Image = UIImage.FromBundle("ic_edit");

            analyzerSensors.viewList[i].highArea.LabelTop.Text = analyzerSensors.viewList[i].topLabel.Text;
            analyzerSensors.viewList[i].highArea.LabelMiddle.Text = mentryView.mtextValue.Text + ".00";
            analyzerSensors.viewList[i].highArea.LabelBottom.Text = mentryView.mbuttonText.Text;
            analyzerSensors.viewList[i].highArea.LabelSubview.Text = analyzerSensors.viewList[i].topLabel.Text + "'s Subviews";
            analyzerSensors.viewList[i].highArea.connectionColor.Hidden = true;          
            analyzerSensors.viewList[i].highArea.Connection.Hidden = true;
            analyzerSensors.viewList[i].highArea.DeviceImage.Image = UIImage.FromBundle("ic_edit");

            lowHighSensors.highArea.snapArea.AccessibilityIdentifier = analyzerSensors.viewList[i].snapArea.AccessibilityIdentifier;
            View.BringSubviewToFront(analyzerSensors.viewList[i].highArea.snapArea);
            analyzerSensors.viewList[i].lowArea.snapArea.Hidden = true;
            analyzerSensors.viewList[i].highArea.snapArea.Hidden = false;

            analyzerSensors.viewList[i].lowArea.isManual = true;
            analyzerSensors.viewList[i].highArea.isManual = true;

            if(mentryView.dtypeButton.AccessibilityIdentifier.Equals("Pressure")){
              analyzerSensors.viewList[i].lowArea.manifold = new Manifold(new Sensor(ESensorType.Pressure));
              analyzerSensors.viewList[i].highArea.manifold = new Manifold(new Sensor(ESensorType.Pressure));
              analyzerSensors.viewList[i].manualSensor = new ManualDeviceSensor(ESensorType.Pressure);
              analyzerSensors.viewList[i].lowArea.manualGType = "Pressure";
              analyzerSensors.viewList[i].highArea.manualGType = "Pressure";
            } else if (mentryView.dtypeButton.AccessibilityIdentifier.Equals("Temperature")) {
              analyzerSensors.viewList[i].lowArea.manifold = new Manifold(new Sensor(ESensorType.Temperature));
              analyzerSensors.viewList[i].highArea.manifold = new Manifold(new Sensor(ESensorType.Temperature));
              analyzerSensors.viewList[i].manualSensor = new ManualDeviceSensor(ESensorType.Temperature);
              analyzerSensors.viewList[i].lowArea.manualGType = "Temperature";
              analyzerSensors.viewList[i].highArea.manualGType = "Temperature";
            } else {
              analyzerSensors.viewList[i].lowArea.manifold = new Manifold(new Sensor(ESensorType.Vacuum));
              analyzerSensors.viewList[i].highArea.manifold = new Manifold(new Sensor(ESensorType.Vacuum));
              analyzerSensors.viewList[i].manualSensor = new ManualDeviceSensor(ESensorType.Vacuum);
              analyzerSensors.viewList[i].lowArea.manualGType = "Vacuum";
              analyzerSensors.viewList[i].highArea.manualGType = "Vacuum";
            }
            analyzerSensors.viewList[i].manualSensor.unit = AnalyserUtilities.getManualUnit(analyzerSensors.viewList[i].manualSensor.type,mentryView.mbuttonText.Text.ToLower());
            analyzerSensors.viewList[i].lowArea.manifold.primarySensor.unit = AnalyserUtilities.getManualUnit(analyzerSensors.viewList[i].manualSensor.type,mentryView.mbuttonText.Text.ToLower());
            analyzerSensors.viewList[i].highArea.manifold.primarySensor.unit = AnalyserUtilities.getManualUnit(analyzerSensors.viewList[i].manualSensor.type,mentryView.mbuttonText.Text.ToLower());

            analyzerSensors.viewList[i].manualSensor.measurement = new Scalar(analyzerSensors.viewList[i].lowArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));
            if(analyzerSensors.viewList[i].manualSensor.type == ESensorType.Pressure || analyzerSensors.viewList[i].manualSensor.type == ESensorType.Temperature){
              Console.WriteLine(analyzerSensors.viewList[i].manualSensor.type.ToString() + " sensor given so making ptChart");
              analyzerSensors.viewList[i].lowArea.manifold.ptChart = PTChart.New(analyzerSensors.viewList[i].lowArea.ion, Fluid.EState.Dew);
              analyzerSensors.viewList[i].lowArea.manifold.primarySensor.measurement = new Scalar(analyzerSensors.viewList[i].lowArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));

              analyzerSensors.viewList[i].highArea.manifold.ptChart = PTChart.New(analyzerSensors.viewList[i].highArea.ion, Fluid.EState.Dew);
              analyzerSensors.viewList[i].highArea.manifold.primarySensor.measurement = new Scalar(analyzerSensors.viewList[i].highArea.manifold.primarySensor.unit,Convert.ToDouble(mentryView.mtextValue.Text));

            } else {
              Console.WriteLine(analyzerSensors.viewList[i].manualSensor.type.ToString() + " sensor given so hiding the buttons that allow pt/scsh changes");
              analyzerSensors.viewList[i].highArea.changeFluid.Hidden = true;
              analyzerSensors.viewList[i].highArea.changePTFluid.Hidden = true;
              analyzerSensors.viewList[i].lowArea.changeFluid.Hidden = true;
              analyzerSensors.viewList[i].lowArea.changePTFluid.Hidden = true;
            }

            break;
          }
        }
      }

      if (start.pressedView.AccessibilityIdentifier == "low") {
      
      } else if (start.pressedView.AccessibilityIdentifier == "high") {
      
      }
      mentryView.mdoneButton.TouchUpInside -= handleManualLHPopup;
      mentryView.dtypeButton.SetTitle ("Pressure", UIControlState.Normal);
      mentryView.dtypeButton.AccessibilityIdentifier = "Pressure";
      manualPicker.PlainPickerItems = start.temperatures;
      mentryView.mtextValue.Text = "";
      mentryView.mbuttonText.Text = start.pressures[0];
      start = null;
      mentryView.mView.Hidden = true;
      mentryView.mtextValue.ResignFirstResponder();
    }

    /// <summary>
    /// CREATE GESTURE RECOGNIZERS FOR DRAG/DROP AND LONG PRESS
    /// </summary>
    void AddSensorGestures(sensorGroup sensorGroup, sensor Sensor, UIDynamicAnimator animator, UISnapBehavior snap){
      ////CREATE OFFSETS TO FOLLOW EACH SUBVIEW AS IT MOVES

      nfloat dx = 0;
      nfloat dy = 0;

      Sensor.panGesture = new UIPanGestureRecognizer (() => {
        if (Sensor.panGesture.State == UIGestureRecognizerState.Began) {

        }
        if ((Sensor.panGesture.State == UIGestureRecognizerState.Began || Sensor.panGesture.State == UIGestureRecognizerState.Changed) && (Sensor.panGesture.NumberOfTouches == 1)) {

          // remove any previosuly applied snap behavior to avoid a flicker that will occur if both the gesture and physics are operating on the view simultaneously
          if (snap != null)
            animator.RemoveBehavior (snap);

          var p0 = Sensor.panGesture.LocationInView (View);

          if (dx == 0) {
            dx = p0.X - Sensor.snapArea.Center.X;
          }

          if (dy == 0) {
            dy = p0.Y - Sensor.snapArea.Center.Y;
          }

          // this is where the offsets are applied so that the location of the image follows the point where the image is touched as it is dragged,
          // otherwise the center of the image would snap to the touch point at the start of the pan gesture

          var p1 = new CGPoint (p0.X - dx, p0.Y - dy);

          Sensor.snapArea.Center = p1;


        } else if (Sensor.panGesture.State == UIGestureRecognizerState.Ended) {

          // reset offsets when dragging ends so that they will be recalculated for next touch and drag that occurs
          dx = 0;
          dy = 0;

          /// CHECK IF SENSOR WAS DROPPED IN LOW OR HIGH SECTION

          AnalyserUtilities.updateLowHighArea(Sensor.panGesture.LocationInView(View), Sensor, lowHighSensors, sensorGroup, View);

          ////FIGURE OUT WHERE TO SNAP THE SUBVIEW BASED ON IT'S LOCATION AND IDENTIFIER
          AnalyserUtilities.sensorSwap (sensorGroup, Convert.ToInt32(Sensor.snapArea.AccessibilityIdentifier), Sensor.panGesture.LocationInView (View), View);
        } else if (Sensor.panGesture.State == UIGestureRecognizerState.Failed) {
          Console.WriteLine ("Touch has failed to be recognized for "+Sensor.snapArea.AccessibilityIdentifier+" area");
        }
      });

      Sensor.holdGesture = new UILongPressGestureRecognizer (() => {
        if (Sensor.holdGesture.State == UIGestureRecognizerState.Began) {

        }
      });

      Sensor.shortPressGesture = new UITapGestureRecognizer (() => {
        if(Sensor.shortPressGesture.State == UIGestureRecognizerState.Ended){
          ShowPopup(Sensor, 1);
        }
      });     

      Sensor.snapArea.AddGestureRecognizer (Sensor.shortPressGesture);
    }
    /// <summary>
    /// Adds the low high gestures.
    /// </summary>
    /// <param name="analyzerSensors">Analyzer sensors.</param>
    void AddLowHighGestures(){

      lowHighSensors.lowArea.shortPress = new UITapGestureRecognizer (() => {
        if(lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "1"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea1,"Low Viewer Not Defined");}
        else if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "2"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea2,"Low Viewer Not Defined");}
        else if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "3"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea3,"Low Viewer Not Defined");}
        else if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "4"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea4,"Low Viewer Not Defined");}
        else if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "5"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea5,"Low Viewer Not Defined");}
        else if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "6"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea6,"Low Viewer Not Defined");}
        else if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "7"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea7,"Low Viewer Not Defined");}
        else if (lowHighSensors.lowArea.snapArea.AccessibilityIdentifier == "8"){ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea,analyzerSensors.snapArea8,"Low Viewer Not Defined");}
        else {ShowPopup(lowHighSensors.lowArea.subviewTable, lowHighSensors.lowArea.snapArea, lowHighSensors.lowArea, analyzerSensors.snapArea8,"Low Viewer Not Defined");}
      });

      lowHighSensors.highArea.shortPress = new UITapGestureRecognizer (() => {
        if(lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "1"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea1,"High Viewer Not Defined");}
        else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "2"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea2,"High Viewer Not Defined");}
        else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "3"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea3,"High Viewer Not Defined");}
        else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "4"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea4,"High Viewer Not Defined");}
        else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "5"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea5,"High Viewer Not Defined");}
        else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "6"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea6,"High Viewer Not Defined");}
        else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "7"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea7,"High Viewer Not Defined");}
        else if (lowHighSensors.highArea.snapArea.AccessibilityIdentifier == "8"){ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea8,"High Viewer Not Defined");}
        else {ShowPopup(lowHighSensors.highArea.subviewTable, lowHighSensors.highArea.snapArea, lowHighSensors.highArea, analyzerSensors.snapArea1,"High Viewer Not Defined");}
      });

      lowHighSensors.lowArea.snapArea.AddGestureRecognizer (lowHighSensors.lowArea.shortPress);
      lowHighSensors.highArea.snapArea.AddGestureRecognizer (lowHighSensors.highArea.shortPress);
    }  

    /// <summary>
    /// creates the unit picker object for choosing the measurement type
    /// </summary>
    void createPickers (){
      manualPicker = new AlliancePicker (this);
      manualPicker.PlainPickerItems = start.pressures;
      manualPicker.SourceField = mentryView.mbuttonText;
      manualPicker.Type = PickerType.List;
      manualPicker.HeaderTitle = "Unit Picker";
    }
    /// <summary>
    /// Shows the popup to rename a sensor
    /// </summary>
    void renamePopup(){
      UIAlertController textAlert = UIAlertController.Create ("Enter Name", sensorActions.topLabel.Text, UIAlertControllerStyle.Alert);
      textAlert.AddTextField(textField => {});
      textAlert.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, UIAlertAction => {}));
      textAlert.AddAction (UIAlertAction.Create ("OK - Save", UIAlertActionStyle.Default, UIAlertAction => {
        sensorActions.topLabel.Text = " " + textAlert.TextFields[0].Text;
        sensorActions.pressedSensor.sactionView.pdeviceName.Text = textAlert.TextFields[0].Text;
        sensorActions.pressedSensor.lowArea.LabelTop.Text = textAlert.TextFields[0].Text;
        sensorActions.pressedSensor.highArea.LabelTop.Text = textAlert.TextFields[0].Text;
      }));
      this.View.Window.RootViewController.PresentViewController(textAlert, true, null);
    }

    /// <summary>
    /// Called to inflate the device manager viewcontroller and allow BT connections for single sensors
    /// </summary>
    private void OnRequestViewer(sensor area) {
      bool existingConnection = false;
      var sb = InflateViewController<DeviceManagerViewController>(VC_DEVICE_MANAGER);
      sb.onSensorReturnDelegate = (GaugeDeviceSensor sensor) => {
        foreach(sensor item in analyzerSensors.viewList){
          if(item.currentSensor != null && item.currentSensor.device.serialNumber == sensor.device.serialNumber){
            existingConnection = true;
            Console.WriteLine("Totes found an existing sensor associated");
            break;
          } 
        }

        if(!existingConnection){
          area.currentSensor = sensor;
          area.sactionView.currentSensor = sensor;
          area.lowArea.currentSensor = sensor;
          area.highArea.currentSensor = sensor;
          area.deviceImage.Image = UIImage.FromBundle("ic_render_gauge_" + area.currentSensor.device.serialNumber.deviceModel.ToString().ToLower());
          area.connectionImage.Image = UIImage.FromBundle("ic_bluetooth_connected");
          area.snapArea.BackgroundColor = UIColor.White;
          area.availableView.Hidden = true;
          area.snapArea.AddGestureRecognizer(area.panGesture);
          area.topLabel.Text = " " + sensor.device.name;
          area.topLabel.Hidden = false;
          area.middleLabel.Text = sensor.measurement.amount.ToString() + " ";
          area.middleLabel.Hidden = false;
          area.bottomLabel.Text = sensor.measurement.unit.ToString();
          area.bottomLabel.Hidden = false;
          area.addIcon.Hidden = true;

          area.lowArea.manifold = new Manifold(sensor);
          area.highArea.manifold = new Manifold(sensor);

          if(sensor.type == ESensorType.Pressure || sensor.type == ESensorType.Temperature){
            Console.WriteLine(sensor.type.ToString() + " sensor given so making ptChart");
            area.lowArea.manifold.ptChart = PTChart.New(area.lowArea.ion, Fluid.EState.Dew);
            area.highArea.manifold.ptChart = PTChart.New(area.highArea.ion, Fluid.EState.Dew);
          }else{
            Console.WriteLine(sensor.type.ToString() + " sensor given so hiding the buttons allowing pt/scsh changes");
            area.lowArea.changeFluid.Hidden = true;
            area.lowArea.changePTFluid.Hidden = true;
            area.highArea.changeFluid.Hidden = true;
            area.highArea.changePTFluid.Hidden = true;
          }

          area.highArea.LabelTop.Text = " " + sensor.device.name;
          area.lowArea.LabelTop.Text = " " + sensor.device.name;
          area.lowArea.LabelMiddle.Text = sensor.measurement.amount.ToString();
          area.lowArea.LabelBottom.Text = sensor.measurement.unit.ToString() + "   ";
          area.lowArea.LabelSubview.Text = sensor.device.name + "'s Subviews";
          area.lowArea.DeviceImage.Image = area.deviceImage.Image;

          area.highArea.LabelTop.Text = " " + sensor.device.name;
          area.highArea.LabelMiddle.Text = sensor.measurement.amount.ToString();
          area.highArea.LabelBottom.Text = sensor.measurement.unit.ToString() + "   ";
          area.highArea.LabelSubview.Text = sensor.device.name + "'s Subviews";
          area.highArea.DeviceImage.Image = area.deviceImage.Image;
        }
      };
      NavigationController.PushViewController(sb, true);
    }
    /// <summary>
    /// Called to inflate the device manager viewcontroller and allow BT connections for single sensors
    /// </summary>
    private void lhOnRequestViewer(lowHighSensor area) {
      bool existingConnection = false;
      int start, stop;
      var sb = InflateViewController<DeviceManagerViewController>(VC_DEVICE_MANAGER);
      sb.onSensorReturnDelegate = (GaugeDeviceSensor sensor) => {
        
        if(area.snapArea.AccessibilityIdentifier == "low"){
          start = 0;
          stop = 4;
        } else {
          start = 4;
          stop = 8;
        }

        for(int i = start; i < stop; i ++){
          if(analyzerSensors.viewList[i].currentSensor != null && analyzerSensors.viewList[i].currentSensor.device.serialNumber == sensor.device.serialNumber){
            if(start == 0){
              analyzerSensors.viewList[i].topLabel.BackgroundColor = UIColor.Blue;
              analyzerSensors.viewList[i].tLabelBottom.BackgroundColor = UIColor.Blue;
              analyzerSensors.viewList[i].tLabelBottom.Hidden = false;
              analyzerSensors.viewList[i].snapArea.BringSubviewToFront(analyzerSensors.viewList[i].lowArea.snapArea);
              analyzerSensors.viewList[i].lowArea.snapArea.Hidden = false;
              analyzerSensors.viewList[i].highArea.snapArea.Hidden = true;
              lowHighSensors.lowArea.snapArea.AccessibilityIdentifier = analyzerSensors.viewList[i].snapArea.AccessibilityIdentifier;
            } else {
              analyzerSensors.viewList[i].topLabel.BackgroundColor = UIColor.Red;
              analyzerSensors.viewList[i].tLabelBottom.BackgroundColor = UIColor.Red;
              analyzerSensors.viewList[i].tLabelBottom.Hidden = false;
              analyzerSensors.viewList[i].snapArea.BringSubviewToFront(analyzerSensors.viewList[i].highArea.snapArea);
              analyzerSensors.viewList[i].highArea.snapArea.Hidden = false;
              analyzerSensors.viewList[i].lowArea.snapArea.Hidden = true;
              lowHighSensors.highArea.snapArea.AccessibilityIdentifier = analyzerSensors.viewList[i].snapArea.AccessibilityIdentifier;
            }
            existingConnection = true;
            break;
          }
        }

        if(!existingConnection){
          for(int i = start; i < stop; i ++){
            if(!analyzerSensors.viewList[i].availableView.Hidden){
              analyzerSensors.viewList[i].currentSensor = sensor;
              analyzerSensors.viewList[i].sactionView.currentSensor = sensor;
              analyzerSensors.viewList[i].lowArea.currentSensor = sensor;
              analyzerSensors.viewList[i].highArea.currentSensor = sensor;

              analyzerSensors.viewList[i].lowArea.manifold = new Manifold(sensor as Sensor);
              analyzerSensors.viewList[i].highArea.manifold = new Manifold(sensor as Sensor);

              if(sensor.type == ESensorType.Pressure || sensor.type == ESensorType.Temperature){
                Console.WriteLine(sensor.type.ToString() + " sensor given so making ptChart");
                analyzerSensors.viewList[i].lowArea.manifold.ptChart = PTChart.New(analyzerSensors.viewList[i].lowArea.ion, Fluid.EState.Dew);
                analyzerSensors.viewList[i].highArea.manifold.ptChart = PTChart.New(analyzerSensors.viewList[i].highArea.ion, Fluid.EState.Dew);
              } else {
                Console.WriteLine(sensor.type.ToString() + " sensor given so hiding the buttons that allow pt/scsh changes");
                analyzerSensors.viewList[i].highArea.changeFluid.Hidden = true;
                analyzerSensors.viewList[i].highArea.changePTFluid.Hidden = true;
                analyzerSensors.viewList[i].lowArea.changeFluid.Hidden = true;
                analyzerSensors.viewList[i].lowArea.changePTFluid.Hidden = true;
              }


              analyzerSensors.viewList[i].snapArea.BackgroundColor = UIColor.White;
              analyzerSensors.viewList[i].availableView.Hidden = true;
              analyzerSensors.viewList[i].addIcon.Hidden = true;
              analyzerSensors.viewList[i].topLabel.Text =" " + sensor.device.name;
              analyzerSensors.viewList[i].topLabel.TextColor = UIColor.White;
              analyzerSensors.viewList[i].topLabel.Hidden = false;
              analyzerSensors.viewList[i].tLabelBottom.Hidden = false;
              analyzerSensors.viewList[i].middleLabel.Text = sensor.measurement.amount.ToString();
              analyzerSensors.viewList[i].middleLabel.Hidden = false;
              analyzerSensors.viewList[i].bottomLabel.Text = sensor.measurement.unit.ToString();
              analyzerSensors.viewList[i].bottomLabel.Hidden = false;
              analyzerSensors.viewList[i].deviceImage.Image = UIImage.FromBundle("ic_render_gauge_"+sensor.device.serialNumber.deviceModel.ToString().ToLower());
              analyzerSensors.viewList[i].connectionImage.Image = UIImage.FromBundle("ic_bluetooth_connected");
              analyzerSensors.viewList[i].connectionImage.BackgroundColor = UIColor.Clear;
              analyzerSensors.viewList[i].snapArea.AddGestureRecognizer(analyzerSensors.viewList[i].panGesture);
              analyzerSensors.viewList[i].lowArea.snapArea.AccessibilityIdentifier = analyzerSensors.viewList[i].snapArea.AccessibilityIdentifier;
              analyzerSensors.viewList[i].lowArea.LabelTop.Text = " " + analyzerSensors.viewList[i].topLabel.Text;
              analyzerSensors.viewList[i].lowArea.LabelMiddle.Font = UIFont.FromName("Helvetica-Bold", 42f);
              analyzerSensors.viewList[i].lowArea.LabelMiddle.Text = sensor.measurement.amount.ToString();
              analyzerSensors.viewList[i].lowArea.LabelBottom.Text = sensor.measurement.unit.ToString() + " ";
              analyzerSensors.viewList[i].lowArea.LabelMiddle.TextAlignment = UITextAlignment.Right;
              analyzerSensors.viewList[i].lowArea.LabelSubview.Text = analyzerSensors.viewList[i].topLabel.Text + "'s subviews";
              analyzerSensors.viewList[i].lowArea.DeviceImage.Image = analyzerSensors.viewList[i].deviceImage.Image;
              analyzerSensors.viewList[i].highArea.snapArea.AccessibilityIdentifier = analyzerSensors.viewList[i].snapArea.AccessibilityIdentifier;
              analyzerSensors.viewList[i].highArea.LabelTop.Text = " " + analyzerSensors.viewList[i].topLabel.Text;
              analyzerSensors.viewList[i].highArea.LabelMiddle.Font = UIFont.FromName("Helvetica-Bold", 42f);
              analyzerSensors.viewList[i].highArea.LabelMiddle.Text = sensor.measurement.amount.ToString();
              analyzerSensors.viewList[i].highArea.LabelBottom.Text = sensor.measurement.unit.ToString() + " ";
              analyzerSensors.viewList[i].highArea.LabelMiddle.TextAlignment = UITextAlignment.Right;
              analyzerSensors.viewList[i].highArea.LabelSubview.Text = analyzerSensors.viewList[i].topLabel.Text + "'s subviews";
              analyzerSensors.viewList[i].highArea.DeviceImage.Image = analyzerSensors.viewList[i].deviceImage.Image;
              area.snapArea.AccessibilityIdentifier = analyzerSensors.viewList[i].snapArea.AccessibilityIdentifier;
              if(start == 0){
                analyzerSensors.viewList[i].topLabel.BackgroundColor = UIColor.Blue;
                analyzerSensors.viewList[i].tLabelBottom.BackgroundColor = UIColor.Blue;
                analyzerSensors.viewList[i].lowArea.DeviceImage.Hidden = false;           
                analyzerSensors.viewList[i].lowArea.Connection.Hidden = false;
                analyzerSensors.viewList[i].lowArea.headingDivider.Hidden = false;
                analyzerSensors.viewList[i].lowArea.subviewHide.Hidden = false;
                View.BringSubviewToFront(analyzerSensors.viewList[i].lowArea.snapArea);
                analyzerSensors.viewList[i].lowArea.snapArea.Hidden = false;
              } else {
                analyzerSensors.viewList[i].topLabel.BackgroundColor = UIColor.Red;
                analyzerSensors.viewList[i].tLabelBottom.BackgroundColor = UIColor.Red;
                analyzerSensors.viewList[i].highArea.DeviceImage.Hidden = false;           
                analyzerSensors.viewList[i].highArea.Connection.Hidden = false;
                analyzerSensors.viewList[i].highArea.headingDivider.Hidden = false;
                analyzerSensors.viewList[i].highArea.subviewHide.Hidden = false;
                View.BringSubviewToFront(analyzerSensors.viewList[i].highArea.snapArea);
                analyzerSensors.viewList[i].highArea.snapArea.Hidden = false;
              }
              if(sensor != null && sensor.device.isConnected.Equals(true)){
                analyzerSensors.viewList[i].lowArea.Connection.Image = UIImage.FromBundle("ic_bluetooth_connected");
                analyzerSensors.viewList[i].lowArea.connectionColor.BackgroundColor = UIColor.Green;
                analyzerSensors.viewList[i].sactionView.connectionColor.BackgroundColor = UIColor.Green;
                analyzerSensors.viewList[i].lowArea.connectionColor.Hidden = false;
                analyzerSensors.viewList[i].highArea.Connection.Image = UIImage.FromBundle("ic_bluetooth_connected");
                analyzerSensors.viewList[i].highArea.connectionColor.BackgroundColor = UIColor.Green;
                analyzerSensors.viewList[i].highArea.connectionColor.Hidden = false;
              } else if (sensor != null && !sensor.device.isConnected){
                analyzerSensors.viewList[i].lowArea.Connection.Image = UIImage.FromBundle("ic_bluetooth_disconnected");
                analyzerSensors.viewList[i].lowArea.connectionColor.BackgroundColor = UIColor.Red;
                analyzerSensors.viewList[i].sactionView.connectionColor.BackgroundColor = UIColor.Red;
                analyzerSensors.viewList[i].lowArea.connectionColor.Hidden = false;
                analyzerSensors.viewList[i].highArea.Connection.Image = UIImage.FromBundle("ic_bluetooth_disconnected");
                analyzerSensors.viewList[i].highArea.connectionColor.BackgroundColor = UIColor.Red;
                analyzerSensors.viewList[i].highArea.connectionColor.Hidden = false;
              } else {
                analyzerSensors.viewList[i].sactionView.connectionColor.BackgroundColor = UIColor.Clear;
                analyzerSensors.viewList[i].lowArea.connectionColor.Hidden = true;
                analyzerSensors.viewList[i].highArea.connectionColor.Hidden = true;
              }
              break;
            }
          }

        }
        if(start == 0){
          start = 4;
          stop = 8;
        } else {
          start = 0;
          stop = 4;
        }

        for(int i = start; i < stop; i ++){
          if(analyzerSensors.viewList[i].currentSensor != null && analyzerSensors.viewList[i].currentSensor.device.serialNumber == sensor.device.serialNumber){
            analyzerSensors.viewList[i].topLabel.Hidden = true;
            analyzerSensors.viewList[i].tLabelBottom.Hidden = true;
            analyzerSensors.viewList[i].middleLabel.Hidden = true;
            analyzerSensors.viewList[i].bottomLabel.Hidden = true;
            analyzerSensors.viewList[i].snapArea.BackgroundColor = UIColor.Clear;
            analyzerSensors.viewList[i].addIcon.Hidden = false;
            analyzerSensors.viewList[i].availableView.Hidden = false;
            analyzerSensors.viewList[i].currentSensor = null;
            analyzerSensors.viewList[i].sactionView.currentSensor = null;
            analyzerSensors.viewList[i].lowArea.currentSensor = null;
            analyzerSensors.viewList[i].highArea.currentSensor = null;
            analyzerSensors.viewList[i].lowArea.snapArea.Hidden = true;
            analyzerSensors.viewList[i].highArea.snapArea.Hidden = true;
          }
        }

      };
      NavigationController.PushViewController(sb, true);
    }

    private void alarmRequestViewer(actionPopup area) {
      var alarm = InflateViewController<SensorAlarmViewController>(VC_SENSOR_ALARMS);
      alarm.sensor = area.pressedSensor.currentSensor as Sensor;
      NavigationController.PushViewController(alarm, true);
    }

    void showFullAlert(){
      UIAlertController fullPopup = UIAlertController.Create ("Cannot Create Sensor", "Not enough space", UIAlertControllerStyle.Alert);

      fullPopup.AddAction (UIAlertAction.Create ("Ok", UIAlertActionStyle.Default, (action) => {}));            

      PresentViewController (fullPopup, true, null);
    }
	}
}
