// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using ION.Core.Fluids;
using ION.Core.Sensors;
using ION.Core.Sensors.Properties;

using ION.IOS.Util;

namespace ION.IOS.ViewController.Workbench {
	public partial class FluidSubviewCell : UITableViewCell {

    private ISensorProperty sensorProperty {
      get {
        return __sensorProperty;
      }
      set {
        if (__sensorProperty != null) {
          __sensorProperty.onSensorPropertyChanged -= OnSensorPropertyChanged;
        }

        __sensorProperty = value;

        if (__sensorProperty != null) {
          __sensorProperty.onSensorPropertyChanged += OnSensorPropertyChanged;
          OnSensorPropertyChanged(value);
        }
      }
    } ISensorProperty __sensorProperty;

    private Fluid fluid { get; set; }

    private EventHandler<Fluid> onFluidClicked { get; set; }

		public FluidSubviewCell (IntPtr handle) : base (handle) {
		}

    public override void AwakeFromNib() {
      base.AwakeFromNib();

      buttonFluid.TouchUpInside += (sender, e) => {
        if (onFluidClicked != null) {
          onFluidClicked(this, fluid);
        }
      };
    }

    public void UpdateTo(PTChartSensorProperty property, EventHandler<Fluid> onFluidClicked) {
      sensorProperty = property;
      this.onFluidClicked = onFluidClicked;
    }

    public void UpdateTo(SuperheatSubcoolSensorProperty property, EventHandler<Fluid> onFluidClicked) {
      sensorProperty = property;
      this.onFluidClicked = onFluidClicked;
    }

    private void OnSensorPropertyChanged(ISensorProperty sensorProperty) {
      if (sensorProperty is SuperheatSubcoolSensorProperty) {
        HandleSuperheatSubcoolSensorPropertyChanged(this.sensorProperty as SuperheatSubcoolSensorProperty);
      } else {
        HandlePTChartSensorPropertyChanged(this.sensorProperty as PTChartSensorProperty);
      }
    }

    private void HandlePTChartSensorPropertyChanged(PTChartSensorProperty sensorProperty) {
      UpdateToFluid(sensorProperty.ptChart.fluid);

      switch (sensorProperty.ptChart.state) {
        case Fluid.EState.Bubble:
          this.viewTitle.Text = Strings.Fluid.PT_CHART_BUB;
          break;
        case Fluid.EState.Dew:
          viewTitle.Text = Strings.Fluid.PT_CHART_DEW;
          break;
        default:
          viewTitle.Text = Strings.UNKNOWN;
          break;
      }

      var chart = sensorProperty.ptChart;
      switch (sensorProperty.sensor.type) {
        case ESensorType.Pressure:
          labelMeasurement.Text = SensorUtils.ToFormattedString(ESensorType.Temperature, chart.GetTemperature(sensorProperty.sensor.measurement), true);
          break;
        case ESensorType.Temperature:
          labelMeasurement.Text = SensorUtils.ToFormattedString(ESensorType.Pressure, chart.GetPressure(sensorProperty.sensor.measurement), true);
          break;
      }
    }

    private void HandleSuperheatSubcoolSensorPropertyChanged(SuperheatSubcoolSensorProperty sensorProperty) {
      UpdateToFluid(sensorProperty.ptChart.fluid);

      switch (sensorProperty.ptChart.state) {
        case Fluid.EState.Bubble:
          buttonFluid.SetTitle(Strings.Fluid.SUPERHEAT_ABRV, UIControlState.Normal);
          break;
        case Fluid.EState.Dew:
          buttonFluid.SetTitle(Strings.Fluid.SUBCOOL_ABRV, UIControlState.Normal);
          break;
        default:
          buttonFluid.SetTitle(Strings.UNKNOWN, UIControlState.Normal);
          break;
      }

      var meas = sensorProperty.modifiedMeasurement;
      labelMeasurement.Text = SensorUtils.ToFormattedString(ESensorType.Temperature, meas, true);
    }

    private void UpdateToFluid(Fluid fluid) {
      this.fluid = fluid;
      buttonFluid.SetTitle(fluid.name, UIControlState.Normal);
      buttonFluid.BackgroundColor = new UIColor(Colors.FromInt((uint)fluid.color));
    }
	}
}
