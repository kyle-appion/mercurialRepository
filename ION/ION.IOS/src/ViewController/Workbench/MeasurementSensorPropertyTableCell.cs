// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using ION.Core.Sensors;
using ION.Core.Sensors.Properties;
using ION.Core.Util;

namespace ION.IOS.ViewController.Workbench {
	public partial class MeasurementSensorPropertyTableCell : UITableViewCell, IReleasable {

    public Action onClick { get; set; }

    private ISensorProperty sensorProperty {
      get {
        return __sensorProperty;
      }
      set {
        if (__sensorProperty != null) {
          __sensorProperty.onSensorPropertyChanged -= OnSensorPropertyChanged;
        }

        __sensorProperty = value;

        if (__sensorProperty != null) {
          __sensorProperty.onSensorPropertyChanged += OnSensorPropertyChanged;
          OnSensorPropertyChanged(value);
        }
      }
    } ISensorProperty __sensorProperty;

    private EventHandler<ISensorProperty> onIconClicked { get; set; }

		public MeasurementSensorPropertyTableCell (IntPtr handle) : base (handle) {
		}

    // Overridden from UITableViewCell
    public override void AwakeFromNib() {
      base.AwakeFromNib();

      buttonIcon.TouchUpInside += (object sender, EventArgs e) => {
        if (onIconClicked != null) {
          onIconClicked(this, sensorProperty);
        }
      };

      button.TouchUpInside += (object sender, EventArgs e) => {
        if (onClick != null) {
          onClick();
        }
      };
    }

    // Overridden from UITableViewCell
    public override void PrepareForReuse() {
      base.PrepareForReuse();

      Release();
    }

    // Overridden from UITableViewCell
    public override void RemoveFromSuperview() {
      base.RemoveFromSuperview();

      Release();
    }

    // Overridden from IReleasable
    public void Release() {
      sensorProperty = null;
    }

    public void UpdateTo(ISensorProperty sensorProperty, string title, string icon, EventHandler<ISensorProperty> iconClicked) {
      this.sensorProperty = sensorProperty;
      onIconClicked = iconClicked;
      labelTitle.Text = title;
      buttonIcon.SetImage(UIImage.FromBundle(icon), UIControlState.Normal);
      buttonIcon.Hidden = viewDivider.Hidden = !sensorProperty.supportedReset;
    }

    private void OnSensorPropertyChanged(ISensorProperty sensorProperty) {
      labelMeasurement.Text = SensorUtils.ToFormattedString(sensorProperty.sensor.type, sensorProperty.modifiedMeasurement, true);
    }
	}
}
