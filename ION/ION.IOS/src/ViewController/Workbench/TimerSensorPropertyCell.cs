// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using ION.Core.Sensors;
using ION.Core.Sensors.Properties;

using ION.IOS.Util;

namespace ION.IOS.ViewController.Workbench {
	public partial class TimerSensorPropertyCell : UITableViewCell {

    private NSTimer uiUpdateTimer { get; set; }

    private TimerSensorProperty timer {
      get {
        return __timer;
      }
      set {
        if (__timer != null) {
          __timer.onSensorPropertyChanged -= OnSensorPropertyChanged;
        }

        __timer = value;

        if (__timer != null) {
          __timer.onSensorPropertyChanged += OnSensorPropertyChanged;
          OnSensorPropertyChanged(__timer);
          uiUpdateTimer = NSTimer.CreateRepeatingTimer(TimeSpan.FromSeconds(1/3.0), (action) => { Update(); });
          NSRunLoop.Current.AddTimer(uiUpdateTimer, NSRunLoopMode.Common);
        } else {
          uiUpdateTimer.Invalidate();
          uiUpdateTimer.Dispose();
          uiUpdateTimer = null;
        }
      }
    } TimerSensorProperty __timer;

		public TimerSensorPropertyCell (IntPtr handle) : base (handle) {
		}

    // Overridden from AwakeFromNib
    public override void AwakeFromNib() {
      base.AwakeFromNib();

      buttonReset.SetImage(UIImage.FromBundle("ic_refresh"), UIControlState.Normal);
      buttonReset.TouchUpInside += (object sender, EventArgs e) => {
        if (timer != null) {
          timer.Reset();
        }
      };

      buttonPlayPause.SetImage(UIImage.FromBundle("ic_play"), UIControlState.Normal);
      buttonPlayPause.TouchUpInside += (object sender, EventArgs e) => {
        if (timer != null) {
          if (timer.isStarted) {
            buttonPlayPause.SetImage(UIImage.FromBundle("ic_play"), UIControlState.Normal);
            timer.Stop();
          } else {
            buttonPlayPause.SetImage(UIImage.FromBundle("ic_pause"), UIControlState.Normal);
            timer.Start();
          }
        }
      };

      labelTitle.Text = Strings.Workbench.Viewer.TIMER;
    }

    public void UpdateTo(TimerSensorProperty timer) {
      this.timer = timer;
    }

    private void OnSensorPropertyChanged(ISensorProperty sensorProperty) {
      Update();
    }

    private void Update() {
      var time = timer.ellapsedTime;
      ION.Core.Util.Log.D(this, "Update: " + time);
      labelMeasurement.Text = String.Format("{0}:{1}", time.Minutes.ToString("00"), time.Seconds.ToString("00"));
    }
	}
}
