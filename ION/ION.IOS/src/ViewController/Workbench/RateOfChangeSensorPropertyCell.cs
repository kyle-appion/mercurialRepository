// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;

using Foundation;
using UIKit;

using ION.Core.Sensors;
using ION.Core.Sensors.Properties;

using ION.IOS.Util;

namespace ION.IOS.ViewController.Workbench {
	public partial class RateOfChangeSensorPropertyCell : UITableViewCell {

    private RateOfChangeSensorProperty roc {
      get {
        return __roc;
      }
      set {
        if (__roc != null) {
          __roc.onSensorPropertyChanged -= OnSensorPropertyChanged;
        }

        __roc = value;

        if (__roc != null) {
          __roc.onSensorPropertyChanged += OnSensorPropertyChanged;
          OnSensorPropertyChanged(__roc);
        }
      }
    } RateOfChangeSensorProperty __roc;

    private bool isUpdating { get; set; }

		public RateOfChangeSensorPropertyCell (IntPtr handle) : base (handle) {
		}

    public void UpdateTo(RateOfChangeSensorProperty sensorProperty) {
      roc = sensorProperty;
      labelTitle.Text = Strings.Workbench.Viewer.ROC;
    }

    private void OnSensorPropertyChanged(ISensorProperty sensorProperty) {
      if (!isUpdating) {
        isUpdating = true;
        DoUpdateCell();
      }
    }

    private async void DoUpdateCell() {
      var meas = roc.modifiedMeasurement;
      ION.Core.Util.Log.D(this, "Meas: " + meas);
      var abs = meas.Abs();
      var range = (roc.sensor.maxMeasurement - roc.sensor.minMeasurement) / 10;

      if (abs > range) {
        labelMeasurement.Text = ">" + SensorUtils.ToFormattedString(roc.sensor.type, range, true);
      } else {
        labelMeasurement.Text = SensorUtils.ToFormattedString(roc.sensor.type, abs, true);
      }

      if (roc.isStable) {
        buttonIcon.Hidden = true;
        labelMeasurement.Text = Strings.Workbench.Viewer.ROC_STABLE;
        isUpdating = false;
      } else {
        buttonIcon.Hidden = false;
        if (meas < 0) {
          buttonIcon.SetImage(UIImage.FromBundle("ic_arrow_trend_down"), UIControlState.Normal);
        } else {
          buttonIcon.SetImage(UIImage.FromBundle("ic_arrow_trend_up"), UIControlState.Normal);
        }

        await Task.Delay(100);
        DoUpdateCell();
      }
    }


	}
}
