<doc>
    <assembly>
        <name>FlexCel</name>
    </assembly>
    <members>
        <member name="T:FlexCel.AddinFunctions.BaseBinHexImpl">
            <summary>
            Base conversion class for implementing Bin2Hex, Dec2Bin, etc.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.BaseBinHexImpl(System.String,System.Boolean,System.Boolean)">
            <param name="aName" />
            <param name="aHasPlaces" />
            <param name="aNeedsStrings" />
            <summary>
            Creates a new object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBinHexImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Calculates the result depending on the specific function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBinHexImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.BaseBondsImpl">
            <summary>
            Implements the basics for Bond functions, like CoupDays, CoupDaysNC, CoupDayBS, CoupNCD, CoupNum, CoupPCD.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.BaseBondsImpl(System.String)">
            <param name="aName" />
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBondsImpl.Calc(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <param name="Basis" />
            <summary>
            Calculates the result depending on the specific function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBondsImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBondsImpl.IsEOM(System.DateTime)">
            <param name="SettlementDate" />
            <summary>
            Returns true if the date is the end of month.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBondsImpl.LastDayOfMonth(System.DateTime)">
            <param name="BondDate" />
            <summary>
            Returns the last day of a month.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBondsImpl.LevelDayOfMonth(System.DateTime,System.DateTime)">
            <param name="BondDate" />
            <param name="MaturityDate" />
            <summary>
            Makes the day in bonddate be as big Maturity date as possible.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBondsImpl.NextCoupon(System.DateTime,System.DateTime,System.Double)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <summary>
            Returns the next coupon after settlement date.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseBondsImpl.PrevCoupon(System.DateTime,System.DateTime,System.Double)">
            <param name="endDate">Date of the coupon we want to find.</param>
            <param name="MaturityDate">Maturity date.</param>
            <param name="Frequency">Frequency</param>
            <summary>
            Returns the previous coupon for a given coupon.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.BaseGCDLCM">
            <summary>
            A base implementation for both GCD and LCM
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.BaseGCDLCM(System.String)">
            <param name="aName" />
            <summary>
            Creates a new instance of the class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.BaseGCDLCM.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.BaseWorkDaysImpl">
            <summary>
            Implements the basis for WorkDays and NetWorkDays Excel functions. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.BaseWorkDaysImpl(System.Boolean,System.String)">
            <param name="aIntl" />
            <param name="aName" />
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.AddinFunctions.BaseWorkDaysImpl.Intl">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Bin2DecImpl">
            <summary>
            Implements the Bin2Dec Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Bin2DecImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Bin2DecImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Bin2HexImpl">
            <summary>
            Implements the Bin2Hex Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Bin2HexImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Bin2HexImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Bin2OctImpl">
            <summary>
            Implements the Bin2Oct Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Bin2OctImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Bin2OctImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.ConvertImpl">
            <summary>
            Implements the Convert Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.ConvertImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.ConvertImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.CoupDaysBSImpl">
            <summary>
            Implements the CoupDaysBS Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.CoupDaysBSImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupDaysBSImpl.Calc(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <param name="Basis" />
            <summary>
            Override this method to specialize BaseBondsImpl
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupDaysBSImpl.CalcCoupDaysBS(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate">See Excel.</param>
            <param name="MaturityDate">See Excel.</param>
            <param name="Frequency">See Excel.</param>
            <param name="Basis">See Excel.</param>
            <summary>
            See Excel docs for description of this function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.CoupDaysImpl">
            <summary>
            Implements the CoupDays Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.CoupDaysImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupDaysImpl.Calc(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <param name="Basis" />
            <summary>
            Override this method to specialize BaseBondsImpl
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupDaysImpl.CalcCoupDays(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate">See Excel.</param>
            <param name="MaturityDate">See Excel.</param>
            <param name="Frequency">See Excel.</param>
            <param name="Basis">See Excel.</param>
            <summary>
            See Excel docs for description of this function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.CoupDaysNCImpl">
            <summary>
            Implements the CoupDaysNC Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.CoupDaysNCImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupDaysNCImpl.Calc(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <param name="Basis" />
            <summary>
            Override this method to specialize BaseBondsImpl
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupDaysNCImpl.CalcCoupDaysNC(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate">See Excel.</param>
            <param name="MaturityDate">See Excel.</param>
            <param name="Frequency">See Excel.</param>
            <param name="Basis">See Excel.</param>
            <summary>
            See Excel docs for description of this function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.CoupNCDImpl">
            <summary>
            Implements the CoupNCD Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.CoupNCDImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupNCDImpl.Calc(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <param name="Basis" />
            <summary>
            Override this method to specialize BaseBondsImpl
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupNCDImpl.CalcCoupNCD(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate">See Excel.</param>
            <param name="MaturityDate">See Excel.</param>
            <param name="Frequency">See Excel.</param>
            <param name="Basis">See Excel.</param>
            <summary>
            See Excel docs for description of this function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.CoupNumImpl">
            <summary>
            Implements the CoupNum Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.CoupNumImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupNumImpl.Calc(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <param name="Basis" />
            <summary>
            Override this method to specialize BaseBondsImpl
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupNumImpl.CalcCoupNum(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate">See Excel.</param>
            <param name="MaturityDate">See Excel.</param>
            <param name="Frequency">See Excel.</param>
            <param name="Basis">See Excel.</param>
            <summary>
            See Excel docs for description of this function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.CoupPCDImpl">
            <summary>
            Implements the CoupPCD Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.CoupPCDImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupPCDImpl.Calc(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate" />
            <param name="MaturityDate" />
            <param name="Frequency" />
            <param name="Basis" />
            <summary>
            Override this method to specialize BaseBondsImpl
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.CoupPCDImpl.CalcCoupPCD(System.DateTime,System.DateTime,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="SettlementDate">See Excel.</param>
            <param name="MaturityDate">See Excel.</param>
            <param name="Frequency">See Excel.</param>
            <param name="Basis">See Excel.</param>
            <summary>
            See Excel docs for description of this function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Dec2BinImpl">
            <summary>
            Implements the Dec2Bin Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Dec2BinImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Dec2BinImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Dec2HexImpl">
            <summary>
            Implements the Dec2Hex Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Dec2HexImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Dec2HexImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Dec2OctImpl">
            <summary>
            Implements the Dec2Oct Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Dec2OctImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Dec2OctImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.DeltaImpl">
            <summary>
            Implements the Delta Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.DeltaImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.DeltaImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.DollarDeImpl">
            <summary>
            Implements the DollarDe Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.DollarDeImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.DollarDeImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.DollarFrImpl">
            <summary>
            Implements the DollarDe Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.DollarFrImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.DollarFrImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.DurationImpl">
            <summary>
            Implements the Duration and MDuration addin functions.
            Returns the [modified] Macauley duration for a security with an assumed par value of $100.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.DurationImpl(System.Boolean)">
            <param name="aModified" />
            <summary>
            Creates a new Duration/MDuration implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.DurationImpl.Calc(System.Boolean,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="Modified">If true, we return MDuration, if not, Duration.</param>
            <param name="SettlementDate">See Excel.</param>
            <param name="MaturityDate">See Excel.</param>
            <param name="CouponRate">See Excel.</param>
            <param name="Yield">See Excel.</param>
            <param name="Frequency">See Excel.</param>
            <param name="Basis">See Excel.</param>
            <summary>
            Duration/MDuration implementation. You can call this method on its own.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.DurationImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the DURATION/MDURATION function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.EDateImpl">
            <summary>
            Implements the EDate addin function.
            Returns the serial number that represents the date that is the indicated number of months before or after a specified date (the start_date). 
            Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.EDateImpl">
            <summary>
            Creates a new EDate implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.EDateImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the EDate function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.EffectImpl">
            <summary>
            Implements the Effect Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.EffectImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.EffectImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.EOMonthImpl">
            <summary>
            Implements the EOMonth Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.EOMonthImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.EOMonthImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.FactDoubleImpl">
            <summary>
            Implements the FactDouble Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.FactDoubleImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.FactDoubleImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.GcdImpl">
            <summary>
            Implements the GCD Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.GcdImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.GeStepImpl">
            <summary>
            Implements the GeStep Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.GeStepImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.GeStepImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Hex2BinImpl">
            <summary>
            Implements the Hex2Bin Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Hex2BinImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Hex2BinImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Hex2DecImpl">
            <summary>
            Implements the Hex2Dec Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Hex2DecImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Hex2DecImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Hex2OctImpl">
            <summary>
            Implements the Hex2Oct Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Hex2OctImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Hex2OctImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.IsEvenImpl">
            <summary>
            Implements the IsEven Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.IsEvenImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.IsEvenImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.IsOddImpl">
            <summary>
            Implements the IsOdd Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.IsOddImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.IsOddImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.LcmImpl">
            <summary>
            Implements the LCM Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.LcmImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.MRoundImpl">
            <summary>
            Implements the MRound Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.MRoundImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.MRoundImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.MultinomialImpl">
            <summary>
            Implements the Multinomial Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.MultinomialImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.MultinomialImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.NetWorkDaysImpl">
            <summary>
            Implements the NetWorkDays Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.NetWorkDaysImpl(System.Boolean)">
            <param name="aIntl" />
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.NetWorkDaysImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.NominalImpl">
            <summary>
            Implements the Nominal Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.NominalImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.NominalImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Oct2BinImpl">
            <summary>
            Implements the Oct2Bin Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Oct2BinImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Oct2BinImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Oct2DecImpl">
            <summary>
            Implements the Oct2Dec Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Oct2DecImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Oct2DecImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.Oct2HexImpl">
            <summary>
            Implements the Oct2Hex Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.Oct2HexImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.Oct2HexImpl.Calc(System.String,System.Double,System.Int32)">
            <param name="num" />
            <param name="dnum" />
            <param name="Places" />
            <summary>
            Implement this method to specialize BaseBinHexImpl class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.QuotientImpl">
            <summary>
            Implements the Quotient Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.QuotientImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.QuotientImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.RandBetweenImpl">
            <summary>
            Implements the Quotient Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.RandBetweenImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.RandBetweenImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.SeriesSumImpl">
            <summary>
            Implements the SeriesSum Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.SeriesSumImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.SeriesSumImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.SqrtPiImpl">
            <summary>
            Implements the Quotient Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.SqrtPiImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.SqrtPiImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.TDayCountBasis">
            <summary>
            Enumerates different Basis parameters for financial functions like Duration.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.AddinFunctions.TDayCountBasis.Actual360">
            <summary>
            Actual number of days in month, year has 360 days
            </summary>
        </member>
        <member name="F:FlexCel.AddinFunctions.TDayCountBasis.Actual365">
            <summary>
            Actual number of days in month, year has 365 days
            </summary>
        </member>
        <member name="F:FlexCel.AddinFunctions.TDayCountBasis.ActualActual">
            <summary>
             Actual number of days in months, actual number of days in year
            </summary>
        </member>
        <member name="F:FlexCel.AddinFunctions.TDayCountBasis.Europ30_360">
            <summary>
            European method, 12 months of 30 days each
            </summary>
        </member>
        <member name="F:FlexCel.AddinFunctions.TDayCountBasis.UsPsa30_360">
            <summary>
            US method (NASD), 12 months of 30 days each
            </summary>
        </member>
        <member name="T:FlexCel.AddinFunctions.WeekNumImpl">
            <summary>
            Implements the Weeknum Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.WeekNumImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.WeekNumImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.WorkDayImpl">
            <summary>
            Implements the WorkDay Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.WorkDayImpl(System.Boolean)">
            <param name="aIntl" />
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.WorkDayImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.XIRRImpl">
            <summary>
            Implements the XIRR Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.XIRRImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.XIRRImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.XNPVImpl">
            <summary>
            Implements the XNPV Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.XNPVImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.XNPVImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.AddinFunctions.YearFracImpl">
            <summary>
            Implements the YearFrac Excel function. Look at Excel documentation for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.AddinFunctions.YearFracImpl">
            <summary>
            Creates a new implementation.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.YearFracImpl.CalcYearFrac(System.DateTime,System.DateTime,FlexCel.AddinFunctions.TDayCountBasis)">
            <param name="Date1" />
            <param name="Date2" />
            <param name="Basis" />
            <summary>
            See Excel docs for description of this function.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.AddinFunctions.YearFracImpl.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments" />
            <param name="parameters" />
            <summary>
            Evaluates the function. Look At Excel docs for parameters.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.CellValue">
            <summary>
            Represents a cell, including the row, column and sheet where it was read.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.CellValue(System.Int32,System.Int32,System.Int32,System.Object,System.Int32)">
            <param name="aSheet" />
            <param name="aRow" />
            <param name="aCol" />
            <param name="aValue" />
            <param name="aXF" />
            <summary>
            Creates a new CellValue instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.CellValue.Col">
            <summary>
            Column where the cell was read. (1 based)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.CellValue.Row">
            <summary>
            Row where the cell was read. (1 based)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.CellValue.Sheet">
            <summary>
            Sheet where the cell was read. (1 based)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.CellValue.Value">
            <summary>
            Value of the cell. The possible objects here are the same as the returned by <see cref="M:FlexCel.Core.ExcelFile.GetCellValue(System.Int32,System.Int32,System.Int32@)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.CellValue.XF">
            <summary>
            Format of the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartFillOptions">
            <summary>
            Fill options for a chart element.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartFillOptions(FlexCel.Core.TUIColor,FlexCel.Core.TUIColor,FlexCel.Core.TChartPatternStyle)">
            <param name="aFgColor">Foreground color for the pattern.</param>
            <param name="aBgColor">Background color for the pattern.</param>
            <param name="aPattern">Pattern style.</param>
            <summary>
            Creates a new instance of this object.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartFillOptions.BgColor">
            <summary>
            Background color for the pattern.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartFillOptions.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartFillOptions.FgColor">
            <summary>
            Foreground color for the pattern.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartFillOptions.Pattern">
            <summary>
            Pattern style.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartLineOptions">
            <summary>
            Line style options for an element of a chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartLineOptions(FlexCel.Core.TUIColor,FlexCel.Core.TChartLineStyle,System.Double)">
            <param name="aLineColor">Line color.</param>
            <param name="aStyle">Line style.</param>
            <param name="aLineWeight">Line weight.</param>
            <summary>
            Creates a new ChartSeriesLineOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartLineOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartLineOptions.LineColor">
            <summary>
            Line color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartLineOptions.LineWeight">
            <summary>
            Line weight.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartLineOptions.Style">
            <summary>
            Line style.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartSeries">
            <summary>
            The definiton for a series, and the values of it.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeries">
            <summary>
            Creates a new empty instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeries(System.String,System.String,System.String,System.Object,System.Object[],System.Object[],System.String[],System.String[],System.Int32,System.Int32,System.Int32)">
            <param name="aTitleDefinition">Title of the series.</param>
            <param name="aDataDefinition">Formula defining the Data for the series.</param>
            <param name="aCategoriesDefinition">Formula defining the Categories for the series.</param>
            <param name="aTitleValue">Evaluated value of the series title.</param>
            <param name="aDataValues">Actual values for the categories.</param>
            <param name="aCategoriesValues">Actual values for the series.</param>
            <param name="aDataFormats">See <see cref="P:FlexCel.Core.ChartSeries.DataFormats" /></param>
            <param name="aCategoriesFormats">See <see cref="P:FlexCel.Core.ChartSeries.CategoriesFormats" /></param>
            <param name="aChartOptionsIndex">Index to the ChartOptions object that applies to this series.</param>
            <param name="aSeriesIndex">Index of this series on the file.</param>
            <param name="aSeriesNumber">Series number as shown on the Legend box. This might be different from the SeriesIndex if the order of the series is changed.</param>
            <summary>
            Creates a new instance and fills it with default values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.CategoriesDefinition">
            <summary>
            Formula or text defining the Series Categories (normally the x Axis). Start with an "=" sign to enter a formula.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.CategoriesFormats">
            <summary>
            Format on the cell where the data is. This format should be applied to the data if the data format for the axis or the label is null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.CategoriesValues">
            <summary>
            Actual values for the Series Categories (normally the x Axis).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.ChartOptionsIndex">
            <summary>
            Index to the ChartOptions object that applies to this series.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.DataDefinition">
            <summary>
            Formula or values that define the series. For example, "=A1:A5" or {1,2,3}. Start with an "=" sign to enter a formula.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.DataFormats">
            <summary>
            Format on the cell where the data is. This format should be applied to the data if the data format for the axis or the label is null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.DataValues">
            <summary>
            Actual values for the series.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.HorizontalErrorBars">
            <summary>
            Returns the horizontal error bar options, if the chart has error bars. If the chart doesn't have them, then null will be returned.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.LegendOptions">
            <summary>
            Options for the legend entry associated with this series. (when legend is showing series), or
            with a point on the series. (when legend is showing all the entries on series[0], for example on pie charts)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.Options">
            <summary>
            Options for this series and their data points. -1 means the whole series, and n is options for the n-point.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.SeriesIndex">
            <summary>
            Index of this series on the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.SeriesNumber">
            <summary>
            Series number as shown on the Legend box. This might be different from the <see cref="P:FlexCel.Core.ChartSeries.SeriesIndex" /> if the order of the series is changed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.TitleDefinition">
            <summary>
            Formula or text defining the Series caption. Start with an "=" sign to enter a formula.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.TitleValue">
            <summary>
            Evaluated text of the title.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeries.VerticalErrorBars">
            <summary>
            Returns the vertical error bar options, if the chart has error bars. If the chart doesn't have them, then null will be returned.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartSeriesFillOptions">
            <summary>
            Fill options for a series or a point inside a series.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeriesFillOptions(FlexCel.Core.TUIColor,FlexCel.Core.TUIColor,FlexCel.Core.TChartPatternStyle,System.Boolean,System.Boolean)">
            <param name="aFgColor">Foreground color for the pattern.</param>
            <param name="aBgColor">Background color for the pattern.</param>
            <param name="aPattern">Pattern style.</param>
            <param name="aAutomaticColors">When true, fill colors are assigned automatically.</param>
            <param name="aInvertNegativeValues">When true and values of the series are negative, foreground and background colors are reversed.</param>
            <summary>
            Creates a new instance of this object.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesFillOptions.AutomaticColors">
            <summary>
            When true, fill colors are assigned automatically.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartSeriesFillOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesFillOptions.InvertNegativeValues">
            <summary>
            When true and values of the series are negative, foreground and background colors are reversed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartSeriesLineOptions">
            <summary>
            Line style options for a series or a point inside a series.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeriesLineOptions(FlexCel.Core.TUIColor,FlexCel.Core.TChartLineStyle,System.Double,System.Boolean)">
            <param name="aLineColor">Line color.</param>
            <param name="aStyle">Line style.</param>
            <param name="aLineWeight">Line weight.</param>
            <param name="aAutomaticColors">When true, line colors are assigned automatically.</param>
            <summary>
            Creates a new ChartSeriesLineOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesLineOptions.AutomaticColors">
            <summary>
            When true, line colors are assigned automatically.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartSeriesLineOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartSeriesMarkerOptions">
            <summary>
            Marker options for the whole series or a point in the series when the chart is line or scatter.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeriesMarkerOptions(FlexCel.Core.ChartLineOptions,FlexCel.Core.TFillStyle,FlexCel.Core.TChartMarkerType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,FlexCel.Core.TUISize)">
            <param name="aLineFormat">Format of the marker lines.</param>
            <param name="aFill">Color of the marker fill.</param>
            <param name="aMarkerType">Type of marker.</param>
            <param name="aAutomaticFillColors">When true, marker brush colors are assigned automatically.</param>
            <param name="aAutomaticLineColors">When true, marker line colors are assigned automatically.</param>
            <param name="aNoBackground">When true, the marker has no fill.</param>
            <param name="aNoForeground">When true, the marker has no lines.</param>
            <param name="aMarkerSize">Marker size.</param>
            <param name="aMarkerImageSize">Image size for the marker when the type is Image.</param>
            <summary>
            Creates a new ChartSeriesMarkerOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.AutomaticFillColors">
            <summary>
            When true, marker colors are assigned automatically.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.AutomaticLineColors">
            <summary>
            When true, marker colors are assigned automatically.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.AutomaticShape">
            <summary>
            When true, marker shapes are assigned automatically.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartSeriesMarkerOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.Fill">
            <summary>
            Color of the marker fill.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.LineFormat">
            <summary>
            Format of the marker lines.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.MarkerImageSize">
            <summary>
            Size fo the image for the marker, if the marker is an image and the markertype is image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.MarkerSize">
            <summary>
            Size of the marker.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.MarkerType">
            <summary>
            Type of marker.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.NoBackground">
            <summary>
            When true, the marker has no fill.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.NoForeground">
            <summary>
            When true, the marker has no lines.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartSeriesMiscOptions">
            <summary>
            Misc options for the whole series or a point in the series that do no enter in any other category.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeriesMiscOptions(System.Boolean,System.Boolean,System.Boolean)">
            <param name="aSmoothedLines">Lines should be smoothed (line and scatter charts).</param>
            <param name="aBubbles3D">Draw bubbles with 3D effects.</param>
            <param name="aHasShadow">Series has shadow.</param>
            <summary>
            Creates a new ChartSeriesMiscOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMiscOptions.Bubbles3D">
            <summary>
            Draw bubbles with 3D effects.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartSeriesMiscOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMiscOptions.HasShadow">
            <summary>
            Series has shadow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMiscOptions.SmoothedLines">
            <summary>
            Lines should be smoothed (line and scatter charts).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartSeriesOptions">
            <summary>
            Options for the whole series or for a data point inside it.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeriesOptions(System.Int32,FlexCel.Core.ChartSeriesFillOptions,FlexCel.Core.ChartSeriesLineOptions,FlexCel.Core.ChartSeriesPieOptions,FlexCel.Core.ChartSeriesMarkerOptions,FlexCel.Core.ChartSeriesMiscOptions)">
            <param name="aPointNumber">Point number where this options apply. -1 means that the options apply for the whole series.</param>
            <param name="aFillOptions">Fill options for the series or point.</param>
            <param name="aLineOptions">Line options for the series or point.</param>
            <param name="aPieOptions">If the chart type is pie, options for the pie. If it is not a pie chart, this value has no meaning.</param>
            <param name="aMarkerOptions">Color and shape of the markers on Line and Scatter charts.</param>
            <param name="aMiscOptions">Misc Options.</param>
            <summary>
            Creates a new instance of ChartSeriesOptions. Objects will be cloned, so you can change their values later and they will not
            change the value on this class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartSeriesOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.ExtraOptions">
            <summary>
            Extra options used to specify gradients, textures, etc. If this is no null, the color values are not used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.FillOptions">
            <summary>
            Fill options for the series or point.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.LineOptions">
            <summary>
            Line options for the series or point.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.MarkerOptions">
            <summary>
            Color and shape of the markers on Line and Scatter charts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.MiscOptions">
            <summary>
            Other options not related to the specific parts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.PieOptions">
            <summary>
            If the chart type is pie, options for the pie. If it is not a pie chart, this value has no meaning.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.PointNumber">
            <summary>
            Point number where this options apply. -1 means that the options apply for the whole series.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.XlsxMode">
            <summary>
            If true, the chart was creaded by an xlsx-capable Excel version (2007 or newer) and so has different defaults.
            For example, it will have different automatic colors for the series.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ChartSeriesPieOptions">
            <summary>
            Pie options for a series or a slice of the series when the chart is a pie chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ChartSeriesPieOptions(System.Int32)">
            <param name="aSliceDistance">Distance of the pie slice from the center on percent of the pie diemeter.</param>
            <summary>
            Creates a new ChartSeriesPieOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ChartSeriesPieOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ChartSeriesPieOptions.SliceDistance">
            <summary>
            Distance of the pie slice from the center on percent of the pie diammeter.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.Colors">
            <summary>
            A list of standard colors.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.AliceBlue">
            <summary>AliceBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.AntiqueWhite">
            <summary>AntiqueWhite color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Aqua">
            <summary>Aqua color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Aquamarine">
            <summary>Aquamarine color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Azure">
            <summary>Azure color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Beige">
            <summary>Beige color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Bisque">
            <summary>Bisque color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Black">
            <summary>Black color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.BlanchedAlmond">
            <summary>BlanchedAlmond color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Blue">
            <summary>Blue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.BlueViolet">
            <summary>BlueViolet color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Brown">
            <summary>Brown color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.BurlyWood">
            <summary>BurlyWood color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.CadetBlue">
            <summary>CadetBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Chartreuse">
            <summary>Chartreuse color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Chocolate">
            <summary>Chocolate color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Coral">
            <summary>Coral color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.CornflowerBlue">
            <summary>CornflowerBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Cornsilk">
            <summary>Cornsilk color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Crimson">
            <summary>Crimson color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Cyan">
            <summary>Cyan color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkBlue">
            <summary>DarkBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkCyan">
            <summary>DarkCyan color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkGoldenrod">
            <summary>DarkGoldenrod color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkGray">
            <summary>DarkGray color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkGreen">
            <summary>DarkGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkKhaki">
            <summary>DarkKhaki color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkMagenta">
            <summary>DarkMagenta color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkOliveGreen">
            <summary>DarkOliveGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkOrange">
            <summary>DarkOrange color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkOrchid">
            <summary>DarkOrchid color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkRed">
            <summary>DarkRed color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkSalmon">
            <summary>DarkSalmon color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkSeaGreen">
            <summary>DarkSeaGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkSlateBlue">
            <summary>DarkSlateBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkSlateGray">
            <summary>DarkSlateGray color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkTurquoise">
            <summary>DarkTurquoise color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DarkViolet">
            <summary>DarkViolet color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DeepPink">
            <summary>DeepPink color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DeepSkyBlue">
            <summary>DeepSkyBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DimGray">
            <summary>DimGray color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.DodgerBlue">
            <summary>DodgerBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Firebrick">
            <summary>Firebrick color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.FloralWhite">
            <summary>FloralWhite color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.ForestGreen">
            <summary>ForestGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Fuchsia">
            <summary>Fuchsia color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Gainsboro">
            <summary>Gainsboro color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.GhostWhite">
            <summary>GhostWhite color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Gold">
            <summary>Gold color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Goldenrod">
            <summary>Goldenrod color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Gray">
            <summary>Gray color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Green">
            <summary>Green color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.GreenYellow">
            <summary>GreenYellow color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Honeydew">
            <summary>Honeydew color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.HotPink">
            <summary>HotPink color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.IndianRed">
            <summary>IndianRed color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Indigo">
            <summary>Indigo color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Ivory">
            <summary>Ivory color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Khaki">
            <summary>Khaki color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Lavender">
            <summary>Lavender color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LavenderBlush">
            <summary>LavenderBlush color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LawnGreen">
            <summary>LawnGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LemonChiffon">
            <summary>LemonChiffon color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightBlue">
            <summary>LightBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightCoral">
            <summary>LightCoral color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightCyan">
            <summary>LightCyan color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightGoldenrodYellow">
            <summary>LightGoldenrodYellow color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightGray">
            <summary>LightGray color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightGreen">
            <summary>LightGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightPink">
            <summary>LightPink color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightSalmon">
            <summary>LightSalmon color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightSeaGreen">
            <summary>LightSeaGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightSkyBlue">
            <summary>LightSkyBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightSlateGray">
            <summary>LightSlateGray color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightSteelBlue">
            <summary>LightSteelBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LightYellow">
            <summary>LightYellow color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Lime">
            <summary>Lime color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.LimeGreen">
            <summary>LimeGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Linen">
            <summary>Linen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Magenta">
            <summary>Magenta color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Maroon">
            <summary>Maroon color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumAquamarine">
            <summary>MediumAquamarine color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumBlue">
            <summary>MediumBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumOrchid">
            <summary>MediumOrchid color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumPurple">
            <summary>MediumPurple color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumSeaGreen">
            <summary>MediumSeaGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumSlateBlue">
            <summary>MediumSlateBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumSpringGreen">
            <summary>MediumSpringGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumTurquoise">
            <summary>MediumTurquoise color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MediumVioletRed">
            <summary>MediumVioletRed color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MidnightBlue">
            <summary>MidnightBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MintCream">
            <summary>MintCream color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.MistyRose">
            <summary>MistyRose color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Moccasin">
            <summary>Moccasin color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.NavajoWhite">
            <summary>NavajoWhite color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Navy">
            <summary>Navy color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.OldLace">
            <summary>OldLace color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Olive">
            <summary>Olive color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.OliveDrab">
            <summary>OliveDrab color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Orange">
            <summary>Orange color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.OrangeRed">
            <summary>OrangeRed color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Orchid">
            <summary>Orchid color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.PaleGoldenrod">
            <summary>PaleGoldenrod color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.PaleGreen">
            <summary>PaleGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.PaleTurquoise">
            <summary>PaleTurquoise color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.PaleVioletRed">
            <summary>PaleVioletRed color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.PapayaWhip">
            <summary>PapayaWhip color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.PeachPuff">
            <summary>PeachPuff color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Peru">
            <summary>Peru color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Pink">
            <summary>Pink color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Plum">
            <summary>Plum color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.PowderBlue">
            <summary>PowderBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Purple">
            <summary>Purple color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Red">
            <summary>Red color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.RosyBrown">
            <summary>RosyBrown color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.RoyalBlue">
            <summary>RoyalBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SaddleBrown">
            <summary>SaddleBrown color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Salmon">
            <summary>Salmon color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SandyBrown">
            <summary>SandyBrown color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SeaGreen">
            <summary>SeaGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SeaShell">
            <summary>SeaShell color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Sienna">
            <summary>Sienna color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Silver">
            <summary>Silver color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SkyBlue">
            <summary>SkyBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SlateBlue">
            <summary>SlateBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SlateGray">
            <summary>SlateGray color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Snow">
            <summary>Snow color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SpringGreen">
            <summary>SpringGreen color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.SteelBlue">
            <summary>SteelBlue color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Tan">
            <summary>Tan color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Teal">
            <summary>Teal color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Thistle">
            <summary>Thistle color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Tomato">
            <summary>Tomato color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Transparent">
            <summary>Transparent color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Turquoise">
            <summary>Turquoise color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Violet">
            <summary>Violet color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Wheat">
            <summary>Wheat color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.White">
            <summary>White color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.WhiteSmoke">
            <summary>WhiteSmoke color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.Yellow">
            <summary>Yellow color.</summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.Colors.YellowGreen">
            <summary>YellowGreen color.</summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ColumnImportType">
            <summary>
            Handles how to convert a column from text when importing a text file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.ColumnImportType.General">
            <summary>
            Try to convert it to a number, a date, etc.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ColumnImportType.Skip">
            <summary>
            Do not import this column.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ColumnImportType.Text">
            <summary>
            Keep the column as text, even if it can be converted to a number or other things.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ExcelChart">
            <summary>
            Information for a chart inside a sheet or an object.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ExcelChart">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.ExcelChart</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.AddSeries(FlexCel.Core.ChartSeries)">
            <param name="value">Definition of the new series</param>
            <summary>
            Adds a series to the chart.
            </summary>
            <returns>Index of the newly added series.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.AutoScalePlotArea">
            <summary>
            If true, plot area dimensions should be ignored, and the plot area should be autosized to fit the legend and axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.Background">
            <summary>
            Returns the chart background if there is one defined, or null if there is none.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.ChartOptions">
            <summary>
            Returns the type of chart and the options specific for that kind of chart.
            There might be more than one ChartOptions returned, since you can mix more than one type of 
            chart on a simple chart. (One for each series). You need to look at the series ChartOptionsIndex to 
            know to which one it refers.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.DefaultAxisFont">
            <summary>
            Returns the default font for Axis in the chart that do not have a font defined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.DefaultFont">
            <summary>
            Returns the default font for all text in the chart that do not have a font defined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.DefaultLabelFont">
            <summary>
            Returns the default font for all labels in the chart that do not have a font defined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.DeleteObject(System.Int32)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.DeleteSeries(System.Int32)">
            <param name="index" />
            <summary>
            Deletes the series at position index.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetChartAxis">
            <summary>
            Returns the axis information for this chart. Note that this might be more than one, if the chart has a secondary axis.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetChartLegend">
            <summary>
            Information about the Legend of the chart.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetDataLabels">
            <summary>
            Returns all the labels for the chart and the main title. Note that Axis have their labels defined inside their own definition.
            </summary>
            <returns>Label values.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream,System.Boolean)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            ObjectIndexToImageIndex which is a slow method, by setting this parameter to true.</param>
            <summary>
            Returns an image and its type.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)">
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount" /></param>
            <param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            An object embedded inside a chart.
            </summary>
            <returns>The properties for the embedded object.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetSeries(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <param name="index">Index of the series you want to return. (1 based)</param>
            <param name="getDefinitions">If false, this method will not return the series formulas, so it will be a little faster.</param>
            <param name="getValues">If false, this method will not return the series values, so it will be a little faster and use less memory.</param>
            <param name="getOptions">If false, this method will not return the series options.</param>
            <summary>
            Returns a series definition.
            </summary>
            <returns>series description.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.ObjectCount">
            <summary>
            The number of objects that are embedded inside this chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.PlotEmptyCells">
            <summary>
            Defines how null cells will be plotted on the chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.RemoveChartLegend">
            <summary>
            Removes the Legend from the chart.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.SeriesCount">
            <summary>
            Returns the count of series on this chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.SetDataLabels(FlexCel.Core.TDataLabel[])">
            <param name="labels">New labels for the chart.</param>
            <summary>
            Changes the labels for the chart. You should always get the values with <see cref="M:FlexCel.Core.ExcelChart.GetDataLabels" />,
            modify them, and change them back with this method.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.SetObjectText(System.Int32,System.String,FlexCel.Core.TDrawingRichString)">
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount" /></param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Changes the text inside an object of the chart.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the rich string properties of the object text,
            and preserve those things not available in a TRichString like wordArt effects.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.SetObjectText(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the text of the object,
            and preserve the existing formatting in the object if there was one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelChart.SetSeries(System.Int32,FlexCel.Core.ChartSeries)">
            <param name="index">Index of the serie to set.</param>
            <param name="value">Series definition.</param>
            <summary>
            Sets a Serie value.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelChart.ShowDataInEmptyRowsAndCols">
            <summary>
            Defines if empty rows and columns will be used when plotting values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ExcelFile">
            <summary>
            Interface a FlexCel engine has to implement to be used with FlexCelReport.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.ExcelFile">
            <summary>
            Initializes ExcelFile fields.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ActiveFileName">
            <summary>
            The file we are working on. When we save the file with another name, it changes.
            When we open a stream, it is set to "".
            This value is also used to get the text of Headers and Footers (when using the filename macro).
            When using the filename macro on headers/footers, make sure you set this value to what you want.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ActiveSheet">
            <summary>
            The Sheet where we are working on, 1-based(First sheet is 1, not 0). 
            Always set this property before working on a file.
            You can read or write this value.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ActiveSheetByName">
            <summary>
            The sheet where we are working on, referred by name instead of by index.
            To change the active sheet name, use <see cref="P:FlexCel.Core.ExcelFile.SheetName" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String,System.String)">
            <param name="anchor">Position for the button.</param>
            <param name="text">Text that will be shown in the button.</param>
            <param name="name">Name for the inserted button.</param>
            <param name="macro">Macro associated with the button.</param>
            <summary>
            Adds a button to the sheet, with the associated macro.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddCheckbox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,FlexCel.Core.TCheckboxState,FlexCel.Core.TCellAddress)">
            <param name="anchor">Position for the checkbox.</param>
            <param name="text">Text for the checkbox.</param>
            <param name="value">Value of the checkbox.</param>
            <param name="linkedCell">Cell that will be linked to the checkbox. If you don't want to link the checkbox to a cell, make this parameter null.</param>
            <summary>
            Adds a checkbox to the active sheet. 
            </summary>
            <returns>Object Index of the inserted checkbox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddCheckbox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,FlexCel.Core.TCheckboxState,FlexCel.Core.TCellAddress,System.String)">
            <param name="anchor">Position for the checkbox.</param>
            <param name="text">Text for the checkbox.</param>
            <param name="value">Value of the checkbox.</param>
            <param name="linkedCell">Cell that will be linked to the checkbox. If you don't want to link the checkbox to a cell, make this parameter null.</param>
            <param name="name">Name that will be given to the checkbox.</param>
            <summary>
            Adds a checkbox to the active sheet. 
            </summary>
            <returns>Object Index of the inserted checkbox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddComboBox(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TCellAddressRange,System.Int32)">
            <param name="anchor">Position for the combobox.</param>
            <param name="name">Name of the inserted combobox.</param>
            <param name="linkedCell">Cell that will be linked to the combobox. Set this to null to not link any cell.</param>
            <param name="inputRange">Range of cells with the values that the combobox will display.</param>
            <param name="selectedItem">Item that will be selected, starting at 1. 0 means no selected item.</param>
            <summary>
            Adds a ComboBox to the active sheet. 
            </summary>
            <returns>Object Index of the inserted combobox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddCustomXmlPart(FlexCel.Core.TCustomXmlPart)">
            <param name="part">Part to add.</param>
            <summary>
            Adds a custom XML part to the file, as described in https://msdn.microsoft.com/en-us/library/bb608618.aspx
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddDataValidation(FlexCel.Core.TXlsCellRange,FlexCel.Core.TDataValidationInfo)">
            <param name="range">Range of cells where we will apply the Data Validation.</param>
            <param name="validationInfo">Validation information.</param>
            <summary>
            Adds a new Data Validation to a specified range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddFont(FlexCel.Core.TFlxFont)">
            <param name="font">Font to add to the list.</param>
            <summary>
            Adds a new font to the excel font list.  If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary>
            <returns>The position on the list for the added font.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)">
            <param name="format">Format to add to the list.</param>
            <summary>
            Adds a new format to the Excel format list. If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary>
            <returns>Position on the list for the format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddGroupBox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)">
            <param name="anchor">Position for the group box.</param>
            <param name="text">Text for the group box.</param>
            <summary>
            Adds a Group box to the active sheet. Call <see cref="M:FlexCel.Core.ExcelFile.AddRadioButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)" /> to insert radio buttons inside the group box. 
            </summary>
            <returns>Object Index of the inserted group box (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddGroupBox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String)">
            <param name="anchor">Position for the group box.</param>
            <param name="text">Text for the group box.</param>
            <param name="name">Name for the inserted Group box</param>
            <summary>
            Adds a Group box to the active sheet. Call <see cref="M:FlexCel.Core.ExcelFile.AddRadioButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)" /> to insert radio buttons inside the group box. 
            </summary>
            <returns>Object Index of the inserted group box (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)">
            <param name="cellRange">Range of cells the hyperlink will refer to.</param>
            <param name="value">Description of the hyperlink.</param>
            <summary>
            Adds a new hyperlink to the Active sheet. Use <see cref="M:FlexCel.Core.ExcelFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)" /> to modify an existing one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(FlexCel.Core.TUIImage,FlexCel.Core.TImageProperties)">
            <param name="img">Image to insert.</param>
            <param name="imageProperties">Image size/position</param>
            <summary>
            WARNING!  Not CF compliant. If you don't have the image already created, prefer 
            using <see cref="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)" />, as it is faster.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.Byte[],FlexCel.Core.TImageProperties)">
            <param name="data">Image data.</param>
            <param name="imageProperties">Image Properties.</param>
            <summary>
            Adds an image to the active sheet. It will try to automatically guess/convert the image type
            of the data to the better fit.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)">
            <param name="aStream">Stream containing the image data.</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
            <summary>
            Adds an image to the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.String,FlexCel.Core.TImageProperties)">
            <param name="fileName">Name of the file in disk containing the image data.</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
            <summary>
            Adds an image to the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.TImageProperties)">
            <param name="data">byte array with the image data.</param>
            <param name="imageType">Type of image you are inserting (bmp, jpg, etc).</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
            <summary>
            Adds an image to the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.Int32,System.Int32,FlexCel.Core.TUIImage)">
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <param name="img">Image to insert.</param>
            <summary>
            WARNING!  Not CF compliant. If you don't have the image already created, prefer 
            using <see cref="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)" />, as it is faster.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TXlsImgType,FlexCel.Core.TImageProperties)">
            <param name="aStream">Stream containing the image data.</param>
            <param name="imageType">Type of image you are inserting (bmp, jpg, etc).</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
            <summary>
            Adds an image to the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddLabel(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String)">
            <param name="anchor">Position for the label.</param>
            <param name="text">Text for the label.</param>
            <param name="name">Name of the inserted label.</param>
            <summary>
            Adds a Label to the active sheet. 
            </summary>
            <returns>Object Index of the inserted listbox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddListBox(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TCellAddressRange,FlexCel.Core.TListBoxSelectionType,System.Int32)">
            <param name="anchor">Position for the listbox.</param>
            <param name="name">Name of the inserted listbox.</param>
            <param name="linkedCell">Cell that will be linked to the listbox. Set this to null to not link any cell.</param>
            <param name="inputRange">Range of cells with the values that the listbox will display.</param>
            <param name="selectionType">How items are selected in the listbox.</param>
            <param name="selectedItem">Item that will be selected, starting at 1. 0 means no selected item.</param>
            <summary>
            Adds a ListBox to the active sheet. 
            </summary>
            <returns>Object Index of the inserted listbox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddRadioButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)">
            <param name="anchor">Position for the radio button.</param>
            <param name="text">Text for the radio button.</param>
            <summary>
            Adds a radio button to the active sheet. Call <see cref="M:FlexCel.Core.ExcelFile.AddGroupBox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)" /> to insert a group box for grouping the radio buttons. 
            </summary>
            <returns>Object Index of the inserted radio button (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddRadioButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String)">
            <param name="anchor">Position for the radio button.</param>
            <param name="text">Text for the radio button.</param>
            <param name="name">Name of the inserted radio button.</param>
            <summary>
            Adds a radio button to the active sheet. Call <see cref="M:FlexCel.Core.ExcelFile.AddGroupBox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)" /> to insert a group box for grouping the radio buttons. 
            </summary>
            <returns>Object Index of the inserted radio button (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddScrollBar(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TSpinProperties)">
            <param name="anchor">Position for the ScrollBar.</param>
            <param name="name">Name of the inserted ScrollBar.</param>
            <param name="linkedCell">Cell that will be linked to the ScrollBar. Set this to null to not link any cell.</param>
            <param name="spinProps">Properties for the ScrollBar.</param>
            <summary>
            Adds a ScrollBar to the active sheet. 
            </summary>
            <returns>Object Index of the inserted ScrollBar (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddSheet">
            <summary>
            Inserts an empty sheet at the end of the file. This is equivalent to calling InsertAndCopySheets(0, SheetCount + 1, 1).
            If you need to insert more than one sheet, or insert it at the middle of existing sheets, use <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32)" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddSpinner(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TSpinProperties)">
            <param name="anchor">Position for the spinner.</param>
            <param name="name">Name of the inserted spinner.</param>
            <param name="linkedCell">Cell that will be linked to the spinner. Set this to null to not link any cell.</param>
            <param name="spinProps">Properties for the spinner.</param>
            <summary>
            Adds a Spinner to the active sheet. 
            </summary>
            <returns>Object Index of the inserted spinner (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)">
            <param name="scope">Defines if the custom function will be available globally to all ExcelFile instances or only to the ExcelFile instance where
            it was added. It is recommended to add functions globally, unless you have different xls files with functions that might have the same name but could be implemented different.</param>
            <param name="location">Defines if the function will be inserted as a reference to a macro in the local sheet or in an external book or addin.
            This parameter is used only when adding formulas with user defined functions to a sheet. It is not needed or used when recalculating those functions or when
            reading the text of a formula.</param>
            <param name="userFunction">Formula function we want to add.</param>
            <summary>
            Adds a custom formula function to the FlexCel recalculation engine. Note that this formulas are only valid for Excel custom formulas, not for internal ones.
            For example, you could define "EDATE" since it is a custom formula defined in the Analysis Addin, but you cannot redefine "SUM". 
            Note that if a custom formula with the name already exists, it will be replaced. Names are Case insensitive ("Date" is the same as "DATE").
            <br />Also note that some user defined functions come already built in FlexCel, so you might not need to define them.
            For more information on adding Custom Formulas make sure you read the PDF documentation and take a look at the demo.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.AllowEnteringEmptyStrings">
            <summary>
            By default, FlexCel won't allow you to enter empty or null strings into a cell; it will create a blank record instead.
            If for any reason you need to enter actual empty strings (which might be confusing to the Excel user) set this property to true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.AllowEnteringUnknownFunctionsAndNames">
            <summary>
            Whenever you try to use an unknown function in a formula, like "=MYFUNCTION()", FlexCel will raise an Exception. Same happens with unknown names.
            This is normally the expected behavior, so you don't enter a misspelled name by mistake, and you can add used defined function to FlexCel so it understands it. 
            <br /> 
            But in some cases, you might want to allow any function to be entered, no matter if is known or not: Excel behaves this way.
            For those cases, set this property to true. The unknown functions will return #NAME! as formula result.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles">
            <summary>
            Determines if a call to "Save()" will automatically overwrite an existing file or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Boolean,System.Double)">
            <param name="col">Column to Autofit.</param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <summary>
            Autofits a column so it adapts its width to show all the text inside.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Int32,System.Boolean,System.Double)">
            <param name="col1">First column to Autofit.</param>
            <param name="col2">Last column to Autofit.</param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32)">
            <param name="col1">First column to Autofit.</param>
            <param name="col2">Last column to Autofit.</param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the column will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="col1">First column to Autofit.</param>
            <param name="col2">Last column to Autofit.</param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the column will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <param name="autofitMerged">Specifies which column in a merged cell using more than one column will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last column.</param>
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="col1">First column to Autofit.</param>
            <param name="col2">Last column to Autofit.</param>
            <param name="minRow">First row that will be used to autofit the column. If you want for example to autofit a column
            based only in the cells from row 3 to 10, you would use 3 as minRow.</param>
            <param name="maxRow">Last row that will be used to autofit the column. If you want for example to autofit a column
            based only in the cells from row 3 to 10, you would use 10 as maxRow.
            <br /><b>Specify any value &lt;=0 here to use all rows for the autofit.</b></param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the column will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <param name="autofitMerged">Specifies which column in a merged cell using more than one column will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last column.</param>
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitComment(FlexCel.Core.TRichString,System.Double,System.Boolean,System.Double,System.Double,FlexCel.Core.TClientAnchor)">
            <param name="text">Text for the comment.</param>
            <param name="aspectRatio">If you pass 0 as aspect ratio, FlexCel will only resize the height of the
            comment, keeping the same width as it already had. If you pass another number like 4.0/3.0 or 16.0/10.0,
            FlexCel will try to create a comment box with that approximate aspect ratio. Note that the ratio won't be the exact 
            aspect ratio, just approximate.</param>
            <param name="dontShrink">If true, the box will grow if the text needs more space, but it won't be made smaller if the text fits in a smaller height than the existing anchor.</param>
            <param name="adjustment">The final height will be multiplied by this number. Because of small differences between how FlexCel and Excel render the text, 
            it might happen that the size calculated by FlexCel is smaller than what it needs to be to display correctly in Excel. By setting 
            this number bigger than 1, you can add a margin for those errors.</param>
            <param name="adjustmentFixed">This number will be added to the final calculated height. Use it to add some margin around the comment box.</param>
            <param name="Anchor">Here you pass the original dimensions for the comment.</param>
            <summary>
            Will return the resized anchor so the size of the comment is enough to fit all the text inside.
            </summary>
            <returns>The new anchor so the size of the box fits the text.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double)">
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the sizes when printing/export to PDF from Excel will be the same as FlexCel, even when some cells might appear "cut" when printing on Excel.
            </param>
            <param name="ignoreStringsOnColumnFit">When true, cells containing strings will not be autofitted.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns and rows will be adjusted to 110% percent of what their calculated width and height was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <summary>
            Autofits all the rows and columns on a sheet that have been previously marked with the <see cref="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Double)" />  and <see cref="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Double)" /> methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the sizes when printing/export to PDF from Excel will be the same as FlexCel, even when some cells might appear "cut" when printing on Excel.
            </param>
            <param name="ignoreStringsOnColumnFit">When true, cells containing strings will not be autofitted.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns and rows will be adjusted to 110% percent of what their calculated width and height was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <summary>
            Autofits all the rows and columns on a sheet that have been previously marked with the <see cref="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Double)" />  and <see cref="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Double)" /> methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the sizes when printing/export to PDF from Excel will be the same as FlexCel, even when some cells might appear "cut" when printing on Excel.
            </param>
            <param name="ignoreStringsOnColumnFit">When true, cells containing strings will not be autofitted.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns and rows will be adjusted to 110% percent of what their calculated width and height was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <param name="autofitMerged">Specifies which row in a merged cell using more than one row, or which column in a merged cell with more than one column will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last row or column in the merged range.</param>
            <summary>
            Autofits all the rows and columns on a sheet that have been previously marked with the <see cref="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Double)" />  and <see cref="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Double)" /> methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Boolean,System.Double)">
            <param name="row">Row to Autofit.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <summary>
            Autofits a row so it adapts its height to show all the text inside. It does not matter if the row is set to Autofit or not in Excel.
            Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believes is best. You can change this behavior specifying keepHeightAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double)">
            <param name="row1">First row to autofit.</param>
            <param name="row2">Last row to autofit.</param>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believes is best. You can change this behavior specifying keepHeightAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32)">
            <param name="row1">First row to autofit.</param>
            <param name="row2">Last row to autofit.</param>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofitting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believes is best. You can change this behavior specifying keepHeightAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="row1">First row to autofit.</param>
            <param name="row2">Last row to autofit.</param>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="autofitMerged">Specifies which row in a merged cell using more than one row will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last row.</param>
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believes is best. You can change this behavior specifying keepHeightAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="row1">First row to autofit.</param>
            <param name="row2">Last row to autofit.</param>
            <param name="minCol">First column that will be used to calculate the height of the row. If for
            example you wanted to calculate the row height based in the contents of the columns 3 to 9, you would specify 3 here.</param>
            <param name="maxCol">Last column that will be used to calculate the height of the row. If for
            example you wanted to calculate the row height based in the contents of the columns 3 to 9, you would specify 9 here.
            <br /><b>Specify any value &lt;=0 here to use all columns for the autofit.</b></param>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="autofitMerged">Specifies which row in a merged cell using more than one row will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last row.</param>
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believes is best. You can change this behavior specifying keepHeightAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRowsOnWorkbook(System.Boolean,System.Boolean,System.Double)">
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the printing/export to PDF from Excel will be the same as FlexCel.
            </param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <summary>
            Autofits all the rows on all sheets on a workbook that are set to autofit so they adapt their height to show all the text inside. 
            Note that due to GDI+ / GDI incompatibilities,
            the heights calculated by FlexCel will not be exactly the same than the ones calculated by Excel. So when you open this workbook
            in Excel, Excel might re calculate the row heights to what it believes is best. You can change this behavior specifying keepSizesAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRowsOnWorkbook(System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32)">
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the printing/export to PDF from Excel will be the same as FlexCel.
            </param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <summary>
            Autofits all the rows on all sheets on a workbook that are set to autofit so they adapt their height to show all the text inside. 
            Note that due to GDI+ / GDI incompatibilities,
            the heights calculated by FlexCel will not be exactly the same than the ones calculated by Excel. So when you open this workbook
            in Excel, Excel might re calculate the row heights to what it believes is best. You can change this behavior specifying keepSizesAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRowsOnWorkbook(System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the printing/export to PDF from Excel will be the same as FlexCel.
            </param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="autofitMerged">Specifies which row in a merged cell using more than one row will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last row.</param>
            <summary>
            Autofits all the rows on all sheets on a workbook that are set to autofit so they adapt their height to show all the text inside. 
            Note that due to GDI+ / GDI incompatibilities,
            the heights calculated by FlexCel will not be exactly the same than the ones calculated by Excel. So when you open this workbook
            in Excel, Excel might re calculate the row heights to what it believes is best. You can change this behavior specifying keepSizesAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutoPageBreaks">
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" /> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks" />) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,FlexCel.Core.TUIRectangle)">
            <param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br />
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br />
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br /></param>
            <param name="PageBounds">You can customize a custom page size here. If width or height of this parameter is 0, the paper size specified in the file
            will be used. There is normally no need to set this parameter, unless you want to fine tune the results.</param>
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" /> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks" />) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,System.Int32)">
            <param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br />
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br />
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br /></param>
            <param name="PageScale">This parameter must be between 50 and 100, and means how much smaller page will be considered in order to calculate the page breaks.
            <br /> A value of 100 means that the size used in the calculation will be the real size of the page, and while this will always work fine when exporting to PDF 
            or exporting to images, when printing from Excel might result in a page break that is placed a little after where it should go and an empty page for certain printers.
            (Page size in Excel is different for different printers) Normally a value around 95 is the recommended value for this parameter.<br />
            If you need to do a finer grain adjustment, you can use <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,FlexCel.Core.TUIRectangle)" />.
            </param>
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" /> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks" />) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
            Sends the graphical object to the top layer on the display (z-order) position. It will show above and will cover all other objects on the sheet. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.CellMarginFactor">
            <summary>
            This property can be used to add a margin to the cells when rendering, so text is rendered smaller and can have more line breaks.
            The default value of 1.0 means normal cells. The bigger this value, the bigger the margins and the smaller the real cell width
            for rendering the text. You might want to make this value a little larger than 1 if autofitting and Excel is wrapping text that
            FlexCel fits into one line.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
            Merged Range where the cell is.
            <seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /></summary>
            <returns>The range where the cell is</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)">
            <param name="index">index on the list (1 based)</param>
            <summary>
            The Merged cell at position index on the mergedcell list.
            <b>Important:</b> Using CellMergedList/CellMergedListCount in a loop can be slow. For a faster way to enumerate all merged cells, use <see cref="M:FlexCel.Core.ExcelFile.CellMergedNext(FlexCel.Core.TCellMergedState@)" /> instead.
            <seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /></summary>
            <returns>The merged cell at position index.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.CellMergedListCount">
            <summary>
            For using with <see cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /> on a loop: for (int i=1;i &lt;= CellMergedListCount;i++) DoSomething(CellMergedList(i))...
            <b>Important:</b> Using CellMergedList/CellMergedListCount in a loop can be slow. For a faster way to enumerate all merged cells, use <see cref="M:FlexCel.Core.ExcelFile.CellMergedNext(FlexCel.Core.TCellMergedState@)" /> instead.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CellMergedNext(FlexCel.Core.TCellMergedState@)">
            <param name="state">This struct holds the current merged cell being enumerated and is used by the method to return the next
            cell in the enumeration. To get the first value, create it with TCellMergedState.Init()</param>
            <summary>
            Use this method to enumerate all merged cells in a sheet. Using it is faster than using CellMergedList/CellMergedListCount when
            there are many merged cells.
            </summary>
            <returns>The next merged cell in the sheet.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CellRangeDimensions(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="row1">First row (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="col1">First column (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="row2">Last row (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="col2">Last column (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="includeMargins">If true, the dimensions reported will include all margins in the sheet.</param>
            <summary>
            Returns the height and width that would be used by a range of cells (in Points, or 1/72 inches). 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ChartCount">
            <summary>
            Returns the count of charts on this sheet. Please take note that this method <b>will not return the number of embedded objects with charts inside in a sheet, but just the number of charts in the sheet.</b><br />In simpler terms, this method will return 0 for all worksheets, and 1 for all chart sheets. 
            This is not a very useful method, but it needs to be this way to be consistent
            with <see cref="M:FlexCel.Core.ExcelFile.GetChart(System.Int32,System.String)" />. So, looping like this:
            <code>
            for (int i=1; i&lt;= xls.ChartCount; i++)
            {
               xls.GetChart(i, null);
            }
            </code>
            will loop 0 times for worksheets and 1 time for workbooks.
            <br /> To see how to loop over all objects in a sheet, use the example in the example section of the <see cref="M:FlexCel.Core.ExcelFile.GetChart(System.Int32,System.String)" /> topic.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearDataValidation">
            <summary>
            Clears all data validation entries in the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearDataValidation(FlexCel.Core.TXlsCellRange)">
            <param name="range">Range of cells where data validation will be cleared.</param>
            <summary>
            Clears all data validation entries inside the specified range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearImage(System.Int32)">
            <param name="imageIndex">Index of the image to clear. (1 based)</param>
            <summary>
            Clears the image at position imageIndex, leaving an empty white box.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearKeepRowsAndColsTogether">
            <summary>
            Clears all the "KeepTogether" links in the current page.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearPageBreaks">
            <summary>
            Deletes all manual page breaks on the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearSheet">
            <summary>
            Clears all data on the active sheet, but does not delete it. <seealso cref="M:FlexCel.Core.ExcelFile.DeleteSheet(System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearUserDefinedFunctions(FlexCel.Core.TUserDefinedFunctionScope)">
            <param name="scope" />
            <summary>
            Removes all the custom formula functions from the FlexCel recalculation engine.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ColCount">
            <summary>
            Number of columns actually used on the active sheet, including formatted columns. <br /> You will normally want to use <see cref="P:FlexCel.Core.ExcelFile.ColCountOnlyData" /> instead.<br /><b>Note that this method is *slow*</b> as it needs to loop over all the rows to find out
            the biggest used column. <b>Never</b> use it in a loop like "for (int  col = 1; col &lt;= xls.ColCount; col++)". Instead try to use <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" />.
            If you *need* to use ColCount, cache its value first:
            <code>
            int RowCount = xls.RowCount;
            int ColCount = xls.ColCount;
            for (int  row = 1; row &lt;= RowCount; row++)
            {
               for (int  col = 1; col &lt;= ColCount; col++)
               {
            </code>
            Remember that loops in C# will evaluate the second parameter every time the loop is executed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)">
            <param name="row">Row index. (1-based)</param>
            <summary>
             This method returns the existing columns on ONE ROW.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)" /> to iterate faster on a block.
             </summary>
            <returns>The number of existing columns on one row.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32,System.Int32)">
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row index. (1-based)</param>
            <summary>
             This method returns the existing columns on ONE ROW, for a given sheet.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)" /> to iterate faster on a block.
             </summary>
            <returns>The number of existing columns on one row.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ColCountOnlyData">
            <summary>
            While <see cref="P:FlexCel.Core.ExcelFile.ColCount" /> will return the maximum column including both data and formatted cols, this method
            doesn't include formatted cols, only cells with data, and it is normally what you need to use.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ColFormatCount">
            <summary>
            Returns the number of formatted columns in the file. Note that in xlsx files this number can be very big.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)">
            <param name="row">Row (1 based)</param>
            <param name="colIndex">The index on the column list for the row. (1 based)</param>
            <summary>
            This is the column (1 based) for a given ColIndex. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" /> for an example.
            </summary>
            <returns>The column (1 based) for the corresponding item.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row (1 based)</param>
            <param name="colIndex">The index on the column list for the row. (1 based)</param>
            <summary>
            This is the column (1 based) for a given ColIndex and sheet. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" /> for an example.
            </summary>
            <returns>The column (1 based) for the corresponding item.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode)">
            <param name="level">Level that we want to display from the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the left of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <summary>
            Collapses or expands the column outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the left of the outline gutter in Excel.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <param name="level">Level that we want to display from the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the left of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <param name="firstCol">This defines the first column of the range to collapse/expand. Only columns inside that range will be modified.</param>
            <param name="lastCol">This defines the last column of the range to collapse/expand. Only columns inside that range will be modified.</param>
            <summary>
            Collapses or expands the column outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineNodeCol(System.Int32,System.Boolean)">
            <param name="col">Column to expand or collapse. (1 based)</param>
            <param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
            <summary>
            Use this method to collapse a node of the outline. If the column is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeCol(System.Int32)" /> is false) this method does nothing.
            While this method allows a better control of the columns expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode)" /> to collapse or
            expand all columns in a sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineNodeRow(System.Int32,System.Boolean)">
            <param name="row">Row to expand or collapse (1 based)</param>
            <param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
            <summary>
            Use this method to collapse a node of the outline. If the row is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeRow(System.Int32)" /> is false) this method does nothing.
            While this method allows a better control of the rows expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode)" /> to collapse or
            expand all rows in a sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode)">
            <param name="level">Level that we want to show of the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the top of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <summary>
            Collapses or expands the row outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <param name="level">Level that we want to show of the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the top of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <param name="firstRow">This defines the first row of the range to collapse/expand. Only rows inside that range will be modified.</param>
            <param name="lastRow">This defines the last row of the range to collapse/expand. Only rows inside that range will be modified.</param>
            <summary>
            Collapses or expands the row outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ColorPaletteCount">
            <summary>
            The number of entries on an Excel color palette. This is  always 56.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)">
            <param name="row">Row (1 based)</param>
            <param name="col">Column (1 based)</param>
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" />. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary>
            <returns>The index on the column list for the row. (1 based)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row (1 based)</param>
            <param name="col">Column (1 based)</param>
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" />. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary>
            <returns>The index on the column list for the row. (1 based)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)">
            <param name="row">Row index (1 based)</param>
            <summary>
            Number of comments on a given row.
            </summary>
            <returns>The number of comments on a given row.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CommentRowCount">
            <summary>
            Maximum row index including comments.
            </summary>
            <returns>The maximum row with a comment.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)">
            <param name="format">Original format of the cell.</param>
            <param name="row">Row of the cell (1 based)</param>
            <param name="col">Column of the cell (1 based)</param>
            <summary>
            Modifies the format of the specified cell if it has a conditional format active.
            Returns a modified format with the applied conditional format if there was any change, null otherwise.
            </summary>
            <returns>If the format is modified by a conditional format, it returns the new format.
            If there are no changes returns null, to avoid creating new instances of TFlxFormat.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors">
            <summary>
            Use it to convert the external names in a sheet to #REF! . It can be useful when you need to remove all external links in a file. 
            NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)" /> too.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors(System.Boolean)">
            <param name="recalcBeforeConverting">If true (the default), FlexCel will try to recalculate the file before converting the formulas.
            Use false when for any reason FlexCel can't recalculate the values (for example if you have links to other files that don't exist anymore)</param>
            <summary>
            Use it to convert the external names in a sheet to #REF! . It can be useful when you need to remove all external links in a file. 
            NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)" /> too.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)">
            <param name="onlyExternal">When true, it will only convert the formulas that do not refer to the same sheet.
            For example "=A1+Sheet2!A1" will be converted, but "=A2+A3" will not.
            </param>
            <summary>
            Use it to convert formulas to their values. It can be useful if for example you are copying the sheet to
            another workbook, and you don't want any references to it. NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors(System.Boolean)" /> too, to convert named ranges besides the formulas.<br />
            Also note that if you want to convert a whole file, you need to call ConvertFormulasToValues in every sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean,System.Boolean)">
            <param name="onlyExternal">When true, it will only convert the formulas that do not refer to the same sheet.
            For example "=A1+Sheet2!A1" will be converted, but "=A2+A3" will not.
            </param>
            <param name="recalcBeforeConverting">If true (the default), FlexCel will try to recalculate the file before converting the formulas.
            Use false when for any reason FlexCel can't recalculate the values (for example if you have links to other files that don't exist anymore)</param>
            <summary>
            Use it to convert formulas to their values. It can be useful if for example you are copying the sheet to
            another workbook, and you don't want any references to it. NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors(System.Boolean)" /> too, to convert named ranges besides the formulas.<br />
            Also note that if you want to convert a whole file, you need to call ConvertFormulasToValues in every sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertString(FlexCel.Core.TRichString,System.Int32@)">
            <param name="value">RichString to convert.</param>
            <param name="XF">XF of the cell. It might be modified, for example, if you are entering a date.</param>
            <summary>
            Converts a string into the best datatype (a boolean, a number, etc)
            </summary>
            <returns>value converted to the best datatype.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertString(FlexCel.Core.TRichString,System.Int32@,System.String[])">
            <param name="value">RichString to convert.</param>
            <param name="XF">XF of the cell. It might be modified, for example, if you are entering a date.</param>
            <param name="dateFormats">A list of formats allowed for dates and times. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values.</param>
            <summary>
            Converts a string into the best datatype (a boolean, a number, etc)
            </summary>
            <returns>value converted to the best datatype.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyCell(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TRangeCopyMode)">
            <param name="sourceWorkbook">File from where we want to copy the cell.</param>
            <param name="sourceSheet">Sheet in sourceWorkbook where the data is.</param>
            <param name="destSheet">Sheet in this file where we want to copy the data.</param>
            <param name="sourceRow">Row on the source file of the cell (1 based)</param>
            <param name="sourceCol">Column on the source file of the cell (1 based)</param>
            <param name="destRow">Row on the destination file of the cell (1 based)</param>
            <param name="destCol">Column on the destination file of the cell (1 based)</param>
            <param name="copyMode">How the cell will be copied.</param>
            <summary>
            Copies <b>one</b> cell from one workbook to another. If the cell has a formula, it will be offset so it matches the new destination.
            <b>Note:</b> You will normally not need this method. To copy a range of cells from a workbook to another use 
            <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32)" /> instead.
            To copy a full sheet from one file to another, use <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyColFormats(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="sourceWorkbook">The workbook from where the column formats will be copied. If you set this to null, the column formats will
            be copied from the same file.</param>
            <param name="sourceSheet">Sheet in the source workbook from where we will copy the column formats.</param>
            <param name="sourceCol">First column format to copy</param>
            <param name="destCol">First column where the format will be copied.</param>
            <param name="colCount">Number of columns to copy.</param>
            <summary>
            Copies the column definitions, that is formats, widths, hidden/visible, etc from one workbook or sheet to another.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyToClipboard(FlexCel.Core.FlexCelClipboardFormat,System.IO.Stream)">
            <param name="clipboardFormat">Format you want to copy into outStream.</param>
            <param name="outStream">Stream were the information will be copied. If null nothing will be done.</param>
            <summary>
            Copies the active sheet to a clipboard stream, on the format you specify.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyToClipboard(System.Text.StringBuilder,System.IO.Stream)">
            <param name="textString">StringBuilder where the text will be copied. Leave it null to not copy to text.</param>
            <param name="xlsStream">Stream where the xls native info will be copied. Make it null to not copy to xls native.</param>
            <summary>
            Copies the active sheet to a clipboard stream, on native and text formats.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyToClipboardFormat(FlexCel.Core.FlexCelClipboardFormat,FlexCel.Core.TXlsCellRange,System.IO.Stream)">
            <param name="clipboardFormat">Format you want to copy into outStream.</param>
            <param name="range">Range with the cells to copy.</param>
            <param name="outStream">Stream where the clipboard info will be copied. If null, nothing will be copied.</param>
            <summary>
            Copies a range on the active sheet to a clipboard stream, on the specified format.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyToClipboardFormat(FlexCel.Core.TXlsCellRange,System.Text.StringBuilder,System.IO.Stream)">
            <param name="range">Range with the cells to copy.</param>
            <param name="textString">StringBuilder where the text will be copied. Leave it null to not copy to text.</param>
            <param name="xlsStream">Stream where the xls native info will be copied. If null no native data will be copied.</param>
            <summary>
            Copies a range on the active sheet to a clipboard stream, on native and text formats.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.CustomXmlPartCount">
            <summary>
            Returns the number of custom xml parts in the active document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DataValidationCount">
            <summary>
            Returns the number of DataValidation structures in the active sheet. 
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number"><item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)" /> to return the data validation in the cell.</item><item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount" />, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)" /> to loop over all existing data validations.</item></list></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultColWidth">
            <summary>
            The default width for empty columns, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultFileFormat">
            <summary>
            Determines the default file format used by Excel when saving a file without specifying one, and when the file format can't be 
            determined from the extension of the file. If set to Automatic (The default) the file will be saved in the same format it was opened.
            That is, if you opened an xlsx file it will be saved as xlsx. If you opened an xls file (or created it with XlsFile.NewFile()) it will be saved as xls.
            When this property is automatic, text files will be saved as xls.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultFormatId">
            <summary>
            Returns XF identifier for the style that applies to all empty cells. Note that this is different
            from the "Normal" style as defined inside Excel. This is a "Cell" format that can be applied to cells,
            while "Normal" is a "Style" format that is applied to this cell format.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultRowHeight">
            <summary>
            The default height for empty rows, in Excel internal units. (1/20th of a point). <b>IMPORTANT: </b> For this property
            to have any effect, you also need to set <see cref="P:FlexCel.Core.ExcelFile.DefaultRowHeightAutomatic" /> = false
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultRowHeightAutomatic">
            <summary>
            When this property is true, the row height for empty rows is calculated with the height of the "Normal" font and will
            change if you change the Normal style. When false, the value in <see cref="P:FlexCel.Core.ExcelFile.DefaultRowHeight" /> will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultRowHidden">
            <summary>
            When this property is true, rows with no data are hidden by default.
            Note that this property only affects the visibility of empty rows. If for example row 6 is empty and you have this property true,
            then row 6 will be hidden. But if you write any value in a cell in row 6, then the row won't be empty anymore, and it won't be
            hidden anymore either.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteHPageBreak(System.Int32)">
            <param name="row">Row where to delete the Page break.</param>
            <summary>
            Deletes all manual page breaks at row. If there is no manual page break on row, this method will do nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteHyperLink(System.Int32)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <summary>
            Deletes an existing hyperlink.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteImage(System.Int32)">
            <param name="imageIndex">Index of the image to delete. (1 based)</param>
            <summary>
            Deletes the image at position imageIndex.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteNamedRange(System.Int32)">
            <param name="index">Index of the name to delete (1 based).</param>
            <summary>
            Deletes the name at the specified position. <b>Important:</b> If the name you are trying to delete is referenced by any formula/chart/whatever in your file,
            the name will <b>not actually be deleted</b> but hidden. <br /> 
            You won't see the name in Excel or in the formula, but it will be there and you can see it from FlexCel.<br />You can use <see cref="M:FlexCel.Core.ExcelFile.GetUsedNamedRanges" /> to learn if a range might be deleted.<br /><i>Also, note that if you later delete the formulas that reference those ranges FlexCel will remove those hanging ranges when saving.</i>
            The only hidden ranges that will be present in the final file will be those that have active formulas referencing them.
            <br /><br /><b>Important:</b>If the name wasn't deleted, <see cref="P:FlexCel.Core.ExcelFile.NamedRangeCount" /> will not change. This means that you can't have code like this:
            <code>
              while (xls.NamedRangeCount &gt; 0) //WRONG! This loop might never end.
              {
                xls.DeleteNamedRange(1);  //Might not be deleted, and NamedRangeCount will never be 0.
              }
            </code><br />
            The correct code in this case would be:
            <code>
              for (int i = xls.NamedRangeCount; i &gt; 0; i--) xls.DeleteNamedRange(i);
            </code><br /><code lang="vbnet">
              For i = xls.NamedRangeCount To 1 Step -1 xls.DeleteNamedRange(i);
            </code><br /><code lang="Delphi .NET" title="Delphi .NET">
              for i := xls.NamedRangeCount downto 1 do xls.DeleteNamedRange(i);
            </code></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteObject(System.Int32)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteObject(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteRange(FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode)">
            <param name="cellRange">Range of cells to delete.</param>
            <param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteRange(System.Int32,System.Int32,FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode)">
            <param name="sheet1">First sheet where to delete cells.</param>
            <param name="sheet2">Last sheet where to delete cells.</param>
            <param name="cellRange">Range of cells to delete.</param>
            <param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteRange(System.Int32,System.Int32,FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode,System.Boolean)">
            <param name="sheet1">First sheet where to delete cells.</param>
            <param name="sheet2">Last sheet where to delete cells.</param>
            <param name="cellRange">Range of cells to delete.</param>
            <param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
            <param name="removeFormats">If true, both formatting and data will be removed from the range, when clearing a range.
            This parameter has no effect if insertmode isn't one of the "none" options, because if it isn't the full range will move up or left.
            </param>
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteSheet(System.Int32)">
            <param name="aSheetCount">The number of sheets to delete</param>
            <summary>
            Deletes the active sheet and aSheetCount-1 sheets more to the right. 
            It will change all formula references to those sheets to invalid. 
            Note that to add a sheet, you need to use <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.ClearSheet" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteStyle(System.String)">
            <param name="name">Name for the style. It must be an user defined name.</param>
            <summary>
            Returns a named style for the workbook.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteVPageBreak(System.Int32)">
            <param name="col">Column where to delete the Page break</param>
            <summary>
            Deletes all manual page breaks at col. If there is no manual page break on col, this method will do nothing.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DocumentProperties">
            <summary>
            Document properties for the file. With this object you can read the properties (Author, Title, etc.) of a file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DpiForImages">
            <summary>
            Allows you to change the dpi for vector images (metafiles) when they are rasterized
            for converting to PDF / HTML / etc. Note that this is a static setting and will
            affect all files. This setting is the same as FlexCelConfig.DpiForImages.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.EncodingNotNull(System.Text.Encoding)">
            <param name="enc" />
            <summary>
            Returns UTF8 if the parameter is null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ErrorActions">
            <summary>
            Determines if FlexCel will throw Exceptions or just ignore errors on specific situations. If you are trying to recover corrupt files, 
            you might also want to check <see cref="P:FlexCel.Core.ExcelFile.RecoveryMode" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.EvaluateUserDefinedFunction(System.String,FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="functionName">Function you want to evaluate.</param>
            <param name="arguments">Extra arguments you can use to evaluate the formula.</param>
            <param name="parameters">Parameters for the formula.</param>
            <summary>
            Evaluates a custom function you have added earlier with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)" />. You will not normally need to call this method, but it could be used for testing.
            If the function has not been added with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)" />, this method will return <see cref="F:FlexCel.Core.TFlxFormulaErrorValue.ErrName" />.
            </summary>
            <returns>The result of evaluating the formula. It might be a string, a double, a boolean, a TFlxFormulaError or an Array.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ExcelFileFormat">
            <summary>
            Empty files created by different versions of Excel can have different characteristics. For example, the default font in an Excel 2003 
            file is Arial, while the default in 2007 is Calibri. This property returns the version of file that is loaded into FlexCel.
            When calling <see cref="M:FlexCel.Core.ExcelFile.NewFile(System.Int32,FlexCel.Core.TExcelFileFormat)" /> or when opening a new file, FlexCel will update the value of this property.
            /// </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ExcelVersion">
            <summary>
            Defines the Excel mode used in this thread.
            Note that while on v2007 (the default) you still can make xls 97 spreadsheets, so the only reason to change this setting
            is if you have any compatibility issues (for example your code depends on a sheet having 65536 rows).
            <b>IMPORTANT: Do NOT change this value after reading a workbook</b>. Also, remember that the value is changed for all the reports in all threads.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.IO.TextWriter,FlexCel.Core.TXlsCellRange,System.Char,System.Boolean)">
            <param name="aTextWriter">TextWriter where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="delimiter">Character used to delimit the fields in the exported file. You might normally use a comma (',') or a tab here. </param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (character delimited columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.IO.Stream,FlexCel.Core.TXlsCellRange,System.Char,System.Boolean,System.Text.Encoding)">
            <param name="aStream">Stream where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="delimiter">Character used to delimit the fields in the exported file. You might normally use a comma (',') or a tab here. </param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="fileEncoding">Encoding for the generated file. If you are unsure, you can use Encoding.UTF8 here. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (character delimited columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.IO.TextWriter,FlexCel.Core.TXlsCellRange,System.Int32,System.Int32[],System.Boolean)">
            <param name="aTextWriter">TextWriter where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="charactersForFirstColumn">This value only has effect if columnWidths is null. It will specify how many characters
            to use for the first column, and all other columns will be determined according to their ratio with the first.<br />For example, if the first column is 150 pixels wide and you specify "8" for this parameter, the first column will be padded to 8 characters when exporting.
            If the second column is 300 pixels wide, then it will be padded to 16 characters and so on. As this might not be 100% exact and depend in pixel measurements,
            you might want to specify columnWidths parameter instead of using this one. <br />
            Note: Setting this parameter to a negative value will assume the text in the columns is already padded, and won't attempt to do any padding.
            Use this value if your data is padded in the spreadsheet itself.
            </param>
            <param name="columnWidths">Array with the number of characters that will be assigned to every column when exporting. Supplying this array
            allows you to specify exactly how many characters you want for every field, and that might be really necessary to interop with other applications.
            But you can also leave this parameter null and specify "charactersForFirstColumn" to let FlexCel calculate how many characters to apply for every field.</param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (fixed length columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.String,FlexCel.Core.TXlsCellRange,System.Char,System.Boolean,System.Text.Encoding)">
            <param name="fileName">File where we want to save the data.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="delimiter">Character used to delimit the fields in the exported file. You might normally use a comma (',') or a tab here. </param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="fileEncoding">Encoding for the generated file. If you are unsure, you can use Encoding.UTF8 here. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (character delimited columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.IO.Stream,FlexCel.Core.TXlsCellRange,System.Int32,System.Int32[],System.Boolean,System.Text.Encoding)">
            <param name="aStream">Stream where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="charactersForFirstColumn">This value only has effect if columnWidths is null. It will specify how many characters
            to use for the first column, and all other columns will be determined according to their ratio with the first.<br />For example, if the first column is 150 pixels wide and you specify "8" for this parameter, the first column will be padded to 8 characters when exporting.
            If the second column is 300 pixels wide, then it will be padded to 16 characters and so on. As this might not be 100% exact and depend in pixel measurements,
            you might want to specify columnWidths parameter instead of using this one. <br />
            Note: Setting this parameter to a negative value will assume the text in the columns is already padded, and won't attempt to do any padding.
            Use this value if your data is padded in the spreadsheet itself.
            </param>
            <param name="columnWidths">Array with the number of characters that will be assigned to every column when exporting. Supplying this array
            allows you to specify exactly how many characters you want for every field, and that might be really necessary to interop with other applications.
            But you can also leave this parameter null and specify "charactersForFirstColumn" to let FlexCel calculate how many characters to apply for every field.</param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="fileEncoding">Encoding for the generated file. If you are unsure, you can use Encoding.UTF8 here. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (fixed length columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.IO.TextWriter,FlexCel.Core.TXlsCellRange,System.Int32,System.Int32[],System.Boolean,System.Boolean)">
            <param name="aTextWriter">TextWriter where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="charactersForFirstColumn">This value only has effect if columnWidths is null. It will specify how many characters
            to use for the first column, and all other columns will be determined according to their ratio with the first.<br />For example, if the first column is 150 pixels wide and you specify "8" for this parameter, the first column will be padded to 8 characters when exporting.
            If the second column is 300 pixels wide, then it will be padded to 16 characters and so on. As this might not be 100% exact and depend in pixel measurements,
            you might want to specify columnWidths parameter instead of using this one. <br />
            Note: Setting this parameter to a negative value will assume the text in the columns is already padded, and won't attempt to do any padding.
            Use this value if your data is padded in the spreadsheet itself.
            </param>
            <param name="columnWidths">Array with the number of characters that will be assigned to every column when exporting. Supplying this array
            allows you to specify exactly how many characters you want for every field, and that might be really necessary to interop with other applications.
            But you can also leave this parameter null and specify "charactersForFirstColumn" to let FlexCel calculate how many characters to apply for every field.</param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="exportTextOutsideCells">If true and the cell text spans over more than one empty cell to the right, that text will be exported. When false (the default) only text that fits in the cell will be exported.
            When this value is true the printout will look better, but it will not be possible to reimport the data as the columns are lost.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (fixed length columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.String,FlexCel.Core.TXlsCellRange,System.Int32,System.Int32[],System.Boolean,System.Text.Encoding)">
            <param name="fileName">File where we want to save the data.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="charactersForFirstColumn">This value only has effect if columnWidths is null. It will specify how many characters
            to use for the first column, and all other columns will be determined according to their ratio with the first.<br />For example, if the first column is 150 pixels wide and you specify "8" for this parameter, the first column will be padded to 8 characters when exporting.
            If the second column is 300 pixels wide, then it will be padded to 16 characters and so on. As this might not be 100% exact and depend in pixel measurements,
            you might want to specify columnWidths parameter instead of using this one. <br />
            Note: Setting this parameter to a negative value will assume the text in the columns is already padded, and won't attempt to do any padding.
            Use this value if your data is padded in the spreadsheet itself.
            </param>
            <param name="columnWidths">Array with the number of characters that will be assigned to every column when exporting. Supplying this array
            allows you to specify exactly how many characters you want for every field, and that might be really necessary to interop with other applications.
            But you can also leave this parameter null and specify "charactersForFirstColumn" to let FlexCel calculate how many characters to apply for every field.</param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="fileEncoding">Encoding for the generated file. If you are unsure, you can use Encoding.UTF8 here. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (fixed length columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.IO.Stream,FlexCel.Core.TXlsCellRange,System.Int32,System.Int32[],System.Boolean,System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="charactersForFirstColumn">This value only has effect if columnWidths is null. It will specify how many characters
            to use for the first column, and all other columns will be determined according to their ratio with the first.<br />For example, if the first column is 150 pixels wide and you specify "8" for this parameter, the first column will be padded to 8 characters when exporting.
            If the second column is 300 pixels wide, then it will be padded to 16 characters and so on. As this might not be 100% exact and depend in pixel measurements,
            you might want to specify columnWidths parameter instead of using this one. <br />
            Note: Setting this parameter to a negative value will assume the text in the columns is already padded, and won't attempt to do any padding.
            Use this value if your data is padded in the spreadsheet itself.
            </param>
            <param name="columnWidths">Array with the number of characters that will be assigned to every column when exporting. Supplying this array
            allows you to specify exactly how many characters you want for every field, and that might be really necessary to interop with other applications.
            But you can also leave this parameter null and specify "charactersForFirstColumn" to let FlexCel calculate how many characters to apply for every field.</param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="fileEncoding">Encoding for the generated file. If you are unsure, you can use Encoding.UTF8 here. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <param name="exportTextOutsideCells">If true and the cell text spans over more than one empty cell to the right, that text will be exported. When false (the default) only text that fits in the cell will be exported.
            When this value is true the printout will look better, but it will not be possible to reimport the data as the columns are lost.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (fixed length columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Export(System.String,FlexCel.Core.TXlsCellRange,System.Int32,System.Int32[],System.Boolean,System.Text.Encoding,System.Boolean)">
            <param name="fileName">File where we want to save the data.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="charactersForFirstColumn">This value only has effect if columnWidths is null. It will specify how many characters
            to use for the first column, and all other columns will be determined according to their ratio with the first.<br />For example, if the first column is 150 pixels wide and you specify "8" for this parameter, the first column will be padded to 8 characters when exporting.
            If the second column is 300 pixels wide, then it will be padded to 16 characters and so on. As this might not be 100% exact and depend in pixel measurements,
            you might want to specify columnWidths parameter instead of using this one. <br />
            Note: Setting this parameter to a negative value will assume the text in the columns is already padded, and won't attempt to do any padding.
            Use this value if your data is padded in the spreadsheet itself.
            </param>
            <param name="columnWidths">Array with the number of characters that will be assigned to every column when exporting. Supplying this array
            allows you to specify exactly how many characters you want for every field, and that might be really necessary to interop with other applications.
            But you can also leave this parameter null and specify "charactersForFirstColumn" to let FlexCel calculate how many characters to apply for every field.</param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="fileEncoding">Encoding for the generated file. If you are unsure, you can use Encoding.UTF8 here. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <param name="exportTextOutsideCells">If true and the cell text spans over more than one empty cell to the right, that text will be exported. When false (the default) only text that fits in the cell will be exported.
            When this value is true the printout will look better, but it will not be possible to reimport the data as the columns are lost.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (fixed length columns).
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.FileFormatWhenOpened">
            <summary>
            Returns the file format that the file had when it was opened. If the file was created with <see cref="M:FlexCel.Core.ExcelFile.NewFile" />, the
            file format when opened is xls.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)">
            <param name="fullText">Header or footer text.</param>
            <param name="leftText">Text that should be left justified.</param>
            <param name="centerText">Text that should be centered.</param>
            <param name="rightText">Text that should be right justified.</param>
            <summary>
            Given a Page Header or footer string including macros (like [FileName] or [PageNo]), this method
            will return the strings that go into the left, right and middle sections.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Find(System.Object,FlexCel.Core.TXlsCellRange,FlexCel.Core.TCellAddress,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="value">Value we are searching.</param>
            <param name="Range">Range to Search. Null means the whole worksheet.</param>
            <param name="Start">Cell where to start searching. For the first time, use null. After this, you can use the result of this method to get the next cell.</param>
            <param name="ByRows">If true, the value will be searched down then left. If false, the search will go left then down. SEARCH IS FASTER WHEN BYROWS = FALSE</param>
            <param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param>
            <param name="SearchInFormulas">If true, the search will cover formulas too.</param>
            <param name="WholeCellContents">If true, only whole cells will be replaced.</param>
            <summary>
            Finds a value inside a cell and returns the position for the cell, or null if nothing was found.
            </summary>
            <returns>Cell where the string is found, or null if it is not found.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FindNamedRange(System.String,System.Int32)">
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param>
            <summary>
            Returns the index (1 based) on the list of named ranges for a given name and local sheet. If the range is not found, this method will return -1
            You could use <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.Int32)" /> to get the name definition, or directly call <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)" />
            to get a named range knowing its name and sheet position.
            </summary>
            <returns>The index (1 based) in the list of named ranges, or -1 if the range is not found.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FindObject(System.String)">
            <param name="objectName">Object name to search for. This is case insensitive.</param>
            <summary>
            Returns the object index for an existing name. Whenever possible you should prefer to use <see cref="M:FlexCel.Core.ExcelFile.FindObjectPath(System.String)" />
            instead of this method, since it is faster and finds also objects that are not in the root branch.
            </summary>
            <returns>-1 if the object is not found, or the object index otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FindObjectByShapeId(System.Int64)">
            <param name="ShapeId">Shape id of the object.</param>
            <summary>
            Finds an object given its internal shape id, and returns the object index you need to access the same object in FlexCel.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FindObjectPath(System.String)">
            <param name="objectName">Name of the object we are looking for.</param>
            <summary>
            Finds an object by its name, and returns the ObjectPath you need to use this object.
            Note that if there is more than an object with the same name in the sheet, this method 
            will return null
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.FirstSheetVisible">
            <summary>
            This is the first sheet that will be visible in the bar of sheet tabs at the bottom. Normally you will want this to be 1.
            Note that every time you change <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> this value gets reset, because it makes no sense to preserve it.
            <br />If you want to change it, change it before saving. The same way, to read it, read it just after opening the file.
            <br />Please also note that if the first sheet you select is hidden, FlexCel will ignore this value and select a visible sheet. (otherwise Excel would crash)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.ExcelFile.FIsLightClone">
            <summary>
            If true, this class was created by cloning another.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.FontCount">
            <summary>
            Number of fonts defined in all the sheet. When calling GetFont(fontIndex), 0&lt;=fontIndex&lt;FormatCount.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.FormatCount">
            <summary>
            Number of custom formats defined in all the file. When calling GetFormat(XF), 0&lt;=XF&lt;FormatCount.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.FormulaReferenceStyle">
            <summary>
            Specifies which reference style to use when entering formulas: A1 or R1C1. Note that this property is different from
            <see cref="P:FlexCel.Core.ExcelFile.OptionsR1C1" />. OptionsR1C1 modifies a property of the file, that handles how references will show in Excel.
            <br /> This property modifies how FlexCel parses or returns the formulas, and has no effect at all in the file generated.
            <br /><br />Also note that R1C1 and A1 modes are completely equivalent, and formulas are <b>always stored as A1</b> inside the
            generated files. This property only affects the parsing of the formulas, the file generated will be exactly the same no
            matter the value of this property. And Excel will show it in A1 or R1C1 mode depending only in <see cref="P:FlexCel.Core.ExcelFile.OptionsR1C1" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)">
            <param name="cell">All rows and columns above and to the left of this cell will be frozen. Set it to null or "A1" to unfreeze the panes.</param>
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Freeze Panes. It will freeze
            the rows and columns above and to the left from cell. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)" /> the panes are suppressed and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetFrozenPanes" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetAutoFilterRange">
            <summary>
            Returns the range of cells with AutoFilter in the Active sheet, or null if there is not AutoFilter. The "Bottom"
            coordinate of the returned range has no meaning, only Top, left and right are used. (since AutoFilters only have one row).
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetAutoRowHeight(System.Int32)">
            <param name="row">Row index (1-based)</param>
            <summary>
            Returns if the row is adjusting its size to the cell (the default) or if it has a fixed height.
            </summary>
            <returns>True if AutoFit is on for the row, False if it has a fixed size</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)">
            <param name="style">Style you want find out the name.</param>
            <param name="level">Used only if style is <see cref="F:FlexCel.Core.TBuiltInStyle.RowLevel" /> or <see cref="F:FlexCel.Core.TBuiltInStyle.ColLevel" />. It specifies the level of the outline,
            and must be a number between 1 and 7. Keep it 0 for all other styles.</param>
            <summary>
            Returns the name for a built-in style.
            </summary>
            <returns>The name for the Built in style.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCachedFont0">
            <summary>
            This method is used by FlexCel itself, you shouldn't call it directly.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
             Cell Format for a given cell
             This method gets the Format number (XF) of a cell. 
             You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
             <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)" /></summary>
            <returns>XF for the cell.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based).</param>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
             Cell Format for a given cell
             This method gets the Format number (XF) of a cell. 
             You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
             <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)" /></summary>
            <returns>XF for the cell.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValue(System.Int32,System.Int32)">
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <summary>
            Reads a Cell Value.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValue(System.Int32,System.Int32,System.Int32@)">
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="XF">XF format.</param>
            <summary>
            Reads a Cell Value and Format.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             a <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValue(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <param name="sheet">Sheet where is the cell you want to get the value.</param>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="XF">XF format.</param>
            <summary>
            Reads a Cell Value and Format from a sheet that is not the active sheet.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             a <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValueIndexed(System.Int32,System.Int32,System.Int32@)">
            <param name="row">Row, 1 based.</param>
            <param name="colIndex">Column index, 1 based.</param>
            <param name="XF">XF format.</param>
            <summary>
            Reads a Cell Value and Format, using a column index for faster access. Normal GetCellValue(row, col)
            has to search for the column on a sorted list. If you are looping from 1 to <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" />
            this method is faster.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             a <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValueIndexed(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <param name="sheet">Sheet where the cell is, 1 based.</param>
            <param name="row">Row, 1 based.</param>
            <param name="colIndex">Column index, 1 based.</param>
            <param name="XF">XF format.</param>
            <summary>
            Reads a Cell Value and Format, using a column index for faster access. Normal GetCellValue(row, col)
            has to search for the column on a sorted list. If you are looping from 1 to <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" />
            this method is faster.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             a <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /></remarks><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32)" /></summary>
            <returns>XF for the cell</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based)</param>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /></remarks><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32)" /></summary>
            <returns>XF for the cell</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" />
            This is a shortcut for GetCellVisibleFormat, returning the final Format struct.
            </remarks><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)" /></summary>
            <returns>Format for the cell</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet index. (1 based)</param>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" />
            This is a shortcut for GetCellVisibleFormat, returning the final Format struct.
            </remarks><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)" /></summary>
            <returns>Format for the cell</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetChart(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object where the chart is.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns a chart from an object position and path. If the object does not contain a chart, it returns null.
            Note that charts can be first-level objects (in chart sheets), or they can be embedded inside other objects, that can be
            themselves embedded inside other objects. So you need to recursively look inside all objects to see if there are charts anywhere. <br />
            Look at the example in this topic to see how to get all charts in a sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCheckboxLinkedCell(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the cell that is linked to the checkbox. If the object isn't a checkbox or it isn't linked, this method
            will return null. Note that when you change the value in the cell linked to this checkbox, the value of the checkbox will change.
            <br />The sheet returned in the TCellAddress might be null, in which case the reference is to a cell in the same sheet, or it might
            contain another sheet name.
            </summary>
            <returns>The cell address this checkbox is linked to, or null if it isn't linked. </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCheckboxState(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Gets the value of a checkbox in the active sheet. Note that this only works for <b>checkboxes added through the Forms toolbar.</b> 
            It won't return the values of ActiveX checkboxes.
            </summary>
            <returns>If the checkbox is checked or not.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColCount(System.Int32)">
            <param name="sheet">Sheet index where you want to find the columns (1 based)</param>
            <summary>
            Number of columns actually used on a given sheet. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColCount(System.Int32,System.Boolean)">
            <param name="sheet">Sheet index where you want to find the columns (1 based)</param>
            <param name="includeFormattedColumns">If true (the default) formatted columns (for example a column you selected and painted yellow)
            will be included in the count, even if it doesn't have data.
            </param>
            <summary>
            Number of columns actually used on a given sheet. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColFormat(System.Int32)">
            <param name="col">Column index (1-based)</param>
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColFormat(System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based).</param>
            <param name="col">Column index (1-based)</param>
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColHidden(System.Int32)">
            <param name="col">Column index (1 based)</param>
            <summary>
            Returns true if the column is hidden.
            </summary>
            <returns>True if the column is hidden.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColOptions(System.Int32)">
            <param name="col">Column Index (1 based)</param>
            <summary>
            Returns all Column options at once (if the column is hidden, etc). 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32)">
            <param name="index">Index of the entry to return. Must be 1&lt;=index&lt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" /></param>
            <summary>
            Returns a color from the color palette. This method will throw an exception if its "index" parameter
            is bigger than <see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" />, (for example, for an automatic color).
            To get the real color, use <see cref="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32,FlexCel.Core.TUIColor)" /></summary>
            <returns>Color at position index.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32,FlexCel.Core.TUIColor)">
            <param name="index" />
            <param name="automaticColor" />
            <summary>
            Returns a color from the color palette. If the index is not into the range 1&lt;=index&lt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" />
            this method will return the automaticColor.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColorPaletteVersion">
            <summary>
            Internal use. Every time the palette changes, the number returned is incremented. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColorTheme(FlexCel.Core.TThemeColor)">
            <param name="themeColor">Color of the theme to get.</param>
            <summary>
            Returns a color from the active theme palette. 
            Only has effect in Excel 2007.
            <br /> To get the full theme, look at <see cref="M:FlexCel.Core.ExcelFile.GetTheme" /></summary>
            <returns>Color for the given theme.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColOutlineLevel(System.Int32)">
            <param name="col">Column index (1 based)</param>
            <summary>
            Returns the Outline level for a column.
            </summary>
            <returns>Outline level for a column. It is a number between 0 and 7.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColumnBlocks(System.Int32,System.Int32,System.Int32)">
            <param name="sourceSheet">Sheet where we want to read the columns. Pass ActiveSheet if you want to read the current sheet.</param>
            <param name="firstCol">First column of the range where we want to get information. The first block returned might have a firstCol
            smaller than this value, if the block actually starts before in the file.</param>
            <param name="lastCol">Last column of the range where we want to get information. The last block returned might have a lastCol
            bigger than this value, if the block in the file continues after this column.</param>
            <summary>
            This method returns a list of blocks of column information, grouped by columns that have the same properties.
            Since an xlsx file can have 16384 columns, querying every one of them might be slow. With this method, if columns from
            5 to 16384 are hidden, you will get a single block with firstCol = 5 and lastCol = 16384 that is hidden. If you used <see cref="M:FlexCel.Core.ExcelFile.GetColHidden(System.Int32)" />
            instead you would have to call it 16384 times to get the same information.
            </summary>
            <returns>A list of blocks of columns that include all the columns between firstCol and lastCol. The blocks might include more columns outside the range too,
            and null columns inside the range will not be returned. All blocks are sorted in ascending order.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColWidth(System.Int32)">
            <param name="col">Column Index (1 based)</param>
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of "font 0" / 256)
            </summary>
            <returns>Column width in internal excel units.(Character width of "font 0" / 256)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColWidth(System.Int32,System.Boolean)">
            <param name="col">Column Index (1 based)</param>
            <param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param>
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColWidth(System.Int32,System.Int32,System.Boolean)">
            <param name="sheet">Sheet where to look for the width.</param>
            <param name="col">Column Index (1 based)</param>
            <param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param>
            <summary>
            Returns the current Column width for a given sheet, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <summary>
            Returns the comment at the specified row and column, or an empty string if there is no comment on that cell.
            </summary>
            <returns>The comment on the specified cell, String.Empty if there is no comment on it.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentProperties(System.Int32,System.Int32)">
            <param name="row">Row index (1 based).</param>
            <param name="col">Column index (1 based)</param>
            <summary>
            Gets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will return null.
            </summary>
            <returns>Placement of the comment popup.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)">
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <summary>
            Returns the comment properties for the popup at position commentIndex
            </summary>
            <returns>The comment properties.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)">
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based). See <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)" /></param>
            <summary>
            Returns the comment at position commentIndex on the specified row.
            </summary>
            <returns>Comment at the specified position.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)">
            <param name="row">Row with the comment. (1 based)</param>
            <param name="commentIndex">Index of the comment (1 based)</param>
            <summary>
            Returns the column for comment at position commentIndex
            </summary>
            <returns>The column index corresponding to the comment.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCustomXmlPart(System.Int32)">
            <param name="position">1-based index in the collection of custom parts.</param>
            <summary>
            Returns the part at the given position. (1 based)
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)">
            <param name="row">Row of the cell (1 based)</param>
            <param name="col">Column of the cell (1 based)</param>
            <summary>
            Returns the validation information for an specific cell. If the cell has no Data Validation associated, this method returns null.
            </summary>
            <returns>The data validation for a cell, or null if the cell has no Data Validation associated.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32,FlexCel.Core.TXlsCellRange@)">
            <param name="row">Row of the cell (1 based)</param>
            <param name="col">Column of the cell (1 based)</param>
            <param name="dvRange">Range of cells where the data validation is applied.</param>
            <summary>
            Returns the validation information for an specific cell. If the cell has no Data Validation associated, this method returns null.
            </summary>
            <returns>The data validation for a cell, or null if the cell has no Data Validation associated.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)">
            <param name="index">Position in the list of data validations. (1 based)</param>
            <summary>
            Returns the data validation information for an entry of the index.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number"><item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)" /> to return the data validation in the cell.</item><item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount" />, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)" /> to loop over all existing data validations.</item></list></summary>
            <returns>Data validation information.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)">
            <param name="index">Position in the list of data validations. (1 based)</param>
            <summary>
            Returns a list of ranges for which a data validation definition applies.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number"><item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)" /> to return the data validation in the cell.</item><item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount" />, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)" /> to loop over all existing data validations.</item></list></summary>
            <returns>A list of cell ranges.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFont">
            <summary>
            Returns Excel standard font for an empty cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFontNormalStyle">
            <summary>
            Returns Excel font for the "normal" style. This style is used to draw the row and column headings.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFormat">
            <summary>
            Returns Excel standard format for an empty cell. (NORMAL format)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFormatNormalStyle">
            <summary>
            Returns Excel standard format for the normal style. "Normal" style applies to the headers "A", "B" ... at the top of the columns
            and "1", "2"... at the left of the rows. This method is the same as calling 
            <i>xls.GetStyle(xls.GetBuiltInStyleName(TBuiltInStyle.Normal, 0))</i>
            You normally will want to use <see cref="P:FlexCel.Core.ExcelFile.GetDefaultFormat" /> instead of this method.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetEnumerator">
            <summary>
            Returns an enumerator that allows you to loop on all cells in the active worksheet. Once you start the foreach loop, you might change the active sheet and it
            won't change inside the enumerator.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFont(System.Int32)">
            <param name="fontIndex">Font index. 0-based</param>
            <summary>
            Returns the font definition for a given font index.
            </summary>
            <returns>Font definition</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)">
            <param name="XF">Format index 0-Based</param>
            <summary>
            Returns the format definition for a given format index. <b>Note that this method will only return
            Cell formats. If you want to read a Style format, use <see cref="M:FlexCel.Core.ExcelFile.GetStyle(System.Int32)" /></b></summary>
            <returns>Format definition</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFormulaTokens(System.Int32,System.Int32)">
            <param name="row">Row of the cell with the formula. (1 based)</param>
            <param name="col">Column of the cell with the formula. (1 based)</param>
            <summary>
            Returns the formula of a cell as an RPN list of tokens that you can use to analyze it. If the cell doesn't
            have a formula, then this method will return null.
            <para>
            Note that the result is an RPN expression, so for example the formula "= 1 * 2 + 3" would be returned as
            "1, 2, *, 3, +". While the formula "= 1 * (2 + 3)" would be returned as
            "1, 2, 3, +, *"
            </para></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFormulaTokens(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet where the formula is.</param>
            <param name="row">Row of the cell with the formula. (1 based)</param>
            <param name="col">Column of the cell with the formula. (1 based)</param>
            <summary>
            Returns the formula of a cell as an RPN list of tokens that you can use to analyze it. If the cell doesn't
            have a formula, then this method will return null.
            <para>
            Note that the result is an RPN expression, so for example the formula "= 1 * 2 + 3" would be returned as
            "1, 2, *, 3, +". While the formula "= 1 * (2 + 3)" would be returned as
            "1, 2, 3, +, *"
            </para></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFrozenPanes">
            <summary>
            Returns the cell that is freezing the window, "A1" if no panes are frozen.
            See also <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)" /></summary>
            <returns>The cell that is freezing the window, "A1" if no panes are frozen.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@)">
            <param name="headerAndFooterKind">Type of page for which we want to retrieve the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to retrieve the image.</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <summary>
            This method returns the images associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" />) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            </summary>
            <returns>Bytes for the image. Null if there is no image on this position.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <param name="headerAndFooterKind">Type of page for which we want to retrieve the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to retrieve the image.</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <summary>
            This method returns the images associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" />) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImageProperties(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos)">
            <param name="headerAndFooterKind">Type of page for which we want to retrieve the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to retrieve the image properties.</param>
            <summary>
            Returns the image position and size.
            </summary>
            <returns>Image properties. Null if there is no image on this section.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="htmlVersion">Version of the HTML returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param>
            <param name="htmlStyle">Specifies if to use simple tags or for the returned HTML.</param>
            <param name="encoding">Encoding for the returned string. Use UTF-8 if in doubt.</param>
            <summary>
            Returns the contents of formatted cell as HTML. Conditional formats are not applied, you need to call <see cref="M:FlexCel.Core.ExcelFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)" /> to the cell style for that. 
            If <see cref="P:FlexCel.Core.ExcelFile.ShowFormulaText" /> is true, it will return the formula text instead of the value.
             For a list of HTML tags that might be returned, see the <b>Remarks</b> section.
            </summary>
            <returns>An HTML formatted string with the cell contents.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHyperLink(System.Int32)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <summary>
            Returns the hyperlink at position index on the list.
            </summary>
            <returns>Hyperlink description.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHyperLinkCellRange(System.Int32)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <summary>
            Returns the cell range a hyperlink refers to.
            </summary>
            <returns>Range the hyperlink applies to.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImage(System.Int32,FlexCel.Core.TXlsImgType@)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <summary>
            Returns an image bytes and type.
            </summary>
            <returns>Image data. Use the returned imageType to find out the format of the stored image.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImage(System.Int32,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <summary>
            Returns an image and its type.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <summary>
            Returns an image and its type.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream,System.Boolean)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            <see cref="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)" /> which is a slow method, by setting this parameter to true.</param>
            <summary>
            Returns an image and its type.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImageName(System.Int32)">
            <param name="imageIndex">Index of the image (1 based)</param>
            <summary>
            Returns the image name at position imageIndex.
            </summary>
            <returns>Image name.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)">
            <param name="imageIndex">Index of the image (1 based)</param>
            <summary>
            Returns image position and size.
            </summary>
            <returns>Image position and size.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetKeepColsTogether(System.Int32)">
            <param name="col">Column index. (1 based)</param>
            <summary>
            Returns the value of level for a column as set in <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepColsTogether(1, 3, 8, true); GetKeepColsTogether will return 8 for columns 1 and 2, and 0 for column 3.
            </summary>
            <returns>The Keep together level of the column.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetKeepRowsTogether(System.Int32)">
            <param name="row">Row index. (1 based)</param>
            <summary>
            Returns the value of level for a row as set in <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepRowsTogether(1, 3, 8, true); GetKeepRowsTogether will return 8 for rows 1 and 2, and 0 for row 3.
            </summary>
            <returns>The Keep together level of the row.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetLink(System.Int32)">
            <param name="index">Index of the link (1 based). i goes between 1 and <see cref="P:FlexCel.Core.ExcelFile.LinkCount" /></param>
            <summary>
            Gets the external link at position i. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRange(System.Int32)">
            <param name="index">Index of the named range.</param>
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" /></summary>
            <returns>Named Range</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32)">
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="refersToSheetIndex">Sheet where the range refers to. A range with the same name might be defined on more than one sheet.<br />
            To get the first range with the name, make refersToSheetIndex&lt;=0
            <br />Note that a name can be stored in one sheet and refer to a different sheet. Or it might not refer to any sheet at all. (for example, the name "=name1+1"
            doesn't refer to any sheet.) And you could have a name "=Sheet1!a1" defined in sheet2. This name will "refer to" sheet1, but be defined in sheet2.
            <br />While names are normally all defined globally (sheet 0), if you need to get the names that are stored in an specific sheet, use
            <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)" /> instead.</param>
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" /></summary>
            <returns>Named Range or null if the range does not exist.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)">
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="refersToSheetIndex">Sheet where the range refers to. Note that this is <b>not</b> where the name is stored. Normally names are all
            stored globally (in sheet 0), but they refer to an specific sheet. For example, if you define the name "=Sheet2!a1" globally, it will be stored in sheet 0, but will refer to sheet2.
            <br />A name like "=Sheet1:Sheet2!A1 doesn't refer to any sheet.</param>
            <param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param>
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" /></summary>
            <returns>Named Range or null if the range does not exist.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectAnchor(System.Int32)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <summary>
            Returns the placement of the object.
            </summary>
            <returns>Coordinates of the object.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectAnchor(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3".
            You might also use the name of the object as objectpath, like GetObjectAnchor(-1, "@myobjectname");</param>
            <summary>
            Returns the placement of the object.
            </summary>
            <returns>Coordinates of the object.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectInputRange(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the input range for the object. 
            If the object isn't a combobox or listbox, or it doesn't have an input range, this method
            will return null.
            Note that when you change the value in the cell linked to this object, 
            the value of the object will change.
            <br />The sheet in the TCellAddresses returned might be null, in which case the reference is to a cell in the same sheet, or it might
            contain another sheet name.
            </summary>
            <returns>The input range, 
            or null if the object doesn't have an input range. </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectLinkedCell(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the cell that is linked to the object. If the object isn't an object that can be linked or it isn't linked, this method
            will return null.
            Note that when you change the value in the cell linked to this object, 
            the value of the object will change.
            <br />The sheet returned in the TCellAddress might be null, in which case the reference is to a cell in the same sheet, or it might
            contain another sheet name.
            </summary>
            <returns>The cell address this object is linked to, or null if it isn't linked. </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectMacro(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the macro associated with an object, or null if there is no macro associated.
            </summary>
            <returns>The macro associated with the object, or null if there isn't any macro associated.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectName(System.Int32)">
            <param name="objectIndex">Object index. (1-based)</param>
            <summary>
            Returns the name of the object at objectIndex position.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="getShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            Returns information on an object and all of its children. If the shape doesn't exist, this method returns null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.String,System.Boolean)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3".
            You might also use the name of the object as objectpath, like GetObjectProperties(-1, "@myobjectname", true);</param>
            <param name="getShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            Returns information on an object and all of its children. If the shape doesn't exist, this method returns null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectPropertiesByShapeId(System.Int64,System.Boolean)">
            <param name="shapeId">Index of the object (1-based)</param>
            <param name="getShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            Returns information on an object and all of its children. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectSelection(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Gets the selected item in an object from the "Forms" palette. It can be a combobox or a listbox. 
            0 means no selection, 1 the first item in the list. Note that this only works for <b>objects added through the Forms toolbar.</b> 
            It won't return the values of ActiveX objects.
            </summary>
            <returns>The position of the selected item in the object. 0 means no selection, 1 the first item is selected.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectShapeId(System.Int32)">
            <param name="objectIndex">Object index. (1-based)</param>
            <summary>
            Returns the shape id of the object at objectIndex position. Shape Ids are internal identifiers for the shape, that you can use to uniquely identify a shape.
            Note that the shape id can change when you load the file, once it is loaded, it will remain the same for the shape lifetime.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectsInRange(FlexCel.Core.TXlsCellRange,FlexCel.Core.TExcelObjectList)">
            <param name="range">Range of cells where we want to find the objects.</param>
            <param name="objectsInRange">In this list we will add all the objects found. note that the objects will be added to the list, so if you want just the objects
            in this range, make sure you clear the list before calling this method.</param>
            <summary>
            Returns a list with all the objects that are completely inside a range of cells.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectSpinProperties(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns maximum, minimum and increment in any control that has a spin or dropdown, like a listbox, combobox, spinner or scrollbar.
            </summary>
            <returns>The spin properties.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectSpinValue(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the current selected value of a scrollbar.
            </summary>
            <returns>The spin position.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetPageHeaderAndFooter">
            <summary>
            This method will return all the headers and footers in a sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetPageHeaderOrFooterAsHtml(System.String,System.String,System.Int32,System.Int32,FlexCel.Core.THtmlVersion,System.Text.Encoding,FlexCel.Core.IHtmlFontEvent)">
            <param name="section">Text to convert. You will normally get this parameter calling <see cref="M:FlexCel.Core.ExcelFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)" /></param>
            <param name="imageTag">Tag to call an image for the section. It must be in the form: "&lt;img src=...&gt;" 
            and you can get the image with <see cref="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@)" /> . If null or empty, no img tag will be present in the resulting HTML, even if the section includes an image.</param>
            <param name="pageNumber">Page we are printing. This parameter will be used if you have text like "Page 1 of 3" in the header.<br />
            If you are exporting to HTML, this value should be 1, since there are no page breaks in an HTML doc.</param>
            <param name="pageCount">Number of pages in the document. This parameter will be used if you have text like "Page 1 of 3" in the header.<br />
            If you are exporting to HTML, this value should be 1, since there are no page breaks in an HTML doc</param>
            <param name="htmlVersion">Version of HTML we are targeting. In HTML 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param>
            <param name="encoding">Code page used to encode the string. Normally this is UTF-8</param>
            <param name="onFont">Method that can customize the fonts used in the resulting string. It can be null if you don't want to do any modification to the fonts.</param>
            <summary>
            Converts a section of a page header or footer into an HTML string. 
            </summary>
            <returns>An HTML string with the section.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings">
            <summary>
            Returns printer driver settings. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)" /> to copy printer driver information from a file
            to another.
            </summary>
            <returns>The printer driver settings.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetPrintMargins">
            <summary>
            Gets the Margins on the active sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRadioButtonState(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Gets if a radio button in the active sheet is selected or not. Note that this only works for <b>radio buttons added through the Forms toolbar.</b> 
            It won't return the values of ActiveX radio buttons.
            </summary>
            <returns>If the radio button is selected or not.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowCount(System.Int32)">
            <param name="sheet" />
            <summary>
            Number of rows actually used on a given sheet. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowFormat(System.Int32)">
            <param name="row">Row index (1-based)</param>
            <summary>
             Gets the XF format for the specified row, -1 if the row doesn't have format.
             </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowFormat(System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based).</param>
            <param name="row">Row index (1-based)</param>
            <summary>
             Gets the XF format for the specified row, -1 if the row doesn't have format.
             </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHeight(System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <summary>
            Returns the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <returns>Row height in internal excel units.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHeight(System.Int32,System.Boolean)">
            <param name="row">Row Index (1 based)</param>
            <param name="HiddenIsZero">If true, the height returned for a hidden row will be 0 and not its real height.</param>
            <summary>
            Returns the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <returns>Row height in internal excel units.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHeight(System.Int32,System.Int32,System.Boolean)">
            <param name="sheet">Sheet where to look for the height.</param>
            <param name="row">Row Index (1 based)</param>
            <param name="HiddenIsZero">If true, the height returned for a hidden row will be 0 and not its real height.</param>
            <summary>
            Returns the current Row height for a given sheet, in Excel internal units. (1/20th of a point)
            </summary>
            <returns>Row height in internal Excel units.(1/20th of a point)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHidden(System.Int32)">
            <param name="row">Row index (1 based).</param>
            <summary>
            Returns true if the row is hidden.
            </summary>
            <returns>True if the row is hidden.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHidden(System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based) for the row.</param>
            <param name="row">Row index (1 based).</param>
            <summary>
            Returns true if the row is hidden. This method does not care about ActiveSheet.
            </summary>
            <returns>True if the row is hidden.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowOptions(System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <summary>
            Returns all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary>
            <returns>Row options</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowOutlineLevel(System.Int32)">
            <param name="row">Row index (1 based)</param>
            <summary>
            Returns the Outline level for a row.
            </summary>
            <returns>Outline level for a row. It is a number between 0 and 7.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSelectedCells">
            <summary>
            Returns the selected ranges on a sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetBackground(FlexCel.Core.TXlsImgType@)">
            <param name="imageType">Returns the image type of the bytes returned.</param>
            <summary>
            Gets the sheet background for the active sheet. It will return null if there isn't any background in the sheet.
            </summary>
            <returns>The image data as a byte array.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String)">
            <param name="sheetName">Sheet you want to find.</param>
            <summary>
            Finds a sheet name on the workbook and returns its index.
            If it doesn't find the sheet it will raise an exception. 
            See <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String,System.Boolean)" /> for a method that will not throw an exception.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName" />. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)" /></summary>
            <returns>The sheet index if the sheet exists, or throws an Exception otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String,System.Boolean)">
            <param name="sheetName">Sheet you want to find.</param>
            <param name="throwException">When sheetName does not exist, having
            throwException = true will raise an Exception. throwException = false will 
            return -1 if the sheet is not found.</param>
            <summary>
            Finds a sheet name on the workbook and returns its index.
            Depending on the "throwException" parameter, this method will raise
            an exception or return -1 if the sheet does not exist.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName" />. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetIndexFromID(System.Guid)">
            <param name="aSheetID" />
            <summary>
            Returns the ActiveSheet for a stored <see cref="P:FlexCel.Core.ExcelFile.SheetID" />. 
            You can use this method together with <see cref="P:FlexCel.Core.ExcelFile.SheetID" /> to save and restore
            an ActiveSheet when you are adding or removing sheets.
            <para>If the sheet ID doesn't exist, this method will return 0. </para></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)">
            <param name="sheetIndex" />
            <summary>
            Returns the sheet name for a given index.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName" />. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetSelected(System.Int32)">
            <param name="sheetIndex">Sheet index for the tab we want to know if it is selected. 1 based.</param>
            <summary>
            Returns true if a sheet is selected, false otherwise. Note that you might select many sheets in Excel by shift or ctrl-clicking the
            sheet tabs. Also note that when changing the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" />, the sheet selected will be reset to the active sheet.
            So if you want to find out which sheets are selected in a file, you should call this method after opening the file but before changing the active sheet.
            </summary>
            <returns>True is the sheet is selected, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetType(System.Int32)">
            <param name="sheet">Sheet 1 based.</param>
            <summary>
            Returns the sheet type for a given sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetVisible(System.Int32)">
            <param name="sheet">Sheet index (1 based)</param>
            <summary>
            Returns if a given sheet is visible. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSplitWindow">
            <summary>
            Returns the horizontal and vertical offsets for the split windows. Zero means no split.
            See also <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)" /></summary>
            <returns>The horizontal and vertical offsets for the split windows. Zero means no split.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStringFromCell(System.Int32,System.Int32)">
            <param name="row">Cell Row (1 based). </param>
            <param name="col">Cell Column (1 based)</param>
            <summary>
            This method will return a rich string that is formatted similar to the way Excel shows it.
            For example, if you have "1.0" on a cell, and the cell is formatted as exponential, this method will return "1.0e+1"
            It might also change the color depending on the value and format. (for example, red for negative numbers) 
            </summary>
            <returns>A rich string with the cell value.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStringFromCell(System.Int32,System.Int32,System.Int32@,FlexCel.Core.TUIColor@)">
            <param name="row">Cell Row (1 based). </param>
            <param name="col">Cell Column (1 based)</param>
            <param name="XF">The resulting XF for the cell.</param>
            <param name="aColor">Resulting color of the string. If for example you define red for negative numbers, and the result is red, this will
            be returned on aColor. If there is not color info on the format, it will remain unchanged.</param>
            <summary>
            This method will return a rich string that is formatted similar to the way Excel shows it.
            For example, if you have "1.0" on a cell, and the cell is formatted as exponential, this method will return "1.0e+1"
            It might also change the color depending on the value and format. (for example, red for negative numbers) 
            </summary>
            <returns>A rich string with the cell value.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStyle(System.Int32)">
            <param name="index">Position in the list of styles (1 based).</param>
            <summary>
            Returns the named style at position index for the workbook
            </summary>
            <returns>The named style definition.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStyle(System.String)">
            <param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of built-in names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)" /></param>
            <summary>
            Returns a named style for the workbook. You can also use this method to check if a style exists or not.
            The returned style will have the "IsStyle" property set to true, so you can't apply it directly to a cell.
            If you want to apply the result of this method to a cell, use <see cref="M:FlexCel.Core.ExcelFile.GetStyle(System.String,System.Boolean)" />.
            </summary>
            <returns>The style definition, or null if the style doesn't exists.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStyle(System.String,System.Boolean)">
            <param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of builtin names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)" /></param>
            <param name="convertToCellStyle">If true, the returned style will have the "IsStyle" property set to false, 
            so you can apply this TFlxFormat to a cell. If false IsStyle will be true and you can use the format definition in style definitions.
            Setting this parameter to true is exactly the same as setting it to false and setting "IsStyle" property in the result to false, and also setting
            the parent of the resulting cell format to the cell style.</param>
            <summary>
            Returns a named style for the workbook. You can also use this method to check if a style exists or not.
            </summary>
            <returns>The style definition, or null if the style doesn't exists.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStyleName(System.Int32)">
            <param name="index">Position in the list of styles (1 based).</param>
            <summary>
            Gets the name of the style at position index. (1 based).
            </summary>
            <returns>The name of the style.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetTable(System.Int32)">
            <param name="tableIndex">Position of the table in the workbook. (1-based)</param>
            <summary>
            Returns the table definition for the table at position tableIndex. (1 based)
            </summary>
            <returns>The table definition. If tableIndex is out of range, then it will throw an Exception.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetTable(System.String)">
            <param name="tableName">Name of the table.</param>
            <summary>
            Returns the definition for a table.
            </summary>
            <returns>Null if the table doesn't exist, or the table definition otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetTheme">
            <summary>
            This is an advanced method, that allows you to get the full theme in use. Normally you will just want to replace colors, and you can do this with
            <see cref="M:FlexCel.Core.ExcelFile.SetColorTheme(FlexCel.Core.TThemeColor,FlexCel.Core.TDrawingColor)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetColorTheme(FlexCel.Core.TThemeColor)" /> methods. Much of the functionality in a theme applies to PowerPoint, not Excel.<br /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetThemeFont(FlexCel.Core.TFontScheme)">
            <param name="fontScheme">Font Scheme we want to get (either minor or major). Using "none" here will return null.</param>
            <summary>
            Gets the major of minor font scheme in the theme.
            </summary>
            <returns>Font definition.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetThemeNoClone">
            <summary>
            Internal use. This won't clone the internal structure for more performance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetUsedNamedRanges">
            <summary>
            Returns an array of booleans where each value indicates if the name at position "i-1" is used by any formula, chart, or object in the file. If the name is in use, it can't be deleted. Note that the index here is
            Zero-based, different from all other Name indexes in FlexCel, because arrays in C# are always 0-based. So UsedRange[0] corresponds to GetNamedRange(1) and so on.
            </summary>
            <returns>An array of booleans indicating whether each name is used or not.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetUsedPaletteColors">
            <summary>
            Returns a list of the used colors on the palette. You can use it as an entry to <see cref="M:FlexCel.Core.ExcelFile.NearestColorIndex(FlexCel.Core.TUIColor)" />
            to modify the palette.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetWhatIfTable(System.Int32,System.Int32,System.Int32,FlexCel.Core.TCellAddress@,FlexCel.Core.TCellAddress@)">
            <param name="sheet">Sheet where the table is.</param>
            <param name="row">First cell from where we want to get a what-if table.</param>
            <param name="col">First cell from where we want to get a what-if table.</param>
            <param name="rowInputCell">Returns the row input cell for this table. If the table doesn't have a row input cell, this value is null.</param>
            <param name="colInputCell">Returns the column input cell for this table. If the table doesn't have a column input cell, this value is null.</param>
            <summary>
            Returns the range of cells that make the what-if table that starts at aRow and aCol.
            If there is no What-if table at aRow, aCol, this method returns null.
            <br />If both the returned rowInputCell and colInputCell are null, this means this table points to deleted references.
            </summary>
            <returns>The full range of the table, not including the formula headers. Only the cells where {=Table()} formulas are..</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetWhatIfTableList">
            <summary>
            Returns a list of the upper cells of the What-if tables in the page. You can then use <see cref="M:FlexCel.Core.ExcelFile.GetWhatIfTable(System.Int32,System.Int32,System.Int32,FlexCel.Core.TCellAddress@,FlexCel.Core.TCellAddress@)" /> to get the definition of each one.
            </summary>
            <returns>A list of the coordinates with the first row and column for every what-if table in the sheet.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetWindowScroll">
            <summary>
            Returns the window scroll for the main pane.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetWindowScroll(FlexCel.Core.TPanePosition)">
            <param name="panePosition">Pane to return. </param>
            <summary>
            Returns the window scroll for a specified pane.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GridLinesColor">
            <summary>
            Color of the grid separator lines.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasAutoFilter">
            <summary>
            Returns true if the active sheet has any AutoFilter defined.
            </summary>
            <returns>True if the active sheet has an AutoFilter, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasAutoFilter(System.Int32,System.Int32)">
            <param name="row">Row of the cell we want to find out. (1 based)</param>
            <param name="col">Column of the cell we want to find out. (1 based)</param>
            <summary>
            Returns true if a cell has an AutoFilter.
            </summary>
            <returns>True if the cell has an AutoFilter, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasHPageBreak(System.Int32)">
            <param name="row">Row to check.</param>
            <summary>
            True if the sheet has a Manual Horizontal page break on the row.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasKeepColsTogether">
            <summary>
            Returns true if there is any column marked as keeptogether in the sheet.
            This method traverses every column to find out, so it can be somehow slow and you should not call it too often.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasKeepRowsTogether">
            <summary>
            Returns true if there is any row marked as keeptogether in the sheet.
            This method traverses every row to find out, so it can be somehow slow and you should not call it too often.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasMacros">
            <summary>
            Returns true if the file has any macros.
            </summary>
            <returns>True if the file has macros.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasVPageBreak(System.Int32)">
            <param name="col">Column to check</param>
            <summary>
            True if the sheet has a Manual Vertical page break on the column.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HeadingColWidth">
            <summary>
            Width that will be used by the added column with row numbers when <see cref="P:FlexCel.Core.ExcelFile.PrintHeadings" /> is true.
            The default value (0) means to use an automatic value which is fine if you don't have too many rows to print.
            A positive value will make the column wider or narrower. <b>A negative value will auto-calculate the width </b> depending in the 
            number of rows and normal font of the spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HeadingRowHeight">
            <summary>
            Height that will be used by the added row with column headers when <see cref="P:FlexCel.Core.ExcelFile.PrintHeadings" /> is true.
            The default value (0) means to use an automatic value which is fine with normal fonts.
            A positive value will make the column wider or narrower.<b>A negative value will auto-calculate the height </b> depending in the 
            normal font of the spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HeightCorrection">
            <summary>
            Factor to multiply default row heights. See remarks for a detailed explanation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HideZeroValues">
            <summary>
            When true number 0 will be shown as empty. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HPageBreakCount">
            <summary>
            The number of horizontal page breaks in the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HyperLinkCount">
            <summary>
            The count of hyperlinks on the active sheet
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.IgnoreFormulaText">
            <summary>
            This is an optimization property. If you set it to true, methods like GetCellValue or GetNamedRange won't return the
            formula text, just the formula results. If you don't care about formula texts, setting this property to true can speed up
            the processing of huge files.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ImageCount">
            <summary>
            The number of images on the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ImageIndexToObjectIndex(System.Int32)">
            <param name="imageIndex">Image index on the image array.</param>
            <summary>
            Returns the general index on the object list for an image. You can use then this index on SendToBack, for example.
            </summary>
            <returns>Image index on the total objects array.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.TextReader,System.Int32,System.Int32,System.Int32[],FlexCel.Core.ColumnImportType[])">
            <param name="aTextReader">StreamReader with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="columnWidths">An array with the column widths for every column you want to import.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <summary>
            Imports a text file (fixed length columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.TextReader,System.Int32,System.Int32,System.Int32[],FlexCel.Core.ColumnImportType[],System.String[])">
            <param name="aTextReader">StreamReader with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="columnWidths">An array with the column widths for every column you want to import.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <summary>
            Imports a text file (fixed length columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.Stream,System.Int32,System.Int32,System.Char,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.Stream,System.Int32,System.Int32,System.Int32[],FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="columnWidths">An array with the column widths for every column you want to import.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
             </param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
             Imports a text file (fixed length columns) into the current sheet. Note that this method won't clear any existing data.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.TextReader,System.Int32,System.Int32,System.Char,System.Char,FlexCel.Core.ColumnImportType[],System.String[])">
            <param name="aTextReader">TextReader with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="textQualifier">Character used to quote strings when they contain the delimiter. This is normally the double quote (")
            but you might change it by a single quote or any other character. Use a char 0 if the original file isn't quoted. </param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.String,System.Int32,System.Int32,System.Char,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.String,System.Int32,System.Int32,System.Int32[],FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="columnWidths">An array with the column widths for every column you want to import.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Imports a text file (fixed length columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.Stream,System.Int32,System.Int32,System.Char,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.Stream,System.Int32,System.Int32,System.Int32[],FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="columnWidths">An array with the column widths for every column you want to import.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
             </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
             like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
             Imports a text file (fixed length columns) into the current sheet. Note that this method won't clear any existing data.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.String,System.Int32,System.Int32,System.Char,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.String,System.Int32,System.Int32,System.Int32[],FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="columnWidths">An array with the column widths for every column you want to import.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
             </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
             like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
             Imports a text file (fixed length columns) into the current sheet. Note that this method won't clear any existing data.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.IO.Stream,System.Int32,System.Int32,System.Char,System.Char,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="textQualifier">Character used to quote strings when they contain the delimiter. This is normally the double quote (")
            but you might change it by a single quote or any other character. Use a char 0 if the original file isn't quoted. </param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Import(System.String,System.Int32,System.Int32,System.Char,System.Char,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="textQualifier">Character used to quote strings when they contain the delimiter. This is normally the double quote (")
            but you might change it by a single quote or any other character. Use a char 0 if the original file isn't quoted. </param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading. If omitted or null, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode)">
            <param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
             be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
             The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param>
            <param name="destRow">Destination row where the cells will be copied.</param>
            <param name="destCol">Destination column where the cells will be copied.</param>
            <param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
             If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param>
            <param name="insertMode">How the cells on destination will be inserted. They can shift down or left. 
             Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param>
            <summary>
             Inserts and/or copies a range of cells from one place to another.<br />
             This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
             adapting the formulas, images and everything as Excel would do it.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode)">
            <param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
             be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
             The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param>
            <param name="destRow">Destination row where the cells will be copied.</param>
            <param name="destCol">Destination column where the cells will be copied.</param>
            <param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
             If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param>
            <param name="insertMode">How the cells on destination will be inserted. They can shift down or left. 
             Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param>
            <param name="copyMode">Which cells on sourceRange will be copied. If you intend to replace values on the copied cells,
             you might specify OnlyFormulas. If you just want to <b>insert</b> cells and not copy, specify None.</param>
            <summary>
             Inserts and/or copies a range of cells from one place to another.<br />
             This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
             adapting the formulas, images and everything as Excel would do it.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32)">
            <param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
             be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
             The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param>
            <param name="destRow">Destination row where the cells will be copied.</param>
            <param name="destCol">Destination column where the cells will be copied.</param>
            <param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
             If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param>
            <param name="insertMode">How the cells on destination will be inserted. They can shift down or left. 
             Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param>
            <param name="copyMode">Which cells on sourceRange will be copied. If you intend to replace values on the copied cells,
             you might specify OnlyFormulas. If you just want to <b>insert</b> cells and not copy, specify None.</param>
            <param name="sourceWorkbook">Workbook from where we are copying the cells. This might be the same workbook, and you would by copying from another sheet.</param>
            <param name="sourceSheet">Sheet index on the source workbook. If sourceWorkbook is the same instance as this, and sourceSheet is the active sheet on the instance, this method is equivalent to the simpler overloaded version.</param>
            <summary>
             Inserts and/or copies a range of cells from one place to another.<br />
             This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
             adapting the formulas, images and everything as Excel would do it.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32,FlexCel.Core.TExcelObjectList)">
            <param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
             be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
             The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param>
            <param name="destRow">Destination row where the cells will be copied.</param>
            <param name="destCol">Destination column where the cells will be copied.</param>
            <param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
             If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param>
            <param name="insertMode">How the cells on destination will be inserted. They can shift down or left. 
             Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param>
            <param name="copyMode">Which cells on sourceRange will be copied. If you intend to replace values on the copied cells,
             you might specify OnlyFormulas. If you just want to <b>insert</b> cells and not copy, specify None.</param>
            <param name="sourceWorkbook">Workbook from where we are copying the cells. This might be the same workbook, and you would by copying from another sheet.</param>
            <param name="sourceSheet">Sheet index on the source workbook. If sourceWorkbook is the same instance as this, and sourceSheet is the active sheet on the instance, this method is equivalent to the simpler overloaded version.</param>
            <param name="ObjectsInRange">Returns the objects that are in the range to be copied. This is an optimization so you don't have to find those objects again. Set it to null to not return any objects</param>
            <summary>
             Inserts and/or copies a range of cells from one place to another.<br />
             This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
             adapting the formulas, images and everything as Excel would do it.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32)">
            <param name="copyFrom">The sheet index of the sheet we are copying from (1 based). Set it to 0 to insert Empty sheets.</param>
            <param name="insertBefore">The sheet before which we will insert (1 based). This might be SheetCount+1, to insert at the end of the Workbook.</param>
            <param name="aSheetCount">The number of sheets to insert.</param>
            <summary>
            Inserts and copies sheet "CopyFrom", SheetCount times before InsertBefore.
            To insert empty sheets, set CopyFrom = 0 (You might also call <see cref="M:FlexCel.Core.ExcelFile.AddSheet" />).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32[],System.Int32,FlexCel.Core.ExcelFile)">
            <param name="copyFrom">The sheet index of all the sheets we are copying from (1 based).</param>
            <param name="insertBefore">The sheet before which we will insert (1 based). This might be SheetCount+1, to insert at the end of the Workbook.</param>
            <param name="sourceWorkbook">Workbook from where the sheet will be copied from. On this overloaded version it cannot be null.</param>
            <summary>
            Inserts and copies all the sheets in the "CopyFrom" array, before InsertBefore into another workbook.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)">
            <param name="copyFrom">The sheet index of the sheet we are copying from (1 based). Set it to 0 to insert Empty sheets.</param>
            <param name="insertBefore">The sheet before which we will insert (1 based). This might be SheetCount+1, to insert at the end of the Workbook.</param>
            <param name="aSheetCount">The number of sheets to insert.</param>
            <param name="sourceWorkbook">Workbook from where the sheet will be copied from. Null to copy from the same file.</param>
            <summary>
            Inserts and copies sheet "CopyFrom", SheetCount times before InsertBefore.
            If sourceWorkbook is not null, sheets will be copied from another file.
            To insert empty sheets, set CopyFrom=0. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertHPageBreak(System.Int32)">
            <param name="row">Row where to insert the page break. All row numbers are 1-based, and the breaks occur after the row.</param>
            <summary>
            Inserts an Horizontal Page Break at the specified row. If there is one already, it will do nothing.
            If the number of pagebreaks is bigger than the maximum Excel can admit, it will add it anyway, but you might get an 
            exception when saving the file as xls. Exporting as images or PDF will use those additional page breaks.
            To control what to do when there are too many page breaks, see <see cref="P:FlexCel.Core.ExcelFile.ErrorActions" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertVPageBreak(System.Int32)">
            <param name="col">Column where to insert the page break All column numbers are 1-based, and the breaks occur after the column.</param>
            <summary>
            Inserts a Vertical Page Break at the specified column. If there is one already, it will do nothing.
            If the number of pagebreaks is bigger than the maximum Excel can admit, it will add it anyway, but you might get an 
            exception when saving the file as xls. Exporting as images or PDF will use those additional page breaks.
            To control what to do when there are too many page breaks, see <see cref="P:FlexCel.Core.ExcelFile.ErrorActions" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsColMarkedForAutofit(System.Int32)">
            <param name="col">Column number(1 based)</param>
            <summary>
            Returns true is a column is marked for autofit.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsDefinedFunction(System.String)">
            <param name="functionName">Name of the function. Case insensitive.</param>
            <summary>
            Returns true if the Custom formula function has been added to the FlexCel recalculating engine.
            Note that internal functions are not returned by this method, but user defined functions pre-defined in FlexCel will be.
            </summary>
            <returns>True if the name has been added, false if not.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsDefinedFunction(System.String,FlexCel.Core.TUserDefinedFunctionLocation@)">
            <param name="functionName">Name of the function. Case insensitive.</param>
            <param name="location">Returns if the function is defined as an internal or external function.</param>
            <summary>
            Returns true if the Custom formula function has been added to the FlexCel recalculating engine.
            Note that internal functions are not returned by this method, but user defined functions pre-defined in FlexCel will be.
            </summary>
            <returns>True if the name has been added, false if not.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsEmptyRow(System.Int32)">
            <param name="row">Row to test (1-based)</param>
            <summary>
            True if the specified row does not have any cells, nor any format on it.
            In short, this row has never been used.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.IsLightClone">
            <summary>
            Returns true if this object was created with a <see cref="M:FlexCel.Core.ExcelFile.LightClone" /> call. Light Cloned objects share the data
            with another file, and they don't switch the selected sheet in the Excel file when changing <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsNotFormattedCol(System.Int32)">
            <param name="col">Column to test (1-based)</param>
            <summary>
            True if the specified column does not have any format applied on it.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeCol(System.Int32)">
            <param name="col">Column to test (1 based)</param>
            <summary>
            Returns true when the column is the one that is used for collapsing an outline. (it has a "+" at the top).
            </summary>
            <returns>True if the node has a "+" mark.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeCollapsedCol(System.Int32)">
            <param name="col">Column to test (1 based)</param>
            <summary>
            Returns true when the column is an outline node (it has a "+" at the top) and it is closed (all children are hidden).
            </summary>
            <returns>True if the column contains a node and it is collapsed, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeCollapsedRow(System.Int32)">
            <param name="row">Row to test (1 based)</param>
            <summary>
            Returns true when the row is an outline node (it has a "+" at the left) and it is closed (all children are hidden).
            </summary>
            <returns>True if the row contains a node and it is collapsed, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeRow(System.Int32)">
            <param name="row">Row to test (1 based)</param>
            <summary>
            Returns true when the row is the one that is used for collapsing an outline. (it has a "+" at the left).
            </summary>
            <returns>True if the node has a "+" mark.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsRowMarkedForAutofit(System.Int32)">
            <param name="row">Row number(1 based)</param>
            <summary>
            Returns true is a row is marked for autofit.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsValidObjectPathObjName(System.String)">
            <param name="objectName" />
            <summary>
            Returns true if the object name exists and it is unique in the sheet.
            You can use <see cref="M:FlexCel.Core.ExcelFile.FindObjectPath(System.String)" /> to find the object path you need for this object name.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.IsXltTemplate">
            <summary>
            Determines if the file is a template (xlt format instead of xls, xltx instead of xlsx, or xltm instead of xlsm). Both file formats are nearly identical, but there is an extra record
            needed so the file is a proper xlt template. Note that when saving to a file, FlexCel can detect if this is a template from the 
            extension, and so if you save to *.xlt, *.xltx or *.xltm the file will be saved as template, even if this property is false.
            When saving to a stream, you need to set this property correctly because FlexCel can't guess it from the filename.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="col1">First column of the group you want to keep together.</param>
            <param name="col2">Last column of the group you want to keep together.</param>
            <param name="level">Set this parameter to 0 to remove the condition to keep columns together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together,
            If all columns cannot be kept together in one page, FlexCel will try to keep as much columns with higher levels as possible. See the example for more information.</param>
            <param name="replaceLowerLevels">If true, all existing level values in the column range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in any order. <br />
            For example, if you first call KeepColsTogether(2, 3, 5, false) and then KeepColsTogether(1, 10, 1, false), columns 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of columns 2 and 3 to level 1, making all column levels between 1 and 10 equal to 1.</param>
            <summary>
            Tells FlexCel that it must try to keep together the columns between col1 and col2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks" /> after calling this method.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.KeepMaxRowsAndColumnsWhenUpdating">
            <summary>
            Defines what FlexCel will do when it finds a reference to the last row or column in an Excel 97-2003 spreadsheet, and it is upgrading to Excel 2007.
            If false (the default) row 65536 will be updated to row 1048576, and column 256 to column 16384.
            If true, references will stay the same. <b>Note: </b> This is a static global property, so it affects all threads running.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="row1">First row of the group you want to keep together.</param>
            <param name="row2">Last row of the group you want to keep together.</param>
            <param name="level">Set this parameter to 0 to remove the condition to keep rows together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together. 
            If all rows cannot be kept together in one page, FlexCel will try to keep as much rows with higher levels as possible. See the example for more information.</param>
            <param name="replaceLowerLevels">If true, all existing level values in the row range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in any order. <br />
            For example, if you first call KeepRowsTogether(2, 3, 5, false) and then KeepRowsTogether(1, 10, 1, false), rows 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of rows 2 and 3 to level 1, making all row levels between 1 and 10 equal to 1.</param>
            <summary>
            Tells FlexCel that it must try to keep together the rows between row1 and row2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks" /> after calling this method.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.LightClone">
            <summary>
            Returns a copy of this ExcelFile object with the same backing data, so the cells in both objects are the same.
            Using a light clone allows you to read from a single ExcelFile in two different threads, since while the data is the same
            (so you don't use twice the memory as a real clone would), you can have separate activesheets in both. So one thread can be reading
            from the "original" file with ActiveSheet = 1, and the other thread could be reading from the light clone with activeSheet = 3.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.Linespacing">
            <summary>
            A Linespacing of 1 means use the standard GDI+ linespace when a cell has more than one line. A linespace of 2 would mean
            double linespacing, and 0.5 would mean half linespacing. Normally linespacing in Excel is a little bigger than linespacing in GDI+,
            so you can use this property to fine tune what you need.<br /><b>This property doesn't alter the Excel file in any way. It is only used when rendering.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.LinkCount">
            <summary>
            Returns the number of external links for the file. You can access those links with <see cref="M:FlexCel.Core.ExcelFile.GetLink(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.SetLink(System.Int32,System.String)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Double)">
            <param name="col">Column index (1 based)</param>
            <param name="autofit">Set this to true to mark the column for autofitting, false for removing the column from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <summary>
            Marks a column as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the column 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="col">Column index (1 based)</param>
            <param name="autofit">Set this to true to mark the column for autofitting, false for removing the column from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <param name="isMerged">If true, only the cell will be autofitted, not the whole column.</param>
            <summary>
            Marks a column as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the column 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Double)">
            <param name="row">Row index (1 based)</param>
            <param name="autofit">Set this to true to mark the row for autofitting, false for removing the row from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <summary>
            Marks a row as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the row 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double)" />. To change the actual autofit status on the xls file, use <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)" /><b>NOTE</b>: This method will not mark empty rows.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="row">Row index (1 based)</param>
            <param name="autofit">Set this to true to mark the row for autofitting, false for removing the row from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="isMerged">If true, only the cell will be autofitted, not the whole row.</param>
            <summary>
            Marks a row as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the row 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double)" />. To change the actual autofit status on the xls file, use <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)" /><b>NOTE</b>: This method will not mark empty rows.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">First row of the merged cell.</param>
            <param name="firstCol">First column of the merged cell.</param>
            <param name="lastRow">Last row of the merged cell.</param>
            <param name="lastCol">Last column of the merged cell.</param>
            <summary>
            Merges a number of cells into one.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MoveRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode)">
            <param name="cellRange">Range you want to move.</param>
            <param name="newRow">Row where the range will be relocated.</param>
            <param name="newCol">Column where the range will be relocated.</param>
            <param name="insertMode">This parameter switches between 2 different working modes:
            <list type="bullet"><item>
            Modes NoneDown and NoneRight are the same, and work the same way as when you drag a range of cells in Excel to 
            a new location. Cells on the new range will be replaced by the old, and cells where the old range was located will be cleared(not deleted).
            No cells are inserted or deleted.
            </item><item>
            The other modes behave like when you select a range in Excel, cut it, and then right click and select "Insert Cut Cells...". The old range will be inserted
            where the new range goes, cells where the old range was will be deleted(not cleared). 
            Using for example MoveRange(CellRange, newRow, newCol, TFlxInsertMode.ShiftRight) is equivalent to:
            1) InsertAndCopyRange(CellRange, newRow, newCol, 1, TFlxInsertMode.ShiftRight, TRangeCopyMode.None); 
            2) MoveRange(CellRange, newRow, newCol, TFlxInsertMode.NoneRight);  
            3) DeleteRange(CellRange, TFlxInsertMode.ShiftRight);
            </item></list></param>
            <summary>
            Moves a range of cells, the same way Excel does it. All references pointing to the old range will be relocated to the new, and all
            existing references to the new range will be relocated to #ref. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MoveRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.Boolean)">
            <param name="cellRange">Range you want to move.</param>
            <param name="newRow">Row where the range will be relocated.</param>
            <param name="newCol">Column where the range will be relocated.</param>
            <param name="insertMode">This parameter switches between 2 different working modes:
            <list type="bullet"><item>
            Modes NoneDown and NoneRight are the same, and work the same way as when you drag a range of cells in Excel to 
            a new location. Cells on the new range will be replaced by the old, and cells where the old range was located will be cleared(not deleted).
            No cells are inserted or deleted.
            </item><item>
            The other modes behave like when you select a range in Excel, cut it, and then right click and select "Insert Cut Cells...". The old range will be inserted
            where the new range goes, cells where the old range was will be deleted(not cleared). 
            Using for example MoveRange(CellRange, newRow, newCol, TFlxInsertMode.ShiftRight) is equivalent to:
            1) InsertAndCopyRange(CellRange, newRow, newCol, 1, TFlxInsertMode.ShiftRight, TRangeCopyMode.None); 
            2) MoveRange(CellRange, newRow, newCol, TFlxInsertMode.NoneRight);  
            3) DeleteRange(CellRange, TFlxInsertMode.ShiftRight);
            </item></list></param>
            <param name="fixAllFormulas">If true (the default) FlexCel will correctly adapt all the references in all formulas
            everywhere. If false only the formulas being moved will be changed. The results with this parameter = false are incorrect
            if you have formulas pointing to the range moved, but is faster if you know no formulas point to cells inside the range moved.
            You should normally keep this parameter = true. FlexCel uses it false to emulate the way Excel sorts (which is wrong).</param>
            <summary>
            Moves a range of cells, the same way Excel does it. All references pointing to the old range will be relocated to the new, and all
            existing references to the new range will be relocated to #ref. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.NamedRangeCount">
            <summary>
            The count of all named ranges on the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NearestColorIndex(FlexCel.Core.TUIColor)">
            <param name="value">Color we want to use.</param>
            <summary>
            Returns the most similar entry on the excel palette for a given color.
            </summary>
            <returns>Most similar color on the Excel palette.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NearestColorIndex(FlexCel.Core.TUIColor,System.Boolean[])">
            <param name="value">Color we want to use.</param>
            <param name="UsedColors">If null, this behaves like the standard NearestColorIndex. 
            To get a list of used colors for the first call, use <see cref="P:FlexCel.Core.ExcelFile.GetUsedPaletteColors" />.
            After the first call, keep using the same UsedColors structure and do not call GetUsedPaletteColors again, to avoid overwriting colors
            that are not yet inserted into the xls file with new ones. You can call GetUsedPaletteColors only after you added the format with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /></param>
            <summary>
                <b>IMPORTANT:</b> Since FlexCel 5.1, using <see cref="M:FlexCel.Core.ExcelFile.OptimizeColorPalette" /> before saving should normally be used instead of this method
            to get an optimized palette. Just enter the true colors in FlexCel, and call <see cref="M:FlexCel.Core.ExcelFile.OptimizeColorPalette" /> before saving.<br />
            Returns the most similar entry on the excel palette for a given color.
            If UsedColors is not null, it will try to modify the Excel color palette
            to get a better match on the color, modifying among the not used colors. 
            Note that modifying the standard palette
            might result on a file that is not easy to edit on Excel later, since it does not have the standard Excel colors.
            </summary>
            <returns>Most similar color on the Excel palette.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NearestColorTheme(FlexCel.Core.TUIColor,System.Double@)">
            <param name="value">Color we want to use.</param>
            <param name="tint">Returns the tint to apply to the theme color.</param>
            <summary>
            Returns the most similar entry on the theme palette for a given color.
            </summary>
            <returns>Most similar color on the theme palette.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.NeedsRecalc">
            <summary>
            True if the file has been modified after loading.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NewFile">
            <summary>
            Creates a new empty file, with 3 empty sheets.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NewFile(System.Int32)">
            <param name="aSheetCount">Number of sheets for the new file.</param>
            <summary>
            Creates a new empty file, with the specified number of sheets.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NewFile(System.Int32,FlexCel.Core.TExcelFileFormat)">
            <param name="aSheetCount">Number of sheets for the new file.</param>
            <param name="fileFormat">Different Excel versions save different empty files. By default, FlexCel will create a new file that looks
            like a file created by Excel 2003, but you can change the version of the new file created with this parameter.</param>
            <summary>
            Creates a new empty file, with the specified number of sheets.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ObjectCount">
            <summary>
            Count of all graphical objects on the sheet. They can be charts, images, shapes, etc.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)">
            <param name="objectIndex">General index of the image on the Object collection.</param>
            <summary>
            Returns the index on the image collection of an object. <b>Note that this method is slow</b> when there are many images, so use it sparingly.
            </summary>
            <returns>-1 if the object is not an image, else the index on the image collection.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.OffsetRelativeFormula(System.Int32,System.Int32,System.Int32,System.String)">
            <param name="activeSheet">Sheet where you are positioned when doing the calculation. You might pass xls.ActiveSheet here.</param>
            <param name="cellRow">Row of the cell where the relative formula is. </param>
            <param name="cellCol">Column of the cell where the relative formula is.</param>
            <param name="expression">Formula to offset. It must start with "=", and be a valid Excel formula.</param>
            <summary>
            Use this method to know the actual formula that applies to a cell when the formula is relative.
            In some places, mostly data validations and names, Excel returns relative formulas. <br />
            So for example you might have a name with
            a definition of "=Sheet1!A2" when you are positioned at cell A1. If you now move the cursor to cell A2 in Excel, the name definition will
            be "=Sheet1!A3" since the reference is relative to the cell where the cursor is. If you retrieve the name formula with FlexCel, as FlexCel 
            doesn't have a cursor, it will always return the canonical formula as if you were positioned at A1. If you want to know the real formula
            when you are positioned at A2, you need to call this method with cellRow =3, cellCol = 1 and expression = "=Sheet1!A2". It will return
            "=Sheet1!A3". 
            </summary>
            <returns>The formula with relative references changed to match the cell at cellRow, cellCol</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.OnVirtualCellEndReading(FlexCel.Core.ExcelFile,FlexCel.Core.VirtualCellEndReadingEventArgs)">
            <param name="xls" />
            <param name="e" />
            <summary>
            Replace this method if you want to override this event in a derived class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.OnVirtualCellRead(FlexCel.Core.ExcelFile,FlexCel.Core.VirtualCellReadEventArgs)">
            <param name="xls" />
            <param name="e" />
            <summary>
            Replace this method if you want to override this event in a derived class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.OnVirtualCellStartReading(FlexCel.Core.ExcelFile,FlexCel.Core.VirtualCellStartReadingEventArgs)">
            <param name="xls" />
            <param name="e" />
            <summary>
            Replace this method if you want to override this event in a derived class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream)">
            <param name="aStream">Stream to Load, must be a seekable stream. Verify it is on the correct position.</param>
            <summary>
            Loads a new Spreadsheet form a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.String)">
            <param name="fileName">File to open.</param>
            <summary>
            Loads a new Spreadsheet form disk.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])">
            <param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param>
            <param name="fileFormat">List with possible file formats to try.</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             for more information on how to use it.
             </param>
            <summary>
             Loads a new Spreadsheet from a stream, on one of the specified formats.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.String,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])">
            <param name="fileName">File to open</param>
            <param name="fileFormat">List with possible file formats to try</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.</param>
            <summary>
            Loads a new Spreadsheet form disk, on one of the specified formats.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.Boolean)">
            <param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param>
            <param name="fileFormat">List with possible file formats to try.</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             for more information on how to use it.
             </param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
             Loads a new Spreadsheet from a stream, on one of the specified formats.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param>
            <param name="fileFormat">List with possible file formats to try.</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             for more information on how to use it.
             </param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt).
             If you specify an encoding for xls95 files, it will overwrite the default encoding specified in the file, and this can be used to read 
             buggy or corrupted xls95 files. But in general for xls95 you should keep this parameter null.<br />
             This parameter has no effect on xls 97 files or xlsx. If null when reading text files, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
             Loads a new Spreadsheet from a stream, on one of the specified formats.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.String,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File to open</param>
            <param name="fileFormat">List with possible file formats to try</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.</param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt).
            If you specify an encoding for xls95 files, it will overwrite the default encoding specified in the file, and this can be used to read 
            buggy or corrupted xls95 files. But in general for xls95 you should keep this parameter null.<br />
            This parameter has no effect on xls 97 files or xlsx. If null when reading text files, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Loads a new Spreadsheet form disk, on one of the specified formats.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param>
            <param name="fileFormat">List with possible file formats to try.</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             for more information on how to use it.
             </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
             like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt).
             If you specify an encoding for xls95 files, it will overwrite the default encoding specified in the file, and this can be used to read 
             buggy or corrupted xls95 files. But in general for xls95 you should keep this parameter null.<br />
             This parameter has no effect on xls 97 files or xlsx. If null when reading text files, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
             Loads a new Spreadsheet from a stream, on one of the specified formats.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.String,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File to open</param>
            <param name="fileFormat">List with possible file formats to try</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.</param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt).
            If you specify an encoding for xls95 files, it will overwrite the default encoding specified in the file, and this can be used to read 
            buggy or corrupted xls95 files. But in general for xls95 you should keep this parameter null.<br />
            This parameter has no effect on xls 97 files or xlsx. If null when reading text files, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Loads a new Spreadsheet form disk, on one of the specified formats.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.OptimizeColorPalette">
            <summary>
            Changes the colors in the color palette so they can represent better the colors in use. This method will change the colors not used in the palette
            by colors used in the sheet. If there are more unique colors in the sheet than the 56 available in the palette, only the first colors will be changed.
            <br />
            When FlexCel saves an xls file, it saves the color information twice: The real color for Excel 2007 and newer, and the indexed color
            for older Excel versions. This method optimizes the palette of indexed colors so they look better in Excel 2003 or older. It doesn't effect
            Excel 2007 or newer at all.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsAutoCompressPictures">
            <summary>
            If true, Excel will try to compress the pictures to keep sizes down.
            This option only applies to Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsBackup">
            <summary>
            Defines whether to save a backup copy of the workbook or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsCheckCompatibility">
            <summary>
            Whether the "Check for compatibility" dialog will pop up when saving as xls in Excel 2007 or newer.
            This option only applies to Excel 2007 or newer. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsDates1904">
            <summary>
            Excel has 2 different date systems. On windows systems it uses 1900 based dates, and on Macintosh systems it uses 1904 dates.
            You can change this on Excel under Options, and this property allows you to know and change which format is being used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsForceFullRecalc">
            <summary>
            If true, the full workbook will be recalculated when open in Excel.
            This option only applies to Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsMultithreadRecalc">
            <summary>
            Number of threads that can be used at the same time by Excel when recalculating. Set it to 0 to disable multithread recalculation, and to -1
            to let Excel decide the best number of threads to use. The maximum value for this property is 1024.<br />
            This option only applies to Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsPrecisionAsDisplayed">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsR1C1">
            <summary>
            Use this property to change the reference system used in the file. Note that this option <b>only changes how Excel and
            FlexCel will display the file.</b> Internally, the formulas will always be stored in A1 format, and converted by Excel
            to and from R1C1 if this property is true. FlexCel will also use this property to render the file when it is set to print formulas.
            <br /><br />Also, this property doesn't change how FlexCel will parse or return the formula text in the cells or names. 
            By default, even if this property is true, you will need to enter the formulas in FlexCel in A1 mode. To change the
            entry mode in FlexCel, please use <see cref="P:FlexCel.Core.ExcelFile.FormulaReferenceStyle" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsRecalcCircularReferences">
            <summary>
            If true, Excel and FlexCel will do iterative calculating over cells with circular references,
            until <see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcMaxIterations" /> is reached or the difference is less than <see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcMaxChange" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsRecalcMaxChange">
            <summary>
            Maximum difference between 2 iterations when calculating circular references (<see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcCircularReferences" /> is true),
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsRecalcMaxIterations">
            <summary>
            Maximum number of iterations when calculating circular references (<see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcCircularReferences" /> is true),
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsRecalcMode">
            <summary>
            Reads and writes the recalculating options in the file. 
            <b>Note that this only affects the file and how Excel will recalculate, not how FlexCel does its recalculation.</b>
            FlexCel ignores this setting and uses <see cref="P:FlexCel.Core.ExcelFile.RecalcMode" /> instead.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsSaveExternalLinkValues">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OutlineAutomaticStyles">
            <summary>
            This handles the setting of Automatic Styles inside the outline options.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OutlineSummaryColsRightToDetail">
            <summary>
            Determines whether the summary columns should be right to or left to the details on outline.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OutlineSummaryRowsBelowDetail">
            <summary>
            Determines whether the summary rows should be below or above details on outline.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PageFooter">
            <summary>
            Page footer on the active sheet. For a description on the format of the string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PageHeader">
            <summary>
             Page header on the active sheet.
             <b>Note that this property sets the same header for the all the pages.</b> In Excel 2007 or newer you can set a different
             header for the first page, or odd/even pages. If you want to control these options, see <see cref="M:FlexCel.Core.ExcelFile.GetPageHeaderAndFooter" /> and <see cref="M:FlexCel.Core.ExcelFile.SetPageHeaderAndFooter(FlexCel.Core.THeaderAndFooter)" />.
             <br />
             A page header is a string that contains the text for the 3 parts of the header.<p />
             The Left section begins with &amp;L, the Center section with &amp;C and the Right with &amp;R<p />
             For example, the text"&amp;LThis goes at the left!&amp;CThis is centered!&amp;RThis is right aligned"
             will write text to all the sections.
             <p /><p />
             This is the full list of macros you can include:
            <p /><list type="bullet"><item>&amp;&amp; The "&amp;" character itself</item><item>&amp;L Start of the left section</item><item>&amp;C Start of the centered section</item><item>&amp;R Start of the right section</item><item>&amp;P Current page number</item><item>&amp;N Page count</item><item>&amp;D Current date</item><item>&amp;T Current time</item><item>&amp;A Sheet name</item><item>&amp;F File name without path</item><item>&amp;Z File path without file name (XP or Newer)</item><item>&amp;G Picture (XP or Newer)</item><item>&amp;U Underlining on/off</item><item>&amp;E Double underlining on/off</item><item>&amp;S Strikeout on/off</item><item>&amp;X Superscript on/off</item><item>&amp;Y Subscript on/off</item><item>&amp;"&lt;fontname&gt;" Set new font &lt;fontname&gt;</item><item>&amp;"&lt;fontname&gt;,&lt;fontstyle&gt;" Set new font with specified style &lt;fontstyle&gt;. The style &lt;fontstyle&gt; is in most cases
             one of "Regular", "Bold", "Italic", or "Bold Italic". But this setting is dependent on the
             used font, it may differ (localized style names, or "Standard", "Oblique", ...).</item><item>&amp;&lt;fontheight&gt; Set font height in points (&lt;fontheight&gt; is a decimal value). If this command is followed
             by a plain number to be printed in the header, it will be separated from the font height
             with a space character.</item></list><p />
             Normally, the easiest way to find out which header string you need is to create an xls file on Excel, add a header, open the file
             with FlexCel and take a look at the generated header (You can use the ApiMate tool for that).
             </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.PaletteContainsColor(FlexCel.Core.TExcelColor)">
            <param name="value">Color to check.</param>
            <summary>
            Returns true if the internal color palette contains the exact specified color. Note that Excel 2007 doesn't use the color palette, so this
            method is not needed there.
            </summary>
            <returns>True if color is defined.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.PasteFromTextClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.String)">
            <param name="row">First row where to paste.</param>
            <param name="col">First column where to paste.</param>
            <param name="insertMode">How the pasted cells will be inserted on the file.</param>
            <param name="data">A string containing a tab separated text format.</param>
            <summary>
            Pastes the clipboard contents beginning on cells row, col.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.PasteFromXlsClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.IO.Stream)">
            <param name="row">First row where to paste.</param>
            <param name="col">First column where to paste.</param>
            <param name="insertMode">How the pasted cells will be inserted on the file.</param>
            <param name="data">A stream containing a Native xls format.</param>
            <summary>
            Pastes the clipboard contents beginning on cells row, col.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.PasteFromXlsClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.IO.Stream,System.Boolean)">
            <param name="row">First row where to paste.</param>
            <param name="col">First column where to paste.</param>
            <param name="insertMode">How the pasted cells will be inserted on the file.</param>
            <param name="data">A stream containing a Native xls format.</param>
            <param name="convertFormulasToValues">If true, the formulas will be converted to values.</param>
            <summary>
            Pastes the clipboard contents beginning on cells row, col, with the option to convert formulas to their values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintCopies">
            <summary>
            Number of copies to print.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintFirstPageNumber">
            <summary>
            Page number that will be assigned to the first sheet when printing. (So it will show in page headers/footers).
            You might set this value to null to keep the page automatic. Also, the value returned here will be null it
            this value is not set (Set to Automatic)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintGridLines">
            <summary>
            True if the gray grid lines are printed when printing the spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintHCentered">
            <summary>
            When true the sheet will print horizontally centered on the page.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintHeadings">
            <summary>
            When true the row and column labels (A,B...etc for columns, 1,2... for rows) will be printed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintLandscape">
            <summary>
            If true, page will be printed landscape, else portrait.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages">
            <summary>
            If set, the sheet will be printed on at most this number of horizontal pages. Use 0 to have unlimited horizontal pages while still limiting the vertical pages with <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages" />. (see "Preparing for printing" in the PDF Api Guide) <seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages">
            <summary>
            If set, the sheet will be printed on at most this number of vertical pages. Use 0 to have unlimited vertical pages while still limiting the horizontal pages with <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages" />. (see "Preparing for printing" in the PDF Api Guide)<seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintOptions">
            <summary>
            All print options in a single place.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintPaperDimensions">
            <summary>
            Returns the dimensions for the selected paper. See also <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintPaperSize">
            <summary>
            Pre-defined standard paper size. If you want to set up a printer specific paper size, see <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintScale">
            <summary>
            Percent to grow/shrink the sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintToFit">
            <summary>
            If true, sheet will be configured to fit on <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages" /> x <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintVCentered">
            <summary>
            When true the sheet will print vertically centered on the page.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintXResolution">
            <summary>
            Horizontal printer resolution on DPI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintYResolution">
            <summary>
            Vertical printer resolution on DPI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.Protection">
            <summary>
            Protection data for the file. Modify its properties to open and read encrypted files.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Recalc">
            <summary>
            When <see cref="P:FlexCel.Core.ExcelFile.RecalcMode" /> is manual, use this method to force a recalculation of the spreadsheet.
            This specific version of the method will always perform a recalc, even if it is not needed.
            You can use <see cref="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)" /> to recalc only when is needed.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)">
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            When <see cref="P:FlexCel.Core.ExcelFile.RecalcMode" /> is manual, use this method to force a recalculation of the spreadsheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RecalcAndVerify">
            <summary>
            Use this method to validate a file. FlexCel does not support all the range of functions from Excel
            when recalculating, so unknown functions will return "#NAME!" errors. Using this function you can validate
            your user worksheets and see if all the formulas they use are supported.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RecalcCell(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="sheet">Sheet for the cell we want to recalculate. Use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> here to refer to the active sheet.</param>
            <param name="row">Row for the cell we want to recalculate. (1 based)</param>
            <param name="col">Column for the cell we want to recalculate. (1 based)</param>
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            This method will recalculate a single cell and all of it's dependencies, but not the whole workbook.<br /><b>USE THIS METHOD WITH CARE!</b> You will normally want to simply call <see cref="M:FlexCel.Core.ExcelFile.Recalc" /> or just save the file and let FlexCel calculate the workbook for you. 
            This method is for rare situations where you are making thousands of recalculations and the speed of Recalc is not enough, 
            and you have a big part of the spreadsheet that you know that didn't change.
            </summary>
            <returns>The result of the formula at the cell, or null if there is no formula.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RecalcExpression(System.String)">
            <param name="expression">Formula to evaluate. It must start with "=" and be a valid Excel formula.</param>
            <summary>
            Calculates the value of any formula and returns the result. The expression must be a valid Excel formula, it must start with "=",
            and cell references that don't specify a sheet (like for example "=A2") will refer to the active sheet. Cells used by the formula will be recalculated as needed too.<br />
            You can use this method as a simple calculator, or to calculate things like the sum
            of a range of cells in the spreadsheet. Look at the example for more information on how to use it. <br />
            Note that we will consider the expression to be located in
            the cell A1 of the Active sheet. So for example "=ROW()" will return 1, and "=A2" will return the value of A2 in the active sheet.
            </summary>
            <returns>The value of the calculated formula.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RecalcExpression(System.String,System.Boolean)">
            <param name="expression">Formula to evaluate. It must start with "=" and be a valid Excel formula.</param>
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            Calculates the value of any formula and returns the result. The expression must be a valid Excel formula, it must start with "=",
            and cell references that don't specify a sheet (like for example "=A2") will refer to the active sheet. Cells used by the formula will be recalculated as needed too.<br />
            You can use this method as a simple calculator, or to calculate things like the sum
            of a range of cells in the spreadsheet. Look at the example for more information on how to use it. <br />
            Note that we will consider the expression to be located in
            the cell A1 of the Active sheet. So for example "=ROW()" will return 1, and "=A2" will return the value of A2 in the active sheet.
            </summary>
            <returns>The value of the calculated formula.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.RecalcMode">
            <summary>
             Set this property to change how the file will be recalculated. Note that this affects only
             how FlexCel recalculates the file, but not how Excel will recalculate it. It doesn't change anything in 
             the generated file. To change the options for the file, use <see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcMode" /> instead.
             </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RecalcRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <param name="activeSheet">Sheet where you are positioned when doing the calculation. You might pass xls.ActiveSheet here.</param>
            <param name="activeRow">Row where you are positioned when doing the calculation. This only matters if you have functions
            that change depending on the cell you are in. (Mainly =Row() and =Column() functions).
            If you are not sure, specify 1 here.</param>
            <param name="activeCol">Column where you are positioned when doing the calculation. This only matters if you have functions
            that change depending on the cell you are in. (Mainly =Row() and =Column() functions).
            If you are not sure, specify 1 here.</param>
            <param name="rowOffset">Offset from the first cell of a range. This only matters if you have relative
            references that change depending on the cell you are in. (This is the case with named ranges or data validations and relative references like A1 instead of $A$1).
            If you are not sure, specify 0 here.</param>
            <param name="colOffset">Offset from the first cell of a range. This only matters if you have relative
            references that change depending on the cell you are in. (This is the case with named ranges or data validations and relative references like A1 instead of $A$1).
            If you are not sure, specify 0 here.</param>
            <param name="expression">Formula to evaluate. It must start with "=", be a valid Excel formula and resolve to a range of cells.</param>
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            This method recalculates a formula that returns a range, and returns the cells that compose it. Note that normally
            ranges are a single rectangle (like in "=A1:B2"), and in this case this method will return a single element in the array.
            But you might have a formula like "=A1:A10, C6:C7" which will return two different ranges. In this case, the returned array will have more than one TCellAddressRange.
            If the formula doesn't resolve to a range or group of ranges, this method will return null.
            </summary>
            <returns>The array of ranges that the formula refers to.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RecalcRelativeFormula(System.Int32,System.Int32,System.Int32,System.String)">
            <param name="activeSheet">Sheet where you are positioned when doing the calculation. You might pass xls.ActiveSheet here.</param>
            <param name="cellRow">Row of the cell where the relative formula is. </param>
            <param name="cellCol">Column of the cell where the relative formula is.</param>
            <param name="expression">Formula to offset. It must start with "=", and be a valid Excel formula.</param>
            <summary>
            Use this method to know the value of a formula that applies to a cell when the formula is relative.
            In some places, mostly data validations and names, Excel returns relative formulas. <br />
            So for example you might have a name with
            a definition of "=Sheet1!A2" when you are positioned at cell A1. If you now move the cursor to cell A2 in Excel, the name definition will
            be "=Sheet1!A3" since the reference is relative to the cell where the cursor is. If you use <see cref="M:FlexCel.Core.ExcelFile.RecalcExpression(System.String)" />
            to know the result of the formula, as FlexCel 
            doesn't have a cursor, it will always return the canonical formula as if you were positioned at A1. If you want to know the real formula
            when you are positioned at A2, you need to call this method with cellRow =3, cellCol = 1 and expression = "=Sheet1!A2". It will return
            the result of the formula "=Sheet1!A3". 
            </summary>
            <returns>The value of the calculated formula</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.Recalculating">
            <summary>
            Returns true if the workbook is being recalculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.RecalcVersion">
            <summary>
             Defines which version of Excel recalculation engine will be saved in the file. This affects
             how Excel will recalculate the file on open.<br /><br />
             If you set this property for example to Excel2007, then any Excel version newer than Excel 2007 
             will recalculate all formulas when you load the file, so it will
             modify the workbook and will ask for saving changes when closing. Even if you just open and close the file.
             Note that this will only happen if there are formulas on the sheet.
            <p><b>If there are any formulas that FlexCel can't recalculate, you should set this property to AlwaysRecalc.</b>
             For example, if you have the formula:
            <code>"=GETPIVOTDATA("a";"b")"</code> 
            FlexCel will return #NAME!, as it doesn't implement this function. If you open this file on Excel and 
            RecalcVersion was not AlwaysRecalc when saving, Excel will not calculate it and will show also #NAME!.
            If RecalcVersion was AlwaysRecalc, Excel will show the right answer, but will ask for saving the file when closing.
            </p></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.RecoveryMode">
            <summary>
            When this property is set to true, FlexCel will try to open corrupt files ignoring most of what can be ignored.
            Note that <b>FlexCel is not a recovery tool</b> and that this property might be able or not to open a corrupt file.
            Also, even if you are able to open the file with FlexCel, when you save the corrupt file, it might stay corrupt. FlexCel
            saves back as much as it can from the original file in order to preserve them, and this means it might save the corrupt parts too.
            <br /><br />
            Note that when opening a file in recovery mode, the value of <see cref="P:FlexCel.Core.ExcelFile.ErrorActions" /> is ignored, as we will try to ignore as much errors as we can.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RemoveAutoFilter">
            <summary>
            Removes the AutoFilter from the active sheet. If there is no AutoFilter in the sheet, this method does nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RemoveCustomXmlPart(System.Int32)">
            <param name="position">1-based index in the collection of custom parts.</param>
            <summary>
            Deletes the part at the given position. ( 1 based) 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RemoveMacros">
            <summary>
            If the file has macros, this method will remove them.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RemoveUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,System.String)">
            <param name="scope" />
            <param name="functionName">Name of the function. Case insensitive.</param>
            <summary>
            Removes a single function from the FlexCel recalculation engine. If the function doesn't exist, this 
            method will return false.
            </summary>
            <returns>True if the function existed and was removed, false if it didn't exist.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenameStyle(System.String,System.String)">
            <param name="oldName">Name of the existing style in the workbook.</param>
            <param name="newName">New name for the style. It must not exist.</param>
            <summary>
            Renames an existing style. Note that this might be an user-defined style, you can't rename built-in styles.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="row1">Index of the first row to render. (1 based).</param>
            <param name="col1">Index of the first column to render (1 based).</param>
            <param name="row2">Index of the last row to render. (1 based).</param>
            <param name="col2">Index of the last column to render (1 based).</param>
            <param name="drawBackground">If true, the image will have a solid background with the color of the cells. If false, the image will have
            a transparent background.</param>
            <summary>
            This method renders a range of cells into an image, and returns it.<br /> 
            No objects will be drawn on the cells, you can use <see cref="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)" /> to draw those.<br /><b>Important note:</b> This method will only render the text inside the cell, not the borders or anything else. If you want to 
            export an xls file to images, you probably want to use <see cref="T:FlexCel.Render.FlexCelImgExport" /></summary>
            <returns>An image with the rendered cells.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Double,FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUIInterpolationMode,System.Boolean)">
            <param name="row1">Index of the first row to render. (1 based).</param>
            <param name="col1">Index of the first column to render (1 based).</param>
            <param name="row2">Index of the last row to render. (1 based).</param>
            <param name="col2">Index of the last column to render (1 based).</param>
            <param name="drawBackground">If true, the image will have a solid background with the color of the cells. If false, the image will have
            a transparent background.</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see "System.Drawing.Drawing2D.SmoothingMode"</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see "System.Drawing.Drawing2D.InterpolationMode"</param>
            <param name="antiAliased">If true text will be antialiased when rendering.</param>
            <summary>
            This method renders a range of cells into an image, and returns it.<br /> 
            No objects will be drawn on the cells, you can use <see cref="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)" /> to draw those.<br /><b>Important note:</b> This method will only render the text inside the cell, not the borders or anything else. If you want to 
            export an xls file to images, you probably want to use <see cref="T:FlexCel.Render.FlexCelImgExport" /></summary>
            <returns>An image with the rendered cells.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Double,FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUIInterpolationMode,System.Boolean,System.Double)">
            <param name="row1">Index of the first row to render. (1 based).</param>
            <param name="col1">Index of the first column to render (1 based).</param>
            <param name="row2">Index of the last row to render. (1 based).</param>
            <param name="col2">Index of the last column to render (1 based).</param>
            <param name="drawBackground">If true, the image will have a solid background with the color of the cells. If false, the image will have
            a transparent background.</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see "System.Drawing.Drawing2D.SmoothingMode"</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see "System.Drawing.Drawing2D.InterpolationMode"</param>
            <param name="antiAliased">If true text will be antialiased when rendering.</param>
            <param name="aPageScale">Page scale. Use 1 for 100%</param>
            <summary>
            This method renders a range of cells into an image, and returns it.<br /> 
            No objects will be drawn on the cells, you can use <see cref="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)" /> to draw those.<br /><b>Important note:</b> This method will only render the text inside the cell, not the borders or anything else. If you want to 
            export an xls file to images, you probably want to use <see cref="T:FlexCel.Render.FlexCelImgExport" /></summary>
            <returns>An image with the rendered cells.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            <br />Background of the image will be transparent.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUIInterpolationMode,System.Boolean,System.Boolean,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@,FlexCel.Core.TUISize@)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see "System.Drawing.Drawing2D.SmoothingMode"</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see "System.Drawing.Drawing2D.InterpolationMode"</param>
            <param name="antiAliased">If true text will be antialiased when rendering for example a chart.</param>
            <param name="returnImage">If false, this method will return null. Use it if you need to know the image dimensions, but do not care about the real image since it is faster and uses less resources.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image. You can get the image size in pixels just by looking at the image returned.</param>
            <param name="imageSizePixels">Size of the returned image in pixels. You only need to use this if returnImage is false, since the returned bitmap will be null. Otherwise, you can just read the bitmap size.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUIInterpolationMode,System.Boolean,System.Boolean,FlexCel.Core.TUIColor,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@,FlexCel.Core.TUISize@)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see "System.Drawing.Drawing2D.SmoothingMode"</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see "System.Drawing.Drawing2D.InterpolationMode"</param>
            <param name="antiAliased">If true text will be antialiased when rendering for example a chart.</param>
            <param name="returnImage">If false, this method will return null. Use it if you need to know the image dimensions, but do not care about the real image since it is faster and uses less resources.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image. You can get the image size in pixels just by looking at the image returned.</param>
            <param name="imageSizePixels">Size of the returned image in pixels. You only need to use this if returnImage is false, since the returned bitmap will be null. Otherwise, you can just read the bitmap size.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUIInterpolationMode,System.Boolean,System.Boolean,FlexCel.Core.TUIColor,System.Double,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@,FlexCel.Core.TUISize@)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see "System.Drawing.Drawing2D.SmoothingMode"</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see "System.Drawing.Drawing2D.InterpolationMode"</param>
            <param name="antiAliased">If true text will be antialiased when rendering for example a chart.</param>
            <param name="returnImage">If false, this method will return null. Use it if you need to know the image dimensions, but do not care about the real image since it is faster and uses less resources.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="aPageScale">Page scale. Use 1 for 100%</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image. You can get the image size in pixels just by looking at the image returned.</param>
            <param name="imageSizePixels">Size of the returned image in pixels. You only need to use this if returnImage is false, since the returned bitmap will be null. Otherwise, you can just read the bitmap size.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObjectAsSVG(System.Int32,System.String,System.String,System.Text.Encoding)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="encoding">Encoding that will be declared for the xml file if ExportType is all.
            Note that the result string will always be UTF16 encoded, but if you want to save it to an UTF8 file,
            you will have to set encoding = utf8. Also note that this parameter is only used if the ExportType parameter is All.
            It only affects the xml declaration.<br />If null, utf-8 will be used.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an SVG image, and returns the XML for the image.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObjectAsSVG(System.IO.Stream,System.Int32,System.String,System.String,System.Text.Encoding)">
            <param name="resultStream">Stream where the file will be saved.</param>
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="encoding">Encoding that will be used for the xml.<br />If null, utf-8 will be used.</param>
            <summary>
            This method saves any object (chart, image, autoshape, etc) into an SVG image inside a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObjectAsSVG(System.Int32,FlexCel.Core.TShapeProperties,FlexCel.Core.TUIColor,FlexCel.Core.TSVGExportType,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{FlexCel.Core.TSVGAttribute},System.Text.Encoding,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="exportType">How much of the SVG will be exported.</param>
            <param name="idPrefix">
            Prefix to be used in all definitions inside the svg file. For normal SVG files you can leave this null,
            but if you are embedding the files inside an html file, you need to ensure every image has unique identifiers.
            All SVG identifiers from different images inside an html file must be unique.
            </param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="extraSVGAttributes">Extra attributes to be added to the svg tag.</param>
            <param name="encoding">Encoding that will be declared for the xml file if exportType is All.
            Note that the result string will always be UTF16 encoded, but if you want to save it to an UTF8 file,
            you will have to set encoding = utf8. Also note that this parameter is only used if the exportType parameter is All.
            It only affects the xml declaration.<br />If null, utf-8 will be used.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an SVG image, and returns the XML for the image.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObjectAsSVG(System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUIColor,FlexCel.Core.TSVGExportType,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{FlexCel.Core.TSVGAttribute},System.Text.Encoding,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="aPageScale">Page scale. Use 1 for 100%</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="exportType">How much of the SVG will be exported.</param>
            <param name="idPrefix">
            Prefix to be used in all definitions inside the svg file. For normal SVG files you can leave this null,
            but if you are embedding the files inside an html file, you need to ensure every image has unique identifiers.
            All SVG identifiers from different images inside an html file must be unique.
            </param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="extraSVGAttributes">Extra attributes to be added to the svg tag.</param>
            <param name="encoding">Encoding that will be declared for the xml file if exportType is All.
            Note that the result string will always be UTF16 encoded, but if you want to save it to an UTF8 file,
            you will have to set encoding = utf8. Also note that this parameter is only used if the exportType parameter is All.
            It only affects the xml declaration.<br />If null, utf-8 will be used.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an SVG image, and returns the XML for the image.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObjectAsSVG(System.IO.Stream,System.Int32,FlexCel.Core.TShapeProperties,FlexCel.Core.TUIColor,FlexCel.Core.TSVGExportType,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{FlexCel.Core.TSVGAttribute},System.Text.Encoding,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@)">
            <param name="resultStream">Stream where the data will be saved.</param>
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="exportType">How much of the SVG will be exported.</param>
            <param name="idPrefix">
            Prefix to be used in all definitions inside the svg file. For normal SVG files you can leave this null,
            but if you are embedding the files inside an html file, you need to ensure every image has unique identifiers.
            All SVG identifiers from different images inside an html file must be unique.
            </param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="extraSVGAttributes">Extra attributes to be added to the svg tag.</param>
            <param name="encoding">Encoding that will be used for the xml.<br />If null, utf-8 will be used.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image.</param>
            <summary>
            This method saves any object (chart, image, autoshape, etc) into an SVG image inside a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObjectAsSVG(System.IO.Stream,System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUIColor,FlexCel.Core.TSVGExportType,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{FlexCel.Core.TSVGAttribute},System.Text.Encoding,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@)">
            <param name="resultStream">Stream where the data will be saved.</param>
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="aPageScale">Page scale. Use 1 for 100%</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="exportType">How much of the SVG will be exported.</param>
            <param name="idPrefix">
            Prefix to be used in all definitions inside the svg file. For normal SVG files you can leave this null,
            but if you are embedding the files inside an html file, you need to ensure every image has unique identifiers.
            All SVG identifiers from different images inside an html file must be unique.
            </param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="extraSVGAttributes">Extra attributes to be added to the svg tag.</param>
            <param name="encoding">Encoding that will be used for the xml.<br />If null, utf-8 will be used.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image.</param>
            <summary>
            This method saves any object (chart, image, autoshape, etc) into an SVG image inside a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Replace(System.Object,System.Object,FlexCel.Core.TXlsCellRange,System.Boolean,System.Boolean,System.Boolean)">
            <param name="oldValue">Value we want to replace.</param>
            <param name="newValue">Value we want to use to replace oldValue.</param>
            <param name="Range">Range to Search. Null means the whole worksheet.</param>
            <param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param>
            <param name="SearchInFormulas">If true, the search will cover formulas too.</param>
            <param name="WholeCellContents">If true, only whole cells will be replaced.</param>
            <summary>
            Replaces the instances of oldValue by newValue in the active sheet.
            </summary>
            <returns>The number of replacements done.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Replace(System.Object,System.Object,FlexCel.Core.TXlsCellRange,System.Boolean,System.Boolean,System.Boolean,System.Action{FlexCel.Core.TReplaceAction})">
            <param name="oldValue">Value we want to replace.</param>
            <param name="newValue">Value we want to use to replace oldValue.</param>
            <param name="Range">Range to Search. Null means the whole worksheet.</param>
            <param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param>
            <param name="SearchInFormulas">If true, the search will cover formulas too.</param>
            <param name="WholeCellContents">If true, only whole cells will be replaced.</param>
            <param name="ReplaceAction">Action to be performed in every replacement.</param>
            <summary>
            Replaces the instances of oldValue by newValue in the active sheet, and allows to specify the cell format and value for every replaced cell.
            </summary>
            <returns>The number of replacements done.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.RowCount">
            <summary>
            Number of rows actually used on the sheet. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream)">
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <summary>
            Saves the file to a stream, on native format.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String)">
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /> is false, then fileName MUST NOT exist.</param>
            <summary>
            Saves the file to disk, on native format.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats)">
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <param name="fileFormat">File format. If file format is text, a tab will be used as delimiter.  Automatic will try to guess it from the filename, if present.</param>
            <summary>
            Saves the file to a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String,FlexCel.Core.TFileFormats)">
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /> is false, then fileName MUST NOT exist.</param>
            <param name="fileFormat">File format. If file format is text, a tab will be used as delimiter.  Automatic will try to guess it from the filename, if present.</param>
            <summary>
            Saves the file to a disk.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char)">
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <param name="fileFormat">File format. Automatic will try to guess it from the filename, if present.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <summary>
            Saves the file to a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String,FlexCel.Core.TFileFormats,System.Char)">
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /> is false, then fileName MUST NOT exist.</param>
            <param name="fileFormat">File format. Automatic will try to guess it from the filename, if present.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <summary>
            Saves the file to a disk.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <param name="fileFormat">File format. Automatic will try to guess it from the filename, if present.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls files. If omitted, Encoding.UTF8 will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Saves the file to a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /> is false, then fileName MUST NOT exist.</param>
            <param name="fileFormat">File format.  Automatic will try to guess it from the filename, if present.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls/x files. If omitted, Encoding.UTF8 will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Saves the file to a disk.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SaveForHashing(System.IO.Stream)">
            <param name="aStream">Stream where the file will be saved. You will probably want to hash this stream to store the corresponding hash.</param>
            <summary>
            This method will save the file in a format that will remain the same if the file is not modified. Normal xls files contain TimeStamp
            fields that might be modified when the file is downloaded or just copied.<br />
            While you will not be able to load the file saved, you might use this method to create a hash of a file and compare it to others to know if something changed. 
            <br /><br />
            This overload will not save cell selections or the active sheet, and it is equivalent to calling <see cref="M:FlexCel.Core.ExcelFile.SaveForHashing(System.IO.Stream,FlexCel.Core.TExcludedRecords)" /> with
            the excludedRecords parameter set to TExcludedRecords.All. Use <see cref="M:FlexCel.Core.ExcelFile.SaveForHashing(System.IO.Stream,FlexCel.Core.TExcludedRecords)" /> for more control on which records to exclude.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SaveForHashing(System.IO.Stream,FlexCel.Core.TExcludedRecords)">
            <param name="aStream">Stream where the file will be saved. You will probably want to hash this stream to store the corresponding hash.</param>
            <param name="excludedRecords">A list with all the records you don't wish to include in the saved file (like for example cell selection). You will normally will want to 
            specify <b>TExcludedRecords.All</b> here, but you can OR different members of the TExcludedRecords enumerations for more control on what is saved.</param>
            <summary>
            This method will save the file in a format that will remain the same if the file is not modified. Normal xls files contain TimeStamp
            fields that might be modified when the file is downloaded or just copied.<br />
            While you will not be able to load the file saved, you might use this method to create a hash of a file and compare it to others to know if something changed. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ScreenScaling">
            <summary>
            This property lets you specify the screen scaling that FlexCel will assume for reading xlsx files in 
            percent. (default is 100 which means 100%). The values can be between 100 and 500.
            <para>
            Column widths in xlsx files which don't have a fixed column width set will be different in different screen 
            resolutions. So we need to know which resolution to emulate in order to read those file correctly.
            You will probably want to leave this property to the default value of 100, but you can change it if needed.
            </para>
            For more information, please read http://www.tmssoftware.com/site/blog.asp?post=311
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ScrollWindow(System.Int32,System.Int32)">
            <param name="row">First visible row.</param>
            <param name="col">First visible column.</param>
            <summary>
            Scrolls the window to an specified place. If the window is split, it will move the left and top panels.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ScrollWindow(FlexCel.Core.TPanePosition,System.Int32,System.Int32)">
            <param name="panePosition">Pane to move. Note that if you move for example the left column of the upper left pane, you will also move the left column of the lower left pane.</param>
            <param name="row">First visible row.</param>
            <param name="col">First visible column.</param>
            <summary>
            Scrolls the window to an specified place. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SelectCell(System.Int32,System.Int32,System.Boolean)">
            <param name="row">Row to select (1 based)</param>
            <param name="col">Column to select (1 based)</param>
            <param name="scrollWindow">When true, window will scroll so the selected cell is visible. This is equivalent to using <see cref="M:FlexCel.Core.ExcelFile.ScrollWindow(System.Int32,System.Int32)" /> method and is provided as a shortcut.</param>
            <summary>
            Selects a single cell. To select multiple cells,
            use <see cref="M:FlexCel.Core.ExcelFile.SelectCells(FlexCel.Core.TXlsCellRange[])" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SelectCells(FlexCel.Core.TXlsCellRange[])">
            <param name="cellRange">Cells to select.</param>
            <summary>
            Selects a group of cells on a given pane. If you just want to select just one cell, you can use the simpler method <see cref="M:FlexCel.Core.ExcelFile.SelectCell(System.Int32,System.Int32,System.Boolean)" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SemiAbsoluteReferences">
            <summary>
            When this property is false, inserting and copying ranges will behave the same as it does in Excel.
            When this property is true, absolute references to cells inside the block being copied will be treated as relative.
            For example, if you have:
            <code>
            A1: 2
            B1: =$A$1 + $A$57
            and you copy the row 1 to row 2, in Excel or FlexCel when this property is false you will get:
            A2: 2
            B2: =$A$1 + $A$57
            When this property is true, you will get:
            A2: 2
            B2: =$A$2 + $A$57
            </code>
            In the second case, the first reference was updated because it was inside the range being copied, but the second was not.
            This property might be useful when you want to duplicate blocks of cells, but want the absolute references inside it to point to the newer block.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
            Sends the graphical object one layer down. It will show below and will be covered by image at objectIndex-1. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
            Sends the graphical object one layer up on the display (z-order) position. It will show above and will cover the image at objectIndex+1. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
             Sends the graphical object to the bottom layer on the display (z-order) position. It will show below and will be covered by all other objects on the sheet. 
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetAutoFilter(FlexCel.Core.TXlsCellRange)">
            <param name="range">Range to set the AutoFilter. If range is null, this method does nothing. The bottom coordinate on range will not be used.</param>
            <summary>
            Sets an AutoFilter in a cell range. Note that the bottom coordinate of the range will be ignored, since AutoFilters 
            use only one row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetAutoFilter(System.Int32,System.Int32,System.Int32)">
            <param name="row">Row where the AutoFilter will be placed (1 based).</param>
            <param name="col1">First column for the AutoFilter range (1 based).</param>
            <param name="col2">Last column for the AutoFilter range (1 based).</param>
            <summary>
            Sets the AutoFilter in the Active sheet to point to the range specified.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)">
            <param name="row">Row index (1-based)</param>
            <param name="autoRowHeight">If true, row will have autofit.</param>
            <summary>
            Sets the current row to automatically autosize to the biggest cell or not.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCachedFont0(FlexCel.Core.TCachedFontWidth)">
            <param name="cachedFont" />
            <summary>
            This method is used by FlexCel itself, you shouldn't call it directly.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)">
            <param name="row">Row index of the cell (1 based)</param>
            <param name="col">Column index of the cell (1 based)</param>
            <param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
            <summary>
            Sets the Cell format (XF) on a given cell.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
            <summary>
            Sets the Cell format (XF) on a range of cells.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat)">
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="newFormat">Format to apply to the cells.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param>
            <summary>
            Changes part of the Cell format on a range of cells. WARNING! This method is slower than the other SetCellFormat versions, use it only
            if you do not care about maximum performance or if you just can't use the other SetCellFormat versions.
            This particular version of SetCellFormat has to read the format on each cell, modify it and write it back.
            While still very fast, it is not as fast as just setting the format on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="newFormat">Format to apply to the cells.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param>
            <param name="exteriorBorders">When true, the format for the border will be applied only to the outer cells in the range. This can
            be useful for example to draw a box around a range of cells, but not drawing borders inside the range. 
            Other parameters, like the cell background, will still be applied to the full range.</param>
            <summary>
            Changes part of the Cell format on a range of cells. WARNING! This method is slower than the other SetCellFormat versions, use it only
            if you do not care about maximum performance or if you just can't use the other SetCellFormat versions.
            This particular version of SetCellFormat has to read the format on each cell, modify it and write it back.
            While still very fast, it is not as fast as just setting the format on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="htmlText">Text with an HTML formatted string.</param>
            <summary>
            Enters an HTML formatted string into a cell, and tries to match the Excel formats with the HTML formatting tags.
            Note that the rich text inside Excel is more limited than xls (you are limited to only changing font attributes),
            so many tags from the HTML tags might be ignored. Whenever a tag is not understood or cannot be mapped into Excel,
            it will just be omitted. For a list of supported tags, see the <b>Remarks</b> section.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="htmlText">Text with an HTML formatted string.</param>
            <param name="XF">Format for the cell. It can be -1 to keep the existing format.</param>
            <summary>
            Enters an HTML formatted string into a cell, and tries to match the Excel formats with the HTML formatting tags.
            Note that the rich text inside Excel is more limited than xls (you are limited to only changing font attributes),
            so many tags from the HTML tags might be ignored. Whenever a tag is not understood or cannot be mapped into Excel,
            it will just be omitted. For a list of supported tags, see the <b>Remarks</b> section.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,System.String)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.String[])">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <param name="dateFormats">A list of formats allowed for dates and times. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,System.String,System.Int32)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,System.String,System.String[])">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <param name="dateFormats">A list of formats allowed for dates and times. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32,System.String[])">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
            <param name="dateFormats">A list of formats allowed for dates and times. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,System.String,System.Int32,System.String[])">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
            <param name="dateFormats">A list of formats allowed for dates and times. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellValue(System.Int32,System.Int32,System.Object)">
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="value">Value to set.</param>
            <summary>
            Sets the value on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellValue(System.Int32,System.Int32,System.Object,System.Int32)">
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="value">Value to set.</param>
            <param name="XF">Format to Set. You normally get this number with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function. Use -1 to keep format unchanged.</param>
            <summary>
            Sets the value and format on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellValue(System.Int32,System.Int32,System.Int32,System.Object,System.Int32)">
            <param name="sheet">Sheet number, 1 based</param>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="value">Value to set.</param>
            <param name="XF">Format to Set. You normally get this number with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function. Use -1 to keep format unchanged.</param>
            <summary>
            Sets the value on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCheckboxLinkedCell(System.Int32,System.String,FlexCel.Core.TCellAddress)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="linkedCell">Cell that will be linked to the checkbox. To unlink the checkbox, make this parameter null.</param>
            <summary>
            Links the checkbox to a cell, so when the cell changes the checkbox changes too, and vice-versa. To unlink the cell, make linkedCell null.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCheckboxState(System.Int32,System.String,FlexCel.Core.TCheckboxState)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="value">Value to set.</param>
            <summary>
            Sets the value of a checkbox in the active sheet. Note that this only works for <b>checkboxes added through the Forms toolbar.</b> 
            It won't return the values of ActiveX checkboxes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32)">
            <param name="col">Column to set.</param>
            <param name="XF">XF Format index.</param>
            <summary>
            Sets the format for an entire column.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32,System.Boolean)">
            <param name="col">Column to set.</param>
            <param name="XF">XF Format index.</param>
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format for an entire column. If you want to set the format for more than one column, use <see cref="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32,System.Int32,System.Boolean)" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32,System.Int32)">
            <param name="col1">First column in the range to set.</param>
            <param name="col2">Last column in the range to set.</param>
            <param name="XF">XF Format index.</param>
            <summary>
            Sets the format for a range of columns.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <param name="col">Column to set.</param>
            <param name="newFormat">Format to apply.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param>
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire column.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="col1">First column in the range to set.</param>
            <param name="col2">Last column in the range to set.</param>
            <param name="XF">XF Format index.</param>
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format for a range of columns.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColHidden(System.Int32,System.Boolean)">
            <param name="col">Column index (1 based).</param>
            <param name="hide">If true, column will be hidden, if false it will be visible.</param>
            <summary>
            Hides or shows an specific column. Note: If you are hiding many columns at the same time, 
            you can call <see cref="M:FlexCel.Core.ExcelFile.SetColHidden(System.Int32,System.Int32,System.Boolean)" /> as it is faster.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColHidden(System.Int32,System.Int32,System.Boolean)">
            <param name="col1">Column index of the first column in the range. (1 based)</param>
            <param name="col2">Column index of the last column in the range. (1 based)</param>
            <param name="hide">If true, column will be hidden, if false it will be visible.</param>
            <summary>
            Hides or shows a range of columns.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColOptions(System.Int32,System.Int32)">
            <param name="col">Column Index (1 based)</param>
            <param name="options">A flag with all column options.</param>
            <summary>
            Sets all Column options at once (if the column is hidden, etc). 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColorPalette(System.Int32,FlexCel.Core.TUIColor)">
            <param name="index">Index of the entry to change. Must be 1&lt;=indexlt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" /></param>
            <param name="value">Color to set.</param>
            <summary>
            Changes a color on the Excel color palette.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColorTheme(FlexCel.Core.TThemeColor,FlexCel.Core.TDrawingColor)">
            <param name="themeColor">Color of the theme to change.</param>
            <param name="value">Color to set.</param>
            <summary>
            Changes a color on the Excel theme. Only has effect in Excel 2007.
            <br />If you want to change the full theme, use <see cref="M:FlexCel.Core.ExcelFile.GetTheme" /> and <see cref="M:FlexCel.Core.ExcelFile.SetTheme(FlexCel.Core.TTheme)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColOutlineLevel(System.Int32,System.Int32)">
            <param name="col">Column index (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
            <summary>
            Sets the Outline level for a column.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <param name="firstCol">Column index of the first column on the range. (1 based)</param>
            <param name="lastCol">Column index of the last column on the range. (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
            <summary>
            Sets the Outline level for a column range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColWidth(System.Int32,System.Int32)">
            <param name="col">Column index (1 based)</param>
            <param name="width">Column width, in Excel internal units. (Character width of font 0 / 256). See <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.IRowColSize)" /></param>
            <summary>
            Sets the current Column width, in Excel internal units. (Character width of font 0 / 256)
            Note: if possible, set many column widths at once by calling <see cref="M:FlexCel.Core.ExcelFile.SetColWidth(System.Int32,System.Int32,System.Int32)" />. It is faster.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColWidth(System.Int32,System.Int32,System.Int32)">
            <param name="col1">Column index of the first column in the range. (1 based)</param>
            <param name="col2">Column index of the last column in the range. (1 based)</param>
            <param name="width">Column width, in Excel internal units. (Character width of font 0 / 256). See <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.IRowColSize)" /></param>
            <summary>
            Sets the width of a range of columns, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param>
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,System.String)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param>
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString,System.String,FlexCel.Core.TImageProperties)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param>
            <param name="author">Author of the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,System.String,System.String,FlexCel.Core.TImageProperties)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param>
            <param name="author">Author of the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="commentProperties">Placement and properties of the comment popup. Null if there is no comment on the cell. This parameter can be a TImageProperties, or the more complete derived class TCommentProperties, if you need to set extra information like the text alignment.</param>
            <summary>
            Sets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will create an empty one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="commentProperties">Comment properties. This parameter can be a TImageProperties, or the more complete derived class TCommentProperties, if you need to set extra information like the text alignment.</param>
            <summary>
            Sets the comment properties at the specified index.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,FlexCel.Core.TRichString,FlexCel.Core.TImageProperties)">
            <param name="row">Row Index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="value">Text of the comment. Set it to "new TRichString()" to remove the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <summary>
            Changes the properties (text and position of the popup) for an existing comment at commentIndex.
            To delete a comment, set a "new TRichString()" as the "value" param. To add a new comment, use <see cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)" />. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)">
            <param name="row">Row Index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to remove the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <summary>
            Changes the properties (text and position of the popup) for an existing comment at commentIndex.
            To delete a comment, set a String.Empty as the "value" param. To add a new comment, use <see cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)" />. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetFont(System.Int32,FlexCel.Core.TFlxFont)">
            <param name="fontIndex">Font index. 0-based</param>
            <param name="aFont">Font definition</param>
            <summary>
            Sets the font definition for a given font index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default font format. (using SetFont(0, font); )
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetFormat(System.Int32,FlexCel.Core.TFlxFormat)">
            <param name="formatIndex">Format index. 0-based</param>
            <param name="aFormat">Format definition</param>
            <summary>
            Sets the font definition for a given format index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default format. (using SetFormat(0, fmt); ). This method will change style XFs and CellXfs, depending if aFormat 
            is a StyleXF or a CellXF.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetFormulaTokens(System.Int32,System.Int32,FlexCel.Core.TToken[])">
            <param name="row">Row of the cell with the formula. (1 based)</param>
            <param name="col">Column of the cell with the formula. (1 based)</param>
            <param name="tokens">A collection of tokens which define the formula.</param>
            <summary>
            Sets a cell with the formula specified by its tokens. Normally you will get the tokens by modifying the result 
            of <see cref="M:FlexCel.Core.ExcelFile.GetFormulaTokens(System.Int32,System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetFormulaTokens(System.Int32,System.Int32,System.Int32,FlexCel.Core.TToken[])">
            <param name="sheet">Sheet of the cell with the formula. (1 based)</param>
            <param name="row">Row of the cell with the formula. (1 based)</param>
            <param name="col">Column of the cell with the formula. (1 based)</param>
            <param name="tokens">A collection of tokens which define the formula.</param>
            <summary>
            Sets a cell with the formula specified by its tokens. Normally you will get the tokens by modifying the result 
            of <see cref="M:FlexCel.Core.ExcelFile.GetFormulaTokens(System.Int32,System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,System.Byte[],FlexCel.Core.THeaderOrFooterImageProperties)">
            <param name="headerAndFooterKind">Type of page for which we want to set the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to set the image.</param>
            <param name="data">Image data.</param>
            <param name="properties">Image Size.</param>
            <summary>
            This method sets the image associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" />) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            ALSO, NOTE that only setting the image will not display it. You need to write &amp;G in 
            the corresponding <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> or <see cref="P:FlexCel.Core.ExcelFile.PageFooter" />
            This methods will try to automatically guess/convert the image type
            of the data to the better fit.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.THeaderOrFooterImageProperties)">
            <param name="headerAndFooterKind">Type of page for which we want to set the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to set the image.</param>
            <param name="data">Image data.</param>
            <param name="imageType">The image type for the data sent. (If it is a bmp, jpg or other)</param>
            <param name="properties">Image size.</param>
            <summary>
            This method sets the image associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" />) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            ALSO, NOTE that only setting the image will not display it. You need to write &amp;G in 
            the corresponding <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> or <see cref="P:FlexCel.Core.ExcelFile.PageFooter" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <param name="value">Hyperlink description.</param>
            <summary>
            Modifies an existing Hyperlink. Use <see cref="M:FlexCel.Core.ExcelFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)" /> to add a new one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHyperLinkCellRange(System.Int32,FlexCel.Core.TXlsCellRange)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <param name="cellRange">Range of cells the hyperlink will refer to.</param>
            <summary>
            Changes the cells an hyperlink is linked to.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,FlexCel.Core.TUIImage)">
            <param name="imageIndex">Image Index. 1-Based.</param>
            <param name="Img">Image to replace.</param>
            <summary>
            WARNING!  Not CF compliant.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,System.Byte[])">
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="data">Image data.</param>
            <summary>
            Sets the image data for an existing image. It will try to automatically guess/convert the image type
            of the data to the better fit.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,System.Byte[],FlexCel.Core.TXlsImgType)">
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="data">Image data.</param>
            <param name="imageType">Image type of the new data.</param>
            <summary>
            Sets the image data and / or image properties of an existing image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,FlexCel.Core.TUIImage,System.Boolean,System.String)">
            <param name="imageIndex">Image Index. 1-Based.</param>
            <param name="Img">Image to replace.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            <see cref="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)" /> which is a slow method, by setting this parameter to true.</param>
            <param name="objectPath">Path to the object, when the object is grouped with others. This parameter only
            has meaning if usesObjectIndex is true.<br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            WARNING!  Not CF compliant.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,System.Byte[],System.Boolean,System.String)">
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="data">Image data.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            <see cref="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)" /> which is a slow method, by setting this parameter to true.</param>
            <param name="objectPath">Path to the object, when the object is grouped with others. This parameter only
            has meaning if usesObjectIndex is true.<br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Sets the image data for an existing image. It will try to automatically guess/convert the image type
            of the data to the better fit.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,System.Byte[],FlexCel.Core.TXlsImgType,System.Boolean,System.String)">
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="data">Image data.</param>
            <param name="imageType">Image type of the new data.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            <see cref="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)" /> which is a slow method, by setting this parameter to true.</param>
            <param name="objectPath">Path to the object, when the object is grouped with others. This parameter only
            has meaning if usesObjectIndex is true. <br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Sets the image data and / or image properties of an existing image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImageProperties(System.Int32,FlexCel.Core.TImageProperties)">
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="imageProperties">Image size, placement, etc. </param>
            <summary>
            Sets the image properties of an existing image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetLink(System.Int32,System.String)">
            <param name="index">Index of the link (1 based). i goes between 1 and <see cref="P:FlexCel.Core.ExcelFile.LinkCount" /></param>
            <param name="value">Please make sure this is a VALID filename, or you are likely to crash Excel. Also, xls file format doesn't like
            paths starting with "..", so you might need to enter the full path here.</param>
            <summary>
            Changes the external link at position i for a new value. Note that you can't add new links with this method, external links
            are added automatically when you add formulas that reference other worksheets. This method is only to change existing links to point to
            other place. All formulas pointing to the old link will point to the new.<br />
            Note that the replacing filename should have the same sheets as the original, or the formulas might break.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)">
            <param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
            <summary>
            Modifies or adds a Named Range. If the named range exists, it will be modified, else it will be added.
            If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" />
            Look at the example for more information.
            </summary>
            <returns>The name index of the inserted or modified range (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetNamedRange(System.Int32,FlexCel.Core.TXlsNamedRange)">
            <param name="index">Index of the named range we are trying to modify.</param>
            <param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
            <summary>
            Modifies a Named Range in the specified position. You could normally use <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)" /> to do this,
            but if you want to modify the name of the named range, then you need to use this overloaded version. <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)" />
            would add a new range instead of modifying the existing one if you change the name.
            Look at the example for more information on how to use it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectAnchor(System.Int32,FlexCel.Core.TClientAnchor)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectAnchor">Coordinates of the object.</param>
            <summary>
            Sets the object placement.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectAnchor(System.Int32,System.String,FlexCel.Core.TClientAnchor)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Object path t the shape if this is a grouped shape.</param>
            <param name="objectAnchor">Coordinates of the object.</param>
            <summary>
            Sets the object placement.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectInputRange(System.Int32,System.String,FlexCel.Core.TCellAddressRange)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="inputRange">Input range for the object.</param>
            <summary>
            Sets the input range for a ListBox or a ComboBox. When applied to other objects, this method does nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectLinkedCell(System.Int32,System.String,FlexCel.Core.TCellAddress)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="linkedCell">Cell that will be linked to the radio button. To unlink the radio button, make this parameter null.</param>
            <summary>
            Links the object to a cell, if the object can be linked. If the object is a radio button then all the other radio buttons in the group will be linked
            to the same cell, 
            so when the cell changes the radio buttons too, and vice-versa. To unlink the cell, make linkedCell null.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectMacro(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="macro">Macro that will be associated with the object. Look at ApiMate to know the exact name you have to enter here.</param>
            <summary>
            Associates an object with a macro. While this will normally be used in buttons, you can associate macros to
            almost any object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectName(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="name">Name for the autoshape. Use null to remove the name from an AutoShape.</param>
            <summary>
            Sets the name for an autoshape.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,FlexCel.Core.TDrawingHyperlink)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change. For hyperlinks it should be <see cref="F:FlexCel.Core.TShapeOption.pihlShape" /></param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets an Hyperlink property for an autoshape. Verify the property expects a Hyperlink, currently only <see cref="F:FlexCel.Core.TShapeOption.pihlShape" /> expects hyperlinks.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Double)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets a DOUBLE (Encoded as 16.16) property for an autoshape. Verify the property expects a DOUBLE.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int64)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets a LONG property for an autoshape. Verify the property expects a LONG.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="text">Text you want to use.</param>
            <summary>
            Sets a STRING property for an autoshape. Verify the property expects a STRING.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods. (like SetObjectText)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int32,System.Boolean)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change. MAKE SURE it is the LAST property in the set.</param>
            <param name="positionInSet">Boolean properties are grouped so all properties on one set are in only
            one value. So, the last bool property on the set is the first bit, and so on. ONLY THE LAST PROPERTY
            ON THE SET IS PRESENT.</param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets a BOOLEAN property for an autoshape. Verify the property expects a BOOLEAN.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            Note that boolean properties are all stored in the same byte of the last property in the set.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectSelection(System.Int32,System.String,System.Int32)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="selectedItem">Position of the selected item in the object. 0 means no selection, 1 means that the
            first item is selected.</param>
            <summary>
            Sets the selected item of an object from the "Forms" palette. It can be a combobox, a listbox, a spinbox or a scrollbar. Note that this only works for <b>objects added through the Forms toolbar.</b> 
            It won't return the values of ActiveX objects.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectSpinProperties(System.Int32,System.String,FlexCel.Core.TSpinProperties)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="spinProps">Properties of the spinner.</param>
            <summary>
            Sets the spin properties of an object. You should apply this only to scrollbars and spinners.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectSpinValue(System.Int32,System.String,System.Int32)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="value">Position for the scrollbar.</param>
            <summary>
            Sets the position in a scrollbar object. If the object is linked to a cell, the cell will be updated.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectText(System.Int32,System.String,FlexCel.Core.TDrawingRichString)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the rich string properties of the object text,
            and preserve those things not available in a TRichString like wordArt effects.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectText(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the text of the object,
            and preserve the existing formatting in the object if there was one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetPageHeaderAndFooter(FlexCel.Core.THeaderAndFooter)">
            <param name="headerAndFooter">Structure with the headers and footers definition.</param>
            <summary>
            This method will set all the headers and footers in a sheet. If you want a simple header or footer for all the pages, you might want to use <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)">
            <param name="settings">Printer driver information obtained with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings" />. Use null to remove the printer settings.</param>
            <summary>
            Sets printer driver information. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings" /> to copy printer driver information from a file
            to another.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetPrintMargins(FlexCel.Core.TXlsMargins)">
            <param name="value" />
            <summary>
            Sets the Margins on the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRadioButtonState(System.Int32,System.String,System.Boolean)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="selected">If true, the option button will be set, and all other buttons in the range will be deselected.
            When false the radio button will be deselected.</param>
            <summary>
            Sets the value of a radio button in the active sheet. Note that this only works for <b>radio buttons added through the Forms toolbar.</b> 
            It won't return the values of ActiveX radio buttons
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowFormat(System.Int32,System.Int32)">
            <param name="row">Row index (1-based)</param>
            <param name="XF">XF format.</param>
            <summary>
            Sets the XF format for the entire row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowFormat(System.Int32,System.Int32,System.Boolean)">
            <param name="row">Row index (1-based)</param>
            <param name="XF">XF format.</param>
            <param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the XF format for the entire row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <param name="row">Row index (1-based)</param>
            <param name="newFormat">Format to apply.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param>
            <param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowHeight(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="height">Row height, in Excel internal units. (1/20th of a point). See <see cref="F:FlexCel.Core.FlxConsts.RowMult" /></param>
            <summary>
            Sets the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowHidden(System.Int32,System.Boolean)">
            <param name="row">Row index (1 based)</param>
            <param name="hide">If true, row will be hidden, if false it will be visible.</param>
            <summary>
            Hides or shows an specific row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowOptions(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="options">A flag with all row options</param>
            <summary>
            Sets all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowOutlineLevel(System.Int32,System.Int32)">
            <param name="row">Row index (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
            <summary>
            Sets the Outline level for a row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">Row index of the first row on the range. (1 based)</param>
            <param name="lastRow">Row index of the last row on the range. (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
            <summary>
            Sets the Outline level for a row range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetSheetBackground(System.Byte[])">
            <param name="imgData">Bytes with the image data.</param>
            <summary>
            Sets the sheet background for the active sheet. Set it to null to remove the background.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetSheetSelected(System.Int32,System.Boolean)">
            <param name="sheetIndex">Sheet index for the sheet we want to select or unselect.(1 based)</param>
            <param name="selected">If true the sheet will be selected, otherwise it will be unselected.</param>
            <summary>
            This method will set a sheet tab as selected. Note that this is different from <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> in that
            you might have only a single active sheet, but you might select many tabs by ctrl-clicking them. Also note that whenever
            you change the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" />, the selected sheets will be reset to the active sheet only. So if you want to save
            a file with more than one selected sheet, you should call this method <b>after</b> the last call to activesheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetStyle(System.String,FlexCel.Core.TFlxFormat)">
            <param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of built-in names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)" /></param>
            <param name="fmt">The new style definition.</param>
            <summary>
            Modifies an existing style if name already exists, or creates a new style if it doesn't. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetTheme(FlexCel.Core.TTheme)">
            <param name="aTheme">Theme to set. You would normally use the result from <see cref="M:FlexCel.Core.ExcelFile.GetTheme" /> here, or you might load a method from a ".tmx" file.
            There are many standard tmx files available in an Office installation under the "Document Themes Version" folder</param>
            <summary>
            This is an advanced method, that allows you to set the full theme in use. Normally you will just want to replace colors, and you can do this with
            <see cref="M:FlexCel.Core.ExcelFile.SetColorTheme(FlexCel.Core.TThemeColor,FlexCel.Core.TDrawingColor)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetColorTheme(FlexCel.Core.TThemeColor)" /> methods.<br /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetThemeFont(FlexCel.Core.TFontScheme,FlexCel.Core.TThemeFont)">
            <param name="fontScheme">Font Scheme we want to set (either minor or major). Using "none" here will do nothing.</param>
            <param name="font">Font definition.</param>
            <summary>
            Sets either the minor or the major font for the theme.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetWhatIfTable(FlexCel.Core.TXlsCellRange,FlexCel.Core.TCellAddress,FlexCel.Core.TCellAddress)">
            <param name="range">Range for the table. This is the range of cells that will have "={TABLE()}" formulas.</param>
            <param name="rowInputCell">Row input cell for the table. Make it null if you don't want a row input cell. If both rowInputCell and colInputCell are null, a table with deleted references will be added.<br />
            Note that the sheet here is ignored, What-if tables need the input cells to be in the same sheet as the table.</param>
            <param name="colInputCell">Column input cell for the table. Make it null if you don't want a column input cell.  If both rowInputCell and colInputCell are null, a table with deleted references will be added.<br />
            Note that the sheet here is ignored, What-if tables need the input cells to be in the same sheet as the table.</param>
            <summary>
            Creates an Excel What-if table in the range of cells specified by Range. Calling this method is the same as setting a cell value
            with a TFormula where TFormula.Span has more than one cell, and TFormula.Text is something like "{=TABLE(,A4)}". The parameters
            for the =TABLE function are rowInputCell and colInputCell, and they look the same a Excel will show them.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetCodeName">
            <summary>
            Returns or sets the codename of a sheet, that is an unique identifier assigned to the sheet when it is created. 
            Codenames are useful because they never change once the file is created, and they are what macros reference.
            <b>Very important! We don't support changing codenames if the file has macros, because we can't modify the required macros
            to use the modified codename. Also, Excel 2003 or older will ignore the codename if the file doesn't have macros.
            Excel 2007 or newer will preserve the codenames even if the file doesn't have macros.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetCount">
            <summary>
            The number of sheets on the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetCountVisible">
            <summary>
            Number of visible sheets in the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetID">
            <summary>
            Returns an unique identifier for the active sheet. This is a value that is only used by FlexCel,
            and you can use it together with <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndexFromID(System.Guid)" /> to retrieve a sheet after deleting or adding sheets.
            While normally you can use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> to store and retrieve a sheet, if you plan to delete or add sheets before restoring the active sheet, the 
            stored ActiveSheet could become invalid. <b>Note that this is a value internal for FlexCel, and not stored in the xls/x file.</b> SheetIDs will change every time you open the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetName">
            <summary>
            Reads and changes the name of the active sheet. To switch to another sheet by its name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetOptions">
            <summary>
            This property groups a lot of properties of the sheet, like for example if it is showing formula texts or the results.
            Most of this properties can be changed directly from XlsFile, but this method allows you to change them all together,
            or to easily copy the options from one file to another.  Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetWindowOptions" /> for options that affect all sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetTabColor">
            <summary>
            Reads/Writes the color of the current sheet tab. <see cref="P:FlexCel.Core.TExcelColor.Automatic" /> to specify no color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetType">
            <summary>
            Use this property to know it the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> is a worksheet, a chart sheet or other.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetView">
            <summary>
            Returns and sets the page view mode with their corresponding zooms. Note that changing the zoom here changes <see cref="P:FlexCel.Core.ExcelFile.SheetZoom" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetVisible">
            <summary>
            Sets the visibility of the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetWindowOptions">
            <summary>
            This property groups a lot of properties of all the sheets in the workbook, like for example if the sheet tab bar at the bottom is visible.
             Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /> for options that affect only the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetZoom">
            <summary>
            Reads/Writes the zoom of the current sheet. Note that this property refers to the zoom in the current page view mode.
            If you are for example in Page Break Preview mode, this would be the zoom for Page Break Preview. You can change of page view mode
            and the zoom for all of the modes with <see cref="P:FlexCel.Core.ExcelFile.SheetView" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ShowFormulaText">
            <summary>
            When true, the formula text will be displayed instead of the formula value. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ShowGridHeadings">
            <summary>
            True is the column headings ("A", "B", etc) and row headings ("1", "2", etc) are shown. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /> by changing TSheetOptions.ShowRowAndColumnHeaders
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ShowGridLines">
            <summary>
            True if the gray grid lines are shown on the Active sheet. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Sort(FlexCel.Core.TXlsCellRange,System.Boolean,System.Int32[],FlexCel.Core.TSortOrder[],System.Collections.IComparer)">
            <param name="Range">Range to sort. It must not include headers.</param>
            <param name="ByRows">If true, rows will be sorted. If false, columns will.</param>
            <param name="Keys">An array of integers indicating the columns or rows you want to use for sorting. Note that this number is absolute, for example column 1 always means column "A" no matter if the range we are sorting begins at column "B".
            A null array means sort by the first column or row, then by the second, etc. up to 8 entries.</param>
            <param name="SortOrder">An array of flags indicating whether to sort ascending or descending for each Key. If null, all sorts will be ascending. If not null and the array size is less than the size of the "Keys" parameter, all missing entries are assumed to be Ascending.</param>
            <param name="Comparer">Comparer to create a custom way to compare the different items. Set it to null to use default ordering.</param>
            <summary>
            Sorts a range on the current sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Sort(FlexCel.Core.TXlsCellRange,System.Boolean,System.Int32[],FlexCel.Core.TSortOrder[],System.Collections.IComparer,FlexCel.Core.TSortFormulaMode)">
            <param name="Range">Range to sort. It must not include headers.</param>
            <param name="ByRows">If true, rows will be sorted. If false, columns will.</param>
            <param name="Keys">An array of integers indicating the columns or rows you want to use for sorting. Note that this number is absolute, for example column 1 always means column "A" no matter if the range we are sorting begins at column "B".
            A null array means sort by the first column or row, then by the second, etc. up to 8 entries.</param>
            <param name="SortOrder">An array of flags indicating whether to sort ascending or descending for each Key. If null, all sorts will be ascending. If not null and the array size is less than the size of the "Keys" parameter, all missing entries are assumed to be Ascending.</param>
            <param name="Comparer">Comparer to create a custom way to compare the different items. Set it to null to use default ordering.</param>
            <param name="SortFormulaMode">Defines how formulas in the file will be changed when sorting.</param>
            <summary>
            Sorts a range on the current sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)">
            <param name="xOffset">Offset from the left on 1/20 of a point. Zero for no vertical split.</param>
            <param name="yOffset">Offset from the top on 1/20 of a point. Zero for no horizontal split.</param>
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Split. It will split the
            window in 4 regions. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)" /> the windows are unsplitted and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetSplitWindow" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.StyleCount">
            <summary>
            Returns the number of named styles in the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Subtotal(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32[],System.Func{System.Object,System.String},System.String,System.Func{FlexCel.Core.TFlxFormat,System.Object,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,System.Object,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,System.Object,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat})">
            <param name="range">Range where to apply the subtotals. If null, the whole sheet will be used.</param>
            <param name="atChangeInColumn">Index of the column where we want to group in. Every time a value in this column
            changes from the previous row, a new subtotal will be added.</param>
            <param name="aggFunction">Function that will be used in the =Subtotal(...) formula added. To do a sum, set this value to 9.
            For other values, see the Excel reference in the =Subtotal function.</param>
            <param name="subtotalColumns">We will add a subtotal formula in each one of the columns in this array.</param>
            <param name="SubtotalText">In this function you need to return the text that will be written in every "Subtotal" line. 
            The parameter to this function is the value of the cell we are aggregating. If this function is null, "aggregatedcolumn Total" will be written.
            </param>
            <param name="grandtotalText">Text for the grand total line. If null or empty, no grand total line will be added.</param>
            <param name="SubTotalRowFormat">Row format for the subtotal rows added. You get a TFlxFormat and the cell value for the column you are aggregating, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to the rows.</param>
            <param name="SubTotalCellTextFormat">Cell format for the subtotal cells which contain text like "Food Subtotal". You get a TFlxFormat and the cell value for the column you are aggregating, and you must return a changed one with the format you want. You might leave this function null, and <b>bold</b> will be applied to all subtotal texts.</param>
            <param name="SubTotalCellFormulaFormat">Cell format for the subtotal cells which contain formulas like =Subtotal(...). You get a TFlxFormat and the cell value for the column you are aggregating, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to subtotal formulas.</param>
            <param name="GrandTotalRowFormat">Row format for the grand total row added. You get a TFlxFormat, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to the grand total row.</param>
            <param name="GrandTotalCellTextFormat">Cell format for the grand total cells which contain text like "Food Total". You get a TFlxFormat, and you must return a changed one with the format you want. You might leave this function null, and <b>bold</b> will be applied to all grand total texts.</param>
            <param name="GrandTotalCellFormulaFormat">Cell format for the grand total cells which contain formulas like =Subtotal(...). You get a TFlxFormat, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to grand total formulas.</param>
            <summary>
            This method works like the "Subtotal" command in Excel in the "Data" tab of the ribbon. It will take a number of
            cells and group them by similar values, adding a subtotal formula every new different value and a grand total at the end.
            It will also add outlines at the right.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.ExcelFile.SupportsXlsx">
            <summary>
            This property lets you know if the version of FlexCel.dll you are using supports XLSX file format.
            Currently XLSX is supported in all versions.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.System#Collections#IEnumerable#GetEnumerator">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.TableCount">
            <summary>
            Returns the number of tables in the whole workbook. (Not just the active sheet)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.TryGetBuiltInStyleType(System.String,FlexCel.Core.TBuiltInStyle@,System.Int32@)">
            <param name="styleName">Style that we want to convert to built-in style.</param>
            <param name="style">Returns the built-in style. This value is only valid if this method returns true.</param>
            <param name="level">Returns the level built-in style (1 based). This value is only valid if this method returns true, and only applies to outline styles. It will be 0 for non outline styles.</param>
            <summary>
            Tries to convert a string into an built-in style identifier. Will return true if styleName can be converted, false otherwise.
            </summary>
            <returns>True is styleNameis a built-in style (and thus style and level are valid), false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.UnMergeAllCellsInRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="firstRow">First row of the range.</param>
            <param name="firstCol">First column of the range.</param>
            <param name="lastRow">Last row of the range.</param>
            <param name="lastCol">Last column of the range.</param>
            <param name="fullyInside">If true, the merged cells have to be completely inside the range to be deleted.
            For example, if the file has a merged cell A1:A5, and you call UnMergeAllCellsInRange(1, 1, 1, 1, true) A1:A5 won't
            be unmerged because it isn't completely inside the range. If false, all merged cells that have at least one cell inside the
            range will be deleted. In the example with the merged cell A1:A5, UnMergeAllCellsInRange(1, 1, 1, 1, false) would
            remove the merged cell, because it has the cell A1 inside the range.</param>
            <summary>
            This method will unmerge all the cells that are inside a range of cells. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">First row of the merged cell.</param>
            <param name="firstCol">First column of the merged cell.</param>
            <param name="lastRow">Last row of the merged cell.</param>
            <param name="lastCol">Last column of the merged cell.</param>
            <summary>
            Unmerges the range of cells. The coordinates have to be exact, if there is no
            merged cell with the exact coordinates, nothing will be done. If you want to unmerge all cells inside a range, use <see cref="M:FlexCel.Core.ExcelFile.UnMergeAllCellsInRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" /> instead.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Core.ExcelFile.VirtualCellEndReading">
            <summary>
            When in virtual mode (<see cref="E:FlexCel.Core.ExcelFile.VirtualCellRead" /> is assigned) this event will be called
            after the file has been processed. You can use it to do cleanup. 
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Core.ExcelFile.VirtualCellRead">
            <summary>
            If you assign this event FlexCel will not load the file into memory when opening a file, allowing you to 
            open very big files using little memory. This event will be called for every value read from the file, and then 
            the value will be discarded, instead of loaded into memory. Look for "Virtual Mode" in the Performance Guide for more information.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Core.ExcelFile.VirtualCellStartReading">
            <summary>
            When in virtual mode (<see cref="E:FlexCel.Core.ExcelFile.VirtualCellRead" /> is assigned) this event will be called
            after the sheet names have been read, but before starting to read the cells. You can use 
            this event to know how many sheets you are reading.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.VirtualMode">
            <summary>
            Set this value to true to turn Virtual Mode on. "Virtual Mode" is explained in the Performance Guide.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.VPageBreakCount">
            <summary>
            The number of vertical page breaks in the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.WidthCorrection">
            <summary>
            Factor to multiply default column widths. See remarks for a detailed explanation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.XlsBiffVersion">
            <summary>
            Xls files created by Excel 2007 have additional records that allow the generated file to store characteristics not available in Excel 2003 or older.
            (Like for example True color for cells instead of 54 colors). When opening an xls file created by Excel 2007 in Excel 2007, Excel will be able to read those values back.
            <br />By default FlexCel will read those extra records and when reading, and identify the file it creates as created by Excel 2007 when writing, so when you open it in Excel 2007 it will read those additional records.
            If for any reason you prefer FlexCel to behave as Excel 2003, saving the files as if they were created by Excel 2003 (So Excel 2007 will ignore the additional characteristics),
            and also stop FlexCel from reading those extra records, just change the value of this property.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.ExcelFile.XlsxExtraCompatibility">
            <summary>
            By default, FlexCel creates xlsx files that conform to the published xlsx spec, but are not necessarily the same
            as a file Excel would create. FlexCel might use different prefixes, etc, as the ones Excel choose to use.
            While this is ok, some third party tools might have problems opening the xlsx files if they are not exactly as Excel would
            create them. If you are having issues with third party tools and the xlsx files created by FlexCel, you can try
            setting this property to true. <b>Note: </b> setting this property to true might result in files that contain invalid Ids, because the Ids
            are used by FlexCel and Excel. This is a very unlikely possibility, but the risk is there. If possible, it is best to keep this
            property false.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ExcelFont">
            <summary>
            Utility methods to create normal fonts from Excel ones.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFont.ConvertFontStyle(FlexCel.Core.TFlxFont)">
            <param name="Fx">FlexCel font to convert.</param>
            <summary>
            Converts between a standard FontStyle and a TFlxFont.
            </summary>
            <returns>A similar FontStyle.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelFont.CreateFont(System.String,System.Double,FlexCel.Core.TUIFontStyle)">
            <param name="FontName">Name of the font we want to create.</param>
            <param name="FontSize">Size of the font.</param>
            <param name="Style">Style of the font.</param>
            <summary>
            Tries to create a new font given the Excel data.
            </summary>
            <returns>A new font with the desired parameters.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ExcelMetrics">
            <summary>
            Returns Information to convert between standard units and Excel units.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.IRowColSize)">
            <param name="Workbook" />
            <summary>
            Multiply by this number to convert the width of a column from pixels to excel internal units. 
            Note that the default column width is different, you need to multiply by <see cref="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.ColMultDisplay(FlexCel.Core.IRowColSize)">
            <param name="Workbook" />
            <summary>
            Multiply by this number to convert the width of a column from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units. Note that the default column width is different, you need to multiply by <see cref="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)">
            <param name="width" />
            <param name="workbook" />
            <summary>
            Convert the DEFAULT column width to pixels. This is different from <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.IRowColSize)" />, that goes in a column by column basis.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.FmlaMult(FlexCel.Core.IRowColSize)">
            <param name="Workbook" />
            <summary>
            When showing/printing the sheet and "Show formula" check box is on, column widths are double of the normal ones.
            This method returns 0.5 when "Show formulas" is turned on, and 1 if it is not.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.GetFont0SpaceWidth(FlexCel.Core.IRowColSize)">
            <param name="Workbook" />
            <summary>
            Returns the width of a space (" ") in the main font of the workbook.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.GetFont0Width(FlexCel.Core.IRowColSize)">
            <param name="Workbook" />
            <summary>
            Returns the width of the 0 font on Excel. Normally this is 7, but can change depending on
            the file. The user might modify it by changing Format-&gt;Style-&gt;Normal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.GetFont0Width(FlexCel.Core.IRowColSize,System.Boolean)">
            <param name="Workbook">File with the font.</param>
            <param name="UseScreenScaling">If true, we will return the font size at the given screen scaling. If false, we 
            will return the font size at 100% (96 dpi). Note that if a font is say 7 points at 100%, it will be 14 points at 200%.
            We need it this way because it is the way Excel uses it.</param>
            <summary>
            Returns the width of the 0 font on Excel, taking in account the screen dpi, which you set in XlsFile.ScreenScaling.
            Note that with a scaling more than 100%, the fontsize returned will be proportionally larger. So a font that returns 10
            points at 100% will return 20 points at 200%. While it makes no sense (a point is 1/72 of an inch no matter the resolution)
            this is the way Excel handles it.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.RowMultDisplay(FlexCel.Core.IRowColSize)">
            <param name="Workbook" />
            <summary>
            Multiply by this number to convert the height of a row from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlexCelClipboardFormat">
            <summary>
            The file fomats that FlexCel can natively put in the clipboard.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlexCelClipboardFormat.Html">
            <summary>
            File will be copied as HTML. 
            Note that if you need more control about the type of html generated, you can use FlexCelHtmlExport.ExportToClipboard.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelClipboardFormat.Text">
            <summary>
            File will be copied as text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelClipboardFormat.Xls">
            <summary>
            File will be copied as xls (BIFF8)
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlexCelConfig">
            <summary>
            A central point of for configuring FlexCel parameters.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlexCelConfig.CustomFontFolder">
            <summary>
            You can specify here a folder where you have 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlexCelConfig.DpiForImages">
            <summary>
            Allows you to change the dpi for vector images (metafiles) when they are rasterized
            for converting to pdf / HTML / etc. Note that this is a static setting and will
            affect all files. This setting is the same as TExcelFile.DpiForImages
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlexCelCoreException">
            <summary>
            Exception thrown when an exception on the core engine happens. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelCoreException">
            <summary>
            Creates a new FlexCelCoreException
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelCoreException(System.String)">
            <param name="message">Error Message</param>
            <summary>
            Creates a new FlexCelCoreException with an error message.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelCoreException(System.String,FlexCel.Core.FlxErr)">
            <param name="message">Error Message</param>
            <param name="aErrorCode">Error code of the exception.</param>
            <summary>
            Creates a new FlexCelCoreException with an error message and an exception code.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelCoreException(System.String,System.Exception)">
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
            <summary>
            Creates a nested Exception.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelCoreException(System.String,FlexCel.Core.FlxErr,System.Exception)">
            <param name="message">Error Message.</param>
            <param name="aErrorCode">Error code of the exception.</param>
            <param name="inner">Inner Exception.</param>
            <summary>
            Creates a nested Exception.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlexCelCoreException.ErrorCode">
            <summary>
            Error code on the Exception.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlexCelDataFormats">
            <summary>
            Excel formats to copy/paste to/from the clipboard
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlexCelDataFormats.Excel97">
            <summary>
            Native Excel 97/2003 Format (xls).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlexCelDataFormats.GetString(FlexCel.Core.FlexCelClipboardFormat)">
            <param name="fmt" />
            <summary>
            Returns the string used for an specific FlexCelClipboardFormat.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlexCelDataFormats.Html">
            <summary>
            Clipboard html.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlexCelDataFormats.UnicodeText">
            <summary>
            Unicode text.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlexCelError">
            <summary>
            An enumeration of all possible FlexCel non fatal errors that can be logged.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlexCelError.HtmlSaveSharingViolation">
            <summary>
            There was a sharing violation when trying to save an html file, and <see cref="P:FlexCel.Render.FlexCelHtmlExport.IgnoreSharingViolations" /> is true.
            Normally this just means two parallel threads trying to write the same file and can be safely ignored.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.MalformedUrl">
            <summary>
            A malformed Url was detected in the xls file and was not exported. An example of this might be: "mailto:test@test@test".
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfCorruptFontInFontFolder">
            <summary>
            The "Fonts" folder in this machine has a file that could not be parsed by FlexCel and is probably corrupt. While this will not affect
            FlexCel in any way, you might want to look at the "Font" folder and remove this font, since it can make windows slower.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfFauxBoldOrItalics">
            <summary>
            The font you are trying to use does not have a "bold" or "italic" variation, and we will use "faux" font created by making the normal font heavier
            or slanting it to the right. This normally results in lower quality fonts, and will not work with fonts embedded. We recommend that you use
            fonts that have italics and bold variations. Look at the PDF documentation in Exporting
            to PDF for more information ("Dealing with missing fonts and glyps" section).
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfFontLicenseDoesntAllowEmbedding">
            <summary>
            Trying to embed a font which is not licensed to be embedded.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfFontNotFound">
            <summary>
            The font was not found in the system. A substitute font will be used for the rendering, and it might not look the same.
            <br /> If you are seeing this message in a server, make sure the server has the same fonts installed as the machine where you
            developed the application.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfGlyphNotInFont">
            <summary>
            FlexCel is trying to render a character that is not in the font or the fallback fonts. This character will show as an empty square in the generated PDF
            file.<br />Normally this means that Excel is replacing fonts, for example Arial with MS Mincho, and to fix this error you should provide a 
            suitable list of Fallback fonts. Look at the PDF documentation in Exporting
            to PDF for more information ("Dealing with missing fonts and glyps" section).
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfUsedFallbackFont">
            <summary>
            FlexCel is trying to render a character that is not in the font, but it is in the fallback font list. This character will be drawn with the
            fallback font.<br />Normally this means that Excel is replacing fonts, for example Arial with MS Mincho. Look at the PDF documentation in Exporting
            to PDF for more information ("Dealing with missing fonts and glyps" section).
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RecoveryInvalidFormulaTokens">
            <summary>
            A formula can't be read.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RecoveryInvalidName">
            <summary>
            A name couldn't be loaded.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RenderCorruptImage">
            <summary>
            The image could not be rendered by GDI+.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RenderErrorDrawingImage">
            <summary>
            An image could not be drawn. This error normally happens in .NET 1.1 if vj# is not installed.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RenderGenericPreview">
            <summary>
            A generic error when drawing the preview.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RenderMetafile">
            <summary>
            There was a GDI+ error trying to draw or print a metafile. It will be rendered as a bitmap.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RowHeightTooBig">
            <summary />
        </member>
        <member name="F:FlexCel.Core.FlexCelError.Undefined">
            <summary>
            This error should never happen.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.XlsTooManyPageBreaks">
            <summary>
            There are more page breaks in this page than the maximum allowed, and page breaks over this maximum are being ignored.
            You can control if you want a "real" exception here with the <see cref="P:FlexCel.Core.ExcelFile.ErrorActions" /> and <see cref="P:FlexCel.Report.FlexCelReport.ErrorActions" /> properties.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.XlsxInvalidName">
            <summary>
            A corrupt xlsx file can have invalid names. If <see cref="P:FlexCel.Core.ExcelFile.ErrorActions" /> is set to the 
            correct value, those names will be imported as #REF! instead of rising an Exception.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.XlsxMissingPart">
            <summary>
            The file has references to other parts that don't exist. For example, an image might be referenced in a sheet, 
            but the actual image data missing from the file. If <see cref="P:FlexCel.Core.ExcelFile.ErrorActions" /> is set to the 
            correct value, those parts will be ignored.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlexCelErrorEventHandler">
            <param name="e" />
            <summary>
            Delegate for ErrorInfo events.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlexCelException">
            <summary>
            Exception thrown when an specific FlexCel error happens. Base of all FlexCel hierarchy list.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelException">
            <summary>
            Creates a new FlexCelException
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelException(System.String)">
            <param name="message">Error Message</param>
            <summary>
            Creates a new FlexCelException with an error message.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FlexCelException(System.String,System.Exception)">
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
            <summary>
            Creates a nested Exception.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlexCelTrace">
            <summary>
            This class reports al FlexCel non-fatal errors. Use it to diagnose when something is going wrong.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlexCelTrace.Enabled">
            <summary>
            Set this to false if you want to prevent FlexCel from tracing non fatal errors. Note that if you
            don't have any event attached to this class the result will be the same as having Enabled = false.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Core.FlexCelTrace.OnError">
            <summary>
            This event is called each time a non fatal error happens in FlexCel. Hook an event listener to it to be notified when this happens.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlxConsts">
            <summary>
            Utility methods and constants usable anywhere.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ColMult">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.IRowColSize)" /> instead.
            Multiply by this number to convert the width of a column from pixels to excel internal units. 
            Note that the default column width is different, you need to multiply by <see cref="F:FlexCel.Core.FlxConsts.DefColWidthAdapt" /></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ColMultDisplay">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMultDisplay(FlexCel.Core.IRowColSize)" /> instead.
            Multiply by this number to convert the width of a column from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units. Note that the default column width is different, you need to multiply by <see cref="F:FlexCel.Core.FlxConsts.DefColWidthAdapt" /></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultBrightness">
            <summary>
            Brightness to keep the image unchanged.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultContrast">
            <summary>
            Contrast to keep the image unchanged.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultFormatId">
            <summary>
            The default XF for a file. You can also access this value with <see cref="P:FlexCel.Core.ExcelFile.DefaultFormatId" /></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultGamma">
            <summary>
            Gamma to keep the image unchanged.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultRotation">
            <summary>
            Zero rotation.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefColWidthAdapt">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)" /> instead.
            Multiply by this number to convert the DEFAULT column width to pixels. This is different from <see cref="F:FlexCel.Core.FlxConsts.ColMult" />, that goes in a column by column basis.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DispMul">
            <summary>
            Number of points in an inch.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxConsts.EncodeColumn(System.Int32)">
            <param name="C">Index of the column, 1 based.</param>
            <summary>
            Returns "A" for column 1, "B"  for 2 and so on.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_Columns">
            <summary>
            Maximum column in the spreadsheet. (0 based). 
            Note that this number is 1 less than the maximum column count, because this value is 0-based. You can use <see cref="P:FlexCel.Core.FlxConsts.MaxColCount" /> to
            get the number of columns instead.<br />
            This number might be 255 if <see cref="P:FlexCel.Core.ExcelFile.ExcelVersion" /> is TExcelVersion.v97_2003 or 16383 otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Columns2007">
            <summary>
            Maximum column on an xlsx (Excel 2007 and up) spreadsheet. (0 based, that is 16383)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Columns97_2003">
            <summary>
            Maximum column on an xls (Excel 97 - 2003) spreadsheet. (0 based, that is 255)
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_CommentAuthor">
            <summary>
            Maximum number of characters allowed in the author of a comment.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_DvErrorTextLen">
            <summary>
            Maximum number of characters in an Error text for a Data Validation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_DvErrorTitleLen">
            <summary>
            Maximum number of characters in an Error title for a Data Validation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_DvInputTextLen">
            <summary>
            Maximum number of characters in an Input text for a Data Validation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_DvInputTitleLen">
            <summary>
            Maximum number of characters in an Input title for a Data Validation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_FormulaArguments2003">
            <summary>
            Maximum number of arguments for a formula in xls file format.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_FormulaArguments2007">
            <summary>
            Maximum number of arguments for a formula in xlsx file format.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_FormulaLen">
            <summary>
            Maximum number of characters in a Formula
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_FormulaLen2007">
            <summary>
            Maximum number of characters in a Formula for an Excel 2007 or newer spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_FormulaLen97_2003">
            <summary>
            Maximum number of characters in a Formula for an Excel 97 to 2003 spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_FormulaStringConstant">
            <summary>
            Maximum length of a direct string inside a formula, as in ' = "my long string..."
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_LettersInColumnName">
            <summary>
            Number of letters in a column name. This is 2 in xls97 (columns go up to IV) and 3 in xls2007 (columns go up to XFD)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_PxlColumns">
            <summary>
            Maximum column on Pocket Excel a spreadsheet. (0 based, that is 255)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_PxlRows">
            <summary>
            Maximum row on a Pocket Excel spreadsheet. (0 based, that is 16383)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_PxlSheets">
            <summary>
            Maximum sheet on a Pocket Excel spreadsheet. (0 based, that is 255)
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_Rows">
            <summary>
            Maximum row in the spreadsheet. (0 based). 
            Note that this number is 1 less than the maximum row count, because this value is 0-based. You can use <see cref="P:FlexCel.Core.FlxConsts.MaxRowCount" /> to
            get the number of columns instead.<br />
            This number might be 65535 if <see cref="P:FlexCel.Core.ExcelFile.ExcelVersion" /> is TExcelVersion.v97_2003 or 1048575 otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Rows2007">
            <summary>
            Maximum row on an xlsx (Excel 2007 and up) spreadsheet. (0 based, that is 1048575)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Rows95">
            <summary>
            Maximum row on an xls (Excel 2 - 95) spreadsheet. (0 based)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Rows97_2003">
            <summary>
            Maximum row on an xls (Excel 97 - 2003) spreadsheet. (0 based, that is 65535)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Sheets">
            <summary>
            Maximum sheet on a spreadsheet. (0 based, that is 65530)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_StringLenInCell">
            <summary>
            Maximum length of a string in a cell.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.MaxColCount">
            <summary>
            Returns the maximum number of columns that you can have in a spreadsheet. This is the same as <see cref="P:FlexCel.Core.FlxConsts.Max_Columns" /> + 1. <br />
            This number might be 256 if <see cref="P:FlexCel.Core.ExcelFile.ExcelVersion" /> is TExcelVersion.v97_2003 or 16384 otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FlxConsts.MaxRowCount">
            <summary>
            Returns the maximum number of rows that you can have in a spreadsheet. This is the same as <see cref="P:FlexCel.Core.FlxConsts.Max_Rows" /> + 1. <br />
            This number might be 65536 if <see cref="P:FlexCel.Core.ExcelFile.ExcelVersion" /> is TExcelVersion.v97_2003 or 1048576 otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.NoTransparentColor">
            <summary>
            Constant meaning there is no transparent color defined on the image.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ObjectPathAbsolute">
            <summary>
            When an objpath starts with this character, it is an absolute path that includes the object index.
            If it doesn't start with it, then the ObjPath doesn't include the original object.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ObjectPathObjName">
            <summary>
            When an objpath starts with this character, it is a path that goes directly to the name of an object.
            Note that when more than an object have the same name in the same sheet, this path won't work and you will
            have to use absolute or relative ones.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ObjectPathSeparator">
            <summary>
            String used to separate 2 objects on an object path.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ObjectPathSpId">
            <summary>
            When an objpath starts with this character, what follows is a single shape id that identifies the object.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.RowMult">
            <summary>
            Multiply by this number to convert pixels to excel row height units.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxConsts.RowMultDisplay">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.RowMultDisplay(FlexCel.Core.IRowColSize)" /> instead.
            Multiply by this number to convert the height of a row from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlxDateTime">
            <summary>
            Use this class to convert between a Date expressed on Excel format (a double)
            and a TDateTime.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.FromOADate(System.Double,System.Boolean)">
            <param name="value">Double you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <summary>
            Converts a Double on Excel format for dates (Ole Automation Format) into a DateTime.
            </summary>
            <returns>The value as DateTime.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.IsValidDate(System.Double,System.Boolean)">
            <param name="value">Double you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <summary>
            Returns true is the double value can be converted into and Excel date.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.ToISO8601(System.DateTime)">
            <param name="UTC_d" />
            <summary>
            Returns a date formatted as IS8601
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.ToOADate(System.DateTime,System.Boolean)">
            <param name="value">DateTime you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <summary>
            Converts a DateTime into a Double on Excel format for dates (Ole Automation Format).
            </summary>
            <returns>The value as a double on Excel format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.TryFromOADate(System.Double,System.Boolean,System.DateTime@)">
            <param name="value">Double you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <param name="ResultDate">Returns the value as DateTime.</param>
            <summary>
            Converts a Double on Excel format for dates (Ole Automation Format) into a DateTime.
            </summary>
            <returns>True if conversion was successful, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.TryToOADate(System.DateTime,System.Boolean,System.Double@)">
            <param name="value">DateTime you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <param name="ResultDate">Returns the value as double on Excel format.</param>
            <summary>
            Converts a DateTime into a Double on Excel format for dates (Ole Automation Format).
            </summary>
            <returns>True if conversion was successful, false otherwise.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlxErr">
            <summary>
            Error Codes used in Exceptions.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxErr.CellError">
            <summary>
            Message that will be written in a cell when there is an error in a report and <see cref="P:FlexCel.Report.FlexCelReport.ErrorsInResultFile" /> is true.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrAdapterNull">
            <summary>
            Adapter should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrAggFilterMustReturnABooleanValue">
            <summary>
            An agreggate filter must return a boolean value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrArgsMustBeEven">
            <summary>
            The number of arguments must be multiple of 2.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrArrayNotSquared">
            <summary>All rows on an array must have the same number of columns.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrAtCell">
            <summary>
            Error at cell n.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrBeginExportNotCalled">
            <summary>
            Before exporting a sheet you need to call BeginExport
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrBeginPrintNotCalled">
            <summary>
            Before printing a sheet you need to call BeginPrint
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantAddStyleFormats">
            <summary>
            Style formats have to be added using SetStyle method, not with addformat.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantChangeRecalcMode">
            <summary>
            RecalcMode can only be changed when no file is open.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantDeleteBuiltInStyle">
            <summary>
            Built-in styles can't be deleted.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantFindNamedRange">
            <summary>
            Cannot find the included named range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantMixCellAndStyleFormats">
            <summary>
            You can't replace a cell format with a style format or viceversa.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantRead">
            <summary>
            Can't read from a compression stream.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantRenameBuiltInStyle">
            <summary>
            Built-in styles can't be renamed.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantSeek">
            <summary>
            Can't seek in a compression stream.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantUseThemeColorsInsideATheme">
            <summary>
            You can use a themed color to define a color inside a theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCircularReference">
            <summary>
            A formula refers to itself.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrColumNotFound">
            <summary>
            Column does not exits.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCompression">
            <summary>
            Error with the compression engine.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCompressionNotSupported">
            <summary>
            Compression mode not supported.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCreatingImage">
            <summary>
            Error trying to create an empty image. Probably out of memory.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDatasetDoesntSupportWhere">
            <summary>
            When using LINQ, FlexCel implements filters by calling a "Where(string)" method in the data table. If the table doesn't
            have a "Where(string)" method, FlexCel can't filter the records.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotFound">
            <summary>
            Can't find a dataset for a named range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotFoundInConfig">
            <summary>
            Can't find a dataset for a configsheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotFoundInExpression">
            <summary>
            Can't find a dataset for an expression on the sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotInRange">
            <summary>
            Dataset is not inside any named range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNull">
            <summary>
            DataSet should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDuplicatedLinkedFile">
            <summary>
            Trying to add an xls file that already exists to a Workspace collection.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrEmptyFolder">
            <summary>The folder does not contain any file of the needed type.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrEmptyKeyNames">
            <summary>
            The keys in a lookup can't be empty.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrEofReached">
            <summary>EofReached</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrEqualRanges">
            <summary>
            2 data ranges are the same, and FlexCel can't figure out which one is the master and which one the detail.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFauxBoldOrItalic">
            <summary>
            Font doesn't have italic or bold variant.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFilterInvalid">
            <summary>
            Filter is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFilterMustReturnABooleanValue">
            <summary>
            A filter must return a boolean value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFontNotFound">
            <summary>
            Font was not found in the system.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFontNotLicensed">
            <summary>
            The font licensing doesn't allow embedding.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFontNotSupported">
            <summary>
            Font is not supported.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFormulaInvalid">
            <summary>
            Formula is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFormulaStart">
            <summary>
            Formula must start with "="
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFormulaTooLong">
            <summary>
            Formula is longer than 0xFFFF
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFunctionNotFound">
            <summary>
            Function on the formula does not exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrGlyphNotFound">
            <summary>
            Font doesn't contain the character.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInternal">
            <summary>
            Unexpected error
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrIntersectingRanges">
            <summary>
            2 data ranges intersect on a report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAggParameter">
            <summary>
            Aggregate must be "SUM", "AVG", "MAX" or "MIN"
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidApplyTag">
            <summary>
            A format definition in the config sheet is not valid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAtLeastParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAutoFitMerged">
            <summary>
            Invalid Merge mode.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAutoPageBreaksPageScale">
            <summary>
            Invalid PageScale in automatic page break tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAutoPageBreaksPercent">
            <summary>
            Invalid value in the percent of page used in an automatic page break tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidCellValue">
            <summary>Can't convert the object into a valid value.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidColorEnum">
            <summary>
            Value must be one of the enum, and can't be none.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidColorType">
            <summary>
            ColorType is of the wrong type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidColorValue">
            <summary>
            Value for the color is outside bounds.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidCols">
            <summary>The columns on an array must be between 1 and 256</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidColumn">
            <summary>
            Trying to access to an invalid column.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidColumns1Param">
            <summary>
            COLUMNS function should have only 1 parameter.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidColumnsParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidContentType">
            <summary>
            File doesn't have a valid content-type
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidDefinedGlobal">
            <summary>
            If the Defined tag has 2 parameters, the second must be GLOBAL or LOCAL.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidDistinctParams">
            <summary>
            Parameters for distinct filter should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidEmptyName">
            <summary>
            Name cannot be empty.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidEncodingForMIME">
            <summary>
            The encoding con not be used to create a MIME file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidEnum">
            <summary>
            Enum must exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidErrorCode">
            <summary>Invalid error code</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidFilterDateTime">
            <summary>
            Dates in filters must be written as "yyy-dd-mm hh:mm:ss"
             </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidFilterParen">
            <summary>
            Missing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidFormat">
            <summary>
            Invalid format on report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidGlobalAdjustment">
            <summary>
            Invalid parameter on Autofit settings tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidGlobalAdjustmentFixed">
            <summary>
            Invalid parameter on Autofit settings tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidGlobalAutofit">
            <summary>
            Invalid adjustment on Autofit settings tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidHtmlParam">
            <summary>Invalid parameter for html tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImage">
            <summary>
            Image is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImageFormat">
            <summary>Invalid image format.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImgFitParameter">
            <summary>
            Invalid parameter for a ImgFit tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImgPosParameter">
            <summary>
            Invalid parameter for a ImgPos tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidIncludeRowCol">
            <summary>
            Invalid parameter for include.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidIncludeStatic">
            <summary>
            Invalid parameter for include.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidIndex">
            <summary>
            Invalid Index.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidJoinParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidJoinTableCount">
            <summary>
            JOIN function should have at least 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidLinQDetail">
            <summary>
            Detail table doesn't have a parent.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidLocalHeader">
            <summary>
            Invalid local header in the zip file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidManualRelationshipDatasetNull">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidManualRelationshipFieldCount">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidMin23Params">
            <summary>
            ATLEAST function should have 2 or 3 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidMinCount">
            <summary>
            Second parameter of a ATLEAST function must be a positive integer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidName">
            <summary>
            Name is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidNRows1Param">
            <summary>
            ROWS function should have only 1 parameter.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidNRowsCount">
            <summary>
            Parameter of a ROWS function must be a positive integer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidNRowsParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidNumberOfParams">
            <summary>
            Invalid number of parameters for the function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRange">
            <summary>
            An invalid range reference. A valid one is "A1:A2"
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRangeRef">
            <summary>
            The name defining band "{0}" has a negative number of rows or columns. Verify it has absolute references ($A$1:$B$2) intead of relative ($A$1:B2)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRef">
            <summary>
            An invalid cell reference. A valid one is "A1"
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRef2">
            <summary>
            An invalid cell reference. If it is trying to add a reference to an external name, it might be missing a workspace.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRefTag">
            <summary>Invalid parameter for ref tag, 1 parameter version.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRefTag2">
            <summary>Invalid parameter for ref tag, 2 parameter version.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRefTag3">
            <summary>Invalid parameter for ref tag, 3 parameter version.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationship2Fields">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationship2Tables">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationshipDatasetNull">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationshipFields">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationshipNullValues">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidReportRowCount">
            <summary>
            The count of records in a table is different from the actual number of records when reading the data. This means that 
            someone else has inserted or deleted records while this report was running. To avoid this issue, make sure
            you run the report with isolation level = SNAPSHOT.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRow">
            <summary>
            Trying to access to an invalid row.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColDelete">
            <summary>
            Invalide parameters for delete row/col
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters">
            <summary>Invalid parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters2">
            <summary>Invalid second parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters3">
            <summary>Invalid third parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters4">
            <summary>Invalid fourth parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRows">
            <summary>The rows on an array must be between 1 and 65536</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSheet">
            <summary>
            Sheet name does not exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSortString">
            <summary>
            The sort string is not supported.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSplit2Params">
            <summary>
            SPLIT function should have only 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSplitCount">
            <summary>
            Second parameter of a split function must be a positive integer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSplitParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSql2Params">
            <summary>
            SQL function should have only 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlAdapterNoSelect">
            <summary>
            The adapter has not SQL select command defined.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlAdapterNotFound">
            <summary>
            Adapter not found.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlParams">
            <summary>
            Parameters for SQL parameters should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlString">
            <summary>
            SQL string contains invalid characters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidTable">
            <summary>
            A table doesn't exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidTop2Params">
            <summary>
            TOP function should have only 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidTopCount">
            <summary>
            Second parameter of a TOP function must be a positive integer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidTopParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidUnionParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidUnionTableCount">
            <summary>
            UNION function should have at least 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidUserTableParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidValue">
            <summary>
            Generic out of range error. Params for this message should be taken from FlxParam.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidValue2">
            <summary>
            Generic out of range error when there are no objects to index.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidValue3">
            <summary>
            Generic out of range error when the specific value is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidXlsxFile">
            <summary>
            Invalid xlsx file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidZip">
            <summary>
            Invalid zip file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMemberNotFound">
            <summary>
            Dataset does not have a field.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMissingArgs">
            <summary>
            Missing arguments for a function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMissingEOT">
            <summary>
            An invalid End of tag (for example, &lt;#...&gt;&gt;)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMissingParen">
            <summary>
            A missing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMustSpecifyFolder">
            <summary>
            You must specify a folder to compress.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNameTooLong">
            <summary>
            Name is too long.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNeedsUnmanaged">
            <summary>
            The operation needs unamanaged permissions in order to complete.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNoBorderColorSet">
            <summary>
            When you set a border style different from none, then the border color must be set too.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNoDuplicatedPreprocess">
            <summary>
            A preprocess tag must not be nested.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNoPagesToPrint">
            <summary>
            There are no pages to print.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNotAString">
            <summary>
            When parsing a formula and expecting a string.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNotConnected">
            <summary>
            Adapter's "Connect" Method has not been called.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNotSupportedOnTrial">
            <summary>
            This feature is not supported on non commercial version of FlexCel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNullOrEmptyParameter">
            <summary>
            Parameter can't be null or empty.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNullParameter">
            <summary>
            Parameter can't be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrOnConfigTables">
            <summary>
            Error reading config tables.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrOnIncludeReport">
            <summary>
            Error in an included report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrPropertyNotFound">
            <summary>
            The property does not exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrRangeNameAlreadyExists">
            <summary>
            The name for the range already exists.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrReadAfterEOF">
            <summary>
            Reading after the end of a datatable.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrReadBeforeBOF">
            <summary>
            Reading before the beginning of a datatable.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrReadingOutOfBounds">
            <summary>
            Trying to read after the end of the stream.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrSplitNeedsOneAndOnlyOneDetail">
            <summary>
            When using Splitted tables, the detail must directly follow the master.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrSplitNeedsOnlyOneMaster">
            <summary>
            A table cannot be assigned to 2 different splits masters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrSqlParameterNotFound">
            <summary>
            The parameter for a direct sql query was not found.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrStringConstantInFormulaTooLong">
            <summary>
            String constant in formula is too long. (max 255 chars)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrStyleAlreadyExists">
            <summary>
            Style already exists.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrStyleDoesntExists">
            <summary>
            Named style doesn't exists.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportFilter">
            <summary>
            This is a virtual table, and it didn't define the methods needed to filter it.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportLookup">
            <summary>
            This is a virtual table, and it didn't define the methods needed to be used as a Lookpup source.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportMasterDetail">
            <summary>
            This is a virtual table, and it didn't define the methods needed to support master detail relationships.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportTag">
            <summary>
            This is a virtual table, and it didn't define the methods needed to support this tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportTagConfig">
            <summary>
            This is a virtual table, and it didn't define the methods needed to support this tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTiffEncoderNotFound">
            <summary>Cannot find a Tiff Encoder.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTooManyNestedIncludes">
            <summary>
            Too many nested includes, probably one file is recursively including itself.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTooMuchArgs">
            <summary>
            Too much arguments on a function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUndefinedFunction">
            <summary>Function is not defined on file FunctionNames.resx</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUndefinedId">
            <summary>Id is not defined on file xxxx</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUndefinedUserFunction">
            <summary>
            User defined function implementation is null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnexpectedChar">
            <summary>
            A formula with an invalid character.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnexpectedEof">
            <summary>
            Unexpected end of formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnexpectedId">
            <summary>
            A formula with an invalid identifier.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnknownRangeType">
            <summary>
            Range is not __, _, I_ or II_
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnterminatedString">
            <summary>
            A string missing the ending "
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUsedFallbackFont">
            <summary>
            Font is missing a character and a fallback font was used instead.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUserTableEventNotAssigned">
            <summary>
            The template has User table tags, but there is no UserTable event assigned to the report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrValueIsNotOfType">
            <summary>
            Value is not of the expected type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrValuesAndKeysMismatch">
            <summary>
            Keys and values in a lookup must have the same number of elements.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrWorkbookNull">
            <summary>
            Workbook can't be null on this version of the method.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrZipNameTooLong">
            <summary>
            File name is too long.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlxMessage">
            <summary>
            Some custom strings.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxMessage.CustomPageSize">
            <summary>
            Name of a custom page size.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxMessage.TxtDefaultTimeAMString">
            <summary>
            Default text to show when AM time string is set to empty on the regional settings dialog from the control panel.
            When the default is empty, Excel defaults to AM, while .NET defaults to an empty string.
            As we want to behave the same as Excel, we provide this constant here.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxMessage.TxtDefaultTimePMString">
            <summary>
            Default text to show when PM time string is set to empty on the regional settings dialog from the control panel.
            When the default is empty, Excel defaults to PM, while .NET defaults to an empty string.
            As we want to behave the same as Excel, we provide this constant here.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxMessage.TxtSeries">
            <summary>
            Text that will be shown on chart legends when no data is assigned.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlxMessages">
            <summary>
            FlexCel Native XLS Constants. It reads the resources from the active locale, and
            returns the correct string.
            If your language is not supported and you feel like translating the messages,
            please send us a copy. We will include it on the next FlexCel version. 
            <para>To add a new language:
            <list type="number"><item>
               Copy the file flxmsg.resx to your language (for example, flxmsg.es.resx to translate to spanish)
            </item><item>
               Edit the new file and change the messages(you can do this visually with visual studio)
            </item><item>
               Add the .resx file to the FlexCel project
            </item></list></para></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxMessages.GetString(FlexCel.Core.FlxMessage)">
            <param name="ResName">Message code.</param>
            <summary>
            Returns a string from the FlxMessage enumeration.
            </summary>
            <returns>Associated string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxMessages.GetString(FlexCel.Core.FlxErr,System.Object[])">
            <param name="ResName">Error Code.</param>
            <param name="args">Params for this error.</param>
            <summary>
            Returns a string based on the FlxErr enumerator, formatted with args.
            This method is used to get an Exception error message. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxMessages.ThrowException(FlexCel.Core.FlxErr,System.Object[])">
            <param name="ResName">Error Code.</param>
            <param name="args">Parameters for this error.</param>
            <summary>
            Throws a standard FlexCelException.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.FlxMessages.ThrowException(System.Exception,FlexCel.Core.FlxErr,System.Object[])">
            <param name="e">Inner exception.</param>
            <param name="ResName">Error Code.</param>
            <param name="args">Parameters for this error.</param>
            <summary>
            Throws a standard FlexCelException with innerException.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FlxParam">
            <summary>
            Parameter names that can go into an "invalid params" error message.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.FlxParam.ActiveSheet">
            <summary>ActiveSheet</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.AutoShapeIndex">
            <summary>AutoShapeIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.CellMergedIndex">
            <summary>CellMergedIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ChartIndex">
            <summary>ChartIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.CommentIndex">
            <summary>CommentIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ConditionalFormatIndex">
            <summary>ConditionalFormatIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.DataValidationIndex">
            <summary>DataValidationIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.FirstSheetVisible">
            <summary>FirstSheetVisible</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.FormatIndex">
            <summary>FormatIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.HyperLinkIndex">
            <summary>HyperLinkIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.IgnoreCase">
            <summary>IgnoreCase</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ImageIndex">
            <summary>ImageIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.Index">
            <summary>Index</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.Level">
            <summary>Level</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.NamedRangeIndex">
            <summary>NamedRangeIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.NumberOfThreads">
            <summary>NumberOfThreads</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ObjectIndex">
            <summary>ObjectIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.OutlineLevel">
            <summary>OutlineLevel</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.PageScale">
            <summary>PageScale</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.PercentOfUsedSheet">
            <summary>PercentOfUsedSheet</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.Position">
            <summary>Position</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ScreenScaling">
            <summary>ScreenScaling</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SeriesIndex">
            <summary>SeriesIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SheetCount">
            <summary>SheetCount</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SheetDest">
            <summary>SheetDest</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SheetFrom">
            <summary>SheetFrom</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SourceSheet">
            <summary>SourceSheet</summary>
        </member>
        <member name="T:FlexCel.Core.FontCreatedEventArgs">
            <summary>
            Arguments passed in FontCreated events.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FontCreatedEventArgs(System.String,System.String,System.Double,FlexCel.Core.TUIFontStyle)">
            <param name="aSubstitutedFontName">Name of the final font as decided by the operating system. Note that
            some operating systems might return the same name as the original font even if they used a substitute font under the hood.
            In those platforms we can't know a font has been substituted.</param>
            <param name="aOriginalFontName">Name of the font we were trying to create. It might not be the same as the font the operating system gave to us.</param>
            <param name="aFontSize">Size in points of the font.</param>
            <param name="aFontStyle">Style of the font.</param>
            <summary>
            Creates a new instance of the event arguments with the specified parameters.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FontCreatedEventArgs.IsModified">
            <summary>
            Returns true if any properties of the class were modified since the class was created.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FontCreatedEventArgs.OriginalFontName">
            <summary>
             Name of the font we were trying to create. This property is readonly, to change it change <see cref="P:FlexCel.Core.FontCreationEventArgs.FontName" /> instead.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FontCreatedEventArgs.SubstitutedFontName">
            <summary>
            Name of the final font as decided by the operating system. Note that
            some operating systems might return the same name as the original font even if they used a substitute font under the hood.
            In those platforms we can't know a font has been substituted.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FontCreatedEventHandler">
            <param name="e" />
            <summary>
            Delegate for FontCreated events.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FontCreatingEventArgs">
            <summary>
            Arguments passed in FontCreating events.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FontCreatingEventArgs(System.String,System.Double,FlexCel.Core.TUIFontStyle)">
            <param name="aFontName">Name of the font.</param>
            <param name="aFontSize">Size in points of the font.</param>
            <param name="aFontStyle">Style of the font.</param>
            <summary>
            Creates a new instance of the event arguments with the specified parameters.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FontCreatingEventHandler">
            <param name="e" />
            <summary>
            Delegate for FontCreating events.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.FontCreationEventArgs">
            <summary>
            Base class for font creation events.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.FontCreationEventArgs(System.String,System.Double,FlexCel.Core.TUIFontStyle)">
            <param name="aFontName">Name of the font.</param>
            <param name="aFontSize">Size in points of the font.</param>
            <param name="aFontStyle">Style of the font.</param>
            <summary>
            Creates a new instance of the event arguments with the specified parameters.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FontCreationEventArgs.FontName">
            <summary>
            Name of the font. Change this value to create a font with a different name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FontCreationEventArgs.FontSize">
            <summary>
            Size in points of the font. Change this value to create a font with a different size.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.FontCreationEventArgs.FontStyle">
            <summary>
            Style of the font (italics, bold, etc.). Change this value to create a font with a different style.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.HtmlFontEventArgs">
            <summary>
            Arguments passed on FlexCel.Render.FlexCelHtmlExport.OnHtmlFont. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.HtmlFontEventArgs(FlexCel.Core.ExcelFile,FlexCel.Core.TFlxFont,System.String)">
            <param name="aWorkbook">See <see cref="P:FlexCel.Core.HtmlFontEventArgs.Workbook" /></param>
            <param name="aCellFont">See <see cref="P:FlexCel.Core.HtmlFontEventArgs.CellFont" /></param>
            <param name="aFontFamily">See <see cref="P:FlexCel.Core.HtmlFontEventArgs.FontFamily" /></param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.HtmlFontEventArgs.CellFont">
            <summary>
            Font we want to process.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.HtmlFontEventArgs.FontFamily">
            <summary>
            Use this property to return the new font you want for the cell, if you need to replace it.
            Note that you can return more than one font here, and the format for this string is the format on a font selector "font-family" in a CSS stylesheet.
            You could for example return the string @"Baskerville, "Heisi Mincho W3", Symbol, serif" here. Look for a complete description of 
            the "font-family" descriptor in the CSS reference. (http://www.w3.org/TR/REC-CSS2/)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.HtmlFontEventArgs.Workbook">
            <summary>
            ExcelFile with the cell we are exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.HtmlFontEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate used to specify which fonts to use on a page.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.IEmbeddedObjects">
            <summary>
            Use this interface to read or write Embedded drawing objects inside other object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.DeleteObject(System.Int32)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream,System.Boolean)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.IEmbeddedObjects.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            ObjectIndexToImageIndex which is a slow method, by setting this parameter to true.</param>
            <summary>
            Returns an image and its type.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.GetObjectProperties(System.Int32,System.Boolean)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            Returns information on an object and all of its children. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IEmbeddedObjects.ObjectCount">
            <summary>
            The number of objects that are embedded inside this object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.SetObjectText(System.Int32,System.String,FlexCel.Core.TDrawingRichString)">
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.IEmbeddedObjects.ObjectCount" /></param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.IEmbeddedObjects.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Changes the text inside an object of this object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.IEmbeddedObjects.ObjectCount" /></param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.IEmbeddedObjects.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Changes the text inside an object of this object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.SetObjectText(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.IEmbeddedObjects.ObjectCount" /></param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.IEmbeddedObjects.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Changes the text inside an object of this object.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.IFlexCelFontList">
            <summary>
            Interface for passing font information. Internal use.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelFontList.AddFont(FlexCel.Core.TFlxFont)">
            <param name="aFont" />
            <summary>
            Adds a new Font.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IFlexCelFontList.FontCount">
            <summary>
            Fonts in the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelFontList.GetFont(System.Int32)">
            <param name="fontIndex">Font index. 0-based</param>
            <summary>
            Returns the font definition for a given font index.
            </summary>
            <returns>Font definition</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.IFlexCelPalette">
            <summary>
            Interface for passing palette and theme information.
            XlsFile implements IFlexCelPalette, so you can pass any XlsFile object whenever you need to use this interface.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.GetColorPalette(System.Int32)">
            <param name="index">Index of the entry to return. Must be 1&lt;=index&lt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" /></param>
            <summary>
            Returns a color from the color palette. This method will throw an exception if its "index" parameter
            is bigger than <see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" />, (for example, for an automatic color).
            To get the real color, use <see cref="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32,FlexCel.Core.TUIColor)" /></summary>
            <returns>Color at position index.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.GetColorPaletteVersion">
            <summary>
            Internal use. Every time the palette changes, the number returned is incremented. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.GetColorTheme(FlexCel.Core.TThemeColor)">
            <param name="themeColor">Color of the theme to get.</param>
            <summary>
            Returns a color from the active theme palette. 
            Only has effect in Excel 2007.
            <br /> To get the full theme, look at <see cref="M:FlexCel.Core.ExcelFile.GetTheme" /></summary>
            <returns>Color for the given theme.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.GetTheme">
            <summary>
            This is an advanced method, that allows you to get the full theme in use. Normally you will just want to replace colors, and you can do this with
            <see cref="M:FlexCel.Core.ExcelFile.SetColorTheme(FlexCel.Core.TThemeColor,FlexCel.Core.TDrawingColor)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetColorTheme(FlexCel.Core.TThemeColor)" /> methods. Much of the functionality in a theme applies to PowerPoint, not Excel.<br /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.GetThemeNoClone">
            <summary>
            Internal use. This won't clone the internal structure for more performance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.NearestColorIndex(FlexCel.Core.TUIColor)">
            <param name="value">Color we want to use.</param>
            <summary>
            Returns the most similar entry on the excel palette for a given color.
            </summary>
            <returns>Most similar color on the Excel palette.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.NearestColorTheme(FlexCel.Core.TUIColor,System.Double@)">
            <param name="value">Color we want to use.</param>
            <param name="tint">Returns the tint to apply to the theme color.</param>
            <summary>
            Returns the most similar entry on the theme palette for a given color.
            </summary>
            <returns>Most similar color on the theme palette.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IFlexCelPalette.PaletteContainsColor(FlexCel.Core.TExcelColor)">
            <param name="value">Color to check.</param>
            <summary>
            Returns true if the internal color palette contains the exact specified color. Note that Excel 2007 doesn't use the color palette, so this
            method is not needed there.
            </summary>
            <returns>True if color is defined.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.IHtmlFontEvent">
            <summary>
            Provides a method to customize the fonts used in the HTML methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IHtmlFontEvent.DoHtmlFont(FlexCel.Core.HtmlFontEventArgs)">
            <param name="e" />
            <summary>
            Method to be called each time a new font is used.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.ImageColorDepth">
            <summary>
            Number of colors for the exported images.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.ImageColorDepth.BlackAndWhite">
            <summary>
            1 bit per pixel, 2 colors (black and white).
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageColorDepth.Color256">
            <summary>
            8 bits per pixel, 256 colors.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageColorDepth.TrueColor">
            <summary>
            24 bits per pixel, no alpha channel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageColorDepth.TrueColorAlpha">
            <summary>
            32 bits per pixel, 8R, 8G, 8B and 8Alpha.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ImageExportType">
            <summary>
            Defines how you want to export the sheet.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.ImageExportType.Fax">
            <summary>
            Export as a black and white multipage tiff ccitt3 compatible with standard fax.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageExportType.Fax4">
            <summary>
            Export as a black and white multipage tiff ccitt4 compatible with standard fax.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageExportType.Gif">
            <summary>
            Export as gif file. Only the first page of the Excel active sheet will be exported.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageExportType.Jpeg">
            <summary>
            Export as jpg file. Only the first page of the Excel active sheet will be exported.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageExportType.Png">
            <summary>
            Export as png image. Only the first page of the Excel active sheet will be exported.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ImageExportType.Tiff">
            <summary>
            Export as multipage tiff.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ImageUtils">
            <summary>
            Utilities for manipulating images.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ImageUtils.GetImageType(System.Byte[])">
            <param name="data">Array with the image.</param>
            <summary>
            Returns the image type for a byte array.
            </summary>
            <returns>Image type</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ImageUtils.GetImageType(System.IO.Stream)">
            <param name="st">A stream.</param>
            <summary>
            Returns the image type for a stream.
            </summary>
            <returns>The image type.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ImageUtils.GetImageType(System.Byte[],System.Int32)">
            <param name="data">Array with the image.</param>
            <param name="position">Position on data where the image begins.</param>
            <summary>
            Returns the image type for a byte array.
            </summary>
            <returns>Image type</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.ImageUtils.StripOLEHeader(System.Byte[])">
            <param name="data">Image in OLE format.</param>
            <summary>
            Access stores images encapsulated on an OLE container. This function will load an OLE image and
            try to return the raw image data.
            </summary>
            <returns>Image on raw format.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.InternalNameRange">
            <summary>
            List of internal range names.
            On Excel, internal range names like "Print_Area" are stored as a 1 character string.
            This is the list of the names and their value.
            You can convert an InternalNameRange into a string by casting it to a char, or by calling <see cref="M:FlexCel.Core.TXlsNamedRange.GetInternalName(FlexCel.Core.InternalNameRange)" /><br>See the example.</br></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Activate">
            <summary>Auto_Activate     </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Close">
            <summary>Auto_Close        </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Deactivate">
            <summary>Auto_Deactivate   </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Open">
            <summary>Auto_Open         </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Consolidate_Area">
            <summary>Consolidate_Area  </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Criteria">
            <summary>Criteria          </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Data_Form">
            <summary>Data_Form         </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Database">
            <summary>Database          </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Extract">
            <summary>Extract           </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Filter_DataBase">
            <summary>Used in AutoFilters. </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Print_Area">
            <summary>Print_Area        </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Print_Titles">
            <summary>Print_Titles      </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Recorder">
            <summary>Recorder          </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Sheet_Title">
            <summary>Sheet_Title       </summary>
        </member>
        <member name="T:FlexCel.Core.IRowColSize">
            <summary>
            Interface for row heights and columns widths. XlsFile implements this interface, so you can pass an XlsFile object anytime you need to pass this interface.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IRowColSize.DefaultColWidth">
            <summary>
            The default width for empty columns, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IRowColSize.DefaultRowHeight">
            <summary>
            The default height for empty rows, in Excel internal units. (1/20th of a point). <b>IMPORTANT: </b> For this property
            to have any effect, you also need to set <see cref="P:FlexCel.Core.ExcelFile.DefaultRowHeightAutomatic" /> = false
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IRowColSize.GetCachedFont0">
            <summary>
            This method is used by FlexCel itself, you shouldn't call it directly.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IRowColSize.GetColWidth(System.Int32,System.Boolean)">
            <param name="col">Column Index (1 based)</param>
            <param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param>
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IRowColSize.GetDefaultFont">
            <summary>
            Returns Excel standard font for an empty cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IRowColSize.GetRowHeight(System.Int32,System.Boolean)">
            <param name="row">Row Index (1 based)</param>
            <param name="HiddenIsZero">If true, the height returned for a hidden row will be 0 and not its real height.</param>
            <summary>
            Returns the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <returns>Row height in internal excel units.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IRowColSize.HeightCorrection">
            <summary>
            Factor to multiply default row heights. See remarks for a detailed explanation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IRowColSize.IsEmptyRow(System.Int32)">
            <param name="row">Row to test (1-based)</param>
            <summary>
            True if the specified row does not have any cells, nor any format on it.
            In short, this row has never been used.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IRowColSize.ScreenScaling">
            <summary>
            This property lets you specify the screen scaling that FlexCel will assume for reading xlsx files in 
            percent. (default is 100 which means 100%). The values can be between 100 and 500.
            <para>
            Column widths in xlsx files which don't have a fixed column width set will be different in different screen 
            resolutions. So we need to know which resolution to emulate in order to read those file correctly.
            You will probably want to leave this property to the default value of 100, but you can change it if needed.
            </para>
            For more information, please read http://www.tmssoftware.com/site/blog.asp?post=311
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IRowColSize.SetCachedFont0(FlexCel.Core.TCachedFontWidth)">
            <param name="aFont" />
            <summary>
            This method is used by FlexCel itself, you shouldn't call it directly.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IRowColSize.ShowFormulaText">
            <summary>
            When true, the formula text will be displayed instead of the formula value. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IRowColSize.WidthCorrection">
            <summary>
            Factor to multiply default column widths. See remarks for a detailed explanation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.IStackedOptions">
            <summary>
            Interface for charts that can be stacked.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.IStackedOptions.StackedMode">
            <summary>
            Stacked mode for a series.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.IUserDefinedFunctionAggregator">
            <summary>
            This interface is passed to methods that will process the workbook. Implement your own custom decendant to create new functions.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.IUserDefinedFunctionAggregator.Process(System.Double,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="value">Value that will be processed.</param>
            <param name="error">Return an error here when the method returns false. If the method returns true, this parameter is undefined.</param>
            <summary>
            Implement this method to do something for every value in the range. <br />Note: You can abort the processing (for example if there is an error) by returning false in this function, and the error value in the "error" parameter.
            But, Excel normally doesn't behave this way. Excel will normally first check all values to see if there is an error, and only then
            if no cell was a #Err! value, do other checks (for example negative parameters). So, for this to be 100% like Excel, you always need to return true in 
            this function, and check for other errors only after all values have been processed. If you don't care about returning the exact error message Excel returns, you can return 
            the error directly here while you are processing the values and speed up things (since other values won't be processed after you know the first error).
            </summary>
            <returns>False if you want to abort, true to continue.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.LoadLinkedFileEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Core.TWorkspace.LoadLinkedFile" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.LoadLinkedFileEventArgs(System.String)">
            <param name="aFileName" />
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.LoadLinkedFileEventArgs.FileName">
            <summary>
            The filename of the file we need. <b>Note:</b> The path of this filename is relative to where the parent file is.
            you might need to add the main path to it in order to load the files.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.LoadLinkedFileEventArgs.Xls">
            <summary>
            Use this parameter to return the ExcelFile that corresponds with <see cref="P:FlexCel.Core.LoadLinkedFileEventArgs.FileName" />.  If you return null here, it means
            that the file was not found and it will result in #REF errors in the formulas that reference that file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.LoadLinkedFileEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for LoadLinkedFile event.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.OnPasswordEventArgs">
            <summary>
            Use this class to supply a password to open an encrypted file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.OnPasswordEventArgs(FlexCel.Core.ExcelFile)">
            <param name="aXls" />
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.OnPasswordEventArgs.Password">
            <summary>
            The password needed to open the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.OnPasswordEventArgs.Xls">
            <summary>
            Excel file we are trying to open.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.OnPasswordEventHandler">
            <param name="e" />
            <summary>
            This event fires when opening an encrypted file and no password has been supplied.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.OnSheetNameEventArgs">
            <summary>
            Arguments passed on a OnSheetName event. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.OnSheetNameEventArgs(FlexCel.Core.ExcelFile,System.Int32,System.String)">
            <param name="aWorkbook">See <see cref="P:FlexCel.Core.OnSheetNameEventArgs.Workbook" /></param>
            <param name="aActiveSheet">See <see cref="P:FlexCel.Core.OnSheetNameEventArgs.ActiveSheet" /></param>
            <param name="aSheetName">See <see cref="P:FlexCel.Core.OnSheetNameEventArgs.SheetName" /></param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.OnSheetNameEventArgs.ActiveSheet">
            <summary>
            Sheet we are exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.OnSheetNameEventArgs.SheetName">
            <summary>
            Use this property to return the new name that you want to use when creating a filename instead of the real sheet name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.OnSheetNameEventArgs.Workbook">
            <summary>
            ExcelFile we are exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.OnSheetNameEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate used to specify which name to use for every sheet when exporting multiple sheets to multiple files.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.StandardMimeType">
            <summary>
            Mime types for common file types.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Bmp">
            <summary>
            Bmp file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Emf">
            <summary>
            Emf file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Gif">
            <summary>
            Gif file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Html">
            <summary>
            Html file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Jpeg">
            <summary>
            Jpeg file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.OctectStream">
            <summary>
            This is the mime type required in PDF/A3 if the mime type is unknown.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Pdf">
            <summary>
            Pdf file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Pict">
            <summary>
            Pict file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Png">
            <summary>
            Png file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Svg">
            <summary>
            Svg file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Text">
            <summary>
            Text file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Tiff">
            <summary>
            Tiff file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Wmf">
            <summary>
            Wmf file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Xls">
            <summary>
            Xls file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Xlsm">
            <summary>
            Xlsm file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Xlsx">
            <summary>
            Xlsx file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Xltx">
            <summary>
            Xltx file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.StandardMimeType.Xml">
            <summary>
            An arbitrary xml file.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TAdaptativeFormats">
            <summary>
            Information about characters in a numeric format that need to be adapted when rendering. For example,
            if the cell A1 has value 1 and format "*_0" it will print as "______1" when the cell is wide, and as "_1" when the cell is shorter.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TAdaptativeFormats">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TAdaptativeFormats</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TAdaptativeFormats.AddSeparator(System.String,System.Int32)">
            <param name="sep">Character that will be used to calculate the width of the string.</param>
            <param name="sp">Position in the final string. (0 based)</param>
            <summary>
            Adds a char separator at a given position. Separator array will be kept in order when you add a value. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TAdaptativeFormats.AddSeparator(System.String,System.Int32,System.Int32)">
            <param name="Format">String with the characters.</param>
            <param name="fp">Position in the format string. (0 based)</param>
            <param name="sp">Position in the final string. (0 based)</param>
            <summary>
            Adds a separator at a given position. Separator array will be kept in order when you add a value. This routine considers utf32 characters.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TAdaptativeFormats.ApplySeparators(System.String)">
            <param name="s" />
            <summary>
            Returns the string with the characters at the positions in Separator changed by the characters specified in Separators.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAdaptativeFormats.IsEmpty">
            <summary>
            Returns true if this class has no adaptative formats.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAdaptativeFormats.Separators">
            <summary>
            An array of positions and characters that must be used to pad the string. In this field you have the the "_" and "?" numeric format delimeters from Excel.
            The spaces at the positions in the position array should have the width of the character specified in this field.
            if null, there are no separators in this class.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAdaptativeFormats.WildcardPos">
            <summary>
            Position of the last wildcard ("*") character in the format (0 based). If a wildcard is present in the format,
            the string has to be expanded with the character at position until it fit the width of the cell.
            A negative value means there is no wildcard in the format.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TAreaChartOptions">
            <summary>
            Options specific for an Area chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TAreaChartOptions(System.Int32,System.Boolean,System.Int32,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TChartDropBars,FlexCel.Core.TDataLabel)">
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aStackedMode">
                <see cref="T:FlexCel.Core.TStackedMode" /> of the chart.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDropBars">Drop bars and lines information. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
            <summary>
            Creates a new TAreaChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TAreaLineChartOptions">
            <summary>
            Options specific for a Line or Area chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TAreaLineChartOptions(FlexCel.Core.TChartType,System.Int32,System.Boolean,System.Int32,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TChartDropBars,FlexCel.Core.TDataLabel)">
            <param name="aChartType">Type of chart. Must be Area or line.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aStackedMode">
                <see cref="T:FlexCel.Core.TStackedMode" /> of the chart.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDropBars">Drop Bars, lines and Hi/lo information. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
            <summary>
            Creates a new TAreaLineChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAreaLineChartOptions.DropBars">
            <summary>
            If the chart group has drop lines, the line information. Null otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAreaLineChartOptions.HasShadow">
            <summary>
            True if the chart lines have shadows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAreaLineChartOptions.StackedMode">
            <summary>
                <see cref="T:FlexCel.Core.TStackedMode" /> of the chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TArrowLen">
            <summary>
            The length of an arrow head.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TArrowLen.Large">
            <summary>
            Large.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowLen.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowLen.Small">
            <summary>
            Small.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TArrowStyle">
            <summary>
            Style of an arrow.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TArrowStyle.Diamond">
            <summary>
            Diamond-shaped arrow.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowStyle.None">
            <summary>
            No arrow.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowStyle.Normal">
            <summary>
            Normal arrow.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowStyle.Open">
            <summary>
            Line arrow. (no fill)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowStyle.Oval">
            <summary>
            Oval shaped arrow.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowStyle.Stealth">
            <summary>
            Stealth arrow.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TArrowWidth">
            <summary>
            Preset width for an arrow.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TArrowWidth.Large">
            <summary>
            Large.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowWidth.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TArrowWidth.Small">
            <summary>
            Small.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAutofitMerged">
            <summary>
            Specifies how a merged cell will be autofitted. For example, if you have a merged cell from row 1 to 4,
            You might want to increase the size of the first row, the second, the last, or every row a little.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.Balanced">
            <summary>
            Autofit will change the height every row in the merged cell by the same amount.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.None">
            <summary>
            Merged cells with more than one row will not be autofitted when autofitting rows, and merged
            cells with more than one column will not be autofitted when autofitting rows.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnFifthCell">
            <summary>
            Autofit will change the size of the fifth row of the merged cell when autofitting rows, or the
            fifth column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnFirstCell">
            <summary>
            Autofit will change the size of the first row of the merged cell when autofitting rows, or the
            first column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnFourthCell">
            <summary>
            Autofit will change the size of the fourth row of the merged cell when autofitting rows, or the
            fourth column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnLastCell">
            <summary>
            Autofit will change the size of the last row of the merged cell when autofitting rows, or the
            last column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnLastCellMinusFour">
            <summary>
            Autofit will change the size of 4 rows before the last row of the merged cell when autofitting rows, or
            4 columns before the last column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnLastCellMinusOne">
            <summary>
            Autofit will change the size of the row before the last row of the merged cell when autofitting rows, or the
            column before the last column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnLastCellMinusThree">
            <summary>
            Autofit will change the size of 3 rows before the last row of the merged cell when autofitting rows, or
            3 columns before the last column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnLastCellMinusTwo">
            <summary>
            Autofit will change the size of 2 rows before the last row of the merged cell when autofitting rows, or
            2 columns before the last column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnSecondCell">
            <summary>
            Autofit will change the size of the second row of the merged cell when autofitting rows, or the
            second column when autofitting columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutofitMerged.OnThirdCell">
            <summary>
            Autofit will change the size of the third row of the merged cell when autofitting rows, or the
            third column when autofitting columns.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAutomaticColor">
            <summary>
            A list of special colors that depend on the user settings in windows.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.ChartNeutralColor">
            <summary>
            Chart neutral color (Black)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.DefaultBackground">
            <summary>
            Default background color.  This is the window background color in the sheet display and is the default background color for a cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.DefaultChartBackground">
            <summary>
            Default chart background color.  This is the window background color in the chart display.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.DefaultChartForeground">
            <summary>
            Default chart foreground color. This is the window text color in the chart display
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.DefaultForeground">
            <summary>
            Default foreground color. This is the window text color in the sheet display
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.Font">
            <summary>
            Font automatic color. This is the window text color.  
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.None">
            <summary>
            No Automatic color is applied.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.SheetTab">
            <summary>
            Sheet tab color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAutomaticColor.TooltipTextColor">
            <summary>
            ToolTip text color.  This is the automatic font color for comments
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAxisLabelPosition">
            <summary>
            Position of the labels on the axis.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.HighEnd">
            <summary>
            Labels go at the right of the chart, or to the top if axis is vertical.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.LowEnd">
            <summary>
            Labels go at the left of the chart, or to the bottom if axis is vertical.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.NextToAxis">
            <summary>
            Labels go next the axis, not to the chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.None">
            <summary>
            This axis has no labels.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAxisLineOptions">
            <summary>
            Line options for an Axis.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TAxisLineOptions">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TAxisLineOptions</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TAxisLineOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.DoNotDrawLabelsIfNotDrawingAxis">
            <summary>
            If true and the line format is none, the axis labels will not be drawn.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.MainAxis">
            <summary>
            Line options for the main axis line.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.MajorGridLines">
            <summary>
            Line options for the major gridlines along the axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.MinorGridLines">
            <summary>
            Line options for the minor gridlines along the axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.WallLines">
            <summary>
            Line options for the walls if this axis is <see cref="F:FlexCel.Core.TAxisType.Category" /> or <see cref="F:FlexCel.Core.TAxisType.Series" /> or 
            line options for the floor otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TAxisRangeOptions">
            <summary>
            Properties for the ranges of an axis.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TAxisRangeOptions(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <param name="aLabelFrequency">See <see cref="P:FlexCel.Core.TAxisRangeOptions.LabelFrequency" /></param>
            <param name="aTickFrequency">See <see cref="P:FlexCel.Core.TAxisRangeOptions.TickFrequency" /></param>
            <param name="aValueAxisBetweenCategories">See <see cref="P:FlexCel.Core.TAxisRangeOptions.ValueAxisBetweenCategories" /></param>
            <param name="aValueAxisAtMaxCategory">See <see cref="P:FlexCel.Core.TAxisRangeOptions.ValueAxisAtMaxCategory" /></param>
            <param name="aReverseCategories">See <see cref="P:FlexCel.Core.TAxisRangeOptions.ReverseCategories" /></param>
            <summary>
            Creates a new TAxisRangeOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TAxisRangeOptions.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.LabelFrequency">
            <summary>
            Frequency at what the labels on categories are displayed. 1 means display all labels, 2 display one label and skip one, and so on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.ReverseCategories">
            <summary>
            True if categories should be printed in reverse order.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.TickFrequency">
            <summary>
            Frequency at what the ticks on categories are displayed. 1 means display all ticks, 2 display one tick and skip one, and so on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.ValueAxisAtMaxCategory">
            <summary>
            True if the Y axis is at the left.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.ValueAxisBetweenCategories">
            <summary>
            Specifies if the Y Axis crosses between categories or in the middle of one. Normally a Column Chart 
            cross in the middle, and an area chart will cross between.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TAxisTickOptions">
            <summary>
            Properties for the ticks and labels of an axis.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TAxisTickOptions(FlexCel.Core.TTickType,FlexCel.Core.TTickType,FlexCel.Core.TAxisLabelPosition,FlexCel.Core.TBackgroundMode,FlexCel.Core.TUIColor,System.Int32)">
            <param name="aMajorTickType">See <see cref="P:FlexCel.Core.TAxisTickOptions.MajorTickType" /></param>
            <param name="aMinorTickType">See <see cref="P:FlexCel.Core.TAxisTickOptions.MinorTickType" /></param>
            <param name="aLabelPosition">See <see cref="P:FlexCel.Core.TAxisTickOptions.LabelPosition" /></param>
            <param name="aBackgroundMode">See <see cref="P:FlexCel.Core.TAxisTickOptions.BackgroundMode" /></param>
            <param name="aLabelColor">See <see cref="P:FlexCel.Core.TAxisTickOptions.LabelColor" /></param>
            <param name="aRotation">See <see cref="P:FlexCel.Core.TAxisTickOptions.Rotation" /></param>
            <summary>
            Creates a new TAxisTickOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.BackgroundMode">
            <summary>
            how the background of text will be rendered.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TAxisTickOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.LabelColor">
            <summary>
            Color of labels in this axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.LabelPosition">
            <summary>
            Position of the label relative to the axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.MajorTickType">
            <summary>
            Minor ticks type.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.MinorTickType">
            <summary>
            Majot ticks type.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.Rotation">
            <summary>
            Text Rotation in degrees. <br />
            When this value is from 0 to 90 then this is the rotation degrees in the up direction. <br />
            When this value is from 91 to 180 then this is a rotation in the down direction. 91 means -1 degree rotation, 92 means -2 degrees, and so on until 180 which means -90 degrees.<br />
            255 is vertical text. <br />
            Other values are invalid.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TAxisType">
            <summary>
            Type of axis.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TAxisType.Category">
            <summary>
            Category Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisType.Series">
            <summary>
            Series Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisType.Value">
            <summary>
            Value Axis.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBackgroundMode">
            <summary>
            How to draw backgrounds of text.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TBackgroundMode.Automatic">
            <summary>
            This is equivalent to transparent.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBackgroundMode.Opaque">
            <summary>
            Text will be drawn on a box.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBackgroundMode.Transparent">
            <summary>
            Text will be drawn transpaerntly.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBarChartOptions">
            <summary>
            Options for a Bar or Column chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBarChartOptions(System.Int32,System.Boolean,System.Int32,System.Double,System.Double,System.Boolean,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TDataLabel,FlexCel.Core.ChartLineOptions)">
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aBarOverlap">Space between bars in percent of the bar width.</param>
            <param name="aCategoriesOverlap">Space between categories in percent of bar width.</param>
            <param name="aHorizontal">If true, bars are horizontal and this is a bar chart. If false, bars are vertical and this is a column chart.</param>
            <param name="aStackedMode">
                <see cref="T:FlexCel.Core.TStackedMode" /> of the chart.</param>
            <param name="aHasShadow">True if the bars have shadows.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
            <param name="aSeriesLines">See <see cref="P:FlexCel.Core.TBarChartOptions.SeriesLines" /></param>
            <summary>
            Creates a new TBarChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.BarOverlap">
            <summary>
            Space between bars in percent of the bar width.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.CategoriesGap">
            <summary>
            Space between categories in percent of bar width.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.HasShadow">
            <summary>
            True if the bars have shadows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.Horizontal">
            <summary>
            If true, bars are horizontal and this is a bar chart. If false, bars are vertical and this is a column chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.SeriesLines">
            <summary>
            Line style for the Lines between Series if they exist, null otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.StackedMode">
            <summary>
                <see cref="T:FlexCel.Core.TStackedMode" /> of the chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBaseAxis">
            <summary>
            Common ancestor for all Axis types.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBaseAxis(FlexCel.Core.TFlxChartFont,System.String,FlexCel.Core.TAxisLineOptions,FlexCel.Core.TAxisTickOptions,FlexCel.Core.TAxisRangeOptions,FlexCel.Core.TDataLabel)">
            <param name="aFont">See <see cref="P:FlexCel.Core.TBaseAxis.Font" /></param>
            <param name="aNumberFormat">See <see cref="P:FlexCel.Core.TBaseAxis.NumberFormat" /></param>
            <param name="aAxisLineOptions">See <see cref="P:FlexCel.Core.TBaseAxis.AxisLineOptions" /></param>
            <param name="aTickOptions">See <see cref="P:FlexCel.Core.TBaseAxis.TickOptions" /></param>
            <param name="aRangeOptions">See <see cref="P:FlexCel.Core.TBaseAxis.RangeOptions" /></param>
            <param name="aCaption">See <see cref="P:FlexCel.Core.TBaseAxis.Caption" /></param>
            <summary>
            Creates a new TBaseAxis instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.AxisLineOptions">
            <summary>
            Linestyles for the different lines of this axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.Caption">
            <summary>
            Axis Caption.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.Font">
            <summary>
            Font used on this axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.NumberFormat">
            <summary>
            Format for the numbers on this axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.RangeOptions">
            <summary>
            Options for the range of this axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.TickOptions">
            <summary>
            Options for the ticks and the font used on the labels.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBaseImageProperties">
            <summary>
            Image information, for headers and footers, normal images or objects in general.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBaseImageProperties">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TBaseImageProperties</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.BiLevel">
            <summary>
            If true, the image will display in 2 color black and white.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Brightness">
            <summary>
            Brightness of the image. <see cref="F:FlexCel.Core.FlxConsts.DefaultBrightness" /> is the default Brightness.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBaseImageProperties.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Contrast">
            <summary>
            Contrast of the image. <see cref="F:FlexCel.Core.FlxConsts.DefaultContrast" /> is the default Contrast.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.CropArea">
            <summary>
            Cropping coordinates for the Image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.DefaultSize">
            <summary>
            If true, the application is expected to choose the default size of the object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.DefaultsToLockedAspectRatio">
            <summary>
            This property returns true if the shape by default locks its aspect ratio. Images do it, comments don't.
            You will normally not need to use this value.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Disabled">
            <summary>
            If true, the object is disabled.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBaseImageProperties.EqualValues(FlexCel.Core.TBaseImageProperties,FlexCel.Core.TBaseImageProperties)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TBaseImageProperties.FDefaultsToLockedAspectRatio">
            <summary>
            This variable must be set by the class inheriting this one.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.FileName">
            <summary>
            FileName of the image. It sets/gets the original filename of the image before it was inserted.
            (For example: c:\image.jpg) It is not necessary to set this field, and when the image is not inserted
            from a file but pasted, Excel does not set it either.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Gamma">
            <summary>
            Gamma of the image. <see cref="F:FlexCel.Core.FlxConsts.DefaultGamma" /> is the default Gamma.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Grayscale">
            <summary>
            Image should be displayed in grayscale.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Lock">
            <summary>
            True if this image can't be selected when the sheet is protected.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.LockAspectRatio">
            <summary>
            Specifies whether the aspect ratio of a shape is locked from being edited.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Macro">
            <summary>
            Macro attached to the image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.PreferRelativeSize">
            <summary>
            Specifies whether the original size of an object is saved after reformatting. 
            If true, the original size of the object is stored and all resizing is based on a 
            percentage of that original size.  Otherwise, each resizing resets the scale to 100%.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Print">
            <summary>
            If false, the image won't be printed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Published">
            <summary>
            Determines if the image should be published when sent to a server. This only applies to charts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.TransparentColor">
            <summary>
            Transparent Color. <see cref="F:FlexCel.Core.FlxConsts.NoTransparentColor" /> (~0L) means no transparent color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBlip">
            <summary>
            Picture and properties used in a Blip fill.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBlip(FlexCel.Core.TBlipCompression,System.Byte[],System.String,System.String)">
            <param name="aCompressionState">Compression state.</param>
            <param name="aPictureData">Picture Data. This data will be copied in this object, so after using it, you can modify the original and this won't change.</param>
            <param name="aImageFileName">File name which will be used when saving the file inside the xlsx container.</param>
            <param name="aContentType">Content type for the image, like "image/jpeg". You can use <see cref="T:FlexCel.Core.StandardMimeType" /> to get a list of common mime types.</param>
            <summary>
            Creates a new Blip.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlip.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlip.CompressionState">
            <summary>
            Specifies the compression state with which the picture is stored. This allows the 
            application to specify the amount of compression that has been applied to a picture. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlip.ContentType">
            <summary>
            Content type for the image, like "image/jpeg".
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlip.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlip.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlip.ImageFileName">
            <summary>
            File name which will be used when saving the file inside the xlsx container.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlip.PictureData">
            <summary>
            Image data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBlipCompression">
            <summary>
            This type specifies the amount of compression that has been used for a particular picture.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TBlipCompression.Email">
            <summary>
            Compressed for email.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBlipCompression.HQPrint">
            <summary>
            Compressed for high quality printing.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBlipCompression.None">
            <summary>
            No compression used.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBlipCompression.Print">
            <summary>
            Compressed for printing.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBlipCompression.Screen">
            <summary>
            Compressed for screen viewing.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBlipFill">
            <summary>
            Shapes are filled with an image.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBlipFill(System.Int32,System.Boolean,FlexCel.Core.TBlip,System.Nullable{FlexCel.Core.TDrawingRelativeRect},FlexCel.Core.TBlipFillMode)">
            <param name="aDpi" />
            <param name="aRotateWithShape" />
            <param name="aBlip" />
            <param name="aSourceRect" />
            <param name="aFillMode" />
            <summary>
            Creates a new Image fill.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFill.Blip">
            <summary>
            Picture and properties used in the Blip fill.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFill.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFill.Dpi">
            <summary>
            Specifies the DPI (dots per inch) used to calculate the size of the blip. If not present or zero, the DPI in the blip is used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFill.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFill.FillMode">
            <summary>
            Specifies how the blip will be applied to the fill, either by stretching it to cover all the surface, of by tiling it.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFill.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFill.RotateWithShape">
            <summary>
            Specifies that the fill should rotate with the shape.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFill.SourceRect">
            <summary>
            This element specifies the portion of the blip used for the fill. 
            Each edge of the source rectangle is defined by a percentage offset from the corresponding edge of the 
            bounding box.  A positive percentage specifies an inset, while a negative percentage specifies an outset. 
            For example, a left offset of 25% specifies that the left edge of the source rectangle is located to the right of the 
            bounding box's left edge by an amount equal to 25% of the bounding box's width.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBlipFillMode">
            <summary>
            This class is designed to store tiling or stretching fill mode information.
            You need to use any of its descendants, <see cref="T:FlexCel.Core.TBlipFillStretch" /> or <see cref="T:FlexCel.Core.TBlipFillTile" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBlipFillMode">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TBlipFillMode</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFillMode.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBlipFillStretch">
            <summary>
            This element specifies that a BLIP should be stretched to fill the target rectangle. The other option is a tile where 
            a BLIP is tiled to fill the available area.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBlipFillStretch(FlexCel.Core.TDrawingRelativeRect)">
            <param name="aFillRect" />
            <summary>
            Creates a new TBlipFillStretch object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFillStretch.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFillStretch.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFillStretch.FillRect">
            <summary>
            Rectangle where the picture will be streched.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFillStretch.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBlipFillTile">
            <summary>
            This element specifies that a BLIP should be tiled to fill the available space.  This element defines a "tile" 
            rectangle within the bounding box.  The image is encompassed within the tile rectangle, and the tile rectangle is 
            tiled across the bounding box to fill the entire area. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TBlipFillTile(FlexCel.Core.TDrawingRectAlign,FlexCel.Core.TFlipMode,FlexCel.Core.TDrawingCoordinate,FlexCel.Core.TDrawingCoordinate,System.Double,System.Double)">
            <param name="aAlign" />
            <param name="aFlip" />
            <param name="aTx" />
            <param name="aTy" />
            <param name="aScaleX" />
            <param name="aScaleY" />
            <summary>
            Creates a new Blip fill tile instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFillTile.Align">
            <summary>
            Specifies where to align the first tile with respect to the shape.  Alignment happens after the scaling, but before the additional offset.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFillTile.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFillTile.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFillTile.Flip">
            <summary>
            Specifies the direction(s) in which to flip the source image while tiling.  Images can be
            flipped horizontally, vertically, or in both directions to fill the entire region. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TBlipFillTile.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFillTile.ScaleX">
            <summary>
            Indicates the amount ot horizontally scale the source rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFillTile.ScaleY">
            <summary>
            Indicates the amount to vertically scale the source rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFillTile.Tx">
            <summary>
            Specifies an extra horizontal offest after alignment.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TBlipFillTile.Ty">
            <summary>
            Specifies an extra vertical offest after alignment.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TBubbleSizeType">
            <summary>
            What the bubble size means.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TBubbleSizeType.BubbleSizeIsArea">
            <summary>
            Bubble size represents the area.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBubbleSizeType.BubbleSizeIsWidth">
            <summary>
            Bubble size represents the width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBubbleSizeType.None">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBuiltInStyle">
            <summary>
            Enumerator with all built-in styles in Excel.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Bad">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Calculation">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Check_Cell">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.ColLevel">
            <summary>Style used in column outlines.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Comma">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Comma0">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Currency">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Currency0">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Emphasis_1">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Emphasis_2">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Emphasis_3">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Explanatory_Text">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Followed_Hyperlink">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Good">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_1">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_2">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_3">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_4">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Hyperlink">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Input">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Linked_Cell">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Neutral">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Normal">
            <summary>Normal style, used in all non formatted cells.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Note">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Output">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Percent">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.RowLevel">
            <summary>Style used in row outlines.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Title">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Total">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Warning_Text">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="T:FlexCel.Core.TCachedFontWidth">
            <summary>
            A font size cached for speed.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCachedFontWidth(System.Double,System.Double,System.Double,FlexCel.Core.TFlxFont,System.Int32)">
            <param name="aFontWidth" />
            <param name="aFontWidthScaled" />
            <param name="aSpaceWidth" />
            <param name="Fx" />
            <param name="aScreenScaling" />
            <summary>
            Creates an initializes an instance.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCachedFontWidth.FontName">
            <summary>
            Font name.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCachedFontWidth.FontSize">
            <summary>
            Font size.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCachedFontWidth.FontStyle">
            <summary>
            Font Style.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCachedFontWidth.FontWidth">
            <summary>
            Width of the "0" character.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCachedFontWidth.FontWidthScaled">
            <summary>
            Width of the "0" character at the current screen scaling.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCachedFontWidth.ScreenScaling">
            <summary>
            The scale at which this font was measured.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCachedFontWidth.SpaceWidth">
            <summary>
            Width of the Space character.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCategoryAxis">
            <summary>
            Information about an Axis of categories. (normally the x axis)
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCategoryAxis">
            <summary>
            Constructs a new TCategoryAxisOption instance with all values set to automatic.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCategoryAxis(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TCategoryAxisOptions,FlexCel.Core.TFlxChartFont,System.String,FlexCel.Core.TAxisLineOptions,FlexCel.Core.TAxisTickOptions,FlexCel.Core.TAxisRangeOptions,FlexCel.Core.TDataLabel)">
            <param name="aMin">See <see cref="P:FlexCel.Core.TCategoryAxis.Min" /></param>
            <param name="aMax">See <see cref="P:FlexCel.Core.TCategoryAxis.Max" /></param>
            <param name="aMajorValue">See <see cref="P:FlexCel.Core.TCategoryAxis.MajorValue" /></param>
            <param name="aMajorUnit">See <see cref="P:FlexCel.Core.TCategoryAxis.MajorUnit" /></param>
            <param name="aMinorValue">See <see cref="P:FlexCel.Core.TCategoryAxis.MinorValue" /></param>
            <param name="aMinorUnit">See <see cref="P:FlexCel.Core.TCategoryAxis.MinorUnit" /></param>
            <param name="aBaseUnit">See <see cref="P:FlexCel.Core.TCategoryAxis.BaseUnit" /></param>
            <param name="aCrossValue">See <see cref="P:FlexCel.Core.TCategoryAxis.CrossValue" /></param>
            <param name="aAxisOptions">See <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" /></param>
            <param name="aFont">See <see cref="P:FlexCel.Core.TBaseAxis.Font" /></param>
            <param name="aNumberFormat">See <see cref="P:FlexCel.Core.TBaseAxis.NumberFormat" /></param>
            <param name="aAxisLineOptions">See <see cref="P:FlexCel.Core.TBaseAxis.AxisLineOptions" />. This parameter will be cloned.</param>
            <param name="aTickOptions">See <see cref="P:FlexCel.Core.TBaseAxis.TickOptions" /> This parameter will be cloned.</param>
            <param name="aRangeOptions">See <see cref="P:FlexCel.Core.TBaseAxis.RangeOptions" /> This parameter will be cloned.</param>
            <param name="aCaption">See <see cref="P:FlexCel.Core.TBaseAxis.Caption" /> This parameter will be cloned.</param>
            <summary>
            Constructs a new TCategoryAxisOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.AxisOptions">
            <summary>
            Enumerates which of the other options contain valid values or are automatic.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.BaseUnit">
            <summary>
            Base units for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.CrossValue">
            <summary>
            Value where the other Axis will cross this one, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MajorUnit">
            <summary>
            Units for the major unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MajorValue">
            <summary>
            Value for the major unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.Max">
            <summary>
            Maximum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.Min">
            <summary>
            Minimum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MinorUnit">
            <summary>
            Units for the minor unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MinorValue">
            <summary>
            Value for the minor unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCategoryAxisOptions">
            <summary>
            Options for a Category Axis.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoBase">
            <summary>
            Use automatic base unit.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoCrossDate">
            <summary>
            Use automatic date crossing point.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoDate">
            <summary>
            Use automatic date settings.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMajor">
            <summary>
            Use automatic major units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMax">
            <summary>
            Use automatic maximum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMin">
            <summary>
            Use automatic minimum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMinor">
            <summary>
            Use automatic minor units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.DateAxis">
            <summary>
            This is a date Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.None">
            <summary>
            All magnitudes will be manual.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCellAddress">
            <summary>
            Small class that can convert between a string reference ("A1") into row and col integers (1,1).
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCellAddress">
            <summary>
            Creates Cell Address pointing to A1.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCellAddress(System.String)">
            <param name="aCellRef">
             String containing the cell address in Excel notation (for example "A5").
             Absolute references ($A$5) work too.
            </param>
            <summary>
             Creates a Cell Address pointing to (aCellRef).
             </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCellAddress(System.Int32,System.Int32)">
            <param name="aRow">Row index of the reference (1-based).</param>
            <param name="aCol">Column index of the reference (1-based).</param>
            <summary>
            Creates Cell Address pointing to (aRow, aCol).
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCellAddress(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <param name="aRow">Row index of the reference (1-based).</param>
            <param name="aCol">Column index of the reference (1-based).</param>
            <param name="aRowAbsolute">If true row will be an absolute reference. (As in A$5).</param>
            <param name="aColAbsolute">If true col will be an absolute reference. (As in $A5).</param>
            <summary>
            Creates Cell Address pointing to (aRow, aCol) with the corresponding absolute values.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCellAddress(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <param name="aSheet">Sheet name of the reference.</param>
            <param name="aRow">Row index of the reference (1-based).</param>
            <param name="aCol">Column index of the reference (1-based).</param>
            <param name="aRowAbsolute">If true row will be an absolute reference. (As in A$5).</param>
            <param name="aColAbsolute">If true col will be an absolute reference. (As in $A5).</param>
            <summary>
            Creates Cell Address pointing to (aRow, aCol) with the corresponding absolute values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddress.CellRef">
            <summary>
            Cell address in Excel A1 notation. (For example "A5").
            Absolute references ($A$5) will work too.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.CellRefR1C1(System.Int32,System.Int32)">
            <param name="cellRow">Row where the cell that has the formula is. This is used in relative R1C1 references,
            so for example, if the cell with the formula is B7, and this object holds a relative C9, the result would br R[2]C[1]</param>
            <param name="cellCol">Column where the cell that has the formula is. This is used in relative R1C1 references,
            so for example, if the cell with the formula is B7, and this object holds a relative C9, the result would br R[2]C[1]</param>
            <summary>
            Returns the cell reference in the objects in R1C1 notation.
            </summary>
            <returns>The cell reference in R1C1 notation.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.Clone">
            <summary>
            Returns a deep copy of the cell address.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddress.Col">
            <summary>
            Column index for this reference (1-based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddress.ColAbsolute">
            <summary>
            True if the column is an absolute reference (as in $A5)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.EncodeColumn(System.Int32)">
            <param name="C">Index of the column, 1 based.</param>
            <summary>
            Returns "A" for column 1, "B"  for 2 and so on.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.GetHashCode">
            <summary>
            Returns the hashcode of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.NameIsReserved(System.String)">
            <param name="Name" />
            <summary>
            Returns true if the string can be a cell reference, like A1 or LVM78, or "R", "C", "TRUE" or "FALSE".
            If this method returns true, you can't name a sheet or a named range with name.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.QuoteSheet(System.String)">
            <param name="SheetName">Sheet to quote</param>
            <summary>
            Quotes a sheet name if it is needed. For example, Sheet 1 should be quoted as 'Sheet 1'
            </summary>
            <returns>Quoted sheet.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddress.Row">
            <summary>
            Row index for this reference (1-based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddress.RowAbsolute">
            <summary>
            True if the row is an absolute reference (as in A$5)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddress.Sheet">
            <summary>
            Sheet name of the reference.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.TryParseSheet(System.String,System.String@,System.String@)">
            <param name="value">String to parse</param>
            <param name="sheet">Part of the string that is the sheet.</param>
            <param name="rest">Part of the string that is not the sheet.</param>
            <summary>
            Parses a string like Sheet1!A1 into a sheet component and the rest. If the sheet is quoted ('sheet 1') it will be unquoted.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.TrySetCellRef(System.String)">
            <param name="value">String with the cell reference, in A1 format. To use R1C1 notation, see <see cref="M:FlexCel.Core.TCellAddress.TrySetCellRef(System.String,FlexCel.Core.TReferenceStyle,System.Int32,System.Int32)" /></param>
            <summary>
            Tries to set a cell reference, and returns true if the cell is a correct A1 reference. This is similar to setting <see cref="P:FlexCel.Core.TCellAddress.CellRef" /> to a 
            string, but it will not raise an exception.
            </summary>
            <returns>True if value was a correct cell reference, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddress.TrySetCellRef(System.String,FlexCel.Core.TReferenceStyle,System.Int32,System.Int32)">
            <param name="value">String with the cell reference, in A1 or R1C1 format.</param>
            <param name="referenceStyle">Style the reference is in (A1 or R1C1).</param>
            <param name="cellRow">Row where the cell is. This is only used for R1C1 relative references, to know where the
            cell is. For example, the reference R[1]C[1] when cellRow is 5 will reference row 6. A1 references or absolute R1C1 references ignore this parameter.</param>
            <param name="cellCol">Column where the cell is. This is only used for R1C1 relative references, to know where the
            cell is. For example, the reference R[1]C[1] when cellCol is 5 will reference column 6. A1 references or absolute R1C1 references ignore this parameter.</param>
            <summary>
            Tries to set a cell reference, and returns true if the cell is a correct A1 or R1C1 reference. 
            </summary>
            <returns>True if value was a correct cell reference, false otherwise.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCellAddressRange">
            <summary>
            A class with 2 TCellAddress objects marking the start and end of a cell range.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCellAddressRange(FlexCel.Core.TCellAddress,FlexCel.Core.TCellAddress)">
            <param name="aTopLeft" />
            <param name="aBottomRight" />
            <summary>
            Creates a new instance. Addresses can't be null.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddressRange.BottomRight">
            <summary>
            The cell at the bottom right position in the range. It can't be null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddressRange.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellAddressRange.GetHashCode">
            <summary>
            HashCode for the object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCellAddressRange.TopLeft">
            <summary>
            The cell at the top left position in the range. It can't be null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCellMergedState">
            <summary>
            This struct is used in <see cref="M:FlexCel.Core.ExcelFile.CellMergedNext(FlexCel.Core.TCellMergedState@)" /> to keep track of the next merged cell that will be iterated.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCellMergedState.Init">
            <summary>
            Initializes a new State ready to enumerate all merged cells in a sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCellType">
            <summary>
            Values we can write on a cell
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCellType.Bool">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.DateTime">
            <summary>
            Not a real type (it is a number).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Empty">
            <summary>
            Blank cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Error">
            <summary>
            Error code 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Formula">
            <summary>
            A formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Number">
            <summary>
            Double precision number.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.String">
            <summary>
            An unicode string. Might be formatted.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Unknown">
            <summary>
            The .NET type does not map to any Excel type. (for example a class)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCharAndPos">
            <summary>
            A simple structure containing a position and a character.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCharAndPos.Char">
            <summary>
            Character that should go at position. Note that if this is a surrogate pair (UTF32) the string might have 2 UTF16 characters.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCharAndPos.Equals(System.Object)">
            <param name="obj">Object to check.</param>
            <summary>
            True if both structs are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCharAndPos.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCharAndPos.op_Equality(FlexCel.Core.TCharAndPos,FlexCel.Core.TCharAndPos)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Compares two structures.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCharAndPos.op_Inequality(FlexCel.Core.TCharAndPos,FlexCel.Core.TCharAndPos)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Compares two structures.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCharAndPos.Pos">
            <summary>
            Position of the character in the string (0 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartAxis">
            <summary>
            A class encapsulating the information of an axis
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartAxis(System.Int32,FlexCel.Core.TUIRectangle,FlexCel.Core.TBaseAxis,FlexCel.Core.TValueAxis)">
            <param name="aIndex">Axis Index. 0 means primary, 1 secundary.</param>
            <param name="aAxisLocation">Location of the axis, in 1/4000 units of the current chart dimensions.</param>
            <param name="aCategoryAxis">Data of the Category Axis. This might be a CategoryAxis for line or bar charts, or a ValuesAxis for a Scatter Chart.</param>
            <param name="aValueAxis">Data of the value Axis.</param>
            <summary>
            Creates a new ChartAxis instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartAxis.AxisLocation">
            <summary>
            Returns the Axis coordinates on 1/4000 parts of the chart area.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartAxis.CategoryAxis">
            <summary>
            Returns information about the Category Axis (X-Axis on a non rotated chart). Note that this might be a <see cref="T:FlexCel.Core.TValueAxis" /> axis for scatter charts, or a <see cref="T:FlexCel.Core.TCategoryAxis" /> for line or bar charts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartAxis.Index">
            <summary>
            Axis Index. 0 means primary, 1 secundary.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartAxis.ValueAxis">
            <summary>
            Returns information about the Value Axis (Y-Axis on a non rotated chart).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartDropBars">
            <summary>
            Information about a Drop Bar.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartDropBars(FlexCel.Core.ChartLineOptions,FlexCel.Core.ChartLineOptions,FlexCel.Core.TChartOneDropBar,FlexCel.Core.TChartOneDropBar)">
            <param name="aDropLines">See <see cref="P:FlexCel.Core.TChartDropBars.DropLines" /></param>
            <param name="aHiLoLines">See <see cref="P:FlexCel.Core.TChartDropBars.HiLoLines" /></param>
            <param name="aUpBar">See <see cref="P:FlexCel.Core.TChartDropBars.UpBar" /></param>
            <param name="aDownBar">See <see cref="P:FlexCel.Core.TChartDropBars.DownBar" /></param>
            <summary>
            Creates a new TChartDropBars instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartDropBars.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.DownBar">
            <summary>
            The data for the down drop bar.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.DropLines">
            <summary>
            Line style for the drop lines if they exist, null otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.HiLoLines">
            <summary>
            Line style for the High-Low lines if they exist, null otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.UpBar">
            <summary>
            The data for the up drop bar.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartErrorBarBarType">
            <summary>
            Specifies the possible ways to draw an error bar.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarBarType.Both">
            <summary>
            Specifies that error bars shall be shown in the positive and negative directions.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarBarType.Minus">
            <summary>
            Specifies that error bars shall be shown in the negative direction only.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarBarType.None">
            <summary>
            No error bars are drawn.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarBarType.Plus">
            <summary>
            Specifies that error bars shall be shown in the positive direction only.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartErrorBarDirection">
            <summary>
            Direction of an Error bar in a chart.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarDirection.Horizontal">
            <summary>
            Error bars are horizontal.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarDirection.Vertical">
            <summary>
            Error bars are vertical.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartErrorBarErrorType">
            <summary>
            Error amount type for the error bar.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarErrorType.Custom">
            <summary>
            Error bars show a formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarErrorType.FixedValue">
            <summary>
            Error bars show a fixed value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarErrorType.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarErrorType.Percentage">
            <summary>
            Error bars show a percentage.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarErrorType.StdDev">
            <summary>
            Error bars show the standard deviation.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartErrorBarErrorType.StdErr">
            <summary>
            Error bars show the standard error.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartErrorBars">
            <summary>
            Information about an Error Bar.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartErrorBars(FlexCel.Core.TChartErrorBarDirection,FlexCel.Core.TChartErrorBarBarType,FlexCel.Core.TChartErrorBarErrorType,System.Boolean,System.Double,FlexCel.Core.ChartLineOptions,System.String,System.Object[],System.String,System.Object[])">
            <param name="aDirection">Direction of the error bars.</param>
            <param name="aBarType">Positive or negative error bars.</param>
            <param name="aErrorType">Type of error bar.</param>
            <param name="aIsTShaped">If true, the error bar has a top line like a T.</param>
            <param name="aNumValue">Numeric value of the error. The meaning of this depends in the ErrorType.</param>
            <param name="aLineOptions">Line options for the error bars, color, line width, etc. If null, standard options will be used.</param>
            <param name="aCustomDefPlus">Definition for the custom error bars in the plus direction. If the error is not custom this will be null.</param>
            <param name="aCustomValuesPlus">Values for the custom error bars in the plus direction. If the error is not custom this will be null.</param>
            <param name="aCustomDefMinus">Definition for the custom error bars in the minus direction. If the error is not custom this will be null.</param>
            <param name="aCustomValuesMinus">Values for the custom error bars in the minus direction. If the error is not custom this will be null.</param>
            <summary>
            Creates a new TChartErrorBars instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.BarType">
            <summary>
            Positive or negative error bars.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartErrorBars.CalcErrorValues(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Double},System.Func{System.Int32,System.Int32,System.Boolean},System.Int32)">
            <param name="NumberOfSeries">Total number of series.</param>
            <param name="SeriesLen">Length of one series.</param>
            <param name="SeriesVal">Function that returns the value of a point of one of the series. First parameter is the series number, second is the point position.</param>
            <param name="SeriesHasVal">Function that returns true if a point of the series exists. First parameter is the series number, second is the point position.</param>
            <param name="SeriesPos">Series for which we are calculating the values.</param>
            <summary>
            This method will calculate the Values array based on the error types and series values.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartErrorBars.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.CustomDefMinus">
            <summary>
            Returns the formula text used for a custom error bar for the - values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.CustomDefPlus">
            <summary>
            Returns the formula text used for a custom error bar for the + values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.CustomValuesMinus">
            <summary>
            Returns the formula values used for a custom error bar for the - values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.CustomValuesPlus">
            <summary>
            Returns the formula values used for a custom error bar for the + values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.Direction">
            <summary>
            Direction of the error bars.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.ErrorType">
            <summary>
            Type of error bar.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.IsTShaped">
            <summary>
            If true, the error bar has a top line like a T.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.LineOptions">
            <summary>
            Line options for the error bars, color, line width, etc. If null, standard options will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.NumValue">
            <summary>
            Numeric value of the error. The meaning of this depends in the ErrorType.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.StdAvg">
            <summary>
            Returns the average of the series. This value is calculated by CalcErrorValues, and only is the error type is StdErr or StdDev.
            It is used when the error type is StdDev as error bars must be drawn from the average.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.ValuesMinus">
            <summary>
            Values of the negative error bars. This will be null unless you explicitly calculate them by calling CalcErrorValues.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartErrorBars.ValuesPlus">
            <summary>
            Values of the positive error bars. This will be null unless you explicitly calculate them by calling CalcErrorValues.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartFrameOptions">
            <summary>
            Description of a box, its coordinates, fill style and line style.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartFrameOptions(FlexCel.Core.ChartLineOptions,FlexCel.Core.ChartFillOptions,FlexCel.Core.TShapeOptionList,System.Boolean)">
            <param name="aLineOptions">See <see cref="P:FlexCel.Core.TChartFrameOptions.LineOptions" /></param>
            <param name="aFillOptions">See <see cref="P:FlexCel.Core.TChartFrameOptions.FillOptions" /></param>
            <param name="aExtraOptions">See <see cref="P:FlexCel.Core.TChartFrameOptions.ExtraOptions" /></param>
            <param name="aRoundedCorners">See <see cref="P:FlexCel.Core.TChartFrameOptions.RoundedCorners" /></param>
            <summary>
            Creates a new TChartFrameOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartFrameOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartFrameOptions.ExtraOptions">
            <summary>
            Extra options used to specify gradients, textures, etc. If this is no null, the color values are not used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartFrameOptions.FillOptions">
            <summary>
            Fill options for the frame.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartFrameOptions.LineOptions">
            <summary>
            Line options for the frame.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartFrameOptions.RoundedCorners">
            <summary>
            If true, the chart frame will have rounded corners.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartLabelPosition">
            <summary>
            Defines the position of a label in the chart when it is manually positioned.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartLabelPosition(FlexCel.Core.TChartLabelPositionMode,FlexCel.Core.TChartLabelPositionMode,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aTopLeftMode">See <see cref="P:FlexCel.Core.TChartLabelPosition.TopLeftMode" /></param>
            <param name="aBottomRightMode">See <see cref="P:FlexCel.Core.TChartLabelPosition.BottomRightMode" /></param>
            <param name="aX1">See <see cref="P:FlexCel.Core.TChartLabelPosition.X1" /></param>
            <param name="aY1">See <see cref="P:FlexCel.Core.TChartLabelPosition.Y1" /></param>
            <param name="aX2">See <see cref="P:FlexCel.Core.TChartLabelPosition.X2" /></param>
            <param name="aY2">See <see cref="P:FlexCel.Core.TChartLabelPosition.Y2" /></param>
            <summary>
            Creates a new TChartLabelPosition class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLabelPosition.BottomRightMode">
            <summary>
            This value specifies how the bottom right coordinates (X2, Y2) are stored and what they mean.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartLabelPosition.Clone">
            <summary>
            Returns a deep clone of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLabelPosition.TopLeftMode">
            <summary>
            This value specifies how the top left coordinates (X1, Y1) are stored and what they mean.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLabelPosition.X1">
            <summary>
            Left coordinate. The meaning of this property depends in <see cref="P:FlexCel.Core.TChartLabelPosition.TopLeftMode" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLabelPosition.X2">
            <summary>
            Right coordinate. The meaning of this property depends in <see cref="P:FlexCel.Core.TChartLabelPosition.BottomRightMode" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLabelPosition.Y1">
            <summary>
            Top coordinate. The meaning of this property depends in <see cref="P:FlexCel.Core.TChartLabelPosition.TopLeftMode" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLabelPosition.Y2">
            <summary>
            Bottom coordinate. The meaning of this property depends in <see cref="P:FlexCel.Core.TChartLabelPosition.BottomRightMode" /></summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartLabelPositionMode">
            <summary>
            How coordinates are stored for a label when it is manually positioned.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartLabelPositionMode.MDABS">
            <summary>
            Absolute width and height in points; can only be applied to the mdBotRt field of Pos
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLabelPositionMode.MDCHART">
            <summary>
            Relative position to the chart, in SPRC. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLabelPositionMode.MDFX">
            <summary>
            Relative position to the chart, in points. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLabelPositionMode.MDKTH">
            <summary>
            Offset to default position, in 1/1000 th  of the plot area size. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLabelPositionMode.MDPARENT">
            <summary>
            Owner of Pos determines how to interpret the position data. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartLegend">
            <summary>
            Description of the chart's legend box.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartLegend(System.Int64,System.Int64,System.Int64,System.Int64,System.Double,System.Double,FlexCel.Core.TChartLegendPos,System.Boolean,FlexCel.Core.TChartFrameOptions,FlexCel.Core.TChartTextOptions)">
            <param name="aX">See <see cref="P:FlexCel.Core.TChartLegend.X" /></param>
            <param name="aY">See <see cref="P:FlexCel.Core.TChartLegend.Y" /></param>
            <param name="aWidthInChartCoords">This parameter is used in case the value of <see cref="M:FlexCel.Core.TChartLegend.WidthInPoints(System.Double)" /> is 0. It represents the width in 1/4000 of the chart width. If <see cref="M:FlexCel.Core.TChartLegend.WidthInPoints(System.Double)" /> is &gt; 0 then this value is ignored.</param>
            <param name="aHeightInChartCoords">This parameter is used in case the value of <see cref="M:FlexCel.Core.TChartLegend.HeightInPoints(System.Double)" /> is 0. It represents the height in 1/4000 of the chart height. If <see cref="M:FlexCel.Core.TChartLegend.HeightInPoints(System.Double)" /> is &gt; 0 then this value is ignored.</param>
            <param name="aWidthInPoints">See <see cref="M:FlexCel.Core.TChartLegend.WidthInPoints(System.Double)" /></param>
            <param name="aHeightInPoints">
                <see cref="M:FlexCel.Core.TChartLegend.HeightInPoints(System.Double)" />
            </param>
            <param name="aPlacement">See <see cref="P:FlexCel.Core.TChartLegend.Placement" /></param>
            <param name="aCanOverlapWithChart">See <see cref="P:FlexCel.Core.TChartLegend.CanOverlapWithChart" /></param>
            <param name="aFrame">See <see cref="P:FlexCel.Core.TChartLegend.Frame" /></param>
            <param name="aTextOptions">See <see cref="P:FlexCel.Core.TChartLegend.TextOptions" /></param>
            <summary>
            Creates a new TChartLegend instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLegend.CanOverlapWithChart">
            <summary>
            If true, the chart can overlap the legend. Note that if <see cref="P:FlexCel.Core.TChartLegend.Placement" /> is different from <see cref="F:FlexCel.Core.TChartLegendPos.NotDocked" /> 
            then CanOverlapWithChart will be false. But even if not docked, this value can still be false as newer Excel versions allow you to specify
            this property on its own.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartLegend.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Frame">
            <summary>
            Line and fill style options for the frame.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartLegend.HeightInPoints(System.Double)">
            <param name="chartHeight">Height of the chart in points.</param>
            <summary>
            Returns the height of the legend in points (1/72 of an inch).
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Placement">
            <summary>
            Placement of the legend inside of the chart. Note that newer Excel versions might report a non docked placement
            even if the legend is docked to a side. You need to check <see cref="P:FlexCel.Core.TChartLegend.CanOverlapWithChart" /> to see if the legend is docked,
            and then look at the side it is to see if it is docked to the left, top, etc.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLegend.TextOptions">
            <summary>
            Global font options for the legend labels.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartLegend.WidthInPoints(System.Double)">
            <param name="chartWidth">Width of the chart in points.</param>
            <summary>
            Returns the width of the legend in points (1/72 of an inch).
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLegend.X">
            <summary>
            X coordinate on 1/4000 units of chart area.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Y">
            <summary>
            Y coordinate on 1/4000 units of chart area.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartLegendPos">
            <summary>
            Position of the legend inside the chart.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Bottom">
            <summary>
            At bottom.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Corner">
            <summary>
            At the corner.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Left">
            <summary>
            At the left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.NotDocked">
            <summary>
            The legend is not docked inside the chart area.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Right">
            <summary>
            At the right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Top">
            <summary>
            At the top.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartLineStyle">
            <summary>
            Line styles for a chart object.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.DarkGray">
            <summary>
            Dark gray line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.Dash">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.DashDotDot">
            <summary>
            Dash dot dot line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.Dot">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.LightGray">
            <summary>
            Light gray line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.MediumGray">
            <summary>
            Medium gray line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.Solid">
            <summary>
            Sloid line.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartLineWeight">
            <summary>
            Different widths for chart lines. Since Excel 2007 this isn't used anymore, as you can use arbitrary line widths.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Hair">
            <summary>
            Minimum width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Medium">
            <summary>
            Double width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Narrow">
            <summary>
            Single width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Wide">
            <summary>
            Triple width.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartMarkerType">
            <summary>
            Kind of marker.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Diamond">
            <summary>
            Diamond.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.DowJones">
            <summary>
            Dow jones symbol. (small horizontal line)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Image">
            <summary>
            The marker is an image, with no shape but the shape of the picture. You might also use a picture with the other options, and the 
            picure will be inside a circle, a diamond, etc. This option also doesn't take in account marker size, it uses the size of the image.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.None">
            <summary>
            No marker.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Plus">
            <summary>
            Plus sign.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Square">
            <summary>
            Square.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.StandardDeviation">
            <summary>
            Standard deviation symbol. (big horizontal line)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Star">
            <summary>
            Star.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Triangle">
            <summary>
            Up triangle.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.X">
            <summary>
            X sign.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartOneDropBar">
            <summary>
            Information about one specific drop bar.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartOneDropBar(FlexCel.Core.TChartFrameOptions,System.Int32)">
            <param name="aFrame">See <see cref="P:FlexCel.Core.TChartOneDropBar.Frame" /></param>
            <param name="aGapWidth">See <see cref="P:FlexCel.Core.TChartOneDropBar.GapWidth" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOneDropBar.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOneDropBar.Frame">
            <summary>
            Properties for the drop bar.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOneDropBar.GapWidth">
            <summary>
            Gap width on percent.(0 to 100)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartOptions">
            <summary>
            Base class for options specific to the type of chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartOptions(FlexCel.Core.TChartType,System.Boolean,System.Int32,System.Int32,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TDataLabel)">
            <param name="aChartType">Type of the chart.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area line style and fill settings. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels on this series group.</param>
            <summary>
            Creates a new TChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOptions.AxisNumber">
            <summary>
            Axis where this chart group belongs, 0 is primary, 1 is secondary.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOptions.ChangeColorsOnEachSeries">
            <summary>
            If false, all series will be the same color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOptions.ChartType">
            <summary>
            Chart Type.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.CompareTo(FlexCel.Core.TChartOptions)">
            <param name="obj">Object to compare to.</param>
            <summary>
            Orders the chart options depending on their z-order.
            </summary>
            <returns>-1, 0 or 1 depending if the series has a bigger z-order than obj.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.CompareTo(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOptions.DefaultLabel">
            <summary>
            Default label properties for this group of charts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.GetHashCode">
            <summary>
            Returns a hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_Equality(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both objects are equal. 
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_GreaterThan(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_Inequality(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <param name="s1" />
            <param name="s2" />
            <summary>
            Returns true if both objects do not have the same value.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_LessThan(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOptions.PlotArea">
            <summary>
            Plot area for this chart group.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOptions.SeriesOptions">
            <summary>
            Global options for all the series on this chart group.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartOptions.ZOrder">
            <summary>
            Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartPatternStyle">
            <summary>
            Fill style used in a pattern inside chart elements.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartPatternStyle.Automatic">
            <summary>
            Pattern defined by the context.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartPatternStyle.None">
            <summary>
            Transparent pattern.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartPlotArea">
            <summary>
            Line and fill styles for the Plot Area.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartPlotArea(FlexCel.Core.TChartFrameOptions)">
            <param name="aChartFrameOptions">See <see cref="P:FlexCel.Core.TChartPlotArea.ChartFrameOptions" /></param>
            <summary>
            Creates a new PlotArea instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartPlotArea.ChartFrameOptions">
            <summary>
            Line and fill style for this PlotArea.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartPlotArea.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartTextOptions">
            <summary>
            Options for text inside the chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChartTextOptions">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TChartTextOptions</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.BackgoundMode">
            <summary>
            Background mode, transparent or opaque.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChartTextOptions.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Font">
            <summary>
            Font style for the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.HAlign">
            <summary>
            Horizontal alginment for the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Height">
            <summary>
            Hieght of the bounding box, on 1/4000 units of chart size.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartTextOptions.Position">
            <summary>
            Position of the label. If this value is null, then X and Y properties in this class are used instead. If this value is not null,
            then X and Y have no meaning.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Rotation">
            <summary>
            Text Rotation in degrees. <br />
            When this value is from 0 to 90 then this is the rotation degrees in the up direction. <br />
            When this value is from 91 to 180 then this is a rotation in the down direction. 91 means -1 degree rotation, 92 means -2 degrees, and so on until 180 which means -90 degrees.<br />
            255 is vertical text. <br />
            Other values are invalid.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.TextColor">
            <summary>
            Color of the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.VAlign">
            <summary>
            Vertical alignment for the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Width">
            <summary>
            Width of the bounding box, on 1/4000 units of chart size.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.X">
            <summary>
            X coordinate on 1/4000 units of chart area.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Y">
            <summary>
            Y coordinate on 1/4000 units of chart area.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TChartType">
            <summary>
            Chart style.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TChartType.Area">
            <summary>
            Area chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Bar">
            <summary>
            Bar chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Line">
            <summary>
            Line chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Pie">
            <summary>
            Pie chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Radar">
            <summary>
            Radar chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Scatter">
            <summary>
            Scatter chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Surface">
            <summary>
            Surface chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Unknown">
            <summary>
            FlexCel cannot determine the chart type.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCheckboxState">
            <summary>
            Possible values of a checkbox in a sheet.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCheckboxState.Checked">
            <summary>
            Checkbox is checked.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCheckboxState.Indeterminate">
            <summary>
            Checkbox is not set. An indeterminate control generally has a shaded appearance.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCheckboxState.Unchecked">
            <summary>
            Checkbox is not checked.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChildAnchor">
            <summary>
            A class to hold the offsets relative to the parent on grouped shapes.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChildAnchor">
            <summary>
            Creates a new empty instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TChildAnchor(System.Double,System.Double,System.Double,System.Double)">
            <param name="aDx1" />
            <param name="aDy1" />
            <param name="aDx2" />
            <param name="aDy2" />
            <summary>
            Creates an instance with the defined values.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.Clone">
            <summary>
            Returns a deep copy of the Anchor.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dx1">
            <summary>
            Offset from the left on the parent, on percent of the total width of the parent.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dx2">
            <summary>
            Right coordinate of the box, in percent of the total width of the parent.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dy1">
            <summary>
            Offset from the top on the parent, on percent of the total height of the parent.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dy2">
            <summary>
            Bottom coordinate of the box, in percent of the total height of the parent.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.EqualValues(FlexCel.Core.TChildAnchor,FlexCel.Core.TChildAnchor)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TClientAnchor">
            <summary>
            Image Anchor information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TClientAnchor">
            <summary>
            Creates an Empty ClientAnchor.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TClientAnchor(FlexCel.Core.TFlxAnchorType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.IRowColSize)">
            <param name="aAnchorType">How the image behaves when copying/inserting cells.</param>
            <param name="aRow1">Row where to insert the image.</param>
            <param name="aPixDy1">Delta in pixels that the image is moved from aRow1.</param>
            <param name="aCol1">Column where to insert the image.</param>
            <param name="aPixDx1">Delta in pixels that the image is moved from aCol1.</param>
            <param name="height">Height in pixels.</param>
            <param name="width">Width in pixels.</param>
            <param name="Workbook">ExcelFile with the workbook, used to calculate the cells.</param>
            <summary>
            Creates a new image based on the image size.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TClientAnchor(FlexCel.Core.TFlxAnchorType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aAnchorType">How the image behaves when copying/inserting cells.</param>
            <param name="aRow1">First Row of object.</param>
            <param name="aDy1">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
            <param name="aCol1">First column of object</param>
            <param name="aDx1">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <param name="aRow2">Last row of object.</param>
            <param name="aDy2">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
            <param name="aCol2">Last column of object.</param>
            <param name="aDx2">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <summary>
            Creates a new ClientAnchor object, based on cell coords. Does not take in count actual image size.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TClientAnchor(FlexCel.Core.TFlxAnchorType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.IRowColSize)">
            <param name="aAnchorType">How the image behaves when copying/inserting cells.</param>
            <param name="aRow1">Row where to insert the image.</param>
            <param name="aPixDy1">Delta in pixels that the image is moved from aRow1.</param>
            <param name="aCol1">Column where to insert the image.</param>
            <param name="aPixDx1">Delta in pixels that the image is moved from aCol1.</param>
            <param name="aRow2">Row where to insert the image.</param>
            <param name="aPixDy2">Delta in pixels that the image is moved from aRow1.</param>
            <param name="aCol2">Column where to insert the image.</param>
            <param name="aPixDx2">Delta in pixels that the image is moved from aCol1.</param>
            <param name="Workbook">ExcelFile with the workbook, used to calculate the cells.</param>
            <summary>
            Creates a new image based on the image size.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TClientAnchor(System.Boolean,FlexCel.Core.TFlxAnchorType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aChartCoords">If true, the object is inside a chart and rows and columns range from 0 to 4000.</param>
            <param name="aAnchorType">How the image behaves when copying/inserting cells.</param>
            <param name="aRow1">First Row of object.</param>
            <param name="aDy1">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
            <param name="aCol1">First column of object.</param>
            <param name="aDx1">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <param name="aRow2">Last row of object.</param>
            <param name="aDy2">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
            <param name="aCol2">Last column of object.</param>
            <param name="aDx2">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <summary>
            Creates a new ClientAnchor object, based on cell coords. Ignores actual image size.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.AnchorType">
            <summary>
            How the image behaves when copying/inserting cells.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.CalcImageCoords(System.Double@,System.Double@,FlexCel.Core.IRowColSize)">
            <param name="height">Will return the height of the object.</param>
            <param name="width">Will return the width of the object.</param>
            <param name="Workbook">Workbook used to know the column widths and row heights.</param>
            <summary>
            Calculates the width and height of the image in pixels. MAKE SURE THE ACTIVESHEET IN WORKBOOK IS THE CORRECT ONE.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.CalcImageCoords(System.Double@,System.Double@,System.Double@,System.Double@,FlexCel.Core.IRowColSize)">
            <param name="top">Will return the top position of the start of the object in pixels.</param>
            <param name="left">Will return the left position of the start of the object in pixels.</param>
            <param name="height">Will return the height of the object.</param>
            <param name="width">Will return the width of the object.</param>
            <param name="Workbook">Workbook used to know the column widths and row heights.</param>
            <summary>
            Calculates the width and height of the image in pixels. MAKE SURE THE ACTIVESHEET IN WORKBOOK IS THE CORRECT ONE.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.CalcImageCoordsInPoints(System.Double@,System.Double@,FlexCel.Core.IRowColSize)">
            <param name="height">Will return the height of the object.</param>
            <param name="width">Will return the width of the object.</param>
            <param name="Workbook">Workbook used to know the column widths and row heights.</param>
            <summary>
            Calculates the width and height of the image in Points.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.ChartCoords">
            <summary>
            If true, this object is inside a chart, and columns and rows range from 0 to 4000.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.ChildAnchor">
            <summary>
            Returns the offset on the parent system for the image, when it is grouped.
            For example, if the parent shape on the group is 100 px wide, and ChildAnchor has a dx
            of 0.5, the image starts 50px to the right of the parent. If the shape is not grouped 
            or it is the shape on top of the group, ChildAnchor is null. When this member is
            not null, other values on ClientAnchor have no meaning.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Clone">
            <summary>
            Creates a copy of the Anchor
            </summary>
            <returns>Anchor copy.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Col1">
            <summary>
            First column of object
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Col2">
            <summary>
            Last column of object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Contains(FlexCel.Core.TClientAnchor)">
            <param name="targetAnchor">Anchor to test.</param>
            <summary>
            Returns true if the target anchor is inside or equal to this one.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dec">
            <summary>
            Returns a COPY of the anchor with rows and cols decremented by one
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dx1">
            <summary>
            Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dx1Pix(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in pixels from the left of the cell.
            </summary>
            <returns>Offset in pixels.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dx1Points(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in points from the left of the cell. This is used for display, and is not the exact conversion from Dx1Pix.
            </summary>
            <returns>Offset in points (1/72 of an inch).</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dx2">
            <summary>
            Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dx2Pix(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in pixels from the left of the cell.
            </summary>
            <returns>Offset in pixels.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dx2Points(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in points from the left of the cell.
            </summary>
            <returns>Offset in points (1/72 of an inch).</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dy1">
            <summary>
            Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dy1Pix(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in pixels from the top of the cell.
            </summary>
            <returns>Offset in pixels.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dy1Points(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in points from the top of the cell.
            </summary>
            <returns>Offset in points (1/72 of an inch).</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dy2">
            <summary>
            Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dy2Pix(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in pixels from the top of the cell.
            </summary>
            <returns>Offset in pixels.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dy2Points(FlexCel.Core.IRowColSize)">
            <param name="Workbook">ExcelFile where this object is placed</param>
            <summary>
            Returns the offset of the object in points from the top of the cell.
            </summary>
            <returns>Offset in points (1/72 of an inch).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.EqualValues(FlexCel.Core.TClientAnchor,FlexCel.Core.TClientAnchor)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null. This method is equivalent to TClientAnchor.Equals(a,b), and kept for backwards compatibility.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.GetHashCode">
            <summary>
            Returns the hash code for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Inc">
            <summary>
            Returns a COPY of the anchor with rows and cols incremented by one
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Row1">
            <summary>
            First Row of object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Row2">
            <summary>
            Last row of object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TClippingStyle">
            <summary>
            Can be used to clip into a region instead of drawing on it.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TClippingStyle.Exclude">
            <summary>
            This will exclude the region from the clipping area, no image will be drawn.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TClippingStyle.Include">
            <summary>
            This will include the region into the clipping area, no image will be drawn.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TClippingStyle.None">
            <summary>
            Normal draw, this will draw the image.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCollapseChildrenMode">
            <summary>
            Determines how the children of the node of an outline will be when the node  is collapsed or expanded.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCollapseChildrenMode.Collapsed">
            <summary>
            All children nodes of collapsed parents will be collapsed, and will show collapsed when you expand the parent.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCollapseChildrenMode.DontModify">
            <summary>
            Children nodes will be kept in the state they already were. If they were collapsed they will still be collapsed after
            collpasing or expanding the parent. Same if they were expanded.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCollapseChildrenMode.Expanded">
            <summary>
            All children nodes of collapsed parents will be expanded, and will show expanded when you expand the parent.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TColorTransform">
            <summary>
            Specifies a color transformation to be applied to a color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TColorTransform(FlexCel.Core.TColorTransformType,System.Double)">
            <param name="aColorTransformType">Type of transformation to be applied.</param>
            <param name="aValue">Value of the transform. The meaning of this field depends in the <see cref="P:FlexCel.Core.TColorTransform.ColorTransformType" /> value.</param>
            <summary>
            Creates a new TColorTransform with the corresponding parameters.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TColorTransform.ColorTransformType">
            <summary>
            Type of transformation to be applied.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TColorTransform.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both color transforms are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TColorTransform.GetHashCode">
            <summary>
            Hashcode for the color transform.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TColorTransform.op_Equality(FlexCel.Core.TColorTransform,FlexCel.Core.TColorTransform)">
            <param name="o1">First color transform to compare.</param>
            <param name="o2">Second color transform to compare.</param>
            <summary>
            Returns true if both color transforms have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TColorTransform.op_Inequality(FlexCel.Core.TColorTransform,FlexCel.Core.TColorTransform)">
            <param name="o1">First color transform to compare.</param>
            <param name="o2">Second color transform to compare.</param>
            <summary>
            Returns true if both color transforms do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TColorTransform.Transform(FlexCel.Core.TUIColor)">
            <param name="c">Color to transform.</param>
            <summary>
            Applies the transform for a given color.
            </summary>
            <returns>Transformed color.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TColorTransform.Value">
            <summary>
            Value of the transform. The meaning of this field depends in the <see cref="P:FlexCel.Core.TColorTransform.ColorTransformType" /> value.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TColorTransformType">
            <summary>
            List of transformations that can be done to a color.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Alpha">
            <summary>
            Yields its input color with the specified opacity, but with its color unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.AlphaMod">
            <summary>
            Yields a more or less opaque version of its input color. An alpha modulate never increases the alpha beyond 100%. A 200% alpha modulate makes a input color twice as opaque as before. A 50% alpha modulate makes a input color half as opaque as before. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.AlphaOff">
            <summary>
            Yields a more or less opaque version of its input color. An alpha offset never increases the alpha beyond 100% or decreases below 0%; i.e., the result of the transform pins the alpha to the range of [0%,100%]. A 10% alpha offset increases a 50% opacity to 60%. A -10% alpha offset decreases a 50% opacity to 40%. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Blue">
            <summary>
            Yields the input color with the specified blue component, but with its red and green components unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.BlueMod">
            <summary>
            Yields the input color with its blue component modulated by the given percentage. A 50% blue modulate reduces the blue component by half. A 200% blue modulate doubles the blue component. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.BlueOff">
            <summary>
            Yields the input color with its blue component shifted, but with its red and green components unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Complement">
            <summary>
            Yields the complement of its input color. For example, the complement of red is green. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Gamma">
            <summary>
            Yields the sRGB gamma shift of its input color. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Gray">
            <summary>
            Yields a grayscale of its input color, taking into relative intensities of the red, green, and blue primaries. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Green">
            <summary>
            Yields the input color with the specified green component, but with its red and blue components unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.GreenMod">
            <summary>
            Yields the input color with its green component modulated by the given percentage. A 50% green modulate reduces the green component by half. A 200% green modulate doubles the green component. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.GreenOff">
            <summary>
            Yields the input color with its green component shifted, but with its red and blue components unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Hue">
            <summary>
            Yields the input color with the specified hue, but with its saturation and luminance unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.HueMod">
            <summary>
            Yields the input color with its hue modulated by the given percentage. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.HueOff">
            <summary>
            Yields the input color with its hue shifted, but with its saturation and luminance unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Inverse">
            <summary>
            Yields the inverse of its input color. For example, the inverse of red (1,0,0) is cyan (0,1,1). 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.InvGamma">
            <summary>
            Yields the inverse sRGB gamma shift of its input color. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Lum">
            <summary>
            Yields the input color with the specified luminance, but with its hue and saturation unchanged. Typically, luminance values fall in the range [0%,100%]. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.LumMod">
            <summary>
            Yields the input color with its luminance modulated by the given percentage. A 50% luminance modulate reduces the luminance by half. A 200% luminance modulate doubles the luminance. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.LumOff">
            <summary>
            Yields the input color with its luminance shifted, but with its hue and saturation unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Red">
            <summary>
            Yields the input color with the specified red component, but with its green and blue components unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.RedMod">
            <summary>
            Yields the input color with its red component modulated by the given percentage. A 50% red modulate reduces the red component by half. A 200% red modulate doubles the red component. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.RedOff">
            <summary>
            Yields the input color with its red component shifted, but with its green and blue components unchanged.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Sat">
            <summary>
            Yields the input color with the specified saturation, but with its hue and luminance unchanged. Typically saturation values fall in the range [0%, 100%]. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.SatMod">
            <summary>
            Yields the input color with its saturation modulated by the given percentage. A 50% saturation modulate reduces the saturation by half. A 200% saturation modulate doubles the saturation. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.SatOff">
            <summary>
            Yields the input color with its saturation shifted, but with its hue and luminance unchanged. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Shade">
            <summary>
            Yields a darker version of its input color. A 10% shade is 10% of the input color combined with 90% black. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorTransformType.Tint">
            <summary>
            Yields a lighter version of its input color. A 10% tint is 10% of the input color combined with 90% white. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TColorType">
            <summary>
            Defines which one of the values stored in a <see cref="T:FlexCel.Core.TExcelColor" /> structure is the one that must be used.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TColorType.Automatic">
            <summary>
            Color is Automatic.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorType.Indexed">
            <summary>
            The structure contains an indexed color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorType.RGB">
            <summary>
            The structure contains an indexed color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TColorType.Theme">
            <summary>
            The structure contains a themed color.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TColumnBlock">
            <summary>
            This class represents a block of columns with the same formatting, options and width.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TColumnBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aFirstCol" />
            <param name="aLastCol" />
            <param name="aWidth" />
            <param name="aOptions" />
            <param name="aXF" />
            <summary>
            Creates a new TColumnBlock.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TColumnBlock.Equals(System.Object)">
            <param name="obj" />
            <summary>
            returns true if both objects have the same values.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TColumnBlock.FirstCol">
            <summary>
            First column of the range (1 based).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TColumnBlock.GetHashCode">
            <summary>
            returns the hashcode.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TColumnBlock.Hidden">
            <summary>
            Returns true if the columns are hidden
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TColumnBlock.LastCol">
            <summary>
            Last column of the range (1 based).
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TColumnBlock.Options">
            <summary>
            Options of the columns.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TColumnBlock.Width">
            <summary>
            Width of the columns.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TColumnBlock.XF">
            <summary>
            Format of the columns.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCommentProperties">
            <summary>
            Holds the properties for a comment. This class is a descendant of <see cref="T:FlexCel.Core.TObjectProperties" />, and it adds specific behavior for a comment.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCommentProperties">
            <summary>
            Creates a new empty TCommentProperties instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCommentProperties(FlexCel.Core.TClientAnchor)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCommentProperties(FlexCel.Core.TClientAnchor,System.String)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aShapeName">Shape name for the comment box, as it will appear on the names combo box.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCommentProperties(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TObjectTextProperties,System.Boolean,System.Boolean)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aShapeName">Name of the shape, as it appears on the names combobox. Set it to null to not add an imagename.</param>
            <param name="aTextProperties">Propertied of the text in the comment.</param>
            <param name="aLock">Specifies if the comment is locked.</param>
            <param name="aAutoSize">If true, the comment box will autosize to hold the text.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCommentProperties.AutoSize">
            <summary>
            If true, the comment box will adapt its size to the size of the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCommentProperties.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCommentProperties.CreateStandard(System.Int32,System.Int32,FlexCel.Core.ExcelFile)">
            <param name="row">Row where the comment will be (1 based).</param>
            <param name="col">Column where the comment will be (1 based).</param>
            <param name="Workbook" />
            <summary>
            Creates a standard yellow comment of standard height and width for the cell at row, col.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCommentProperties.DefaultFillColorRGB">
            <summary>
            Default color used in the comments.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCommentProperties.DefaultFillColorSystem">
            <summary>
            Default color used in the comments, as a system color.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCommentProperties.DefaultLineColorSystem">
            <summary>
            Default color used in the comments, as a system color.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCommentProperties.Hidden">
            <summary>
            If true, the comment box will be hidden (this is the default).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCommentProperties.TextProperties">
            <summary>
            Properties of the text in the object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCompoundLineType">
            <summary>
            Type of line.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCompoundLineType.Double">
            <summary>
            A double line, both with normal width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompoundLineType.Single">
            <summary>
            A single line with normal width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompoundLineType.ThickThin">
            <summary>
            A double line, first think and the other thin.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompoundLineType.ThinThick">
            <summary>
            A double line, first think and the other thick.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompoundLineType.Triple">
            <summary>
            A triple line, Thin, thick and thin.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCompressionMode">
            <summary>
              How the fields inside the zip file will be compressed. Zippy supports
              only both most used methods, Store and Deflate.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCompressionMode.cmAutomatic">
            <summary>
              When you specify automatic, the compression mode will be set depending in
              the extension of the file being added.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompressionMode.cmDeflated">
            <summary>
              File will be stored with standard zip compression.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompressionMode.cmStored">
            <summary>
              File is stored without compressing. When creating files, use this mode to
              store already compressed files like a png.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCondFmtIconSet">
            <summary>
            Different icon sets used in conditional formatting.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.None">
            <summary>
            No icon set.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3Arrows">
            <summary>
            3 Arrows.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3ArrowsGray">
            <summary>
            3ArrowsGray.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3Flags">
            <summary>
            3Flags.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3Signs">
            <summary>
            3Signs.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3Stars">
            <summary>
            3Stars.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3Symbols">
            <summary>
            3Symbols.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3Symbols2">
            <summary>
            3Symbols2.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3TrafficLights1">
            <summary>
            3TrafficLights1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3TrafficLights2">
            <summary>
            3TrafficLights2.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set3Triangles">
            <summary>
            3Triangles.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set4Arrows">
            <summary>
            4Arrows.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set4ArrowsGray">
            <summary>
            4ArrowsGray.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set4Rating">
            <summary>
            4Rating.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set4RedToBlack">
            <summary>
            4RedToBlack.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set4TrafficLights">
            <summary>
            4TrafficLights.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set5Arrows">
            <summary>
            5Arrows.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set5ArrowsGray">
            <summary>
            5ArrowsGray.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set5Boxes">
            <summary>
            5Boxes.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set5Quarters">
            <summary>
            5Quarters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCondFmtIconSet.Set5Rating">
            <summary>
            5Rating.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TConditionalAboveAverageRule">
            <summary>
            A conditional format rule which highlights cells which are in an specific time period. Note that it will also apply to number intervals, since dates are formatted numbers.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalAboveAverageRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aIsBelowAverage">If true, then this rule highlights values below the average instead of above.</param>
            <param name="aIncludeAverage">If true, the average value itself will be highlighted.</param>
            <param name="aStdDev">The number of standard deviations to include above or below the average.</param>
            <summary>
            Creates a new instance of TConditionalAboveAverageRule.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalAboveAverageRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalAboveAverageRule.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalAboveAverageRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalAboveAverageRule.IncludeAverage">
            <summary>
            If true, the average value itself will be highlighted.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalAboveAverageRule.IsBelowAverage">
            <summary>
            If true, then this rule highlights values below the average instead of above. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalAboveAverageRule.StdDev">
            <summary>
            The number of standard deviations to include above or below the average.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalBaseTextRule">
            <summary>
            A base conditional format rule which highlights cells which contain specific text. This class is not used directly, you use the descendants.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalBaseTextRule(FlexCel.Core.TConditionalFormatKind,FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.String)">
            <param name="aKind">Type of text used by the rule.</param>
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aText">Text to search for.</param>
            <summary>
            Creates a new instance of TConditionalBaseTextRule.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalBaseTextRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalBaseTextRule.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalBaseTextRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalBaseTextRule.Text">
            <summary>
            Text to search for.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalBeginsWithTextRule">
            <summary>
            A conditional format rule which highlights cells which start with some text.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalBeginsWithTextRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.String)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aText">Text to search for.</param>
            <summary>
            Creates a new instance of TConditionalBeginsWithTextRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalCellIsRule">
            <summary>
            A conditional format rule specified by the value on a cell (less than, equal, etc).
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalCellIsRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,FlexCel.Core.TConditionType,System.String,System.String)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aConditionType">See <see cref="P:FlexCel.Core.TConditionalCellIsRule.ConditionType" /></param>
            <param name="aFormula1">See <see cref="P:FlexCel.Core.TConditionalCellIsRule.Formula1" /></param>
            <param name="aFormula2">See <see cref="P:FlexCel.Core.TConditionalCellIsRule.Formula2" /></param>
            <summary>
            Creates a new instance of TConditionalCellIsRule.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalCellIsRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalCellIsRule.ConditionType">
            <summary>
            Condition to apply for the rule.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalCellIsRule.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalCellIsRule.Formula1">
            <summary>
            The first formula to be evaluated. When the condition needs only one parameter (for example when condition is "Equal") this is the only formula that is used.
            <br />Note that with <b>relative</b> references, we always consider "A1" to be the cell where the format is. This means that the formula:
            "=$A$1 + A1" when evaluated in Cell B8, will read "=$A$1 + B8". To provide a negative offset, you need to wrap the formula.
            For example "=A1048575" will evaluate to B7 when evaluated in B8.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalCellIsRule.Formula2">
            <summary>
            The second formula to be evaluated. Note that this formula is only used if the condition needs more than one parameter (for example when condition is "Between").
            If using a condition with only one parameter, you can leave this formula to null.
            <br />Note that with <b>relative</b> references, we always consider "A1" to be the cell where the format is. This means that the formula:
            "=$A$1 + A1" when evaluated in Cell B8, will read "=$A$1 + B8". To provide a negative offset, you need to wrap the formula.
            For example "=A1048575" will evaluate to B7 when evaluated in B8.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalCellIsRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalColorScaleRule">
            <summary>
            A conditional format rule specified as a color scale.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalColorScaleRule(FlexCel.Core.TConditionalFormatDefColorScale,System.Int32,System.Boolean)">
            <param name="aColorScale">Format definition for the rule.</param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalColorScaleRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalContainsBlanksRule">
            <summary>
            A conditional format rule which highlights blank cells.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalContainsBlanksRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalContainsBlanksRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalContainsErrorsRule">
            <summary>
            A conditional format rule which highlights cells with errors.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalContainsErrorsRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalContainsErrorsRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalContainsTextRule">
            <summary>
            A conditional format rule which highlights cells which contain some text.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalContainsTextRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.String)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aText">Text to search for.</param>
            <summary>
            Creates a new instance of TConditionalContainsTextRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalDataBarRule">
            <summary>
            A conditional format rule specified as a Data Bar.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalDataBarRule(FlexCel.Core.TConditionalFormatDefDataBar,System.Int32,System.Boolean)">
            <param name="aDataBar">Format definition for the rule.</param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalDataBarRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalDuplicateValuesRule">
            <summary>
            A conditional format rule which highlights duplicated values.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalDuplicateValuesRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalDuplicateValueRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalEndsWithTextRule">
            <summary>
            A conditional format rule which highlights cells which end with some text.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalEndsWithTextRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.String)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aText">Text to search for.</param>
            <summary>
            Creates a new instance of TConditionalBeginsWithTextRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalExpressionRule">
            <summary>
            A conditional format rule specified by a formula.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalExpressionRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.String)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aFormula">See <see cref="P:FlexCel.Core.TConditionalExpressionRule.Formula" /></param>
            <summary>
            Creates a new instance of TConditionalExpressionRule.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalExpressionRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalExpressionRule.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalExpressionRule.Formula">
            <summary>
            The formula to be evaluated. The conditional format will be applied when it evaluates to true.
            <br />Note that with <b>relative</b> references, we always consider "A1" to be the cell where the format is. This means that the formula:
            "=$A$1 + A1" when evaluated in Cell B8, will read "=$A$1 + B8". To provide a negative offset, you need to wrap the formula.
            For example "=A1048575" will evaluate to B7 when evaluated in B8.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalExpressionRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatDef">
            <summary>
            The format to apply when a <see cref="T:FlexCel.Core.TConditionalFormatRule" /> is applied.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatDef">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TConditionalFormatDef</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDef.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns>A deep copy of a TConditionalFormatDef instance.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatDefColorScale">
            <summary>
            Defines a format of the color scales in a conditional format.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatDefColorScale">
            <summary>
            Creates an empty instance, where no format applies.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefColorScale.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefColorScale.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefColorScale.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefColorScale.ValuesAndColors">
            <summary>
            A list of definitions and colors for the color scale.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatDefDataBar">
            <summary>
            Defines a format of the databars in a conditional format.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatDefDataBar">
            <summary>
            Creates an empty instance, where no format applies.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefDataBar.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefDataBar.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefDataBar.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefDataBar.MaxLength">
            <summary>
            The maximum length of the data bar, as a percentage of the cell width.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefDataBar.MinLength">
            <summary>
            The minimum length of the data bar, as a percentage of the cell width.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefDataBar.ShowValues">
            <summary>
            If true, we will show the values in the cell where the databar is.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefDataBar.ValuesAndColors">
            <summary>
            A list of definitions and colors for the data bar.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatDefIconSet">
            <summary>
            Defines a format of the color scales in a conditional format.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatDefIconSet">
            <summary>
            Creates an empty instance, where no format applies.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefIconSet.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefIconSet.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefIconSet.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefIconSet.IconSet">
            <summary>
            The set of icons used in the conditional format.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefIconSet.IsPercent">
            <summary>
            If true, the values are defined in percents and not in absolute values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefIconSet.Reverse">
            <summary>
            If true the icons will be reversed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefIconSet.ShowValues">
            <summary>
            If false the cell values will not be shown.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefIconSet.Values">
            <summary>
            A list of definitions and colors for the data bar.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatDefStandard">
            <summary>
            Defines a format to apply for cells when a rule evaluates to true.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatDefStandard">
            <summary>
            Creates an empty instance, where no format applies.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderBottom">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderBottom" /> settings will be applied, esle they will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderLeft">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderLeft" /> settings will be applied, esle they will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderRight">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderRight" /> settings will be applied, esle they will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderTop">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderTop" /> settings will be applied, esle they will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontColor">
            <summary>
            When true the font color specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontColor" /> will be applied, else it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontSize20">
            <summary>
            When true the font size specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontSize20" /> will be applied, else it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleBoldAndItalic">
            <summary>
            When true, the font style on <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle" /> for bold an italics will be applied. When false, it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleStrikeout">
            <summary>
            When true, the font style on <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle" /> for strikeout will be applied. When false, it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleSubSuperscript">
            <summary>
            When true, the font style on <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle" /> for subscripts and superscripts will be applied. When false, it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontUnderline">
            <summary>
            When true the font underline specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontUnderline" /> will be applied, else it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternBg">
            <summary>
            When true the background color specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternBgColor" /> will be used, else it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternFg">
            <summary>
            When true the foreground color specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternFgColor" /> will be used, else it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternStyle">
            <summary>
            When true the pattern style specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle" /> will be applied, else it will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderBottom">
            <summary>
            Color and style for the cell border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderLeft">
            <summary>
            Color and style for the cell border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderRight">
            <summary>
            Color and style for the cell border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderTop">
            <summary>
            Color and style for the cell border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefStandard.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefStandard.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontColor">
            <summary>
            Font color index on the color palette when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontColor" /> is true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontSize20">
            <summary>
            Font size in 1/20 of a point when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontSize20" /> is true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle">
            <summary>
            Style of the font, such as bold or italics when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleBoldAndItalic" /> is true and/or <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleStrikeout" /> is true and/or <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleSubSuperscript" /> is true. Underline is a different option.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontUnderline">
            <summary>
            Underline type, when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontUnderline" /> = true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefStandard.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasBorderBlock">
            <summary>
            Returns true if any border formatting is applied.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasFontBlock">
            <summary>
            Returns true if any font formatting is applied
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasFormat">
            <summary>
            Returns true if any format is applied.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasPatternBlock">
            <summary>
            Returns true if any pattern formatting is applied.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.PatternBgColor">
            <summary>
            Background color of the pattern. This value is *NOT* used when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle" /> is solid. Only applies if <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternBg" /> is true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.PatternFgColor">
            <summary>
            Foreground color of the pattern. This value is the only color used when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle" /> is solid. Only applies if <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternFg" /> is true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle">
            <summary>
            Pattern style to apply, when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternStyle" /> is true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatKind">
            <summary>
            Defines which kind of conditional formatting the rule contains.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.AboveAverage">
            <summary>
            This rule highlights cells which are above or below average.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.BeginsWith">
            <summary>
            The rule highlights cells that beign with some text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.CellIs">
            <summary>
            Compares the cell with another cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.ColorScale">
            <summary>
            The rule is a color scale.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.ContainsBlanks">
            <summary>
            The rule highlights empty cells.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.ContainsErrors">
            <summary>
            The rule highlights cells that contain errors.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.ContainsText">
            <summary>
            The rule highlights cells that contain some text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.DataBar">
            <summary>
            The rule is data bars.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.DuplicateValues">
            <summary>
            The rule highlights duplicated values.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.EndsWith">
            <summary>
            The rule highlights cells that end with some text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.Expression">
            <summary>
            When the formula is true, then the conditional format is applied.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.IconSet">
            <summary>
            The rule uses an icon set.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.NotContainsBlanks">
            <summary>
            The rule highlights non empty cells.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.NotContainsErrors">
            <summary>
            The rule highlights cells that don't contain errors.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.NotContainsText">
            <summary>
            The rule highlights cells that doesn't contain some text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.TimePeriod">
            <summary>
            The rule highlights dates inside a range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.TopN">
            <summary>
            The rule is a top N.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionalFormatKind.UniqueValues">
            <summary>
            The rule highlights unique values.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatRule">
            <summary>
            A rule specifying a conditional format. You cannot create instances of this class, only of their children.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatRule(FlexCel.Core.TConditionalFormatKind,FlexCel.Core.TConditionalFormatDef,System.Int32,System.Boolean)">
            <param name="aKind">Kind of conditional rule this instance contains.</param>
            <param name="aFormatDef">Format definition for the rule.</param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">Only valid on Excel 2007 or newer. If true, no more conditional format rules after this one will be applied if this rule applies.</param>
            <summary>
            Creates a new instance of TConditionalFormatRule, with the corresponding Format definition.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatRule.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatRule.FormatDef">
            <summary>
            Format to apply when the rule evaluates to true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatRule.Kind">
            <summary>
            Defines which kind of conditional rule this object contains. FormatDef will contain a subclass that must match the kind here.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatRule.Priority">
            <summary>
            Priority for the rule. 1 means highest priority and higher number mean that the rule will be evaluated later.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue">
            <summary>
            When true, rules after this one will not evaluate if this one applies. Only Applies to Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatValueAndColorList">
            <summary>
            A list of conditional value objects with their corresponding colors.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatValueAndColorList">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TConditionalFormatValueAndColorList</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatValueAndColorList.Clone">
            <summary>
            Not implemented yet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatValueAndColorList.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Not implemented yet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatValueAndColorList.GetHashCode">
            <summary>
            Not implemented yet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatValueList">
            <summary>
            A list of conditional value objects.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatValueList">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TConditionalFormatValueList</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatValueList.Clone">
            <summary>
            Not implemented yet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatValueList.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Not implemented yet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatValueList.GetHashCode">
            <summary>
            Not implemented yet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatValueObject">
            <summary>
            Describes an interpolation point in a gradient scale.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalFormatValueObject">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TConditionalFormatValueObject</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalIconSetRule">
            <summary>
            A conditional format rule specified as an icon Set.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalIconSetRule(FlexCel.Core.TConditionalFormatDefIconSet,System.Int32,System.Boolean)">
            <param name="aIconSet">Format definition for the rule.</param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalIconSetRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalNotContainsBlanksRule">
            <summary>
            A conditional format rule which highlights not blank cells.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalNotContainsBlanksRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalNotContainsBlanksRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalNotContainsErrorsRule">
            <summary>
            A conditional format rule which highlights cells without errors.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalNotContainsErrorsRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalNotContainsErrorsRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalNotContainsTextRule">
            <summary>
            A conditional format rule which highlights cells which don't contain some text.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalNotContainsTextRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.String)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aText">Text to search for.</param>
            <summary>
            Creates a new instance of TConditionalNotContainsTextRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalTimePeriodRule">
            <summary>
            A conditional format rule which highlights cells which are in an specific time period. Note that it will also apply to number intervals, since dates are formatted numbers.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalTimePeriodRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,FlexCel.Core.TTimePeriod)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aTimePeriod">Time period to highlight.</param>
            <summary>
            Creates a new instance of TConditionalTimePeriodRule.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalTimePeriodRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalTimePeriodRule.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalTimePeriodRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalTimePeriodRule.TimePeriod">
            <summary>
            Time period to highlight.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalTopNRule">
            <summary>
            A conditional format rule specified by the top-N or bottom-N values.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalTopNRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <param name="aRank">The n for top-n.</param>
            <param name="aIsBottom">If true, this rule will use the bottom N values instead of the top N</param>
            <param name="aIsPercent">If true the rule applies to the top n% values instead of top n.</param>
            <summary>
            Creates a new instance of TConditionalExpressionRule.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalTopNRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalTopNRule.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TConditionalTopNRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalTopNRule.IsBottom">
            <summary>
            If true then this rule targets the bottom-n values instead of the top-n.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalTopNRule.IsPercent">
            <summary>
            If true, then this rule targets top n% instead of top n values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TConditionalTopNRule.Rank">
            <summary>
            The value of N in Top-N
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionalUniqueValuesRule">
            <summary>
            A conditional format rule which highlights unique values.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TConditionalUniqueValuesRule(FlexCel.Core.TConditionalFormatDefStandard,System.Int32,System.Boolean)">
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef" /></param>
            <param name="aPriority">Priority of the rule. 1 means highest priority, and rules with higher numbers will be evaluated later.</param>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue" /></param>
            <summary>
            Creates a new instance of TConditionalUniqueValueRule.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TConditionType">
            <summary>
            A list of conditional operators that you can apply in a Conditional format.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TConditionType.Between">
            <summary>
            Value between Formula1 and Formula2.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.Equal">
            <summary>
            Value equal to Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.GreaterOrEqual">
            <summary>
            Greater or Equal than Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.GreaterThan">
            <summary>
            Value Greater than Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.LessOrEqual">
            <summary>
            Less or Equal than Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.LessThan">
            <summary>
            Less than Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.NoComparison">
            <summary>
            Always evaluates to false.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.NotBetween">
            <summary>
            Value not between Formula1 and Formula2.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.NotEqual">
            <summary>
            Value not equal to Formula1.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TContentTransferEncoding">
            <summary>
            Defines how a part of a MIME message will be coded.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TContentTransferEncoding.Base64">
            <summary>
            Use base64 algorithm (RFC 2045 section 6.7).
            You would normally use this encoding for binary files.
            When using this option, you need to write the part content using <see cref="M:FlexCel.Core.TMimeWriter.WriteBase64(System.IO.TextWriter,System.Byte[])" /> 
            or a similar method.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TContentTransferEncoding.QuotedPrintable">
            <summary>
            Use the Quoted Printable algorithm (RFC 2045 section 6.7).
            You will normally use this encoding for text.
            When using this option, you need to write the part content using <see cref="M:FlexCel.Core.TMimeWriter.WriteQuotedPrintable(System.IO.TextWriter,System.String)" /> 
            or a similar method.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCropArea">
            <summary>
            Defines a cropping area for an image. If the values are not zero, only a part of the image will display on Excel.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCropArea">
            <summary>
            Creates a new crop area with no crop.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCropArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aCropFromTop" />
            <param name="aCropFromBottom" />
            <param name="aCropFromLeft" />
            <param name="aCropFromRight" />
            <summary>
            Creates a new crop area with the indicated coordinates.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCropArea.Clone">
            <summary>
            Returns a deep copy of this object
            </summary>
            <returns>A deep copy of this object.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromBottom">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image height.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromLeft">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image width.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromRight">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image width.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromTop">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image height.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCropArea.EqualValues(FlexCel.Core.TCropArea,FlexCel.Core.TCropArea)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCropArea.IsEmpty">
            <summary>
            Returns true if all the coordinates are 0.
            </summary>
            <returns>True if all the coordinates are 0.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TCustomXmlPart">
            <summary>
            Implements a custom XML part as described in https://msdn.microsoft.com/en-us/library/bb608618.aspx
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCustomXmlPart">
            <summary>
            Creates a new TCustomXmlPart. It will set the Id to a random GUID.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCustomXmlPart(System.String,System.String[])">
            <param name="aXml">Xml of the custom part.</param>
            <param name="aSchemas">List of schemas for the custom part. Leave it null or empty if there a no schemas.
            Note that the array will be copied, so you can modify it after setting it and it won't change the Xml part.</param>
            <summary>
            Creates a new TCustomXmlParts with a random Id and the given xml and schemas.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TCustomXmlPart(System.Guid,System.String,System.String[])">
            <param name="aId">Guid for the part. Make sure this is unique.</param>
            <param name="aXml">Xml of the custom part.</param>
            <param name="aSchemas">List of schemas for the custom part. Leave it null or empty if there a no schemas.
            Note that the array will be copied, so you can modify it after setting it and it won't change the Xml part.</param>
            <summary>
            Creates a new TCustomXmlParts the given Id, xml and schemas.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCustomXmlPart.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCustomXmlPart.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same contents.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TCustomXmlPart.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCustomXmlPart.Id">
            <summary>
            Id of the part. This must be an unique identifier.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCustomXmlPart.Schemas">
            <summary>
            A list of schemas associated with the part. When you set this value the array will be cloned, so
            you can then modify the original array and it won't modify the part.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TCustomXmlPart.Xml">
            <summary>
            Xml content of the part.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDataLabel">
            <summary>
            Represents one data label on the chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDataLabel">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TDataLabel</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataLabel.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.DataPointIndex">
            <summary>
            Point index of of the point this label displays.  This value only has meaning if <see cref="P:FlexCel.Core.TDataLabel.LinkedTo" /> is TLinkOptions.DataLabel
            and the label is for only one point. When the label is for the whole series, DataPointIndex is -1.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.Frame">
            <summary>
            Background for the label, if there is one. Null otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LabelDefinition">
            <summary>
            The formula defining the values on this label. You can access the actual values of the labels with <see cref="P:FlexCel.Core.TDataLabel.LabelValues" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LabelOptions">
            <summary>
            Data options for the label.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LabelValues">
            <summary>
            A list with the actual values for the label, evaluated from the formula at <see cref="P:FlexCel.Core.TDataLabel.LabelDefinition" />
            IMPORTANT NOTE: The values here only are valid if <see cref="P:FlexCel.Core.TDataLabel.LabelOptions" /> indicates a manual DataType.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LinkedTo">
            <summary>
            Defines to which object this label is linked.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.NumberFormat">
            <summary>
            Numeric format for this label.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.SeriesIndex">
            <summary>
            Series number for the series this label displays. This value only has meaning if <see cref="P:FlexCel.Core.TDataLabel.LinkedTo" /> is TLinkOptions.DataLabel
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabel.TextOptions">
            <summary>
            Formatting options for this label.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDataLabelOptions">
            <summary>
            Options for a data label.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDataLabelOptions">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TDataLabelOptions</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.AutoColor">
            <summary>
            True if this label will use automatic coloring, false if the color is user defined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataLabelOptions.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.DataType">
            <summary>
            Defines which information this label displays.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.Deleted">
            <summary>
            If true, this label has been manually deleted by the user and should not be displayed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.Position">
            <summary>
            Where the label is placed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.Separator">
            <summary>
            The separator that will be used to separate labels when they contain more than one value. (For example, if the labes contains both the value and
            the category, they will be separated by this string).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowBubbles">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType" /> is SeriesInfo, this label will display the percentage bubble size. This value only applies to BUBBLE charts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowCategories">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType" /> is SeriesInfo, this label will display the Categories.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowLegendKey">
            <summary>
            If true, the legend key will be shown along with the label. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowPercents">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType" /> is SeriesInfo, this label will display the percentage of the total data. This value only applies to PIE charts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowSeriesName">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType" /> is SeriesInfo, this label will display the Series name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowValues">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType" /> is SeriesInfo, this label will display the actual value of the data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDataLabelPosition">
            <summary>
            Defines where a label is displayed on a chart.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Above">
            <summary>
            Label is placed Above the data. Applies to Line charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Any">
            <summary>
            Label has been manually moved and it is placed at an arbitrary place.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Automatic">
            <summary>
            Label is placed on the default position. This is AutoPie for Pie charts, Right for Line Charts, Outside for BarCharts and Center for Stacked Bar charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.AutoPie">
            <summary>
            Label is placed automatically on the chart. This applies to Pie charts, and it is equivalent to TDataLabelPosition.Automatic.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Axis">
            <summary>
            Label is placed on the Axis. Applies to Bar charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Below">
            <summary>
            Label is placed Below the data. Applies to Line charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Center">
            <summary>
            Label is centered on the data. Applies to Bar, line, pie charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Inside">
            <summary>
            Label is inside the data. Applies to Bar, pie charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Left">
            <summary>
            Label is placed Left of the data. Applies to Line charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Outside">
            <summary>
            Label is outside the data. Applies to Bar, pie charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Right">
            <summary>
            Label is placed Right of the data. Applies to Line charts.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationConditionType">
            <summary>
            Defines the condition used in the data validation box.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.Between">
            <summary>
            Value must be bewtween <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" /> and <see cref="P:FlexCel.Core.TDataValidationInfo.SecondFormula" />.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.EqualTo">
            <summary>
            Value must be equal to <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" />.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.GreaterThan">
            <summary>
            Value must be greater than <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" />.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.GreaterThanOrEqualTo" />
        <member name="F:FlexCel.Core.TDataValidationConditionType.LessThan">
            <summary>
            Value must be less than <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" />.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.LessThanOrEqualTo" />
        <member name="F:FlexCel.Core.TDataValidationConditionType.NotBetween">
            <summary>
            Value must be not bewtween <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" /> and <see cref="P:FlexCel.Core.TDataValidationInfo.SecondFormula" />.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.NotEqualTo">
            <summary>
            Value must be different from <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" />.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationDataType">
            <summary>
            Possible types of data validation.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.AnyValue">
            <summary>
            All values are allowed.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Custom">
            <summary>
            The value will be validated depending on the results of a formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Date">
            <summary>
            The value must be a Date.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Decimal">
            <summary>
            The value must be a decimal.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.List">
            <summary>
            The value must be in the list. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.TextLenght">
            <summary>
            The value will be validated depending on the text lenght.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Time">
            <summary>
            The value must be a Time.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.WholeNumber">
            <summary>
            The value must be an integer.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationIcon">
            <summary>
            Icon to be displayed in the error box of a data validation action. Note that this not only affects the icon used, but the possible values.
            An information icon will allow you to enter an invalid value in a cell, a stop icon will not.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDataValidationIcon.Information">
            <summary>
            Information icon. (a text ballon with an "i" inside). When selected and there is an invalid entry, a waning will be shown but the invalid data
            can be entered anyway.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationIcon.Stop">
            <summary>
            Stop icon.  ( a red circle with a cross). When selected, invalid values cannot be entered into the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationIcon.Warning">
            <summary>
            Warning icon. ( a yellow triangle with an exclamation sign). When selected and there is an invalid entry, you get an error
            dialog allowing to cancel the operation, enter the invalid value anyway or re edit the cell.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationImeMode">
            <summary>
            The IME (input method editor) mode enforced by a data validation.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.Disabled">
            <summary>
            IME mode is disabled. <br />
            Forces the IME control to be disabled when this cell is selected. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.FullAlpha">
            <summary>
            Full-Width Alpha-Numeric IME Mode.  <br />
            Forces the IME control to be on and in full-width alpha-numeric input mode when the cell is first selected. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.FullHangul">
            <summary>
            Full Width Hangul. <br />
            Forces the IME control to be on and in full-width Hangul input mode when first selecting the cell. Applies when the application's language is Korean and a Korean IME control is selected. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.FullKatakana">
            <summary>
            Full Katakana IME Mode. <br />
            Forces the IME control to be on and in full-width Katakana input mode when first selecting the cell. Applies when the application's language is Japanese and a Japanese IME control is selected. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.HalfAlpha">
            <summary>
            Half Alpha IME. <br />
            Forces the IME control to be on and in half-width alpha-numeric input mode when the cell is first selected. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.HalfHangul">
            <summary>
            Half-Width Hangul IME Mode. <br />
            Forces the IME control to be on and in half-width Hangul input mode when first selecting the cell. Applies when the application's language is Korean and a Korean IME control is selected. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.HalfKatakana">
            <summary>
            Half-Width Katakana. <br />
            Forces the IME control to be on and in half-width Katakana input mode when first selecting the cell. Applies when the application's language is Japanese and a Japanese IME control is selected. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.Hiragana">
            <summary>
            Hiragana IME Mode. <br />
            Forces the IME control to be on and in Hiragana input mode when first selecting the cell. Applies when the application's language is Japanese and a Japanese IME control is selected 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.NoControl">
            <summary>
            IME Mode Not Controlled. <br />
            Data validation does not control the IME control's mode. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.Off">
            <summary>
            IME Off. <br />
            Forces the IME control to be off when first selecting the cell (goes to direct cell input mode). 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationImeMode.On">
            <summary>
            IME On. <br />
            Forces the IME control to be on when first selecting the cell. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationInfo">
            <summary>
            Contains the information to define a data validation in a range of cells.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDataValidationInfo">
            <summary>
            Empty constructor. Creates a new instance of TDataValidationInfo without assigning any value.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDataValidationInfo(FlexCel.Core.TDataValidationDataType,FlexCel.Core.TDataValidationConditionType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,FlexCel.Core.TDataValidationIcon)">
            <param name="aValidationType">See <see cref="P:FlexCel.Core.TDataValidationInfo.ValidationType" /></param>
            <param name="aCondition">See <see cref="P:FlexCel.Core.TDataValidationInfo.Condition" /></param>
            <param name="aFirstFormula">See <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" /></param>
            <param name="aSecondFormula">See <see cref="P:FlexCel.Core.TDataValidationInfo.SecondFormula" /></param>
            <param name="aIgnoreEmptyCells">See <see cref="P:FlexCel.Core.TDataValidationInfo.IgnoreEmptyCells" /></param>
            <param name="aInCellDropDown">See <see cref="P:FlexCel.Core.TDataValidationInfo.InCellDropDown" /></param>
            <param name="aExplicitList">See <see cref="P:FlexCel.Core.TDataValidationInfo.ExplicitList" /></param>
            <param name="aShowErrorBox">See <see cref="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox" /></param>
            <param name="aErrorBoxCaption">See <see cref="P:FlexCel.Core.TDataValidationInfo.ErrorBoxCaption" /></param>
            <param name="aErrorBoxText">See <see cref="P:FlexCel.Core.TDataValidationInfo.ErrorBoxText" /></param>
            <param name="aShowInputBox" />
            <param name="aInputBoxCaption">See <see cref="P:FlexCel.Core.TDataValidationInfo.InputBoxCaption" /></param>
            <param name="aInputBoxText">See <see cref="P:FlexCel.Core.TDataValidationInfo.InputBoxText" /></param>
            <param name="aErrorIcon">See <see cref="P:FlexCel.Core.TDataValidationInfo.ErrorIcon" /></param>
            <summary>
            Creates a new Data Validation condition with all parameters.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Compares the object with other.
            </summary>
            <returns>-1 is o2 is less than this, 0 if they are equal and 1 if o2 is bigger.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.Condition">
            <summary>
            Condition used to apply the data validation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ErrorBoxCaption">
            <summary>
            Caption of the Error Alert box. Note that this text cannot be longer than 32 characters.
            Extra caracters will be truncated. If this parameter is null, the default Error alert will be displayed.
            If <see cref="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox" /> is false, this parameter does nothing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ErrorBoxText">
            <summary>
            Text on the Error Alert box. Note that this text cannot be longer than 225 characters. 
            Extra characters will be truncated. If this parameter is null, the default Error alert will be displayed.
            If <see cref="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox" /> is false, this parameter does nothing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ErrorIcon">
            <summary>
            Icon to display in the error box.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ExplicitList">
            <summary>
            If true, <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula" /> contains a list of values. 
            In this case, Formula1 <b>must</b> be a formula of the type: ="string", where string is a list of values separated by Character(0).
            For example, in C# Formula1 could be: <i>="Apples\0Lemmons\0Melons</i>  
            In Delphi.NET, Formula1 could be: <i>'="Apples' + #0 + 'Lemmons' + #0 + 'Melons'</i></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.FirstFormula">
            <summary>
            Formula for the first condition of the data validation. The text of the formula is limited to 255 characters.
            If <see cref="P:FlexCel.Core.TDataValidationInfo.ExplicitList" /> is true, this formula can contain a list of values. 
            <br />Note that with <b>relative</b> references, we always consider "A1" to be the cell where the data validation is. This means that the formula:
            "=$A$1 + A1" when evaluated in Cell B8, will read "=$A$1 + B8". To provide a negative offset, you need to wrap the formula.
            For example "=A1048575" will evaluate to B7 when evaluated in B8.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.GetHashCode">
            <summary>
            Returns a hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.IgnoreEmptyCells">
            <summary>
            If true Empty cells will not trigger data validation errors.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ImeMode">
            <summary>
            The IME (input method editor) mode enforced by this data validation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.InCellDropDown">
            <summary>
            When the <see cref="P:FlexCel.Core.TDataValidationInfo.ValidationType" /> parameter is a list, this property indicates whether to display a drop down box or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.InputBoxCaption">
            <summary>
            Caption of the Input Message box. Note that this text cannot be longer than 32 characters.
            Extra caracters will be truncated. If this parameter is null, the Input box will display the default message.
            if <see cref="P:FlexCel.Core.TDataValidationInfo.ShowInputBox" /> is false, this parameter does nothing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.InputBoxText">
            <summary>
            Text on the Input Message box. Note that this text cannot be longer than 255 characters. 
            Extra characters will be truncated. If this parameter is null, the Input box will display the default message.
            if <see cref="P:FlexCel.Core.TDataValidationInfo.ShowInputBox" /> is false, this parameter does nothing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_Equality(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both objects are equal.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_GreaterThan(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_Inequality(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both objects are not equal.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_LessThan(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.SecondFormula">
            <summary>
            Formula for the second condition of the data validation, if it has two conditions. The text of the formula is limited to 255 characters.
            <br />Note that with <b>relative</b> references, we always consider "A1" to be the cell where the data validation is. This means that the formula:
            "=$A$1 + A1" when evaluated in Cell B8, will read "=$A$1 + B8". To provide a negative offset, you need to wrap the formula.
            For example "=A1048575" will evaluate to B7 when evaluated in B8.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox">
            <summary>
            If true, an error box dialog will be shown when the user enters an invalid value.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ShowInputBox">
            <summary>
            If true, a box showing a message will be shown when the user selecte the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ValidationType">
            <summary>
            Type of validation we will be doing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDocumentCustomProperty">
            <summary>
            Encapsulates a custom property of an Excel file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDocumentCustomProperty(System.String,System.String,System.Int32,System.String,FlexCel.Core.TDocumentCustomPropertyType,System.String)">
            <param name="aName">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.Name" />.</param>
            <param name="aFmtId">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.FmtId" />.</param>
            <param name="aPId">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.PId" />.</param>
            <param name="aLinkTarget">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.LinkTarget" />.</param>
            <param name="aPropType">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.PropType" />.</param>
            <param name="aValue">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.Value" />.</param>
            <summary>
            Creates a new instance of this object. Don't call this overload if PropType is Unknown, since 
            in that case you also need to specify PropTypeStr
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDocumentCustomProperty(System.String,System.String,System.Int32,System.String,FlexCel.Core.TDocumentCustomPropertyType,System.String,System.String)">
            <param name="aName">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.Name" />.</param>
            <param name="aFmtId">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.FmtId" />.</param>
            <param name="aPId">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.PId" />.</param>
            <param name="aLinkTarget">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.LinkTarget" />.</param>
            <param name="aPropType">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.PropType" />.</param>
            <param name="aValue">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.Value" />.</param>
            <param name="aPropTypeStr">See <see cref="P:FlexCel.Core.TDocumentCustomProperty.PropTypeStr" />.</param>
            <summary>
            Creates a new instance of this object. Call this overload if PropType is Unknown, since 
            in that case you also need to specify PropTypeStr
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.Empty">
            <summary>
            Returns an empty property
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentCustomProperty.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if 2 obects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.FmtId">
            <summary>
            GUID for the property. In Excel this value is always {D5CDD505-2E9C-101B-9397-08002B2CF9AE}
            You can leave this null, in this case {D5CDD505-2E9C-101B-9397-08002B2CF9AE} will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentCustomProperty.GetHashCode">
            <summary>
            The hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.LinkTarget">
            <summary>
            Specifies the name of a bookmark in the 
            table or named cell from which the value of this custom document 
            property should be extracted. You can normally leave this value null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.Name">
            <summary>
            Name of the custom property.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentCustomProperty.op_Equality(FlexCel.Core.TDocumentCustomProperty,FlexCel.Core.TDocumentCustomProperty)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if 2 structures have the same values.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentCustomProperty.op_Inequality(FlexCel.Core.TDocumentCustomProperty,FlexCel.Core.TDocumentCustomProperty)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if 2 structures have different values.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.PId">
            <summary>
            Numeric Id for the property. This value is for OLE compatibility and must be unique.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.PropType">
            <summary>
            Type of the property. Note that while you can define any variant, Excel only recognizes the types
            in this enumeration.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.PropTypeStr">
            <summary>
            Used for unknown prop types, it handles the string with the name. You shouldn't need to use this.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentCustomProperty.Value">
            <summary>
            Value of the property. You must ensure it is valid for the proptype.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDocumentCustomPropertyType">
            <summary>
            Defines which kind of property is a custom property.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDocumentCustomPropertyType.Boolean">
            <summary>
            Property is a boolean.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDocumentCustomPropertyType.DateTime">
            <summary>
            Property is a date time.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDocumentCustomPropertyType.Double">
            <summary>
            Property is a double.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDocumentCustomPropertyType.Long">
            <summary>
            Property is a long.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDocumentCustomPropertyType.String">
            <summary>
            property is a string.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDocumentCustomPropertyType.Unknown">
            <summary>
            The property is something else. Note that Excel won't recognize properties with other
            data types than the ones in this enumeration, but you can write any variant as a custom property.
            When the tpye is unknown, the real type is stored in the PropTypeStr field.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDocumentProperties">
            <summary>
            Properties for an Excel sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.GetAllCustomProperties">
            <summary>
            Returns a list of all the names of custom properties in the file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.GetCustomProperty(System.String)">
            <param name="name" />
            <summary>
            Returns a custom property with a given name.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.GetStandardProperty(FlexCel.Core.TPropertyId)">
            <param name="PropertyId" />
            <summary>
            Returns a standard document property (Like Author, Title, etc.). This method returns an object that might be:
            <list type="bullet"><item><b>null</b>: If the property is not assigned.</item><item><b>Int16, Int32, Int64, Single, Double, Decimal</b>: If the property is a number.</item><item><b>DateTime</b>: If the property is a Date or a DateTime.</item><item><b>String</b>: If the property is a string.</item><item><b>Boolean</b>: If the property is a boolean.</item><item><b>An array of byte (byte[])</b>: If the property is a Blob.</item><item><b>An array of object (object[])</b>: If the property is an array. Each one of the members of the array must be of one of the types specified here.</item></list></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.GetUsedStandardProperties(System.Boolean)">
            <param name="returnOnlySeteable">If true, only the properties that you can set will be returned.</param>
            <summary>
            Returns a list of all the standard properties that are set.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentProperties.PreserveCreationDate">
            <summary>
            By default FlexCel will set the creation date in the file to be the date when you actually created it, no matter the value originally stored in the file.
            This assumes you are starting from a template and generating a new document from it.
            But if you are modifying an existing file and want to preserve the original creation date, then you need to set
            this property to true. <b>Note that this property sets itself automatically to true if you manually set the creation time of a file.
            </b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDocumentProperties.PreserveModifiedDate">
            <summary>
            By default FlexCel will set the modified date in the file to be the date when you actually saved it, no matter the value originally stored in the file.
            But if you need to set a different modified date than the date in the server, or you don't want a new modified date to be saved and preserve the one in the document, 
            then you need to set this property to true. 
            If you are setting this property to true, you probably also want to set <see cref="P:FlexCel.Core.TDocumentProperties.PreserveCreationDate" /> to true.
            <b>Note that this property sets itself automatically to true if you manually set the modified time of a file.
            </b></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.RemoveAllProperties">
            <summary>
            This method will remove all document properties of the file. You can use it to be sure you aren't embedding any
            confidential information on the properties.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.SetCustomProperty(System.String,FlexCel.Core.TDocumentCustomPropertyType,System.String,System.Int32)">
            <param name="name">Name of the custom property you want to create or modify.</param>
            <param name="proptype">Type of the property (boolean, string, etc.)</param>
            <param name="value">Value for the property. Note that while it is a string, it must be convertible 
            to the type you are specifing. Doubles should use "." as decimal separators.</param>
            <param name="propertyId">Numeric Id for the property. This value must be unique and <b>bigger or equal to 2</b>.</param>
            <summary>
            Sets a custom property with a given name. Set the value to null or empty string to remove the property.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.SetStandardProperty(FlexCel.Core.TPropertyId,System.String)">
            <param name="PropertyId">Property id that we want to modify.</param>
            <param name="value">Set it to null or empty to clear the property.</param>
            <summary>
            This method only works in <b>xlsx</b> files. It will set the standard property with the given Id
            to the specified value. Set the value to null or empty to clear the property.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingAlignment">
            <summary>
            Specifies the alignment types for text in a drawing.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingAlignment.Center">
            <summary>
            Align text in the center. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingAlignment.Distributed">
            <summary>
            Distributes the text words across an entire text line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingAlignment.Justified">
            <summary>
            Align text so that it is justified across the whole line. It is smart in the sense that it does not justify sentences which are short. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingAlignment.JustLow">
            <summary>
            Aligns the text with an adjusted kashida length for Arabic text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingAlignment.Left">
            <summary>
            Align text to the left margin. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingAlignment.Right">
            <summary>
            Align text to the right margin. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingAlignment.ThaiDist">
            <summary>
            Distributes Thai text specially, because each character is treated as a word. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDrawingColor">
            <summary>
            Represents a Color for a drawing or a theme. Different from TExcelColor, this structure is defined in terms of DrawingML, not SpreadsheetML.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.AddTransform(FlexCel.Core.TDrawingColor,FlexCel.Core.TColorTransform[])">
            <param name="oldColor">Original color where we will apply the transform.</param>
            <param name="aTransform">Transform to be applied to oldColor.</param>
            <summary>
            Returns the DrawingColor that results of applying the transform to the existing DrawingColor.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.ColorType">
            <summary>
            Identifies which kind of color is the one to apply in this structure.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is more than color, 0 if both colors are the same, and 1 if obj is less than color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same color.
            </summary>
            <returns>True if both colors are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromColor(FlexCel.Core.TUIColor)">
            <param name="aColor">Color that we want to set.</param>
            <summary>
            Returns a color class with an specified color. There is no real need to call this method, since conversion between 
            <see cref="T:FlexCel.Core.TDrawingColor" /> and <see cref="T:FlexCel.Core.TUIColor" /> is implicit. You can just assign Color to this class and viceversa.
            </summary>
            <returns>The corresponding system color.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromColor(FlexCel.Core.TExcelColor,FlexCel.Core.IFlexCelPalette)">
            <param name="aColor">Color that we want to set.</param>
            <param name="xls">Workbook with the color information.</param>
            <summary>
            Returns a color class with an specified color.
            </summary>
            <returns>The corresponding system color.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromHSL(FlexCel.Core.THSLColor)">
            <param name="aColor">Color that we want to set.</param>
            <summary>
            Returns a color class with an specified HSL color.
            </summary>
            <returns>The corresponding system color.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromPreset(FlexCel.Core.TPresetColor)">
            <param name="aColor">Color that we want to set.</param>
            <summary>
            Returns a color class with an specified preset color.
            </summary>
            <returns>The corresponding preset color.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromRgb(System.Byte,System.Byte,System.Byte)">
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <summary>
            Returns a color from its byte components.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromScRgb(FlexCel.Core.TScRGBColor)">
            <param name="aColor">Color that we want to set.</param>
            <summary>
            Returns a color class with an specified scRGB color.
            </summary>
            <returns>The corresponding system color.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromSystem(FlexCel.Core.TSystemColor)">
            <param name="aColor">Color that we want to set.</param>
            <summary>
            Returns a color class with an specified system color.
            </summary>
            <returns>The corresponding system color.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.FromTheme(FlexCel.Core.TThemeColor)">
            <param name="aColor">Color that we want to set.</param>
            <summary>
            Returns a color class with an specified themed color.
            </summary>
            <returns>The corresponding system color.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.GetColorTransform">
            <summary>
            Returns an array with all the color transforms in this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.GetComponents(FlexCel.Core.ExcelFile,System.Byte@,System.Byte@,System.Byte@)">
            <param name="xls">ExcelFile that will be used to know the palette and themes of the file for indexed/themed colors.</param>
            <param name="R">Returns the red component of the color.</param>
            <param name="G">Returns the green component of the color.</param>
            <param name="B">Returns the blue component of the color.</param>
            <summary>
            Returns R, G and B components of the color. If this is a theme or indexed color, it will
            be converted to RGB before getting the components.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.GetSystemColor(FlexCel.Core.TSystemColor)">
            <param name="aSystem" />
            <summary>
            Returns the color associated with a simple color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.HSL">
            <summary>
            Returns the color when this structure has an HSL color, as a 0xHHSSLL integer. 
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TDrawingColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.op_Equality(FlexCel.Core.TDrawingColor,FlexCel.Core.TDrawingColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.op_GreaterThan(FlexCel.Core.TDrawingColor,FlexCel.Core.TDrawingColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.op_Implicit(FlexCel.Core.TUIColor)~FlexCel.Core.TDrawingColor">
            <param name="aColor" />
            <summary>
            Assigns a .NET color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.op_Inequality(FlexCel.Core.TDrawingColor,FlexCel.Core.TDrawingColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.op_LessThan(FlexCel.Core.TDrawingColor,FlexCel.Core.TDrawingColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.Preset">
            <summary>
            Returns the color when this structure has a Preset color. 
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TDrawingColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.RGB">
            <summary>
            Returns the color when this structure has an RGB color, as a 0xRRGGBB integer. 
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TDrawingColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.ScRGB">
            <summary>
            Returns the color when this structure has an scRGB color. 
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TDrawingColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.System">
            <summary>
            Returns the color when this structure has a System color. 
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TDrawingColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.Theme">
            <summary>
            Returns the color when this structure has a Themed color. 
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TDrawingColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingColor.ToColor(FlexCel.Core.IFlexCelPalette)">
            <param name="xls">Excel file containing the themes and palettes for the color indexes.</param>
            <summary>
            Returns the .NET Color specified by this structure. 
            </summary>
            <returns>The corresponding .NET color.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingColor.Transparent">
            <summary>
            Returns the transparent color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingColorType">
            <summary>
            Defines the kind of colors that might be stored inside a color definition in a drawing or a theme.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingColorType.HSL">
            <summary>
            Hue, Saturation, Luminance.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingColorType.Preset">
            <summary>
            Color is from the list in <see cref="T:FlexCel.Core.TPresetColor" />.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingColorType.RGB">
            <summary>
            RGB expressed as components. Components are in the range 0-255
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingColorType.scRGB">
            <summary>
            scRGB color mode. Components are in the range 0-1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingColorType.System">
            <summary>
            System color. This is defined by windows, for example the color of the active caption.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingColorType.Theme">
            <summary>
            Links to a theme color. You can't use this value when defining the theme colors themselves.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDrawingCoordinate">
            <summary>
            A coordinate in a drawing.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingCoordinate(System.Int64)">
            <param name="aEmu">Value of the coordinate.</param>
            <summary>
            Creates a coordinate in Emus. To use other units, use the "From..." methods of this struct.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingCoordinate.Cm">
            <summary>
            Value of the coordinate in cm 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingCoordinate.CmToEmu">
            <summary>
            Returns how many EMUs in 1 cm.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.CompareTo(System.Object)" />
        <member name="P:FlexCel.Core.TDrawingCoordinate.Emu">
            <summary>
            Value of the coordinate in EMUs (English Metric Units)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.FromCm(System.Double)">
            <param name="p">Value in cm.</param>
            <summary>
            Creates a drawing coordinate from a measunement in centimeters.
            </summary>
            <returns>The corresponding DrawingCoordinate.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.FromInches(System.Double)">
            <param name="p">Value in inches.</param>
            <summary>
            Creates a drawing coordinate from a measunement in inches.
            </summary>
            <returns>The corresponding DrawingCoordinate.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.FromMm(System.Double)">
            <param name="p">Value in mm.</param>
            <summary>
            Creates a drawing coordinate from a measunement in milimeters.
            </summary>
            <returns>The corresponding DrawingCoordinate.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.FromPoints(System.Double)">
            <param name="p">Value in points (1/72 of an inch).</param>
            <summary>
            Creates a drawing coordinate from a measunement in points. (1/72 of an inch)
            </summary>
            <returns>The corresponding DrawingCoordinate.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingCoordinate.Inches">
            <summary>
            Value of the coordinate in inches
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingCoordinate.InchesToEmu">
            <summary>
            Returns how many EMUs in 1 inch.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.op_Equality(FlexCel.Core.TDrawingCoordinate,FlexCel.Core.TDrawingCoordinate)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingCoordinate.op_Inequality(FlexCel.Core.TDrawingCoordinate,FlexCel.Core.TDrawingCoordinate)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingCoordinate.PcToEmu">
            <summary>
            Returns how many EMUs in 1 pc.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingCoordinate.PiToEmu">
            <summary>
            Returns how many EMUs in 1 pi.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingCoordinate.Pixels">
            <summary>
            Value of the coordinate in pixels
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingCoordinate.Points">
            <summary>
            Value of the coordinate in points
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingCoordinate.PointsToEmu">
            <summary>
            Returns how many EMUs in 1 point.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingFontAlign">
            <summary>
            Different types of font alignment.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingFontAlign.Automatic">
            <summary>
            When the text flow is horizontal or simple vertical same as fontBaseline but for other vertical modes same as fontCenter. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingFontAlign.BaseLine">
            <summary>
            The letters are anchored to the bottom baseline of a single line. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingFontAlign.Bottom">
            <summary>
            The letters are anchored to the very bottom of a single line. This is different than the bottom baseline because of letters such as "g," "q," "y," etc. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingFontAlign.Center">
            <summary>
            The letters are anchored between the two baselines of a single line. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingFontAlign.Top">
            <summary>
            The letters are anchored to the top baseline of a single line. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDrawingGradientDef">
            <summary>
            A base class for storing gradient definitions, be them Linear or Path gradients.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingGradientDef">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TDrawingGradientDef</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientDef.Clone">
            <summary>
            Rerturns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientDef.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns if an objects is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingGradientStop">
            <summary>
            Represents one of the points in a Gradient definition for a drawing (autoshapes, charts, etc). Note that Excel cells
            use a different Gradient definition: <see cref="T:FlexCel.Core.TGradientStop" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingGradientStop(System.Double,FlexCel.Core.TDrawingColor)">
            <param name="aPosition">Position for the stop.</param>
            <param name="aColor">Color for the stop.</param>
            <summary>
            Creates a new Gradient stop.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingGradientStop.Color">
            <summary>
            Color for this definition.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientStop.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Compares 2 instances of this struct.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientStop.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns if this struct has the same values as other one.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientStop.GetHashCode">
            <summary>
            Returns the hashcode for this struct.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientStop.op_Equality(FlexCel.Core.TDrawingGradientStop,FlexCel.Core.TDrawingGradientStop)">
            <param name="o1">First stop to compare.</param>
            <param name="o2">Second stop to compare.</param>
            <summary>
            Returns true if both gradient stops are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientStop.op_GreaterThan(FlexCel.Core.TDrawingGradientStop,FlexCel.Core.TDrawingGradientStop)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientStop.op_Inequality(FlexCel.Core.TDrawingGradientStop,FlexCel.Core.TDrawingGradientStop)">
            <param name="o1">First stop to compare.</param>
            <param name="o2">Second stop to compare.</param>
            <summary>
            Returns true if both gradient stops are different.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingGradientStop.op_LessThan(FlexCel.Core.TDrawingGradientStop,FlexCel.Core.TDrawingGradientStop)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingGradientStop.Position">
            <summary>
            This value must be between 0 and 1, and represents the position in the gradient where the <see cref="P:FlexCel.Core.TDrawingGradientStop.Color" /> in this structure is pure.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingHyperlink">
            <summary>
            Specifies an hyperlink in a drawing. While this class is similar to THyperlink for links in cells, it has some differences.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingHyperlink">
            <summary>
            Creates a new hyperlink for a drawing.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingHyperlink(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <param name="aUrl">Url for the link (including the prefix like "file:///")</param>
            <param name="aTargetFrame">If blank then a new window will be used.</param>
            <param name="aHint">Tooltip to show when the user hovers over the hyperlink.</param>
            <param name="aAction">Specifies an action that is to be taken when this hyperlink is activated. This can be used to specify a slide to be navigated to or a script of code to be run. Doesn't seem to be used in Excel.</param>
            <param name="aHighlightClick">When set to true, the link will be painted in a "Visited" color.</param>
            <param name="aAddToHistory">If true, the link will be added to the history.</param>
            <param name="aEndsSounds">If true, any sound currently playing will be stopped when you click the link.</param>
            <summary>
            Creates a new hyperlink for a drawing.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingHyperlink.Action">
            <summary>Specifies an action that is to be taken when this hyperlink is activated. This can be used to specify a slide to be navigated to or a script of code to be run. Doesn't seem to be used in Excel.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingHyperlink.AddToHistory">
            <summary>If true, the link will be added to the history.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.CloneLink(FlexCel.Core.TDrawingHyperlink)">
            <param name="source">Object to be cloned.</param>
            <summary>
            Returns a deep clone of source.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1, 0 or 1 depending if this object is smaller or bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingHyperlink.EndsSounds">
            <summary>If true, any sound currently playing will be stopped when you click the link.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same data.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.GetLinkType">
            <summary>
            Returns the type of hyperlink.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingHyperlink.HighlightClick">
            <summary>When set to true, the link will be painted in a "Visited" color.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingHyperlink.Hint">
            <summary>Tooltip to show when the user hovers over the hyperlink.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.op_Equality(FlexCel.Core.TDrawingHyperlink,FlexCel.Core.TDrawingHyperlink)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.op_Implicit(FlexCel.Core.TDrawingHyperlink)~FlexCel.Core.THyperLink">
            <param name="link" />
            <summary>
            Converts automatically a TDrawingHyperlink into a THyperlink.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.op_Implicit(FlexCel.Core.THyperLink)~FlexCel.Core.TDrawingHyperlink">
            <param name="link" />
            <summary>
            Converts automatically a THyperlink into a TDrawingHyperlink.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingHyperlink.op_Inequality(FlexCel.Core.TDrawingHyperlink,FlexCel.Core.TDrawingHyperlink)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingHyperlink.TargetFrame">
            <summary>If blank then a new window will be used.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingHyperlink.Url">
            <summary>Url for the link (including the prefix like "file:///")</summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingLinearGradient">
            <summary>
            This class holds a linear gradient definition.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingLinearGradient(System.Double,System.Boolean)">
            <param name="aAngle" />
            <param name="aScaled" />
            <summary>
            Creates a new Linear gradient definition.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingLinearGradient.Angle">
            <summary>
            Specifies the direction of color change for the gradient. To define this angle, let its value 
            be x measured clockwise. Then ( -sin x, cos x ) is a vector parallel to the line of constant 
            color in the gradient fill. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingLinearGradient.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingLinearGradient.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingLinearGradient.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingLinearGradient.Scaled">
            <summary>
            Whether the gradient angle scales with the fill region. Mathematically, if this flag is true, 
            then the gradient vector ( cos x , sin x ) is scaled by the width (w) and height (h) of the fill 
            region, so that the vector becomes ( w cos x, h sin x ) (before normalization).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingParagraphProperties">
            <summary>
            Properties of a text paragraph inside a drawing.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingParagraphProperties(System.Int32,System.Int32,System.Int32,FlexCel.Core.TDrawingCoordinate,FlexCel.Core.TDrawingAlignment,FlexCel.Core.TDrawingCoordinate,System.Boolean,System.Boolean,FlexCel.Core.TDrawingFontAlign,System.Boolean,System.Boolean)">
            <param name="aFMarL" />
            <param name="aFMarR" />
            <param name="aFLvl" />
            <param name="aFIndent" />
            <param name="aFAlgn" />
            <param name="aFDefTabSz" />
            <param name="aFRtl" />
            <param name="aFEaLnBrk" />
            <param name="aFFontAlgn" />
            <param name="aFLatinLnBrk" />
            <param name="aFHangingPunct" />
            <summary>
            Creates a new instance by setting all properties.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.Algn">
            <summary>
            Specifies the alignment that is to be applied to the paragraph.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingParagraphProperties.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both strings are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.DefTabSz">
            <summary>
            Specifies the default size for a tab character within this paragraph. This attribute should 
            be used to describe the spacing of tabs within the paragraph instead of a leading 
            indentation tab. For indentation tabs there are the marL and indent attributes to assist with this.  
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.EaLnBrk">
            <summary>
            Specifies whether an East Asian word can be broken in half and wrapped onto the next line without a hyphen being added.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.Empty">
            <summary>
            Returns a paragraph with the default values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingParagraphProperties.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same string and formatting.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.FontAlgn">
            <summary>
            Determines where vertically on a line of text the actual words are positioned. This deals 
            with vertical placement of the characters with respect to the baselines.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingParagraphProperties.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.HangingPunct">
            <summary>
            Specifies whether punctuation is to be forcefully laid out on a line of text or put on a different line of text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.Indent">
            <summary>
            Specifies the indent size that is applied to the first line of text in the paragraph. An 
            indentation of 0 is considered to be at the same location as marL attribute. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.LatinLnBrk">
            <summary>
            Specifies whether a Latin word can be broken in half and wrapped onto the next line without a hyphen being added. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.Lvl">
            <summary>
            Specifies the particular level text properties that this paragraph follows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.MarL">
            <summary>
             Specifies the left margin of the paragraph. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.MarR">
            <summary>
            Specifies the right margin of the paragraph.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingParagraphProperties.op_Equality(FlexCel.Core.TDrawingParagraphProperties,FlexCel.Core.TDrawingParagraphProperties)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingParagraphProperties.op_GreaterThan(FlexCel.Core.TDrawingParagraphProperties,FlexCel.Core.TDrawingParagraphProperties)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingParagraphProperties.op_Inequality(FlexCel.Core.TDrawingParagraphProperties,FlexCel.Core.TDrawingParagraphProperties)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingParagraphProperties.op_LessThan(FlexCel.Core.TDrawingParagraphProperties,FlexCel.Core.TDrawingParagraphProperties)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is less than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingParagraphProperties.Rtl">
            <summary>
            Specifies whether the text is right-to-left or left-to-right in its flow direction.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingPathGradient">
            <summary>
            Holds a Path gradient definition.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingPathGradient(System.Nullable{FlexCel.Core.TDrawingRelativeRect},FlexCel.Core.TPathShadeType)">
            <param name="aFillToRect" />
            <param name="aPath" />
            <summary>
            Creates a new TDrawingPath object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingPathGradient.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingPathGradient.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingPathGradient.FillToRect">
            <summary>
            This element defines the "focus" rectangle for the center shade, specified relative to the fill tile rectangle.   <br />
            The center shade fills the entire tile except the margins specified by each attribute. <br />
            Each edge of the center shade rectangle is defined by a percentage offset from the corresponding edge of the 
            tile rectangle.  A positive percentage specifies an inset, while a negative percentage specifies an outset. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingPathGradient.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingPathGradient.Path">
            <summary>
            Specifies the shape of the path to follow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingPattern">
            <summary>
            Different types of patterns for filling an Excel 2007 object. This is different from the patterns to fill a cell.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.cross">
            <summary>
            cross
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dashDnDiag">
            <summary>
            dashDnDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dashHorz">
            <summary>
            dashHorz
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dashUpDiag">
            <summary>
            dashUpDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dashVert">
            <summary>
            dashVert
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.diagBrick">
            <summary>
            diagBrick
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.diagCross">
            <summary>
            diagCross
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.divot">
            <summary>
            divot
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dkDnDiag">
            <summary>
            dkDnDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dkHorz">
            <summary>
            dkHorz
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dkUpDiag">
            <summary>
            dkUpDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dkVert">
            <summary>
            dkVert
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dnDiag">
            <summary>
            dnDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dotDmnd">
            <summary>
            dotDmnd
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.dotGrid">
            <summary>
            dotGrid
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.horz">
            <summary>
            horz
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.horzBrick">
            <summary>
            horzBrick
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.lgCheck">
            <summary>
            lgCheck
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.lgConfetti">
            <summary>
            lgConfetti
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.lgGrid">
            <summary>
            lgGrid
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.ltDnDiag">
            <summary>
            ltDnDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.ltHorz">
            <summary>
            ltHorz
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.ltUpDiag">
            <summary>
            ltUpDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.ltVert">
            <summary>
            ltVert
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.narHorz">
            <summary>
            narHorz
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.narVert">
            <summary>
            narVert
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.openDmnd">
            <summary>
            openDmnd
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct10">
            <summary>
            pct10
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct20">
            <summary>
            pct20
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct25">
            <summary>
            pct25
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct30">
            <summary>
            pct30
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct40">
            <summary>
            pct40
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct5">
            <summary>
            pct5
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct50">
            <summary>
            pct50
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct60">
            <summary>
            pct60
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct70">
            <summary>
            pct70
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct75">
            <summary>
            pct75
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct80">
            <summary>
            pct80
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.pct90">
            <summary>
            pct90
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.plaid">
            <summary>
            plaid
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.shingle">
            <summary>
            shingle
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.smCheck">
            <summary>
            smCheck
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.smConfetti">
            <summary>
            smConfetti
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.smGrid">
            <summary>
            smGrid
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.solidDmnd">
            <summary>
            solidDmnd
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.sphere">
            <summary>
            sphere
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.trellis">
            <summary>
            trellis
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.upDiag">
            <summary>
            upDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.vert">
            <summary>
            vert
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.wave">
            <summary>
            wave
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.wdDnDiag">
            <summary>
            wdDnDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.wdUpDiag">
            <summary>
            wdUpDiag
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.weave">
            <summary>
            weave
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingPattern.zigZag">
            <summary>
            zigZag
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDrawingPoint">
            <summary>
            A point with x and y coordinates.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingPoint(FlexCel.Core.TDrawingCoordinate,FlexCel.Core.TDrawingCoordinate)">
            <param name="aX">X Coordinate.</param>
            <param name="aY">Y Coordinate.</param>
            <summary>
            Creates a new Drawing point.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingPoint.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingPoint.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingPoint.op_Equality(FlexCel.Core.TDrawingPoint,FlexCel.Core.TDrawingPoint)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingPoint.op_Inequality(FlexCel.Core.TDrawingPoint,FlexCel.Core.TDrawingPoint)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingPoint.X">
            <summary>
            X coordinate.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingPoint.Y">
            <summary>
            Y coordinate.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingRectAlign">
            <summary>
            How to position two rectangles relative to each other.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.Bottom">
            <summary>
            Align at the bottom.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.BottomLeft">
            <summary>
            Align at the bottom left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.BottomRight">
            <summary>
            Align at the bottom right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.Center">
            <summary>
            Align at the center.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.Left">
            <summary>
            Align at the left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.Right">
            <summary>
            Align at the right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.Top">
            <summary>
            Align at the top.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.TopLeft">
            <summary>
            Align at the top left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingRectAlign.TopRight">
            <summary>
            Align at the top right.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDrawingRelativeRect">
            <summary>
            A rectangle with coordinates used in a drawing.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingRelativeRect(System.Double,System.Double,System.Double,System.Double)">
            <param name="aLeft">Percentage of the left coordinate. Might be negative.</param>
            <param name="aTop">Percentage of the top coordinate. Might be negative.</param>
            <param name="aRight">Percentage of the right coordinate. Might be negative.</param>
            <param name="aBottom">Percentage of the bottom coordinate. Might be negative.</param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRelativeRect.Bottom">
            <summary>
            Percentage of the bottom coordinate. Might be negative.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRelativeRect.CompareTo(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRelativeRect.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both classes contain the same rectangle.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRelativeRect.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRelativeRect.Height">
            <summary>
            Bottom - Top
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRelativeRect.Left">
            <summary>
            Percentage of the left coordinate. Might be negative.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRelativeRect.op_Equality(FlexCel.Core.TDrawingRelativeRect,FlexCel.Core.TDrawingRelativeRect)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRelativeRect.op_Inequality(FlexCel.Core.TDrawingRelativeRect,FlexCel.Core.TDrawingRelativeRect)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRelativeRect.Right">
            <summary>
            Percentage of the right coordinate. Might be negative.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRelativeRect.Top">
            <summary>
            Percentage of the top coordinate. Might be negative.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRelativeRect.Width">
            <summary>
            Right - Left
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingRichString">
            <summary>
            A rich string used in drawings. It is similar to <see cref="T:FlexCel.Core.TRichString" /> but it has more 
            properties like for example wordart properties. Similar to a string, this class is immutable.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingRichString">
            <summary>
            Creates a new TDrawingRichString with a null value.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingRichString(FlexCel.Core.TDrawingTextParagraph[])">
            <param name="aParagraphs">Array of RTF runs with the data and formatting for the string.</param>
            <summary>
            Creates a new TDrawingRichString from an array of paragraphs.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingRichString(System.String)">
            <param name="s">String with the data.</param>
            <summary>
            Creates a new TDrawingRichString with no formatting.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.Add(FlexCel.Core.TDrawingRichString)">
            <param name="s1" />
            <summary>
            Adds two richstrings together. If using C#, you can just use the overloaded "+" operator to contactenate rich strings.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both strings are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same string and formatting.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.FirstRun(FlexCel.Core.ExcelFile,FlexCel.Core.TShapeFont)">
            <param name="xls" />
            <param name="ShapeThemeFont" />
            <summary>
            Returns the first run of the text. Note that an empty TDrawingRichText can have a run anyway, while a TRichString can't.
            If there is no first run, the returned value will havea a negative firstchar.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.FromRichString(FlexCel.Core.TRichString,FlexCel.Core.ExcelFile)">
            <param name="aValue">String that we want to convert.</param>
            <param name="xls">Excel file with the string. It will be used to convert indexed colors if there are any.</param>
            <summary>
            Returns a new TDrawingRichString from a TRichString. Note that the conversion is not perfect since information in both kind of strings is different.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRichString.Length">
            <summary>
            Length of the DrawingRichString.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_Addition(FlexCel.Core.TDrawingRichString,FlexCel.Core.TDrawingRichString)">
            <param name="s1">First string to concatenate.</param>
            <param name="s2">Second string to concatenate.</param>
            <summary>
            Concatenates two TDrawingRichString objects.
            </summary>
            <returns>The concatenated string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_Equality(FlexCel.Core.TDrawingRichString,FlexCel.Core.TDrawingRichString)">
            <param name="o1">First string to compare.</param>
            <param name="o2">Second string to compare.</param>
            <summary>
            Returns true if both strings are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_GreaterThan(FlexCel.Core.TDrawingRichString,FlexCel.Core.TDrawingRichString)">
            <param name="o1">First string to compare.</param>
            <param name="o2">Second string to compare.</param>
            <summary>
            Returns true is a string is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_Implicit(FlexCel.Core.TDrawingRichString)~System.String">
            <param name="r" />
            <summary>
            Converts a TDrawingRichString to a string.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_Implicit(FlexCel.Core.TRichString)~FlexCel.Core.TDrawingRichString">
            <param name="r" />
            <summary>
            Converts a TRichString into a TDrawingRichString
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_Implicit(System.String)~FlexCel.Core.TDrawingRichString">
            <param name="s" />
            <summary>
            Converts a string to a TDrawingRichString.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_Inequality(FlexCel.Core.TDrawingRichString,FlexCel.Core.TDrawingRichString)">
            <param name="o1">First string to compare.</param>
            <param name="o2">Second string to compare.</param>
            <summary>
            Returns true if both strings do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.op_LessThan(FlexCel.Core.TDrawingRichString,FlexCel.Core.TDrawingRichString)">
            <param name="o1">First string to compare.</param>
            <param name="o2">Second string to compare.</param>
            <summary>
            Returns true is a string is less than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.Paragraph(System.Int32)">
            <param name="index">Index on the list. 0 based.</param>
            <summary>
            A paragraph of the text.
            </summary>
            <returns>The paragraph.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRichString.ParagraphCount">
            <summary>
            The count of Paragraphs in this string.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.ReplaceText(FlexCel.Core.TRichString,FlexCel.Core.ExcelFile)">
            <param name="rs" />
            <param name="xls">Used to calculate indexed colors. Might be null.</param>
            <summary>
            Replaces the existing text in this struct with the text in rs, keeping the properties of the text.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.RightTrim">
            <summary>
            Trims all the whitespace at the end of the string.
            </summary>
            <returns>The trimmed string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.Substring(System.Int32)">
            <param name="index">Start of the substring (0 based)</param>
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and ends at the end of the string.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.Substring(System.Int32,System.Int32)">
            <param name="index">Start of the substring (0 based)</param>
            <param name="count">Number of characters to copy.</param>
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.ToRichString(FlexCel.Core.ExcelFile,FlexCel.Core.TShapeFont)">
            <param name="xls">Excel file with the fonts.</param>
            <param name="ShapeThemeFont">Theme font used by default when no formatting is specified. Set it to null to use the default.</param>
            <summary>
            Converts this TDrawingRichString into a <see cref="T:FlexCel.Core.TRichString" />. Note that the conversion is not perfect 
            as a TDrawingRichString has different information from a TRichString.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.ToString">
            <summary>
            Returns the string without Rich text info.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingRichString.Trim">
            <summary>
            Trims all the whitespace at the beginning and end of the string.
            </summary>
            <returns>The trimmed string.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingRichString.Value">
            <summary>
            Text of the string without formatting. Might be null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingTextAttributes">
            <summary>
            Group of simple attributes for text properties.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingTextAttributes(System.Boolean,System.String,System.String,System.Int32,System.Boolean,System.Boolean,FlexCel.Core.TDrawingUnderlineStyle,FlexCel.Core.TDrawingTextStrike,System.Int32,FlexCel.Core.TDrawingTextCapitalization,FlexCel.Core.TDrawingCoordinate,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <param name="aKumimoji" />
            <param name="aLang" />
            <param name="aAltLang" />
            <param name="aSize" />
            <param name="aBold" />
            <param name="aItalic" />
            <param name="aUnderline" />
            <param name="aStrike" />
            <param name="aKern" />
            <param name="aCapitalization" />
            <param name="aSpacing" />
            <param name="aNormalizeH" />
            <param name="aBaseline" />
            <param name="aNoProof" />
            <param name="aDirty" />
            <param name="aErr" />
            <param name="aSmartTagClean" />
            <param name="aSmartTagId" />
            <param name="aBookmarkLinkTarget" />
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.AltLang">
            <summary>
            Specifies the alternate language to use when the generating application is displaying the 
            user interface controls.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Baseline">
            <summary>
              Specifies the baseline for both the superscript and subscript fonts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Bold">
            <summary>
            Specifies whether a run of text is formatted as bold text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.BookmarkLinkTarget">
            <summary>
            Specifies the link target name that is used to reference to the proper link properties in a 
            custom XML part within the document. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Capitalization">
            <summary>
            Specifies the capitalization that is to be applied to the text run. This is a render-only 
            modification and does not affect the actual characters stored in the text run. This 
            attribute is also distinct from the toggle function where the actual characters stored in 
            the text run are changed. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextAttributes.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both strings are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Dirty">
            <summary>
            Specifies that the content of a text run has changed since the proofing tools have last been run. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Empty">
            <summary>
            Returns the text attributes with the default values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextAttributes.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same string and formatting.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Err">
            <summary>
            Specifies that when this run of text was checked for spelling, grammar, etc. that a mistake was indeed found. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextAttributes.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Italic">
            <summary>
            Specifies whether a run of text is formatted as italic text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Kern">
            <summary>
             Specifies the minimum font size at which character kerning occurs for this text run. 
             Whole points are specified in increments of 100 starting with 100 being a point size of 1. 
            For instance a font point size of 12 would be 1200 and a font point size of 12.5 would be 
            1250.
             </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Kumimoji">
            <summary>
            Specifies whether the numbers contained within vertical text continue vertically with the 
            text or whether they are to be displayed horizontally while the surrounding characters 
            continue in a vertical fashion.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Lang">
            <summary>
            Specifies the language to be used when the generating application is displaying the user 
            interface controls.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.NoProof">
            <summary>
            Specifies that a run of text has been selected by the user to not be checked for mistakes.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.NormalizeH">
            <summary>
            Specifies the normalization of height that is to be applied to the text run. This is a render-
            only modification and does not affect the actual characters stored in the text run. This 
            attribute is also distinct from the toggle function where the actual characters stored in 
            the text run are changed. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextAttributes.op_Equality(FlexCel.Core.TDrawingTextAttributes,FlexCel.Core.TDrawingTextAttributes)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextAttributes.op_GreaterThan(FlexCel.Core.TDrawingTextAttributes,FlexCel.Core.TDrawingTextAttributes)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextAttributes.op_Inequality(FlexCel.Core.TDrawingTextAttributes,FlexCel.Core.TDrawingTextAttributes)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextAttributes.op_LessThan(FlexCel.Core.TDrawingTextAttributes,FlexCel.Core.TDrawingTextAttributes)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is less than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Size">
            <summary>
            Specifies the size of text within a text run. Whole points are specified in increments of 
            100 starting with 100 being a point size of 1. For instance a font point size of 12 would be 
            1200 and a font point size of 12.5 would be 1250. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.SmartTagClean">
            <summary>
            Specifies whether or not a text run has been checked for smart tags.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.SmartTagId">
            <summary>
             Specifies a smart tag identifier for a run of text. This ID is unique throughout the 
            presentation and is used to reference corresponding auxiliary information about the 
            smart tag.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Spacing">
            <summary>
            Specifies the spacing between characters within a text run. This spacing is specified 
            numerically and should be consistently applied across the entire run of text by the 
            generating application. Whole points are specified in increments of 100 starting with 100 
            being a point size of 1. For instance a font point size of 12 would be 1200 and a font point 
            size of 12.5 would be 1250.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Strike">
            <summary>
            Specifies whether a run of text is formatted as strikethrough text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextAttributes.Underline">
            <summary>
            Specifies whether a run of text is formatted as underlined text. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingTextCapitalization">
            <summary>
            how text is capitalized when rendered.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingTextCapitalization.All">
            <summary>
            Apply all caps on the text. All lower case letters are 
            converted to upper case even though they are stored 
            differently in the backing store. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingTextCapitalization.None">
            <summary>
            No capitalization.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingTextCapitalization.Small">
            <summary>
            Apply small caps to the text. All letters are converted to lower case.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDrawingTextParagraph">
            <summary>
            A paragraph in the text inside a drawing. This struct is immutable.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingTextParagraph(FlexCel.Core.TDrawingTextRun[],FlexCel.Core.TDrawingParagraphProperties,FlexCel.Core.TDrawingTextProperties)">
            <param name="aRuns" />
            <param name="aProperties" />
            <param name="aEndParagraphProperties" />
            <summary>
            Creates a new TDrawingTextParagraph.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingTextParagraph(System.String,FlexCel.Core.TDrawingParagraphProperties,FlexCel.Core.TDrawingTextProperties)">
            <param name="s" />
            <param name="aProperties" />
            <param name="aEndParagraphProperties" />
            <summary>
            Creates a new TDrawingTextParagraph based on a simple string.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingTextParagraph(FlexCel.Core.TDrawingTextRun[],FlexCel.Core.TDrawingParagraphProperties,FlexCel.Core.TDrawingTextProperties,System.String)">
            <param name="aRuns" />
            <param name="aProperties" />
            <param name="aEndParagraphProperties" />
            <param name="aUnknownXml" />
            <summary>
            Creates a new TDrawingTextParagraph instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both strings are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextParagraph.EndParagraphProperties">
            <summary>
            Properties that apply to new paragraphs that are added after this one.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same string and formatting.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.op_Equality(FlexCel.Core.TDrawingTextParagraph,FlexCel.Core.TDrawingTextParagraph)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.op_GreaterThan(FlexCel.Core.TDrawingTextParagraph,FlexCel.Core.TDrawingTextParagraph)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.op_Inequality(FlexCel.Core.TDrawingTextParagraph,FlexCel.Core.TDrawingTextParagraph)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.op_LessThan(FlexCel.Core.TDrawingTextParagraph,FlexCel.Core.TDrawingTextParagraph)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is less than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextParagraph.Properties">
            <summary>
            The properties that apply to this paragraph.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.Substring(System.Int32,System.Int32)">
            <param name="index">Start of the substring (0 based)</param>
            <param name="count">Number of characters to copy.</param>
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextParagraph.Text">
            <summary>
            Returns the contents of the paragraph as plain text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextParagraph.TextRun(System.Int32)">
            <param name="index">Index of the run (0 based)</param>
            <summary>
            Returns a single text run for the paragraph.
            </summary>
            <returns>Text run for position index.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextParagraph.TextRunCount">
            <summary>
            Returns the number of runs in the paragraph.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextParagraph.UnknownXml">
            <summary>
            Contains unknown xml read from an xlsx file. If this property is not empty, then the value here
            will be used and the rest of properties will be ignored when saving the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingTextProperties">
            <summary>
            Properties of a text run inside a drawing.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingTextProperties(FlexCel.Core.TFillStyle,FlexCel.Core.TLineStyle,FlexCel.Core.TEffectProperties,System.Nullable{FlexCel.Core.TDrawingColor},FlexCel.Core.TDrawingUnderline,System.Nullable{FlexCel.Core.TThemeTextFont},System.Nullable{FlexCel.Core.TThemeTextFont},System.Nullable{FlexCel.Core.TThemeTextFont},System.Nullable{FlexCel.Core.TThemeTextFont},FlexCel.Core.TDrawingHyperlink,FlexCel.Core.TDrawingHyperlink,System.Boolean,FlexCel.Core.TDrawingTextAttributes)">
            <param name="aFill" />
            <param name="aLine" />
            <param name="aEffects" />
            <param name="aHighlight" />
            <param name="aUnderline" />
            <param name="aLatin" />
            <param name="aEastAssian" />
            <param name="aComplexScript" />
            <param name="aSymbol" />
            <param name="aHyperlinkClick" />
            <param name="aHyperlinkMouseOver" />
            <param name="aRightToLeft" />
            <param name="aAttributes" />
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Attributes">
            <summary>
            Group of simple attributes applied to the text run.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextProperties.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both strings are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.ComplexScript">
            <summary>
            This element specifies that a complex script font be used for a specific run of text. This font is specified with a 
            typeface attribute much like the others but is specifically classified as a complex script font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.EastAsian">
            <summary>
            This element specifies that an East Asian font be used for a specific run of text. This font is specified with a 
            typeface attribute much like the others but is specifically classified as an East Asian font. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Effects">
            <summary>
            Effects applied to the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Empty">
            <summary>
            Returns the text attributes with the default values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextProperties.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same string and formatting.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Fill">
            <summary>
            Fill style for the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextProperties.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Highlight">
            <summary>
            Highlight color that is present for a run of text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.HyperlinkClick">
            <summary>
            Specifies the on-click hyperlink information to be applied to a run of text. When the hyperlink text is clicked the 
            link is fetched.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.HyperlinkMouseOver">
            <summary>
            Specifies the mouse-over hyperlink information to be applied to a run of text. When the mouse is hovered over 
            this hyperlink text the link is fetched. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.IsEmpty">
            <summary>
            Returns true if no members are set.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Latin">
            <summary>
            This element specifies that a Latin font be used for a specific run of text. This font is specified with a typeface 
            attribute much like the others but is specifically classified as a Latin font. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Line">
            <summary>
            Line style for the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextProperties.op_Equality(FlexCel.Core.TDrawingTextProperties,FlexCel.Core.TDrawingTextProperties)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextProperties.op_GreaterThan(FlexCel.Core.TDrawingTextProperties,FlexCel.Core.TDrawingTextProperties)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextProperties.op_Inequality(FlexCel.Core.TDrawingTextProperties,FlexCel.Core.TDrawingTextProperties)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextProperties.op_LessThan(FlexCel.Core.TDrawingTextProperties,FlexCel.Core.TDrawingTextProperties)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is less than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.RightToLeft">
            <summary>
            This element specifies whether the contents of this run shall have right-to-left characteristics. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Symbol">
            <summary>
            This element specifies that a symbol script font be used for a specific run of text. This font is specified with a 
            typeface attribute much like the others but is specifically classified as a symbol script font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextProperties.Underline">
            <summary>
            Underline fill for the text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingTextRun">
            <summary>
            A rich formatting run used in text inside of a drawing. This struct is immutable.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TDrawingTextRun(System.String,FlexCel.Core.TDrawingTextProperties)">
            <param name="aText" />
            <param name="aTextProperties" />
            <summary>
            Creates a new Text Run.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both strings are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same string and formatting.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextRun.IsBreak">
            <summary>
            Returns true if this run contains a single line break.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.op_Equality(FlexCel.Core.TDrawingTextRun,FlexCel.Core.TDrawingTextRun)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.op_GreaterThan(FlexCel.Core.TDrawingTextRun,FlexCel.Core.TDrawingTextRun)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.op_Inequality(FlexCel.Core.TDrawingTextRun,FlexCel.Core.TDrawingTextRun)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.op_LessThan(FlexCel.Core.TDrawingTextRun,FlexCel.Core.TDrawingTextRun)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true is an object is less than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextRun.Text">
            <summary>
            String that this text run holds.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TDrawingTextRun.TextProperties">
            <summary>
            Properties for this text run.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingTextRun.ToString">
            <summary>
            String in the text run.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingTextStrike">
            <summary>
            How the text is striked out.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingTextStrike.Double">
            <summary>
            A double strike is applied to the text. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingTextStrike.None">
            <summary>
            No strike is applied to the text. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingTextStrike.Single">
            <summary>
            A single strike is applied to the text. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDrawingUnderline">
            <summary>
            Specifies the Fill style and line style of underlined text, when it is underlined.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingUnderline.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1, 0 or 1 depending if this object is smaller or bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingUnderline.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same data.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingUnderline.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingUnderline.op_Equality(FlexCel.Core.TDrawingUnderline,FlexCel.Core.TDrawingUnderline)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TDrawingUnderline.op_Inequality(FlexCel.Core.TDrawingUnderline,FlexCel.Core.TDrawingUnderline)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TDrawingUnderlineStyle">
            <summary>
            Possible underline types in a drawing.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.Dash">
            <summary>
            Underline the text with a single, dashed line of normal thickness. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DashHeavy">
            <summary>
            Underline the text with a single, thick dashed line. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DashLong">
            <summary>
            Underline the text with a single line of normal thickness consisting of long dashes. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DashLongHeavy">
            <summary>
            Underline the text with a single thick line consisting of long dashes. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DotDash">
            <summary>
            Underline the text with a single line consisting of alternating dots and dashes of normal thcikness. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DotDashHeavy">
            <summary>
            Underline the text with a single thick line consisting of alternating dots and dashes. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DotDotDash">
            <summary>
            Underline the text with a single line of normal thickness consisting of repeating two dots and dashes.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DotDotDashHeavy">
            <summary>
            Underline the text with a single thick line consisting of repeating two dots and dashes.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.Dotted">
            <summary>
            Underline the text with a single, dotted line of normal thickness. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.DottedHeavy">
            <summary>
            Underline the text with a single, thick dotted line. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.Double">
            <summary>
            Underline the text with two lines of normal thickness.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.Heavy">
            <summary>
            Underline the text with a single, thick line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.Single">
            <summary>
            Underline the text with a single line of normal thickness. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.Wavy">
            <summary>
            Underline the text with a single wavy line of normal thickness.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.WavyDouble">
            <summary>
            Underline the text with two wavy lines of normal thickness. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.WavyHeavy">
            <summary>
            Underline the text with a single, thick wavy line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDrawingUnderlineStyle.Words">
            <summary>
            Underline just the words and not the spaces between them. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TEffectProperties">
            <summary>
            This class holds the effects that are applied to a drawing. At this moment its members are not public.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TEffectProperties.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1, 0 or 1 depending if this object is smaller or bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TEffectProperties.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same data.
            </summary>
            <returns>True if both strings are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TEffectProperties.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TEffectProperties.op_Equality(FlexCel.Core.TEffectProperties,FlexCel.Core.TEffectProperties)">
            <param name="o1">First object to compare.</param>
            <param name="o2">Second object to compare.</param>
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TEffectProperties.op_Inequality(FlexCel.Core.TEffectProperties,FlexCel.Core.TEffectProperties)">
            <param name="o1">First objects to compare.</param>
            <param name="o2">Second objects to compare.</param>
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TEffectStyleList">
            <summary>
            Represents the effect style characteristics.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TEffectStyleList">
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TEffectStyleList.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TEncryptionAlgorithm">
            <summary>
            Encryption algorithms supported in xlsx encrypted files.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TEncryptionAlgorithm.AES_128">
            <summary>
            AES 128. This is the default in Excel 2007/2010
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEncryptionAlgorithm.AES_192">
            <summary>
            AES 192
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEncryptionAlgorithm.AES_256">
            <summary>
            AES 256
            </summary>
        </member>
        <member name="T:FlexCel.Core.TEncryptionType">
            <summary>
            How the file is encrypted. This applies only to xls files. Xlsx files are encrypted using the Agile xlsx encryption.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TEncryptionType.Standard">
            <summary>
            Excel 97/2000 encryption.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEncryptionType.Strong">
            <summary>
            Excel XP/2003 encryption.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEncryptionType.Xor">
            <summary>
            Excel 95 XOR encryption.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TEnterStyle">
            <summary>
            Defines how characters will be converted when encoding a string as Html.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TEnterStyle.Br">
            <summary>
            Enter characters in the input string will be converted to &lt;br&gt; tags. Multiple spaces will be converted to &amp;nbsp; entities.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEnterStyle.Char10">
            <summary>
            Enter characters in the input string will be converted to &amp;#0A; entities. Multiple spaces will be not converted.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEnterStyle.Ignore">
            <summary>
            Enter and multiple spaces will be ignored.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEnterStyle.Legacy2003Xml">
            <summary>
            This is a "pseudo xml" that is used to write the object texts. No entities more than the ones allowed in xml are used,
            breaks are &lt;br /&gt; and multiple spaces are the actual char 160, instead of &amp;nbsp; which isn't allowed in xml.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TExcelColor">
            <summary>
            Represents an Excel color. Colors in Excel can be defined in four ways: Automatic Colors, Indexed Colors (for compatibility with Excel 2003 or older),
            Palette colors, and RGB colors. This Structure is immutable, once you create it you cannot change its members. You need to create a new struct to modify it.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.Automatic">
            <summary>
            Returns an standard Automatic color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.AutomaticFillType">
            <summary>
            Returns the type of automatic color, if this structure contains an automatic color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.ColorType">
            <summary>
            Identifies which kind of color is the one to apply in this structure.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is more than color, 0 if both colors are the same, and 1 if obj is less than color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if both instances have the same color.
            </summary>
            <returns>True if both colors are the same.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromArgb(System.Int32)">
            <param name="argb">Color to set.</param>
            <summary>
            Returns a Color class with the specified rgb color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromArgb(System.Int32,System.Double)">
            <param name="argb">Color to set.</param>
            <param name="tint">Tint for the color.
            <para />If you try to set a value less than -1 it will be stored as -1, and values bigger than 1 as 1. No exceptions will be raised.
            </param>
            <summary>
            Returns a Color class with the specified rgb color and with the specified tint.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Double)">
            <param name="r">Red component of the color.</param>
            <param name="g">Green component of the color.</param>
            <param name="b">Blue component of the color.</param>
            <param name="tint">Tint for the color.
            <para />If you try to set a value less than -1 it will be stored as -1, and values bigger than 1 as 1. No exceptions will be raised.
            </param>
            <summary>
            Returns a Color class with the specified rgb color and with the specified tint.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromAutomatic(FlexCel.Core.TAutomaticColor)">
            <param name="autoColor">Type of automatic color.</param>
            <summary> 
            Returns an standard Automatic color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromIndex(System.Int32)">
            <param name="index">Index to the color palette. (1 based)</param>
            <summary>
            Returns a color class with an specified color index.
            <b>For compatibility with old code, you can enter any index here.</b> If the value is less than 1 or more than 56, it will assume automatic color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromIndex(System.Int32,System.Double)">
            <param name="index">Index to the color palette. (1 based)</param>
            <param name="tint">Tint for the color.
            <para />If you try to set a value less than -1 it will be stored as -1, and values bigger than 1 as 1. No exceptions will be raised.
            </param>
            <summary>
            Returns a color class with an specified color index.
            <b>For compatibility with old code, you can enter any index here.</b> If the value is less than 1 or more than 56, it will assume automatic color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromTheme(FlexCel.Core.TThemeColor)">
            <param name="themeColor">Theme color index.</param>
            <summary>
            Returns a color class with an specified theme color and tint.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.FromTheme(FlexCel.Core.TThemeColor,System.Double)">
            <param name="themeColor">Theme color index.</param>
            <param name="tint">Tint for the color.
            <para />If you try to set a value less than -1 it will be stored as -1, and values bigger than 1 as 1. No exceptions will be raised.
            </param>
            <summary>
            Returns a color class with an specified theme color and tint.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.Index">
            <summary>
            Returns the color when this structure contains an indexed color (1 based). This property is for compatibility with xls files (Excel 2003 or older),
            but if you are not changing the color palette, even for older files, it is preferred to use <see cref="P:FlexCel.Core.TExcelColor.RGB" /> or <see cref="P:FlexCel.Core.TExcelColor.Theme" /> instead.
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TExcelColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.IsAutomatic">
            <summary>
            Returns true if this instance has an automatic color.
            </summary>
            <value>True if this structure has an automatic color.</value>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.op_Equality(FlexCel.Core.TExcelColor,FlexCel.Core.TExcelColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.op_GreaterThan(FlexCel.Core.TExcelColor,FlexCel.Core.TExcelColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true is a color is bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.op_Implicit(FlexCel.Core.TUIColor)~FlexCel.Core.TExcelColor">
            <param name="aColor" />
            <summary>
            Assigns a system color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.op_Implicit(MonoMac.CoreGraphics.CGColor)~FlexCel.Core.TExcelColor">
            <param name="aColor" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.op_Inequality(FlexCel.Core.TExcelColor,FlexCel.Core.TExcelColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.op_LessThan(FlexCel.Core.TExcelColor,FlexCel.Core.TExcelColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true is a color is less than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.RGB">
            <summary>
            Returns the color when this structure has an RGB color, as a 0xRRGGBB integer. This property is fully functional with Excel 2007 or newer,
            older versions will be converted to Indexed color before saving as xls.
            <para /><b>Note:</b> When reading a color, the value here might not be the final one, since <see cref="P:FlexCel.Core.TExcelColor.Tint" /> is applied to get the final color. Use 
            <see cref="M:FlexCel.Core.TExcelColor.ToColor(FlexCel.Core.IFlexCelPalette)" /> method to find out the RGB color stored in this struct.
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TExcelColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.Theme">
            <summary>
            Returns the color if it is one of the entries in the theme palette (1 based). 
            <br /><br />If you try to read the value of this property and <see cref="P:FlexCel.Core.TExcelColor.ColorType" /> is not the right kind, an Exception will be raised.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelColor.Tint">
            <summary>
            Returns the tint value applied to the color. <br />
            If tint is supplied, then it is applied to the RGB value of the color to determine the final color applied. 
            <br />The tint value is stored as a double from -1.0 .. 1.0, where -1.0 means 100% darken and 1.0 means 100% lighten. Also, 0.0 means no change.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.ToColor(FlexCel.Core.IFlexCelPalette)">
            <param name="Xls">Excel file containing the themes and palettes for the color indexes.</param>
            <summary>
            Returns the value of this class as a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelColor.ToColor(FlexCel.Core.IFlexCelPalette,FlexCel.Core.TUIColor)">
            <param name="xls">Excel file containing the themes and palettes for the color indexes.</param>
            <param name="automaticColor">Color to be returned if this structure has an automatic color.</param>
            <summary>
            Returns the value of this class as a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TExcelFileErrorActions">
            <summary>
            Enumerates what to do on different FlexCel error situations.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.All">
            <summary>
            Sets all error actions together.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.ErrorOnFormulaConstantTooLong">
            <summary>
            When true, FlexCel will complain when you try to set a formula that has a string constant bigger than 255 characters.
            <br />For example, the formula: '="very long string that has more than 255 characters...." &amp; "other string" '  would raise an Exception,
            since Excel won't allow it. Note that you can still use ' =a1 &amp; "other string" ' where the cell A1 has the value:
            "very long string that has more than 255 characters....". this restriction applies only to inline strings.<br />
            Note that when this property is false you will still get the error, but only when saving to xls, xlsx or other file formats that don't support longer strings. (this error is too important to be ignored)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.ErrorOnRowHeightTooBig">
            <summary>
            When true and the row height is bigger than the maximum allowed by Excel, you will get an Exception.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.ErrorOnTooManyPageBreaks">
            <summary>
            When true and the number of manual pagebreaks is bigger than the maximum Excel allows,
            an Exception will be raised. When false, the page break will be silently ommited.
            Note that This exception is raised when saving the file as xls, when you are exporting your report to 
            PDF or images, all page breaks will be used.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.ErrorOnXlsxInvalidFormula">
            <summary>
            If this is true and the file contains an invalid formula, an exception will be thrown.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.ErrorOnXlsxInvalidName">
            <summary>
            If this is true and the xlsx file contains an invalid name, an exception will be thrown.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.ErrorOnXlsxMissingPart">
            <summary>
            If this is true and the xlsx file contains a missing part (like an image), an exception will be thrown.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.None">
            <summary>
            FlexCel will try to recover from most errors.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TExcelFileFormat">
            <summary>
            Different Excel versions create different empty xls/xlsx files. For example an empty xls file created by Excel 2003 will have "Arial"
            as its default font, and one created by Excel 2007 will have "Calibri". By default, when you call <see cref="M:FlexCel.Core.ExcelFile.NewFile" /> FlexCel will
            create a file that is similar to what Excel 2003 would create. This is fine, but if you want to start for example from an 
            empty Excel 2007 file, you can do so by calling NewFile() with this enumeration. 
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TExcelFileFormat.v2003">
            <summary>
            Empty files will be created as if they were created by Excel 2003. The default font is Arial.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileFormat.v2007">
            <summary>
            Empty files will be created as if they were created by Excel 2007. The default font is Calibri.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileFormat.v2010">
            <summary>
            Empty files will be created as if they were created by Excel 2010. The default font is Calibri.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileFormat.v2013">
            <summary>
            Empty files will be created as if they were created by Excel 2013. The default font is Calibri.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileFormat.v2016">
            <summary>
            Empty files will be created as if they were created by Excel 2016. The default font is Calibri.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TExcelGradient">
            <summary>
            Represents a gradient fill for a background cell. This class is abstract, you need to use its children: <see cref="T:FlexCel.Core.TExcelLinearGradient" /> and <see cref="T:FlexCel.Core.TExcelRectangularGradient" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TExcelGradient">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TExcelGradient</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelGradient.Clone">
            <summary>
            Creates a deep copy ot this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelGradient.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both classes contain the same gradient.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TExcelGradient.FGradientType">
            <summary>
            Type of gradient.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelGradient.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelGradient.GradientType">
            <summary>
            Type of gradient stored inside this object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelGradient.Stops">
            <summary>
            Different colors used in the gradient. This array must have at least one stop, and no more than 256.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TExcelLinearGradient">
            <summary>
            A linear gradient used for filling a background.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TExcelLinearGradient">
            <summary>
            Creates a new TExcelLinearGradient class.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TExcelLinearGradient(FlexCel.Core.TGradientStop[],System.Double)">
            <param name="aStops">Gradient stops.</param>
            <param name="aRotationAngle">Rotation angle in degrees.</param>
            <summary>
            Creates a new TExcelLinearGradient instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelLinearGradient.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both classes contain the same gradient.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelLinearGradient.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelLinearGradient.RotationAngle">
            <summary>
            Rotation angle of the gradient in degrees.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TExcelObjectList">
            <summary>
            A list that contains the Ids and positions of the Excel objects
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TExcelObjectList">
            <summary>
            Creates a new instance. IncludeCopies is false.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TExcelObjectList(System.Boolean)">
            <param name="includeCopies">If true, all shape ids of copied shapes will be included in the Copies property.</param>
            <summary>
            Creates a new TObjectList instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelObjectList.Count">
            <summary>
            Number of objects in the list.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelObjectList.IncludeCopies">
            <summary>
            If this property is true, all shape ids from the copies made will be stored in the Copies property.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelObjectList.Item(System.Int32)">
            <param name="index" />
            <summary>
            Returns position i in the list.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelObjectList.ShapeId(System.Int32)">
            <param name="index" />
            <summary>
            Returns the shape id of the object in the list.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TExcelRectangularGradient">
            <summary>
            A rectangular gradient used for filling a background.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TExcelRectangularGradient">
            <summary>
            Creates a new TExcelRectangularGradient class.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TExcelRectangularGradient(FlexCel.Core.TGradientStop[],System.Double,System.Double,System.Double,System.Double)">
            <param name="aStops">Gradient stops.</param>
            <param name="aTop">Top coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the first color of the gradient will be placed.</param>
            <param name="aLeft">Left coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the first color of the gradient will be placed.</param>
            <param name="aBottom">Bottom coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the last color of the gradient will be placed.</param>
            <param name="aRight">Right coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the last color of the gradient will be placed.</param>
            <summary>
            Creates a new rectangular gradient.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelRectangularGradient.Bottom">
            <summary>
            Bottom coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the last color of the gradient will be placed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelRectangularGradient.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both classes contain the same gradient.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelRectangularGradient.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelRectangularGradient.Left">
            <summary>
            Left coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the first color of the gradient will be placed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelRectangularGradient.Right">
            <summary>
            Right coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the last color of the gradient will be placed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TExcelRectangularGradient.Top">
            <summary>
            Top coordinate for the gradient. This value must be between 0 and 1, and specifies in percent where the first color of the gradient will be placed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TExcelTypes">
            <summary>
            Manages converting from/to objects/Native excel types.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelTypes.ConvertToAllowedObject(System.Object,System.Boolean)">
            <param name="o">Object to convert.</param>
            <param name="Dates1904">True if using 1904 as start date. Excel for windows normally uses 1900.</param>
            <summary>
            Converts an object to a native Excel datatype, that is:
            Number, String, Null, bool or Error.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelTypes.ObjectToCellType(System.Object)">
            <param name="o">Object with the value.</param>
            <summary>
            Converts an object on a CellType representation.
            </summary>
            <returns>Cell Type</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TExcelTypes.SameByteArray(System.Byte[],System.Byte[])">
            <param name="a1" />
            <param name="a2" />
            <summary>
            Returns true if both arrays contains same data. Handles null arrays.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TExcelVersion">
            <summary>
            Defines which Excel version FlexCel is targeting. Note that while on v2007 you still can make xls 97 spreadsheets.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TExcelVersion.v2007">
            <summary>
            Excel 2007 and up. This version has a grid of 1048576 rows x 16384 columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelVersion.v97_2003">
            <summary>
            Versions from Excel 97 to Excel 2003. Those versions have a grid limited by 65536 rows x 255 columns.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TExcludedRecords">
            <summary>
            A list of records that might not be saved into a file when using <see cref="M:FlexCel.Core.ExcelFile.SaveForHashing(System.IO.Stream)" /></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TExcludedRecords.All">
            <summary>
            This excludes all records in this enumeration. This is the most recommended option.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcludedRecords.CellSelection">
            <summary>
            If you specify CellSelection, the selected cells will be ignored.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcludedRecords.None">
            <summary>
            This includes all records, including the write access. It is <b>not</b> recommended to use this setting, because
            write access will change every time you save a file with a different user.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcludedRecords.SheetSelected">
            <summary>
            If you specify SheetSelected, the active sheet will be ignored.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcludedRecords.Version">
            <summary>
            If you specify Version, the version of Excel used to save the file will be ignored. (Note that version might change in an Excel Service Pack).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcludedRecords.WriteAccess">
            <summary>
            This is a stamp that is saved to the file each time it is saved, identifying the current user. You normally won't want to save this record, so you should specify this value.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFileFormats">
            <summary>
            Supported file formats to read and write files.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Automatic">
            <summary>
            Automatically detect the type of the file when opening files. If used when saving, FlexCel will choose whether to use xls or xlsx depending on the
            file extension (when saving to a file) or the value of <see cref="P:FlexCel.Core.ExcelFile.DefaultFileFormat" /> when saving to a stream or when the format can't be
            determined from the extension.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Pxl">
            <summary>
            Pocket Excel 1.0 or 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Text">
            <summary>
            Delimiter separated values. Depending on the delimiter, this can be csv, tab delimited text, etc.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Xls">
            <summary>
            Excel 97-2000-XP-2003
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Xlsm">
            <summary>
            Excel 2007 macro enabled file format. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Xlsx">
            <summary>
            Excel 2007 standard file format. Note that this is *not* a macro enabled file format. If you want to save a file with macros,
            you need to use Xlsm instead. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFillStyle">
            <summary>
            Base definition for a Drawing fill style. This class is abstract, and you should use its descendants like <see cref="T:FlexCel.Core.TSolidFill" /> or <see cref="T:FlexCel.Core.TGradientFill" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFillStyle(FlexCel.Core.TFillStyleType)">
            <param name="aFillStyleType" />
            <summary>
            Initializes the fill style.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyle.Clone">
            <summary>
            Returns a deep copy of the fill style.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyle.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyle.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFillStyle.FillStyleType">
            <summary>
            Stores which kind of fill style is used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyle.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFillStyleList">
            <summary>
            Represents the fill style characteristics for an autoshape.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFillStyleList">
            <summary>
            Creates a new TFillStyleList instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyleList.Add(FlexCel.Core.TFillStyle)">
            <param name="aFill">Fill style to add.</param>
            <summary>
            Adds a new FillStyle to the collection. Fill styles must be added in order, first is "Subtle", second is "Moderate", third is "Intense"
            and there could be new definitions in newer versions of Excel.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyleList.Clear">
            <summary>
            Clears all the formatting definitions.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyleList.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFillStyleList.Count">
            <summary>
            Returns the number of elements stored in this collection.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFillStyleList.GetRealFillStyle(FlexCel.Core.TFormattingType,FlexCel.Core.TDrawingColor)">
            <param name="index">Index to the collection.</param>
            <param name="basicColor">Color that will be used as a base to calculate the fill style.</param>
            <summary>
            Returns the fill style that results from applying the formatting type to a color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFillStyleList.Item(FlexCel.Core.TFormattingType)">
            <param name="index" />
            <summary>
            Returns the fill style for a given formatting type. Currently Excel defines only 3 formatting types, but more could be added in the future.
            If you need to access a formatting type that is not defined in the <see cref="T:FlexCel.Core.TFormattingType" /> enumeration, just cast an integer to TFormattingType.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFillStyleType">
            <summary>
            Stores the different kind of fill styles for an autoshape or drawing.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFillStyleType.Blip">
            <summary>
            Shape is filled with an image.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillStyleType.Gradient">
            <summary>
            Shape is filled with a gradient.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillStyleType.Group">
            <summary>
            The shape is part of a group, and should inherit its parent fill style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillStyleType.NoFill">
            <summary>
            No fill associated with the shape.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillStyleType.Pattern">
            <summary>
            Shape is filled with a pattern.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillStyleType.Solid">
            <summary>
            Shape is filled with a solid color.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFillType">
            <summary>
            Type of fill for an autoshape. (In xls files)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFillType.Background">
            <summary>
            the background fill color/pattern
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Pattern">
            <summary>
            Fill with a pattern (bitmap)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Picture">
            <summary>
            Center a picture in the shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Shade">
            <summary>
            Shade from start to end points
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeCenter">
            <summary>
            Shade from bounding rectangle to end point
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeScale">
            <summary>
            Similar to msofillShade, but the fillAngle
            is additionally scaled by the aspect ratio of
            the shape. If shape is square, it is the
            same as msofillShade.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeShape">
            <summary>
            Shade from shape outline to end point
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeTitle">
            <summary>
            special type - shade to title ---  for PP 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Solid">
            <summary>
            Fill with a solid color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Texture">
            <summary>
            A texture (pattern with its own color map)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlexCelErrorInfo">
            <summary>
            This class contains generic information about a non fatal error that happened in FlexCel.
            Children classes might contain more information specific to the error type.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlexCelErrorInfo(FlexCel.Core.FlexCelError,System.String)">
            <param name="aError">Parameter indicating the type of error that happened.</param>
            <param name="aMessage">String detailing the error that happened.</param>
            <summary>
            Creates a new TFlexCelErrorInfo class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlexCelErrorInfo.Error">
            <summary>
            Error type that this class is holding.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlexCelErrorInfo.Message">
            <summary>
            Error message with detailed information on what happened.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlipMode">
            <summary>
            How an image will be flipped when filling a pattern.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlipMode.None">
            <summary>
            Image will not be flipped. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlipMode.X">
            <summary>
            Tiles are flipped horizontally.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlipMode.XY">
            <summary>
            Tiles are flipped horizontally and vertically.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlipMode.Y">
            <summary>
            Tiles are flipped vertically.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxAnchorType">
            <summary>
            How an image behaves when inserting/copying rows/columns
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxAnchorType.DontMoveAndDontResize">
            <summary>
            Keep the image fixed on the sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxAnchorType.MoveAndDontResize">
            <summary>
            Move the image when inserting/copying, but keep its size.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxAnchorType.MoveAndResize">
            <summary>
            Move and resize the image with the sheet.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxApplyBorders">
            <summary>
            Border style for a cell.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlxApplyBorders">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TFlxApplyBorders</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyBorders.Apply(FlexCel.Core.TFlxBorders,FlexCel.Core.TFlxBorders)">
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyBorders.Clone">
            <summary>
            Returns a deep copy of the border.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Diagonal">
            <summary>
            Diagonal border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.DiagonalStyle">
            <summary>
            When defined, there will be one or two diagonal lines across the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.IsEmpty">
            <summary>
            Returns true if the format does not apply any setting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Left">
            <summary>
            Left border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Right">
            <summary>
            Right border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyBorders.SetAllMembers(System.Boolean)">
            <param name="Value" />
            <summary>
            Sets all members to true or false
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Top">
            <summary>
            Top border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxApplyFillPattern">
            <summary>
            Fill pattern and color for the background of a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.Apply(FlexCel.Core.TFlxFillPattern@,FlexCel.Core.TFlxFillPattern@)">
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.BgColor">
            <summary>
            Color for the background of the pattern.  If the pattern is solid, has no effect.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.FgColor">
            <summary>
            Color for the foreground of the pattern.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.GetHashCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.Gradient">
            <summary>
            Defines if to apply a gradient to a cell. Only valid in Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.IsEmpty">
            <summary>
            Returns true if the format does not apply any setting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.op_Equality(FlexCel.Core.TFlxApplyFillPattern,FlexCel.Core.TFlxApplyFillPattern)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.op_Inequality(FlexCel.Core.TFlxApplyFillPattern,FlexCel.Core.TFlxApplyFillPattern)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.Pattern">
            <summary>
            Fill style.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.SetAllMembers(System.Boolean)">
            <param name="Value" />
            <summary>
            Sets all members to true or false
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxApplyFont">
            <summary>
            Encapsulation of an Excel Font.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlxApplyFont">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TFlxApplyFont</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFont.Apply(FlexCel.Core.TFlxFont,FlexCel.Core.TFlxFont)">
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.CharSet">
            <summary>
            Character set. (see Windows API LOGFONT structure)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFont.Clone">
            <summary>
            Returns a deep copy of the font.
            </summary>
            <returns>A copy of the font.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Color">
            <summary>
            Color of the font. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Family">
            <summary>
            Font family, (see Windows API LOGFONT structure).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.IsEmpty">
            <summary>
            Returns true if the format definition does not apply any setting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Name">
            <summary>
            Font name. (For example, "Arial")
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Scheme">
            <summary>
            Scheme of the font, when using themes. (Excel 2007).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFont.SetAllMembers(System.Boolean)">
            <param name="Value" />
            <summary>
            Sets all members to true or false
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Size20">
            <summary>
            Height of the font (in units of 1/20th of a point). A Size20=200 means 10 points.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Style">
            <summary>
            Style of the font, such as bold or italics. Underline is a different option. 
            Note that when true this applies the full style, and sets all values of <see cref="P:FlexCel.Core.TFlxApplyFont.StyleEx" /> is to true. <see cref="P:FlexCel.Core.TFlxApplyFont.StyleEx" />
            can be used for more fine control over what styles are applied.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.StyleEx">
            <summary>
            Allows to control which styles are applied one by one, different from <see cref="P:FlexCel.Core.TFlxApplyFont.Style" /> which applies all the styles at once.
            Setting <see cref="P:FlexCel.Core.TFlxApplyFont.Style" /> will change all the StyleEx at once.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Underline">
            <summary>
            Underline type.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxApplyFormat">
            <summary>
            Defines which attributes of a <see cref="T:FlexCel.Core.TFlxFormat" /> will be applied for one cell. 
            Whatever member is set to false, it will not apply this member property to the cell.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlxApplyFormat">
            <summary>
            Creates an empty Format class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFormat.Apply(FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat)">
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Borders">
            <summary>
            Cell borders.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFormat.Clone">
            <summary>
            Returns a deep copy of the format.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxApplyFormat.FillPattern">
            <summary>
            Fill pattern.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Font">
            <summary>
            Cell Font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Format">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.HAlignment">
            <summary>
            Horizontal align on the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.HasOnlyBorders">
            <summary>
            Returns true if the format definition contains only borders.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Hidden">
            <summary>
            Cell is Hidden.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Indent">
            <summary>
            Indent value. (on characters)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.IsEmpty">
            <summary>
            Returns true if the format does not apply any setting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Locked">
            <summary>
            Cell is locked.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Lotus123Prefix">
            <summary>
            Lotus 123 compatibility prefixes.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.ParentStyle">
            <summary>
            Parent style. This is the parent style name and all the properties that are linked to it.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.ReadingOrder">
            <summary>
            Reading order.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Rotation">
            <summary>
            Text Rotation in degrees. <br />
            When this value is from 0 to 90 then this is the rotation degrees in the up direction. <br />
            When this value is from 91 to 180 then this is a rotation in the down direction. 91 means -1 degree rotation, 92 means -2 degrees, and so on until 180 which means -90 degrees.<br />
            255 is vertical text. <br />
            Other values are invalid.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFormat.SetAllMembers(System.Boolean)">
            <param name="Value" />
            <summary>
            Sets all members to true or false
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.ShrinkToFit">
            <summary>
            Shrink to fit.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.VAlignment">
            <summary>
            Vertical align on the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.WrapText">
            <summary>
            Cell wrap.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxBorders">
            <summary>
            Border style for a cell.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlxBorders">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TFlxBorders</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxBorders.Clone">
            <summary>
            Returns a deep copy of the border.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Diagonal">
            <summary>
            Diagonal border.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.DiagonalStyle">
            <summary>
            When defined, there will be one or two diagonal lines across the cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxBorders.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both borders are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxBorders.GetHashCode">
            <summary>
            Returns the hashcode for the border.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Left">
            <summary>
            Left border.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Right">
            <summary>
            Right border.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxBorders.SetAllBorders(FlexCel.Core.TFlxBorderStyle,FlexCel.Core.TExcelColor)">
            <param name="borderStyle">Border style to apply.</param>
            <param name="color">Color to apply</param>
            <summary>
            Sets all borders to a linestyle and color. Diagonal borders are not changed.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Top">
            <summary>
            Top border.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxBorderStyle">
            <summary>
            Cell border style.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dash_dot">
            <summary>Dash_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dash_dot_dot">
            <summary>Dash_dot_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dashed">
            <summary>Dashed</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dotted">
            <summary>Dotted</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Double">
            <summary>Double</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Hair">
            <summary>Hair</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium">
            <summary>Medium</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium_dash_dot">
            <summary>Medium_dash_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium_dash_dot_dot">
            <summary>Medium_dash_dot_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium_dashed">
            <summary>Medium_dashed</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.None">
            <summary>None</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Slanted_dash_dot">
            <summary>Slanted_dash_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Thick">
            <summary>Thick</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Thin">
            <summary>Thin</summary>
        </member>
        <member name="T:FlexCel.Core.TFlxChartFont">
            <summary>
            A TFlxFont with Scaling factor. Scaling factor might be different than 1 if
            the chart has Autosize Fonts. To get the real value of the font, you need to multiply by the factor.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlxChartFont">
            <summary>
            Constructs a new instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxChartFont.Clone">
            <summary>
            Return a deep copy of the copy.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxChartFont.Font">
            <summary>
            Actual information for the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxChartFont.Scale">
            <summary>
            Scale for the font. Multiply by this value to get the real size in points.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxDiagonalBorder">
            <summary>
            Diagonal border style.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.Both">
            <summary>
            A diagonal cross.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.DiagDown">
            <summary>
            A line going from left-top to right-bottom.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.DiagUp">
            <summary>
            A line going from left-bottom to right-top.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.None">
            <summary>
            No diagonal line.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxFillPattern">
            <summary>
            Fill pattern and color for the background of a cell.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxFillPattern.BgColor">
            <summary>
            Color for the background of the pattern.  If the pattern is solid it has no effect, but it is used when pattern is automatic.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxFillPattern.FgColor">
            <summary>
            Color for the foreground of the pattern. It is used when the pattern is solid, but not when it is automatic.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.GetHashCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFillPattern.Gradient">
            <summary>
            Gradient definition. This is only valid if <see cref="F:FlexCel.Core.TFlxFillPattern.Pattern" /> is TFlxPatternStyle.Gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.op_Equality(FlexCel.Core.TFlxFillPattern,FlexCel.Core.TFlxFillPattern)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.op_Inequality(FlexCel.Core.TFlxFillPattern,FlexCel.Core.TFlxFillPattern)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxFillPattern.Pattern">
            <summary>
            Fill style.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxFont">
            <summary>
            Encapsulation of an Excel Font.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlxFont">
            <summary>
            Creates a font with size 10 and name "Arial".
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.CharSet">
            <summary>
            Character set. (see Windows API LOGFONT structure)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFont.Clone">
            <summary>
            Returns a deep copy of the font.
            </summary>
            <returns>A copy of the font.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Color">
            <summary>
            Color of the font. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFont.CopyTo(FlexCel.Core.TFlxFont)">
            <param name="Dest">Existing Font object where new data will be copied.</param>
            <summary>
            Copies this font information to other font object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFont.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if a font has is the same as the current.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Family">
            <summary>
            Font family, (see Windows API LOGFONT structure).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFont.GetHashCode">
            <summary>
            Hash code of the font.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Name">
            <summary>
            Font name. (For example, "Arial"). <b>Important:</b> When using Excel 2007, if <see cref="P:FlexCel.Core.TFlxFont.Scheme" /> is
            different from "None", the font scheme takes precedence over the name. If for example Name = "Arial"
            but Scheme is Major and the major font is Calibri, the font will use Calibri.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Scheme">
            <summary>
            Font scheme. This only applies to Excel 2007.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Size20">
            <summary>
            Height of the font (in units of 1/20th of a point). A Size20 = 200 means 10 points.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Style">
            <summary>
            Style of the font, such as bold or italics. Underline is a different option.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Underline">
            <summary>
            Underline type.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxFontStyles">
            <summary>
            Font style. You can "or" on "and" it to get the actual styles.
            For example, to set style to bold+italic,  you should use TFlxFontStyles.Bold | TFlxFontStyles.Italic.
                         to check if style includes italic, use ((Style &amp; TFlxFontStyles.Italic)!=0)  
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Bold">
            <summary>Bold font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Condense">
            <summary>
            Condensed font, for backwards compatibility. Excel ignores this setting.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Extend">
            <summary>
            Extended font, for backwards compatibility. Excel ignores this setting.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Italic">
            <summary>Italic font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.None">
            <summary>Normal font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Outline">
            <summary>Outlined font. Excel currently ignores this setting.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Shadow">
            <summary>Font has a shadow. Excel currently ignores this setting.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.StrikeOut">
            <summary>Striked out font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Subscript">
            <summary>Subscript font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Superscript">
            <summary>Superscript font.</summary>
        </member>
        <member name="T:FlexCel.Core.TFlxFormat">
            <summary>
            Format for one cell or named style.
            Cell formats are used to format cells, Named styles to create styles. A Cell format can have a parent style format, even when normally this is null (parent is normal format).
            Named styles will have a non-null Style property. Cell formats will have style = null.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Borders">
            <summary>
            Cell borders.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFormat.Clone">
            <summary>
            Returns a deep copy of the format.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxFormat.CreateStandard2007">
            <summary>
            Returns a standard TFlxFormat for Excel 2007. (Font name is Calibri, etc). You will normally want to use <see cref="P:FlexCel.Core.ExcelFile.GetDefaultFormat" /> instead of this,
            since it returns the default format for an specific file, and not a generic format like this. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxFormat.FillPattern">
            <summary>
            Fill pattern.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Font">
            <summary>
            Cell Font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Format">
            <summary>
            Format string.  (For example, "yyyy-mm-dd" for a date format, or "#.00" for a numeric 2 decimal format)
            <br />This format string is the same you use in Excel under "Custom" format when formatting a cell, and it is documented
            in Excel documentation. Under <b>"Finding out what format string to use in TFlxFormat.Format"</b> section in <b>UsingFlexCelAPI.pdf</b>
            you can find more detailed information on how to create this string.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.HAlignment">
            <summary>
            Horizontal alignment on the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Hidden">
            <summary>
            Cell is Hidden.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Indent">
            <summary>
            Indent value. (in characters). This value can't be bigger than 15 in Excel 2003 or earlier, and no bigger than 250 in Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxFormat.IsStyle">
            <summary>
            When true this format is a named style, when false a cell format.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.LinkedStyle">
            <summary>
            If this object holds a Cell format, LinkedStyle specifies which properties of the cell format are linked to its parent style.
            If this object holds a Style format, LinkedStyle specifies the default set of properties that will be applied when you use this style from Excel.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Locked">
            <summary>
            Cell is locked.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Lotus123Prefix">
            <summary>
            If true the prefix for the cell is compatible with Lotus 123.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.NotNullParentStyle">
            <summary>
            This is similar to <see cref="P:FlexCel.Core.TFlxFormat.ParentStyle" /> but will return "Normal" when the parent is null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.ParentStyle">
            <summary>
            Name of the Parent style. Normally you will want to keep it at null (parent is normal style), but you can write an existing style here.
            If <see cref="F:FlexCel.Core.TFlxFormat.IsStyle" /> is true this property is not used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.ReadingOrder">
            <summary>
            Reading order for the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Rotation">
            <summary>
            Text Rotation in degrees. <br />
            When this value is from 0 to 90 then this is the rotation degrees in the up direction. <br />
            When this value is from 91 to 180 then this is a rotation in the down direction. 91 means -1 degree rotation, 92 means -2 degrees, and so on until 180 which means -90 degrees.<br />
            255 is vertical text. <br />
            Other values are invalid.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.ShrinkToFit">
            <summary>
            Shrink to fit.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.VAlignment">
            <summary>
            Vertical alignment on the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.WillWrap">
            <summary>
            Returns true if the text will wrap in the cell. This might be because <see cref="P:FlexCel.Core.TFlxFormat.WrapText" /> is true, of because the alignment is
            justify or distributed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.WrapText">
            <summary>
            Cell wrap.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxFormulaErrorValue">
            <summary>
            Error codes for cells on excel
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrDiv0">
            <summary>Division by 0</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrNA">
            <summary>Not available</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrName">
            <summary>Invalid name</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrNull">
            <summary>Null Value</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrNum">
            <summary>Invalid number</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrRef">
            <summary>Invalid or deleted cell reference</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrValue">
            <summary>Invalid Value</summary>
        </member>
        <member name="T:FlexCel.Core.TFlxInsertMode">
            <summary>
            Inserting mode.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.NoneDown">
            <summary>
            Cells will not be inserted but just overwrite existing ones. If count is &gt;0, additional ranges will be copied down.
            <br />When deleting, this mode will clear the cells and not move anything.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.NoneRight">
            <summary>
            Cells will not be inserted but just overwrite existing ones. If count is &gt;0, additional ranges will be copied right.
            <br />When deleting, this mode will clear the cells and not move anything.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftColRight">
            <summary>
            Inserts whole columns. Moves all destination columns to the right.
            <br />When deleting, moves columns to the right of the deleted columns to the left. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftRangeDown">
            <summary>
            Moves all destination cells down. This WON'T move the whole row, only cells on the range. 
            <br />When deleting, moves cells up. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftRangeRight">
            <summary>
            Moves all destination cells to the right. This WON'T move the whole column, only cells on the range.
            <br />When deleting, moves cells to the left. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftRowDown">
            <summary>
            Inserts whole rows. Moves all destination rows down.
            <br />When deleting, moves cells up. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxNumberFormat">
            <summary>
            Static class to convert cells to formatted strings. It uses format strings from Excel, that
            are different to those on .net, so we have to try to reconcile the diffs.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.FormatValue(System.Object,System.String,FlexCel.Core.ExcelFile)">
            <param name="Value">Value to format.</param>
            <param name="Format">Cell Format. (For example, "yyyy-mm-dd" for a date format, or "#.00" for a numeric 2 decimal format)
            <br />This format string is the same you use in Excel under "Custom" format when formatting a cell, and it is documented
            in Excel documentation. Under <b>"Finding out what format string to use in TFlxFormat.Format"</b> section in <b>UsingFlexCelAPI.pdf</b>
            you can find more detailed information on how to create this string.
            </param>
            <param name="Workbook">Workbook with the cell. If null, no color information will be returned and the base date fill be assumed to be 1900 (windows) and not 1904 (macs).</param>
            <summary>
            Formats a value as it would be shown by Excel.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.FormatValue(System.Object,System.String,FlexCel.Core.TUIColor@,FlexCel.Core.ExcelFile)">
            <param name="Value">Value to format.</param>
            <param name="Format">Cell Format. (For example, "yyyy-mm-dd" for a date format, or "#.00" for a numeric 2 decimal format)
            <br />This format string is the same you use in Excel under "Custom" format when formatting a cell, and it is documented
            in Excel documentation. Under <b>"Finding out what format string to use in TFlxFormat.Format"</b> section in <b>UsingFlexCelAPI.pdf</b>
            you can find more detailed information on how to create this string.
            </param>
            <param name="aColor">Final color of the text. (Depending on the format, color might change. I.e. Red for negatives) </param>
            <param name="Workbook">Workbook with the cell. If null, no color information will be returned and the base date fill be assumed to be 1900 (windows) and not 1904 (macs).</param>
            <summary>
            Formats a value as it would be shown by Excel.
            </summary>
            <returns>Formatted string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.FormatValue(System.Object,System.String,FlexCel.Core.TUIColor@,FlexCel.Core.ExcelFile,System.Boolean@,System.Boolean@)">
            <param name="Value">Value to format.</param>
            <param name="Format">Cell Format. (For example, "yyyy-mm-dd" for a date format, or "#.00" for a numeric 2 decimal format)
            <br />This format string is the same you use in Excel under "Custom" format when formatting a cell, and it is documented
            in Excel documentation. Under <b>"Finding out what format string to use in TFlxFormat.Format"</b> section in <b>UsingFlexCelAPI.pdf</b>
            you can find more detailed information on how to create this string.
            </param>
            <param name="aColor">Final color of the text. (Depending on the format, color might change. I.e. Red for negatives) </param>
            <param name="Workbook">Workbook with the cell. If null, no color information will be returned and the base date fill be assumed to be 1900 (windows) and not 1904 (macs).</param>
            <param name="HasDate">Returns if the format contains a date.</param>
            <param name="HasTime">Returns if the format contains a time.</param>
            <summary>
            Formats a value as it would be shown by Excel.
            </summary>
            <returns>Formatted string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.FormatValue(System.Object,System.String,FlexCel.Core.TUIColor@,FlexCel.Core.ExcelFile,System.Boolean@,System.Boolean@,FlexCel.Core.TAdaptativeFormats@)">
            <param name="Value">Value to format.</param>
            <param name="Format">Cell Format. (For example, "yyyy-mm-dd" for a date format, or "#.00" for a numeric 2 decimal format)
            <br />This format string is the same you use in Excel under "Custom" format when formatting a cell, and it is documented
            in Excel documentation. Under <b>"Finding out what format string to use in TFlxFormat.Format"</b> section in <b>UsingFlexCelAPI.pdf</b>
            you can find more detailed information on how to create this string.
            </param>
            <param name="aColor">Final color of the text. (Depending on the format, color might change. I.e. Red for negatives) </param>
            <param name="Workbook">Workbook with the cell. If null, no color information will be returned and the base date fill be assumed to be 1900 (windows) and not 1904 (macs).</param>
            <param name="HasDate">Returns if the format contains a date.</param>
            <param name="HasTime">Returns if the format contains a time.</param>
            <param name="AdaptativeFormats">Returns micro-justification information needed to adapt the text better to a cell. Null if there are no adaptative formats.</param>
            <summary>
            Formats a value as it would be shown by Excel.
            </summary>
            <returns>Formatted string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.HasDate(System.String)">
            <param name="Format">Cell format.</param>
            <summary>
            Returns true if the format string has a date.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.HasDateOrTime(System.String)">
            <param name="Format">Cell format.</param>
            <summary>
            Returns true if the format string has a date or a time.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.HasTime(System.String)">
            <param name="Format">Cell format.</param>
            <summary>
            Returns true if the format string has a time.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxNumberFormat.RegionalDateString">
            <summary>
            Returns the string used on a standard date on the current locale
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxNumberFormat.RegionalDateTimeString">
            <summary>
            Returns the string used on a standard date and time on the current locale
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxOneBorder">
            <summary>
            Border style and color for one of the 4 sides of a cell.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFlxOneBorder(FlexCel.Core.TFlxBorderStyle,FlexCel.Core.TExcelColor)">
            <param name="aBorderStyle">See <see cref="P:FlexCel.Core.TFlxOneBorder.Style" /></param>
            <param name="aColor">See <see cref="P:FlexCel.Core.TFlxOneBorder.Color" /></param>
            <summary>
            Initializes the structure to its default values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxOneBorder.Color">
            <summary>
            Color of the border.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true when 2 borders are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.GetHashCode">
            <summary>
            Hash code for the border.
            </summary>
            <returns>hashcode.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.op_Equality(FlexCel.Core.TFlxOneBorder,FlexCel.Core.TFlxOneBorder)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.op_Inequality(FlexCel.Core.TFlxOneBorder,FlexCel.Core.TFlxOneBorder)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFlxOneBorder.Style">
            <summary>
            Border style.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFlxPatternStyle">
            <summary>
            Pattern style.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Automatic">
            <summary>Automatic </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Checker">
            <summary>Diagonal hatch.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.CrissCross">
            <summary>thin diag</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Down">
            <summary>Down </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gradient">
            <summary>
            The fill style will be a <see cref="T:FlexCel.Core.TExcelGradient" />.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray16">
            <summary>12.5 % gray</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray25">
            <summary>Gray25 </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray50">
            <summary>Gray50 </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray75">
            <summary>Gray75 </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray8">
            <summary>6.25 % gray</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Grid">
            <summary>thin horz hatch</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Horizontal">
            <summary>Horizontal </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightDown">
            <summary>thin \ lines</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightHorizontal">
            <summary>thin horz lines </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightUp">
            <summary>thin / lines</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightVertical">
            <summary>thin vert lines</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.None">
            <summary>None </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.SemiGray75">
            <summary>bold diagonal.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Solid">
            <summary>Solid </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Up">
            <summary>Up </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Vertical">
            <summary>Vertical </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxReadingOrder">
            <summary>
            Reading order for a cell.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxReadingOrder.Context">
            <summary>
            Reading order defined by the context.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxReadingOrder.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxReadingOrder.RightToLeft">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxUnderline">
            <summary>
            Underline type.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.Double">
            <summary>
            Double underline.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.DoubleAccounting">
            <summary>
            Double underline at the bottom of the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.Single">
            <summary>
            Simple underline.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.SingleAccounting">
            <summary>
            Underlines at the bottom of the cell.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFmReturnType">
            <summary>
            Formula return types... A value, an array or a reference.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFmReturnType.Array">
            <summary>
            Formula returns an array.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFmReturnType.Ref">
            <summary>
            Formula returns a reference.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFmReturnType.Value">
            <summary>
            Formula returns a value.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFontCharSet">
            <summary>
            Character set for a font as defined in the DrawingML standard.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Ansi">
            <summary>
            Specifies the ANSI character set. (IANA name iso-8859-1) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Arabic">
            <summary>
            Specifies an Arabic character set. (IANA name windows-1256) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Baltic">
            <summary>
            Specifies a Baltic character set. (IANA name windows-1257) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Big5">
            <summary>
            Specifies the Chinese Big Five character set. (IANA name Big5) ECMA-376 Part 1 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Default">
            <summary>
            Specifies the default character set. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.EasternEuropean">
            <summary>
            Specifies an Eastern European character set. (IANA name windows-1250) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.GB2312">
            <summary>
            Specifies the GB-2312 character set. (IANA name GBK) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Greek">
            <summary>
            Specifies a Greek character set. (IANA name windows-1253) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Hangul">
            <summary>
            Specifies the Hangul character set. (IANA name ks_c_5601-1987) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Hebrew">
            <summary>
            Specifies a Hebrew character set. (IANA name windows-1255) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Jis">
            <summary>
            Specifies the JIS character set. (IANA name shift_jis) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Johab">
            <summary>
            Specifies a Johab character set. (IANA name KS C-5601-1992) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Macintosh">
            <summary>
            Specifies a Macintosh (Standard Roman) character set. (IANA name macintosh) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.OEM">
            <summary>
            Specifies an OEM character set not defined by ECMA-376. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Russian">
            <summary>
            Specifies a Russian character set. (IANA name windows-1251) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Symbol">
            <summary>
            Specifies the Symbol character set. This value specifies that the characters in the Unicode private use area (U+FF00 to U+FFFF) of the font should be used to display characters in the range U+0000 to U+00FF. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Thai">
            <summary>
            Specifies a Thai character set. (IANA name windows-874) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Turkish">
            <summary>
            Specifies a Turkish character set. (IANA name iso-8859-9) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontCharSet.Vietnamese">
            <summary>
            Specifies a Vietnamese character set. (IANA name windows-1258) 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFontScheme">
            <summary>
            Specifies the scheme to which a font belongs. This attribute is only valid in Excel 2007.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFontScheme.Major">
            <summary>
            The font is a major font for the scheme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontScheme.Minor">
            <summary>
            The font is a minor font for the scheme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFontScheme.None">
            <summary>
            Font is not a theme font.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFormattingType">
            <summary>
            The elements here are different types of fill/effects/etc that can be applied to an object.
            Currently Excel only defines 3 types, but more can be added in future specifications. 
            Newer types can be accessed by casting an int to TFormattingType. (for example "(TFormattingType)5"  would refer to a now non existing formatting type)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFormattingType.Intense">
            <summary>
            Intense formatting type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormattingType.Moderate">
            <summary>
            Moderate formatting type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormattingType.Subtle">
            <summary>
            Subtle formatting type.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFormula">
            <summary>
            An Excel formula. Use this class to pass a formula to an Excel sheet.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFormula">
            <summary>
            Creates an empty Excel formula
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFormula(System.String)">
            <param name="aText">Formula Text</param>
            <summary>
            Creates a formula with the corresponding text and result=null.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFormula(System.String,System.Object)">
            <param name="aText">Formula Text</param>
            <param name="aResult">Formula Result</param>
            <summary>
            Creates a formula with the corresponding text and result.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFormula(System.String,System.Object,FlexCel.Core.TFormulaSpan)">
            <param name="aText">Formula Text</param>
            <param name="aResult">Formula Result. You will normally want to set this to null, as it will be recalculated by FlexCel.</param>
            <param name="aSpan">How many rows and columns this formula will span, and in which position for the array the formula is.</param>
            <summary>
            Creates a formula that spans to more than one row or column. Use it to create multicell array formulas or what-if tables.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.Clone">
            <summary>
            Returns a Deep copy of the formula.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if obj is equal to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.GetHashCode">
            <summary>
            Hashcode of the formula.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.GetTypeCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFormula.Result">
            <summary>
            The formula result.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFormula.Span">
            <summary>
            For multicell formulas (like an array formula entered over more than one cell) this property says how many rows and columns the 
            formula uses. Normal formulas will span one single cell
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFormula.Text">
            <summary>
            The formula text, as it is written on Excel. It must begin with "=" or "{" for array formulas.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToBoolean(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToByte(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToChar(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToDateTime(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToDecimal(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToDouble(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToInt16(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToInt32(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToInt64(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToSByte(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToSingle(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToString">
            <summary>Returns the formula result as a string.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToString(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToType(System.Type,System.IFormatProvider)">
            <param name="conversionType" />
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToUInt16(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToUInt32(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormula.ToUInt64(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFormulaMessages">
            <summary>
            Tokens that can be used on a formula.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.ErrString(FlexCel.Core.TFlxFormulaErrorValue)">
            <param name="ErrCode">Error Code.</param>
            <summary>
            Message for the ErrorCode.
            </summary>
            <returns>Message.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.FloatToString(System.Double)">
            <param name="Value">Value to convert</param>
            <summary>
             This is a non-localized version of FloatToStr
             It will always use "." as decimal separator.
             If you are localizing this unit to your language, change this function
             to be:
             public string FloatToString(double Value)
             {
                return Value.ToString();
             }
             
            And it will use your current locale to get the decimal separator.
            Just remember that if you for example use "," as decimal sep,
            you should also change fmArrayColSep, fmFunctionSep and all vars with value=","
            </summary>
            <returns>String using ALWAYS "." as decimal separator, regardless of the regional settings</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.StringToFloat(System.String)">
            <param name="Value">String to Convert. ALWAYS uses "." as decimal separator</param>
            <summary>
             This is a non-localized version of StrToFloat
             It will always use "." as decimal separator.
             If you are localizing this unit to your language, change this function
             to be:
             public double FloatToString(string Value)
             {
                return Value.ToDouble();
             }
             
            And it will use your current locale to get the decimal separator.
            Just remember that if you for example use "," as decimal sep,
            you should also change fmArrayColSep, fmFunctionSep and all vars with value=","
            </summary>
            <returns>value of the string</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.TokenChar(FlexCel.Core.TFormulaToken)">
            <param name="Token">Token.</param>
            <summary>
            Returns the formula token as a character.
            </summary>
            <returns>Message</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.TokenString(FlexCel.Core.TFormulaToken)">
            <param name="Token">Token.</param>
            <summary>
            Formula tokens.
            </summary>
            <returns>Message.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFormulaSpan">
            <summary>
            This structure is used in formulas that span more than one cell, like some array formulas, or "what-if" table formulas.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TFormulaSpan(System.Int32,System.Int32,System.Boolean)">
            <param name="aRowSpan">How many rows the formula will use.</param>
            <param name="aColSpan">How many columns the formula will use.</param>
            <param name="aIsTopLeft">Indicates if this is the first formula of the array. Only the formula that is at the top
            left cell of the group will be used when setting a formula. Other formulas will be ignored, so you can copy 
            formulas in a loop from one place to the other without worring if the cell is at the top left or not.</param>
            <summary>
            Creates a new TFormulaSpan and sets its values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFormulaSpan.ColSpan">
            <summary>
            How many columns the formula will use.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaSpan.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true of the 2 FormulaSpans are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaSpan.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFormulaSpan.IsOneCell">
            <summary>
            Returns true if this formula spans over a single cell. (the most usual case)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFormulaSpan.IsTopLeft">
            <summary>
            Indicates if this is the first formula of the array. Only the formula that is at the top
            left cell of the group will be used when setting a formula. Other formulas will be ignored, so you can copy 
            formulas in a loop from one place to the other without worring if the cell is at the top left or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaSpan.op_Equality(FlexCel.Core.TFormulaSpan,FlexCel.Core.TFormulaSpan)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            This operator is overriden so you can compare this structure directly with ==
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TFormulaSpan.op_Inequality(FlexCel.Core.TFormulaSpan,FlexCel.Core.TFormulaSpan)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            This operator is overriden so you can compare this structure directly with !=
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TFormulaSpan.RowSpan">
            <summary>
            How many rows the formula will use.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TFormulaToken">
            <summary>
            Known token on a formula.  They are not supposed to be localized, but they can be by editing formulamsg.resx
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmAbsoluteRef">
            <summary>'$' as in $A$3</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmAnd">
            <summary>'&amp;';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmArrayColSep">
            <summary>',' Separates 2 columns on an array. Ex: {1,2}. It is ';' in spanish
            If you want to localize this, you could use fmArrayColSep=ListSeparator
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmArrayRowSep">
            <summary>'/' Separates 2 rows on an array. It is '\' in spanish</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmCloseArray">
            <summary>'}';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmCloseParen">
            <summary>')';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmDiv">
            <summary>'/';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmEQ">
            <summary>'=';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmErrStart">
            <summary>'#';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmExternalRef">
            <summary>'!' as in Sheet1!a1</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFalse">
            <summary>'FALSE';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFormulaDecimal">
            <summary>'.' as in '1.2'</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFormulaThousands">
            <summary>',' as in '1,300'</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFunctionSep">
            <summary>',' Argument separator on a function.
            For example, if fmFunctionSep=';' we should
            write "Max(a1;a2)"
            If you want to localize this, you could use fmFunctionSep=ListSeparator
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmGE">
            <summary>'&gt;=';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmGT">
            <summary>'&gt;';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmIntersect">
            <summary>' ' as in a1 a2</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmLE">
            <summary>'&lt;=';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmLT">
            <summary>'&lt;';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmMinus">
            <summary>'-';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmMul">
            <summary>'*';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmNE">
            <summary>'&lt;&gt;';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmOpenArray">
            <summary>'{';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmOpenParen">
            <summary>'(';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmPercent">
            <summary>'%';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmPlus">
            <summary>'+';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmPower">
            <summary>'^';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmR1C1_C">
            <summary>'C' in R1C1 notation as in R1C2</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmR1C1_R">
            <summary>'R' in R1C1 notation as in R1C2</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmR1C1RelativeRefEnd">
            <summary>']' in R1C1 notation as in R[1]C[-2]</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmR1C1RelativeRefStart">
            <summary>'[' in R1C1 notation as in R[1]C[-2]</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmRangeSep">
            <summary>':' as in A1:A3</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmSingleQuote">
            <summary>' (as in 'Sheet 1'!A1</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmStartFormula">
            <summary>'=' // as in =a1*2 or {=1+2}</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmStr">
            <summary>'"';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmTableText">
            <summary>'TABLE';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmTrue">
            <summary>'TRUE';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmUnion">
            <summary>',' as in "=a1, b2"</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmWorkbookClose">
            <summary>']';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmWorkbookOpen">
            <summary>'[' as in c:\[book1.xls]Sheet1!a1</summary>
        </member>
        <member name="T:FlexCel.Core.TFunctionGroup">
            <summary>
            Specifies the function group index if the defined name refers to a function. The function 
            group defines the general category for the function. This attribute is used when there is 
            an add-in or other code project associated with the file. 
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TFunctionGroup.Commands" />
        <member name="F:FlexCel.Core.TFunctionGroup.Cube" />
        <member name="F:FlexCel.Core.TFunctionGroup.Customizing" />
        <member name="F:FlexCel.Core.TFunctionGroup.Database" />
        <member name="F:FlexCel.Core.TFunctionGroup.DateAndTime">
            <summary>
            Date and Time 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFunctionGroup.DDE_External" />
        <member name="F:FlexCel.Core.TFunctionGroup.Engineering" />
        <member name="F:FlexCel.Core.TFunctionGroup.Financial">
            <summary>
            Financial
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFunctionGroup.Information" />
        <member name="F:FlexCel.Core.TFunctionGroup.Logical" />
        <member name="F:FlexCel.Core.TFunctionGroup.LookupAndReference" />
        <member name="F:FlexCel.Core.TFunctionGroup.MacroControl" />
        <member name="F:FlexCel.Core.TFunctionGroup.MathAndTrig" />
        <member name="F:FlexCel.Core.TFunctionGroup.None">
            <summary>
            Not defined. Don't use.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFunctionGroup.Statistical" />
        <member name="F:FlexCel.Core.TFunctionGroup.Text" />
        <member name="F:FlexCel.Core.TFunctionGroup.UserDefined" />
        <member name="T:FlexCel.Core.TGradientFill">
            <summary>
            Shapes are filled with a gradient.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TGradientFill(System.Nullable{FlexCel.Core.TDrawingRelativeRect},System.Boolean,FlexCel.Core.TFlipMode,FlexCel.Core.TDrawingGradientStop[],FlexCel.Core.TDrawingGradientDef)">
            <param name="aTileRect" />
            <param name="aRotateWithShape" />
            <param name="aFlip" />
            <param name="aGradientStops" />
            <param name="aGradientDef" />
            <summary>
            Creates a new Gradient fill.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientFill.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientFill.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TGradientFill.Flip">
            <summary>
            Specifies the direction(s) in which to flip the gradient while tiling.   <br />
            Normally a gradient fill encompasses the entire bounding box of the shape which 
            contains the fill. However, with the tileRect element, it is possible to define a "tile" 
            rectangle which is smaller than the bounding box. In this situation, the gradient fill is 
            encompassed within the tile rectangle, and the tile rectangle is tiled across the bounding box to fill the entire area
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientFill.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TGradientFill.GradientDef">
            <summary>
            Definition of the gradient. This can be a TDrawingLinearGradient class or a TDrawingPathGradient class.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TGradientFill.GradientStops">
            <summary>
            The list of gradient stops that specifies the gradient colors and their relative positions in the color band.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TGradientFill.RotateWithShape">
            <summary>
            Specifies that the fill should rotate with the shape.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TGradientFill.TileRect">
            <summary>
            This element specifies a rectangular region of the shape to which the gradient is applied.  This region is then 
            tiled across the remaining area of the shape to complete the fill.  The tile rectangle is defined by percentage 
            offsets from the sides of the shape's bounding box.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TGradientStop">
            <summary>
            Represents one of the points in a Gradient definition for an Excel cell. Note that drawings (autoshapes, charts, etc)
            use a different Gradient definition: <see cref="T:FlexCel.Core.TDrawingGradientStop" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TGradientStop(System.Double,FlexCel.Core.TExcelColor)">
            <param name="aPosition">Position for the stop.</param>
            <param name="aColor">Color for the stop.</param>
            <summary>
            Creates a new Gradient stop.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TGradientStop.Color">
            <summary>
            Color for this definition.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientStop.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Compares 2 instances of this struct.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientStop.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns if this struct has the same values as other one.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientStop.GetHashCode">
            <summary>
            Returns the hashcode for this struct.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientStop.op_Equality(FlexCel.Core.TGradientStop,FlexCel.Core.TGradientStop)">
            <param name="o1">First stop to compare.</param>
            <param name="o2">Second stop to compare.</param>
            <summary>
            Returns true if both gradient stops are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientStop.op_GreaterThan(FlexCel.Core.TGradientStop,FlexCel.Core.TGradientStop)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientStop.op_Inequality(FlexCel.Core.TGradientStop,FlexCel.Core.TGradientStop)">
            <param name="o1">First stop to compare.</param>
            <param name="o2">Second stop to compare.</param>
            <summary>
            Returns true if both gradient stops are different.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGradientStop.op_LessThan(FlexCel.Core.TGradientStop,FlexCel.Core.TGradientStop)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TGradientStop.Position">
            <summary>
            This value must be between 0 and 1, and represents the position in the gradient where the <see cref="P:FlexCel.Core.TGradientStop.Color" /> in this structure is pure.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TGradientType">
            <summary>
            The type of gradient stored inside a <see cref="T:FlexCel.Core.TExcelGradient" /> object.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TGradientType.Linear">
            <summary>
            Linear gradient.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TGradientType.Rectangular">
            <summary>
            Rectangular gradient.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TGroupFill">
            <summary>
            Shape is part of a group and filled with its parent fill style.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TGroupFill">
            <summary>
            Creates a new TGroupFill instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGroupFill.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGroupFill.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TGroupFill.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THeaderAndFooter">
            <summary>
            Contains all information about headers and footers in an Excel sheet.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.AlignMargins">
            <summary>
            Align header footer margins with page margins. When true, as left/right margins grow 
            and shrink, the header and footer edges stay aligned with the margins. When false, 
            headers and footers are aligned on the paper edges, regardless of margins. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.DefaultFooter">
            <summary>
            Returns or sets the footer for all pages that are not even or the first page. If <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> is false, then this
            string also applies to the first page. If <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> is false, this string also applies for even pages.
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /><br />To set a footer for all pages, use <see cref="M:FlexCel.Core.THeaderAndFooter.SetAllFooters(System.String)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.DefaultHeader">
            <summary>
            Returns or sets the header for all pages that are not even or the first page. If <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> is false, then this
            string also applies to the first page. If <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> is false, this string also applies for even pages.
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /><br />To set a header for all pages, use <see cref="M:FlexCel.Core.THeaderAndFooter.SetAllHeaders(System.String)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages">
            <summary>
            When true even pages will have different headers and footers from odd pages, and headers/footer for even pages will be specified in <see cref="P:FlexCel.Core.THeaderAndFooter.EvenHeader" />
            and <see cref="P:FlexCel.Core.THeaderAndFooter.EvenFooter" />. When false, EvenHeader and EvenFooter have no meaning.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage">
            <summary>
            When true the first page will have a different header and footer from the rest, and it will be specified in <see cref="P:FlexCel.Core.THeaderAndFooter.FirstHeader" />
            and <see cref="P:FlexCel.Core.THeaderAndFooter.FirstFooter" />. When false, FirstHeader and FirstFooter have no meaning.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.EvenFooter">
            <summary>
            Footer for even pages. <b>Note that this value is valid if and only if <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> is true.</b>
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /><br />If you don't want a different footer for even pages, set <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> to false or
            call <see cref="M:FlexCel.Core.THeaderAndFooter.SetAllFooters(System.String)" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.EvenHeader">
            <summary>
            Header for even pages. <b>Note that this value is valid if and only if <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> is true.</b>        
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /><br />If you don't want a different header for even pages, set <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> to false or
            call <see cref="M:FlexCel.Core.THeaderAndFooter.SetAllHeaders(System.String)" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.FirstFooter">
            <summary>
            Footer for the first page.<b>Note that this value is valid if and only if <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> is true.</b>        
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /><br />If you don't want a different footer for the first page, set <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> to false or
            call <see cref="M:FlexCel.Core.THeaderAndFooter.SetAllFooters(System.String)" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.FirstHeader">
            <summary>
            Header for the first page. <b>Note that this value is valid if and only if <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> is true.</b>        
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /><br />If you don't want a different header for the first page, set <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> to false or
            call <see cref="M:FlexCel.Core.THeaderAndFooter.SetAllHeaders(System.String)" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.GetFooter(System.Int32)">
            <param name="currentPage">Page for which you want the footers (1 based)</param>
            <summary>
            Returns the footer for a given page, considering if there are differences in even/odd pages or the first page.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.GetHashCode">
            <summary>
            Hashcode for the obeject.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.GetHeader(System.Int32)">
            <param name="currentPage">Page for which you want the headers (1 based)</param>
            <summary>
            Returns the header for a given page, considering if there are differences in even/odd pages or the first page.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)">
            <param name="currentPage">Page for which you want the headers and footers (1 based)</param>
            <summary>
            Returns the kind of footer image for a given page. This method is normally useful to get the correct image
            for an specific page.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.op_Equality(FlexCel.Core.THeaderAndFooter,FlexCel.Core.THeaderAndFooter)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both structures are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.op_Inequality(FlexCel.Core.THeaderAndFooter,FlexCel.Core.THeaderAndFooter)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both structures are different.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderAndFooter.ScaleWithDoc">
            <summary>
            Determines if to scale header and footer with document scaling or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.SetAllFooters(System.String)">
            <param name="value">Sting with the footer.</param>
            <summary>
            Sets the footers for all the pages to a given string. <b>Note that setting this value will set <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> and <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> to false.</b>
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderAndFooter.SetAllHeaders(System.String)">
            <param name="value">String with the header.</param>
            <summary>
            Sets the headers for all the pages to a given string. <b>Note that setting this value will  set <see cref="P:FlexCel.Core.THeaderAndFooter.DiffEvenPages" /> and <see cref="P:FlexCel.Core.THeaderAndFooter.DiffFirstPage" /> to false.</b>
            For a description of the possible values of this string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /></summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THeaderAndFooterKind">
            <summary>
            Different kinds of headers and footers depending on which pages they apply.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterKind.Default">
            <summary>
            This applies to all headers and footers that don't have a dedicated definition.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterKind.EvenPages">
            <summary>
            This applies to the headers and footes of even pages, when they are different than odd pages.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterKind.FirstPage">
            <summary>
            This applies to the header and footer of the first pages, when it is defined different than the others.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THeaderAndFooterPos">
            <summary>
            Different sections on a header or footer.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.FooterCenter">
            <summary>
            Center section on the footer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.FooterLeft">
            <summary>
            Left section on the footer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.FooterRight">
            <summary>
            Right section on the footer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.HeaderCenter">
            <summary>
            Center section on the header.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.HeaderLeft">
            <summary>
            Left section on the header.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.HeaderRight">
            <summary>
            Right section on the header.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THeaderOrFooterAnchor">
            <summary>
            Image information for an image inside a header or footer.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THeaderOrFooterAnchor(System.Int64,System.Int64)">
            <param name="aWidth">Width of the image in device independent pixels (dip). 1 dip = 1/96 inch, no matter the reslution of the output device.</param>
            <param name="aHeight">Height of the image in device independent pixels (dip). 1 dip = 1/96 inch, no matter the reslution of the output device.</param>
            <summary>
            Creates a new Anchor for a Header or footer image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterAnchor.Clone">
            <summary>
            Returns a clone of the anchor.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterAnchor.EqualValues(FlexCel.Core.THeaderOrFooterAnchor,FlexCel.Core.THeaderOrFooterAnchor)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterAnchor.GetData">
            <summary>
            All the data as a byte array.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterAnchor.Height">
            <summary>
            Height of the image in device independent pixels (dip). 1 dip = 1/96 inch, no matter the reslution of the output device.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterAnchor.Length">
            <summary>
            Length of the Serialized array.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterAnchor.Width">
            <summary>
            Width of the image in device independent pixels (dip). 1 dip = 1/96 inch, no matter the reslution of the output device.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THeaderOrFooterImageProperties">
            <summary>
            Image information for an image embedded inside a header or footer.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THeaderOrFooterImageProperties">
            <summary>
            Creates a new empty THeaderOrFooterImageProperties instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THeaderOrFooterImageProperties(FlexCel.Core.THeaderOrFooterAnchor,System.String,FlexCel.Core.TCropArea)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
            <param name="aCropArea">Crop area for the image.</param>
            <summary>
            This method will create a new copy of aAnchor and aCropArea, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterImageProperties.Anchor">
            <summary>
            Image position
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterImageProperties.Clone">
            <summary>
            Performs a deep copy of the object.
            </summary>
            <returns>A class that is a copy of this instance.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterImageProperties.EqualValues(FlexCel.Core.THeaderOrFooterImageProperties,FlexCel.Core.THeaderOrFooterImageProperties)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THFlxAlignment">
            <summary>
            Horizontal Alignment on a cell.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.center">
            <summary>
            Horizontally centered on the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.center_across_selection">
            <summary>
            Centered on a group of cells.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.distributed">
            <summary>
            Justified.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.fill">
            <summary>
            Repeat the text to fill the cell width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.general">
            <summary>
            General Alignment. (Text to the left, numbers to the right and Errors and booleans centered)
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.justify">
            <summary>
            Justify with spaces the text so it fills the cell width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.left">
            <summary>
            Aligned to the left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.right">
            <summary>
            Aligned to the right.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THidePrintObjects">
            <summary>
            Enumeration defining which objects should not be printed or exported to pdf. You can 'or' more than one option together.
            For example, to not print images and not comments, you should specify: THidePrintObjects.Images | THidePrintOption.Comments
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Comments">
            <summary>
            Do not export Comments to pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Footers">
            <summary>
            Do not print or export to pdf the Footers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Headers">
            <summary>
            Do not print or export to pdf the Headers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.HeadersAndFooters">
            <summary>
            Do not export headers nor footers. This is the same as specifying TPrintOptions.Headers and TPrintOptions.Footers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Hyperlynks">
            <summary>
            Do not export Hyperlinks to pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Images">
            <summary>
            Do not print or export images to pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.None">
            <summary>
            Print and Export everything.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.PageBreaks">
            <summary>
            Do not export page breaks. This property only applies to html exports.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THSLColor">
            <summary>
            Implements a simple representation of a color in Hue/Saturation/Lum colorspace.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THSLColor(FlexCel.Core.TUIColor)">
            <param name="rGBColor" />
            <summary>
            Creates a new instance from a system color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THSLColor(System.Drawing.Color)">
            <param name="rGBColor" />
            <summary>
            Creates a new instance from a system color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THSLColor(System.Double,System.Double,System.Double)">
            <param name="aHue">Hue for the color</param>
            <param name="aSat">Saturation for the color.</param>
            <param name="aLum">Luminescence for the color.</param>
            <summary>
            Creates a Color from the hue, saturation and luminescence.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.ApplyTint(System.Double,System.Double)">
            <param name="brightness">Brightness of the color (between 0 and 1)</param>
            <param name="tint">Tint of the color (between -1 and 1)</param>
            <summary>
            This method returns the brightness that results from applying tint to brightness.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THSLColor.B">
            <summary>
            Blue component in the RGB space. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is more than color, 0 if both colors are the same, and 1 if obj is less than color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.DistanceSquared(System.Double,System.Double,System.Double,System.Double)">
            <param name="hue1" />
            <param name="sat1" />
            <param name="hue2" />
            <param name="sat2" />
            <summary>
            Returns the distance between 2 colors. Not that this is not the euclidean distance, but a distance calculated to improve Hue matching.
            When converting cell colors, we try to preserve hues, so even a very pale red cell will be converted to bright red and not white or a very pale blue.
            This make it different from standard color matching as is done when adjusting images to a color palette, and where hue is not as important as here.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both colors are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THSLColor.G">
            <summary>
            Green component in the RGB space. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.GetHashCode">
            <summary>
            Returns a hashcode for the color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.GetTint(System.Double,System.Double)">
            <param name="originalBrightness">Brightness of the original color. (between 0 and 1)</param>
            <param name="newBrightness">Brightness of the new color that we want to produce by applying tint to originalBrightness/&gt;</param>
            <summary>
            Returns the tint needed to go from originalBrightness to newBrightness.
            A tint of 0 means no change (OriginalBrightness == NewBrightness), a tint of -1 means NewBrightness = 0,
            and a tint of 1 means NewBrightness = 1. So this method just does a simple interpolation to find out the needed tint.
            <para />This method is an inverse of <see cref="M:FlexCel.Core.THSLColor.ApplyTint(System.Double,System.Double)" /></summary>
            <returns>The tint we need to apply to go from OriginalBrightness to NewBrigtness.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THSLColor.Hue">
            <summary>
            Color hue. (between 0 and 360)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THSLColor.Lum">
            <summary>
            Color brigthtness. (between 0 and 1)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_Equality(FlexCel.Core.THSLColor,FlexCel.Core.THSLColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_GreaterThan(FlexCel.Core.THSLColor,FlexCel.Core.THSLColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_Implicit(FlexCel.Core.THSLColor)~FlexCel.Core.TUIColor">
            <param name="aColor" />
            <summary>
            Assigns this instance to a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_Implicit(FlexCel.Core.THSLColor)~System.Drawing.Color">
            <param name="aColor" />
            <summary>
            Assigns this instance to a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_Implicit(FlexCel.Core.TUIColor)~FlexCel.Core.THSLColor">
            <param name="aColor" />
            <summary>
            Assigns a system color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_Implicit(System.Drawing.Color)~FlexCel.Core.THSLColor">
            <param name="aColor" />
            <summary>
            Assigns a system color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_Inequality(FlexCel.Core.THSLColor,FlexCel.Core.THSLColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.op_LessThan(FlexCel.Core.THSLColor,FlexCel.Core.THSLColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THSLColor.R">
            <summary>
            Red component in the RGB space. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THSLColor.Sat">
            <summary>
            Color Saturation. (between 0 and 1)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THSLColor.ToColor">
            <summary>
            Returns a system color from this instance. This method is only needed in Visual Basic, in C# you can just assign the HslColor to the Color:
            <code>
            Color myColor = hslColor; 
            </code>
            Is the same as:
            <code>
            TUIColor myColor = hslColor.ToColor(); 
            </code></summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlColors">
            <summary>
            Converts between Color structs and HTML values.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlColors.GetColor(FlexCel.Core.TUIColor)">
            <param name="Value">The color we want to convert.</param>
            <summary>
            Returns an HTML color string from a Color struct.
            </summary>
            <returns>String with color on HTML format. (one of the 16 named colors or #notation).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlColors.GetColor(System.String)">
            <param name="Value">String with color on HTML format. (one of the 16 named colors or #notation)</param>
            <summary>
            Returns a Color struct from an HTML string
            </summary>
            <returns>The corresponding Color.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlDataUri">
            <summary>
            Provides functionality to create a data uri from data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlDataUri.GetUriBase64(System.String,System.Byte[])">
            <param name="mimeType">Mime type of the data. You can use <see cref="T:FlexCel.Core.StandardMimeType" /> for common mime types.</param>
            <param name="data">Data to encode.</param>
            <summary>
            Creates a data uri according to the RFC 2397: http://tools.ietf.org/html/rfc2397
            It will use base64 encoding
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlEntities">
            <summary>
            Contains a list of HTML entities and their values
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.EncodeAsHtml(System.String,FlexCel.Core.THtmlVersion,System.Text.Encoding)">
            <param name="originalString">String we want to convert.</param>
            <param name="htmlVersion">Version of html we are targeting. In Html 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param>
            <param name="encoding">Code page used to encode the string. Normally this is UTF-8</param>
            <summary>
            Converts a normal string into a string that can be used inside an HTML file. This includes converting characters
            to entities, replacing carriage returns by &lt;br&gt; tags, replacing multiple spaces by nbsp and more. EnterStyle is TEnterStyle.Br if omitted.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.EncodeAsHtml(System.String,FlexCel.Core.THtmlVersion,System.Text.Encoding,FlexCel.Core.TEnterStyle)">
            <param name="originalString">String we want to convert.</param>
            <param name="htmlVersion">Version of html we are targeting. In Html 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param>
            <param name="encoding">Code page used to encode the string. Normally this is UTF-8</param>
            <param name="EnterStyle">How to convert enters and multiple spaces in the text.</param>
            <summary>
            Converts a normal string into a string that can be used inside an HTML file. This includes converting characters
            to entities, replacing carriage returns by &lt;br&gt; tags, replacing multiple spaces by nbsp and more. EnterStyle is TEnterStyle.Br if omitted.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.GetTag(System.String,System.Int32)">
            <param name="HtmlString">String containing the tag.</param>
            <param name="i">Position of the open "&lt;"</param>
            <summary>
            Returns the identifier of a tag.
            </summary>
            <returns>The tag name.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlEntities.MaxNameLength">
            <summary>
            Returns the maximum length for a name. This includes decimal entities, that can have up to 7 numbers.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.TryNameToCode(System.String,System.Int32@)">
            <param name="EntityName">Name of the entity without the starting "&amp;" and the trailing ";"</param>
            <param name="Code">Unicode representation of the entity.</param>
            <summary>
            Converts an Html entity like "amp" into the unicode code for the character. The input string can also 
            be a # code, in decimal or hexadecimal. (for example &amp;#64).
            </summary>
            <returns>True if the code exists, false otherwise.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlFileFormat">
            <summary>
            How the html page will be saved.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THtmlFileFormat.Html">
            <summary>
            File will be saved as an html file with external images.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlFileFormat.MHtml">
            <summary>
            File will be saved in MHTML (Mime HTML) file format with all the data inside a single file.
            This format is the one used to encode emails.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlFixes">
            <summary>
            Defines special fixes to the generated files to workaround browser bugs.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.Equals(System.Object)">
            <param name="obj" />
            <summary>
            True if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.GetHashCode">
            <summary>
            Hash code for the struct.
            </summary>
            <returns>hashcode.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlFixes.IE6TransparentPngSupport">
            <summary>
            By default, Internet explorer does not support transparent PNGs. Normally this is not an issue, since Excel does not use 
            much transparency. But if you rely on transparent images and don't want to use gif images instead of png, you can set this
            property to true. It will add special code to the HTML file to support transparent images in IE6.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.op_Equality(FlexCel.Core.THtmlFixes,FlexCel.Core.THtmlFixes)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.op_Inequality(FlexCel.Core.THtmlFixes,FlexCel.Core.THtmlFixes)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlFixes.Outlook2007CssSupport">
            <summary>
            Outlook 2007 renders HTML worse than previous versions, since it switched to the Word 2007 rendering engine instead of
            Internet Explorer to show HTML emails. If you apply this fix, some code will be added to the generated HTML file to improve
            the display in Outlook 2007. Other browsers will not be affected and will still render the original file. Turn this option on if
            you plan to email the generated file as an HTML email or to edit them in Word 2007. Note that the pages will not validate with the
            w3c validator if this option is on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlFixes.WordWrapSupport">
            <summary>
            Some older browsers (and Word 2007) might not support the CSS white-space tag. In this case, if a line longer than a cell cannot be expanded to the right
            (because there is data in the next cell) it will wrap down instead of being cropped. This fix will cut the text on this cell to the displayable
            characters. If a letter was displayed by the half on the right, after applying this fix it will not display.
            This fix is automatically applied when <see cref="P:FlexCel.Core.THtmlFixes.Outlook2007CssSupport" /> is selected, so there is normally no reason to apply it. You might get 
            a smaller file with this fix (if you have a lot of hidden text), but the display will not be as accurate as when it is off, so it is recommended to keep it off.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlParsedString">
            <summary>
            An Html string parsed into a C# string and tags.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THtmlParsedString">
            <summary>
            Creates a new empty THtmlParsedString.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THtmlParsedString(System.String)">
            <param name="HtmlString">Html string we want to parse.</param>
            <summary>
            Creates a new THtmlParsedString containing an existing Html string.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlParsedString.Parse(System.String)">
            <param name="HtmlString">Html string we want to parse.</param>
            <summary>
            Parses an Html string and fills this instance with the parsed values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlParsedString.Tags">
            <summary>
            A list of the tags on the parsed string.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlParsedString.Text">
            <summary>
            The parsed html text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlSaveSharingViolationError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.HtmlSaveSharingViolation" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.HtmlSaveSharingViolation" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THtmlSaveSharingViolationError(System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.THtmlSaveSharingViolationError.FileName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlSaveSharingViolationError.FileName">
            <summary>
            File with the sharing violation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlStyle">
            <summary>
            Defines the way html is generated.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THtmlStyle.Css">
            <summary>
            Cascading style sheets will be used.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlStyle.Simple">
            <summary>
            Only HTML 3.2 tags (like &lt;b&gt;) will be used.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlTag">
            <summary>
            Contains an HTML tag and its position on the string.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THtmlTag(System.Int32,System.String)">
            <param name="aPosition">Position of the final string where the tag is.</param>
            <param name="aText">Text of the tag. (not including brackets)</param>
            <summary>
            Creates a new instance of a Tag.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlTag.Position">
            <summary>
            Position of this tag inside the converted string. (the string without tags)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THtmlTag.Text">
            <summary>
            The tag text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlTagCreator">
            <summary>
            Creates html tags for different actions, and depending on the HTML style.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlTagCreator.EndFontColor(FlexCel.Core.THtmlStyle)">
            <param name="htmlStyle">Specifies if to use css or not.</param>
            <summary>
            Returns a tag to end changing a font color that was started with <see cref="M:FlexCel.Core.THtmlTagCreator.StartFontColor(FlexCel.Core.TUIColor,FlexCel.Core.THtmlStyle)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THtmlTagCreator.StartFontColor(FlexCel.Core.TUIColor,FlexCel.Core.THtmlStyle)">
            <param name="aColor">Color to use.</param>
            <param name="htmlStyle">Style of the generated HTML.</param>
            <summary>
            Returns a tag to change the font color. Remember to close it with <see cref="M:FlexCel.Core.THtmlTagCreator.EndFontColor(FlexCel.Core.THtmlStyle)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THtmlVersion">
            <summary>
            Defines the HTML version that will be used when exporting.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THtmlVersion.Html_32">
            <summary>
            Html generated will be compatible with 3.2, and not have any CSS applied. Useful for when you want simple html markup and don't
            worry too much about exact looking. Many properties in FlexCelHtmlExport (like ie6 transparent png support) will be ignored in this mode.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlVersion.Html_401">
            <summary>
            The HTML generated will be 4.01 strict. See http://www.w3.org/TR/html401/
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlVersion.Html_5">
            <summary>
            The html generated will use specific stuff from HTML5, like the ability to rotate text or embed images.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlVersion.XHTML_10">
            <summary>
            HTML generated will be XHTML 1.0. See http://www.w3.org/TR/xhtml1/
            </summary>
        </member>
        <member name="T:FlexCel.Core.THyperLink">
            <summary>
            An encapsulation of an Excel hyperlink.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THyperLink">
            <summary>
            Creates a new instance of an Hyperlink class.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THyperLink(FlexCel.Core.THyperLinkType,System.String,System.String,System.String,System.String)">
            <param name="aLinkType">The type of hyperlink: to a local file, to an url, to a cell or to a networked file.</param>
            <param name="aText">Text of the HyperLink. This is empty when linking to a cell.</param>
            <param name="aDescription">Description of the HyperLink.</param>
            <param name="aTargetFrame">Specifies the target frame that is to be used when opening this hyperlink. When the hyperlink is activated this attribute is used to determine if a new window is launched for viewing or if an existing one can be used.</param>
            <param name="aTextMark">When entering an URL on excel, you can enter additional text following the url with a "#" character (for example www.your_url.com#myurl") The text Mark is the text after the "#" char. When entering an address to a cell, the address goes here too.</param>
            <summary>
            Creates a new instance of an Hyperlink class.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.THyperLink(FlexCel.Core.THyperLinkType,System.String,System.String,System.String,System.String,System.String)">
            <param name="aLinkType">The type of hyperlink: to a local file, to an url, to a cell or to a networked file.</param>
            <param name="aText">Text of the HyperLink. This is empty when linking to a cell.</param>
            <param name="aDescription">Description of the HyperLink.</param>
            <param name="aTargetFrame">Specifies the target frame that is to be used when opening this hyperlink. When the hyperlink is activated this attribute is used to determine if a new window is launched for viewing or if an existing one can be used.</param>
            <param name="aTextMark">When entering an URL on excel, you can enter additional text following the url with a "#" character (for example www.your_url.com#myurl") The text Mark is the text after the "#" char. When entering an address to a cell, the address goes here too.</param>
            <param name="aHint">Tooltip to be shown when hovering over the link.</param>
            <summary>
            Creates a new instance of an Hyperlink class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.THyperLink.Clone">
            <summary>
            Returns a copy of the hyperlink.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THyperLink.Description">
            <summary>
            Description of the HyperLink.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THyperLink.Hint">
            <summary>
            Hint when the mouse hovers over the hyperlink.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THyperLink.LinkType">
            <summary>
            The type of hyperlink: to a local file, to an url, to a cell or to a networked file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THyperLink.TargetFrame">
            <summary>
            This parameter is not documented. You will probably leave it empty.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THyperLink.Text">
            <summary>
            Text of the HyperLink. This is empty when linking to a cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.THyperLink.TextMark">
            <summary>
            When entering an URL, you can enter additional text following the url with a "#" character (for example www.your_url.com#myurl") The text Mark is the text after the "#" char. When entering an address to a cell, the address goes here too.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.THyperLinkType">
            <summary>
            Possible types of cell hyperlinks.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.CurrentWorkbook">
            <summary>
            An hyperlink inside the current file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.LocalFile">
            <summary>
            A file on the local disk. Not an url or unc file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.UNC">
            <summary>
            Universal Naming convention. For example: \\server\path\file.ext
            </summary>
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.URL">
            <summary>
            Web, file or mail URL. (like http://, file://, mailto://, ftp://) 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TIgnoredErrors">
            <summary>
            Specifies what kind of errors Excel will ignore for ranges of cells. "Errors" in a spreadsheet are the
            green triangles that appear in the top left crner of the cell, like "Number stored as text".
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.CalculatedColumn">
            <summary>
            Ignore errors when cells contain a formula different from the calculated column.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.EmptyCellReference">
            <summary>
            Ignore errors of formulas pointing to empty cell references.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.EvalError">
            <summary>
            Ignore errors of formulas which result in an error like #N/A!
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.Formula">
            <summary>
            Ignore erors when a fomrula isn't similar to the other formulas in the region.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.FormulaRange">
            <summary>
            Ignore errors when a formula doesn't reference all cells in a range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.ListDataValidation">
            <summary>
            Ignore errors when the cell value doesn't comply with the data validation rules.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.None">
            <summary> 
            Don't ignore any error.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.NumberStoredAsText">
            <summary>
            Ignore errors of numbers stored as text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.TwoDigitTextYear">
            <summary>
            Ignore errors when formulas contain text formatted cells with years represented as 2 digits.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TIgnoredErrors.UnlockedFormula">
            <summary>
            Ignore errors when unlocked cells contain formulas.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TImageNaming">
            <summary>
            Defines how images will be automatically named by FlexCel, when you do not supply a better name.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TImageNaming.Default">
            <summary>
            The image will be named using standard naming, in a format similar to "filename_image_n.png"
            </summary>
        </member>
        <member name="F:FlexCel.Core.TImageNaming.Guid">
            <summary>
            The image will be named using a GUID. This ensures that any image will be unique even if you have many users
            requesting the same file at the same time. (Default naming will use the same name for all the users, so images would be overwritten).
            As a downside, everytime an image is called a new file will be created, so you can get a lot of images just from an user refreshing a page.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TImageProperties">
            <summary>
            Image information for a normal image.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TImageProperties">
            <summary>
            Creates a new empty TImageProperties instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TImageProperties(FlexCel.Core.TClientAnchor,System.String)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TImageProperties(FlexCel.Core.TClientAnchor,System.String,System.String)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
            <param name="aShapeName">Shape name as it will appear on the names combo box.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TImageProperties(FlexCel.Core.TClientAnchor,System.String,System.String,FlexCel.Core.TCropArea)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
            <param name="aShapeName">Name of the shape, as it appears on the names combobox. Set it to null to not add an imagename.</param>
            <param name="aCropArea">Crop area for the image.</param>
            <summary>
            This method will create a new copy of aAnchor and aCropArea, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TImageProperties.AltText">
            <summary>
            Alternative Text. This is the same as the "Alt Text" tab in the properties dialog for the image, and is used when exporting to HTML.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TImageProperties.Anchor">
            <summary>
            Image position
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TImageProperties.Clone">
            <summary>
            Performs a deep copy of the object.
            </summary>
            <returns>A TImageProperties class that is a copy of this instance.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TImageProperties.Dec">
            <summary>
            Returns a COPY of the class with its coords decremented by 1.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TImageProperties.DecNoCopy">
            <summary>
            Decrements the anchor of the image, and returns the SAME object. This method doesn't clone the TImageProperties object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TImageProperties.EqualValues(FlexCel.Core.TImageProperties,FlexCel.Core.TImageProperties)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TImageProperties.Inc">
            <summary>
            Returns a COPY of the class with its coords incremented by 1.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TImageProperties.IncNoCopy">
            <summary>
            Increments the anchor of the image, and returns the SAME object. This method doesn't clone the TImageProperties object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TImageProperties.ShapeName">
            <summary>
            Name of the image. It sets/gets the name of the shape for the image as you can see it on the names combobox.
            If you set it to null Excel will show a generic name, like "Picture 31"
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TImplementedFunction">
            <summary>
            Data of an implemented formula function.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TImplementedFunction(System.Int32,System.String,System.Int32,System.Int32)">
            <param name="aId">Formula ID</param>
            <param name="aFunctionName">Formula Name</param>
            <param name="aMinArgCount">Minimum argument count for the function.</param>
            <param name="aMaxArgCount">Maximum argument count for the function.</param>
            <summary>
            Creates a new TImplementedFunction with supplied values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.FunctionName">
            <summary>
            Formula Name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.Id">
            <summary>
            Formula ID. (Excel specific)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.MaxArgCount">
            <summary>
            Maximum argument count for the function.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.MinArgCount">
            <summary>
            Minimum argument count for the function.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TImplementedFunctionList">
            <summary>
            Holds a list of currently implemented formula functions on FlexCel.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TImplementedFunctionList">
            <summary>
            Creates and initializes a list with all implemented functions.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TImplementedFunctionList(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info" />
            <param name="context" />
            <summary>
            Creates a serialized object.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLabColor">
            <summary>
            Implements a simple representation of a color in CIE-L*a*b* colorspace. This colorspace is mostly used for finding distances between colors.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLabColor(FlexCel.Core.TUIColor)">
            <param name="rGBColor" />
            <summary>
            Creates a new instance from a system color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLabColor(System.Drawing.Color)">
            <param name="rGBColor" />
            <summary>
            Creates a new instance from a system color.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLabColor.a0">
            <summary>
            a*
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLabColor.B">
            <summary>
            Blue component in the RGB space. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLabColor.b0">
            <summary>
            b*
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.CMCSquared(FlexCel.Core.TLabColor,System.Int32,System.Int32)">
            <param name="Color2">Color that will be compared against this reference.</param>
            <param name="l">L parameter for CMC calculation. For acceptability (CMC2:1) this is normally 2, and for perceptibility (CMC1:1) this should be 1.</param>
            <param name="c">C parameter for CMC calculation. This is normally 1.</param>
            <summary>
            Returns the CMC color distance between this color and color2 (distance returned is squared, so you need to get the sqrt if you want the real CMC value). Note that CMC is not symetric (Color1.CMC(Color2) != Color2.CMC(Color1), so this color is the one used as reference.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is more than color, 0 if both colors are the same, and 1 if obj is less than color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.DistanceSquared(FlexCel.Core.TLabColor)">
            <param name="Color2" />
            <summary>
            Returns the euclidean distance squared (DeltaE CIE 1976 squared) between this color and other color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both colors are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLabColor.G">
            <summary>
            Green component in the RGB space. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.GetHashCode">
            <summary>
            Returns a hashcode for the color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLabColor.L0">
            <summary>
            L* (Lightness) (Between 0 and 100)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_Equality(FlexCel.Core.TLabColor,FlexCel.Core.TLabColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_GreaterThan(FlexCel.Core.TLabColor,FlexCel.Core.TLabColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_Implicit(FlexCel.Core.TLabColor)~FlexCel.Core.TUIColor">
            <param name="aColor" />
            <summary>
            Assigns this instance to a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_Implicit(FlexCel.Core.TLabColor)~System.Drawing.Color">
            <param name="aColor" />
            <summary>
            Assigns this instance to a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_Implicit(FlexCel.Core.TUIColor)~FlexCel.Core.TLabColor">
            <param name="aColor" />
            <summary>
            Assigns a system color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_Implicit(System.Drawing.Color)~FlexCel.Core.TLabColor">
            <param name="aColor" />
            <summary>
            Assigns a system color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_Inequality(FlexCel.Core.TLabColor,FlexCel.Core.TLabColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.op_LessThan(FlexCel.Core.TLabColor,FlexCel.Core.TLabColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLabColor.R">
            <summary>
            Red component in the RGB space. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLabColor.ToColor">
            <summary>
            Returns a system color from this instance. This method is only needed in Visual Basic, in C# you can just assign the LabColor to the Color:
            <code>
            Color myColor = labColor; 
            </code>
            Is the same as:
            <code>
            TUIColor myColor = labColor.ToColor(); 
            </code></summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLabelDataValue">
            <summary>
            Defines what information a DataLabel should show.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TLabelDataValue.Manual">
            <summary>
            This label has a manually entered value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLabelDataValue.SeriesInfo">
            <summary>
            This label shows the values and/or categories of the series.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLegendEntryOptions">
            <summary>
            Description of one particular entry on the Legend box.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLegendEntryOptions(System.Boolean,FlexCel.Core.TChartTextOptions)">
            <param name="aEntryDeleted">See <see cref="P:FlexCel.Core.TLegendEntryOptions.EntryDeleted" /></param>
            <param name="aTextFormat">See <see cref="P:FlexCel.Core.TLegendEntryOptions.TextFormat" /></param>
            <summary>
            Creates a new TLegendEntryOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLegendEntryOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLegendEntryOptions.EntryDeleted">
            <summary>
            If true, this series has been deleted from the legend box, and it should not be displayed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLegendEntryOptions.TextFormat">
            <summary>
            Font to use on this particular entry. If null, the default font for the legend box should be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLegendOptionsList">
            <summary>
            A list of options for the legend on the whole series and for specific data points inside these series.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLegendOptionsList">
            <summary>
            Creates a new TLegendOptionsList instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.Add(System.Int32,FlexCel.Core.TLegendEntryOptions)">
            <param name="PointNumber">Point where this value applies. -1 means the whole series.</param>
            <param name="Options">Options to add.</param>
            <summary>
            Adds a new option to the list. If the option is null, nothing will be done.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.GetEnumerator">
            <summary>
            Gets the enumerator for this class. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.GetValues">
            <summary>
            Gets all the values of the series.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLegendOptionsList.Item(System.Int32)">
            <param name="key" />
            <summary>
            Gets or sets the value for a data point or for the whole series (when key = -1).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.System#Collections#Generic#IEnumerable{System#Int32}#GetEnumerator">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLineArrow">
            <summary>
            Describes an arrow at the end of a line. This struct is immutable.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.CompareTo(FlexCel.Core.TLineArrow)">
            <param name="obj" />
            <summary>
            Returns -1, 0 or 1 depending if the objects is smaller, equal or bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.CompareTo(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.GetHashCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineArrow.Len">
            <summary>
            Length of the arrow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineArrow.None">
            <summary>
            Returns a shared instance with no arrow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.op_Equality(FlexCel.Core.TLineArrow,FlexCel.Core.TLineArrow)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.op_GreaterThan(FlexCel.Core.TLineArrow,FlexCel.Core.TLineArrow)">
            <param name="o1" />
            <param name="o2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.op_Inequality(FlexCel.Core.TLineArrow,FlexCel.Core.TLineArrow)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineArrow.op_LessThan(FlexCel.Core.TLineArrow,FlexCel.Core.TLineArrow)">
            <param name="o1" />
            <param name="o2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineArrow.Style">
            <summary>
            Style of the arrow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineArrow.Width">
            <summary>
            Width of the arrow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLineCap">
            <summary>
            How the line ends.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TLineCap.Flat">
            <summary>
            Line ends at end point.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineCap.Round">
            <summary>
            Rounded ends. Semi-circle protrudes by half line width. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineCap.Square">
            <summary>
            Square protrudes by half line width. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLineChartOptions">
            <summary>
            Options specific for a Line chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLineChartOptions(System.Int32,System.Boolean,System.Int32,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TChartDropBars,FlexCel.Core.TDataLabel)">
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aStackedMode">
                <see cref="T:FlexCel.Core.TStackedMode" /> of the chart.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDropBars">Drop bars and lines information. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
            <summary>
            Creates a new TLineChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLineDashing">
            <summary>
            Line style (dashes, solid, etc).
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TLineDashing.DashDotDotSys">
            <summary>
            PS_DASHDOTDOT system dash style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.DashDotGEL">
            <summary>
            dash short dash.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.DashDotSys">
            <summary>
            PS_DASHDOT system dash style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.DashGEL">
            <summary>
            dash style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.DashSys">
            <summary>
            PS_DASH system   dash style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.DotGEL">
            <summary>
            square dot style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.DotSys">
            <summary>
            PS_DOT system   dash style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.LongDashDotDotGEL">
            <summary>
            longg dash short dash short dash.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.LongDashDotGEL">
            <summary>
            long dash short dash.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.LongDashGEL">
            <summary>
            long dash style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineDashing.Solid">
            <summary>
            Solid (continuous) pen.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLineJoin">
            <summary>
            How a line joins with the next
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TLineJoin.Bevel">
            <summary>
            Bevel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineJoin.Miter">
            <summary>
            Miter.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLineJoin.Round">
            <summary>
            Round.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLineStyle">
            <summary>
            Definition for a Drawing line style. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLineStyle(FlexCel.Core.TFillStyle)">
            <param name="aFill" />
            <summary>
            Creates a simple line with most values by default, including default width.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLineStyle(FlexCel.Core.TFillStyle,System.Nullable{System.Int32})">
            <param name="aFill" />
            <param name="aWidth" />
            <summary>
            Creates a simple line with most values by default.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLineStyle(FlexCel.Core.TFillStyle,System.Nullable{System.Int32},System.Nullable{FlexCel.Core.TPenAlignment},System.Nullable{FlexCel.Core.TLineCap},System.Nullable{FlexCel.Core.TCompoundLineType},System.Nullable{FlexCel.Core.TLineDashing},System.Nullable{FlexCel.Core.TLineJoin},System.Nullable{FlexCel.Core.TLineArrow},System.Nullable{FlexCel.Core.TLineArrow})">
            <param name="aFill" />
            <param name="aWidth" />
            <param name="aPenAlign" />
            <param name="aLineCap" />
            <param name="aCompoundLineType" />
            <param name="aDashing" />
            <param name="aJoin" />
            <param name="aHeadArrow" />
            <param name="aTailArrow" />
            <summary>
            Initializes the line style.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineStyle.Clone">
            <summary>
            Returns a deep copy of the fill style.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineStyle.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1, 0 or 1 depending if the object is smaller, equal or bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.CompoundLineType">
            <summary>
            Compound line style. If null, default from the theme will be used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.Dashing">
            <summary>
            Line dashing. If null, default from the theme will be used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TLineStyle.DefaultWidth">
            <summary>
            Default line width.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineStyle.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.Fill">
            <summary>
            Line color and/or fill.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineStyle.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.HeadArrow">
            <summary>
            Head arrow if it has one. If null, default from the theme will be used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.Join">
            <summary>
            How the line joins with the next. If null, default from the theme will be used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.LineCap">
            <summary>
            How the line ends. If null, default from the theme will be used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.PenAlign">
            <summary>
            Specifies the alignment to be used for the underline stroke. If null, default from the theme will be used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.TailArrow">
            <summary>
            Tail arrow if it has one. If null, default from the theme will be used. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyle.Width">
            <summary>
            Width of the line in EMUs (1 pt = 12700 EMUs). If null, width of the theme will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLineStyleList">
            <summary>
            Represents the line style characteristics.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLineStyleList">
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineStyleList.Add(FlexCel.Core.TLineStyle)">
            <param name="aLineStyle">Line style to add.</param>
            <summary>
            Adds a new LineStyle to the collection. Line styles must be added in order, first is "Subtle", second is "Moderate", third is "Intense"
            and there could be new definitions in newer versions of Excel.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineStyleList.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyleList.Count">
            <summary>
            Count of line styles.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLineStyleList.GetRealFillStyle(FlexCel.Core.TFormattingType,FlexCel.Core.TDrawingColor)">
            <param name="index">Index to the collection.</param>
            <param name="basicColor">Color that will be used as a base to calculate the fill style.</param>
            <summary>
            Returns the line color that results from applying the formatting type to a color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLineStyleList.Item(FlexCel.Core.TFormattingType)">
            <param name="index" />
            <summary>
            Returns the line style for a given formatting type. Currently Excel defines only 3 formatting types, but more could be added in the future.
            If you need to access a formatting type that is not defined in the <see cref="T:FlexCel.Core.TFormattingType" /> enumeration, just cast an integer to TFormattingType.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLinkedStyle">
            <summary>
            This class is used as a part of a <see cref="T:FlexCel.Core.TFlxFormat" /> class, and stores how a cell format is linked to a style.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TLinkedStyle">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TLinkedStyle</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.Assign(FlexCel.Core.TLinkedStyle)">
            <param name="newStyle">Style with the values to copy.</param>
            <summary>
            Copies a new style into this object.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.AutomaticChoose">
            <summary>
            When this property is true (the default) FlexCel will automatically choose which linked
            properties to apply depending on what changes from the base style. For example, if this style
            has a different font than the basic style, the font will be not linked, and when you change the base style it will keep the same. 
            Excel behaves this way when it adds styles. To manually choose what the format will affect, set this to none.
            This property doesn't correspond with any Excel property, and it is not stored in the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns>A deep copy of the style. (without any references in common with the original object)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>
            Returns true if obj and this object have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.GetHashCode">
            <summary>
            Returns a hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedAlignment">
            <summary>
            If true, the alignment will be linked to the parent style, and it will change when you change the style.
            If false the alignment not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose" /> is false.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedBorder">
            <summary>
            If true, the border will be linked to the parent style, and it will change when you change the style.
            If false the border will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose" /> is false.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedFill">
            <summary>
            If true, the fill pattern will be linked to the parent style, and it will change when you change the style.
            If false the fill pattern will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose" /> is false.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedFont">
            <summary>
            If true, the font will be linked to the parent style, and it will change when you change the style.
            If false the font will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose" /> is false.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedNumericFormat">
            <summary>
            If true, the numeric format will be linked to the parent style, and it will change when you change the style.
            If false the numeric format will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose" /> is false.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedProtection">
            <summary>
            If true, the protection will be linked to the parent style, and it will change when you change the style.
            If false the protection will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose" /> is false.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.SameData(FlexCel.Core.TLinkedStyle)">
            <param name="otherStyle">Style with which we want to compare.</param>
            <summary>
            Returns true if the 2 instances have the same data.
            </summary>
            <returns>True if otherStyle has the same values as this object.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TLinkOption">
            <summary>
            Specifies to which object the label is linked to.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TLinkOption.ChartTitle">
            <summary>
            This is the chart title.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.DataLabel">
            <summary>
            This is a Data Label, linked to a series or a point in the series.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.None">
            <summary>
            Not used. It means the label is not linked.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.XAxisTitle">
            <summary>
            This is the caption for the X-Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.YAxisTitle">
            <summary>
            This is the caption for the Y-Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.ZAxisTitle">
            <summary>
            This is the caption for the Z-Axis.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TListBoxSelectionType">
            <summary>
            Types of selection allowed in a listbox.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TListBoxSelectionType.Extend">
            <summary>
            The list control is allowed to have multiple items selected by holding the CTRL key and clicking on each item. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TListBoxSelectionType.Multi">
            <summary>
            The list control is allowed to have multiple items selected by clicking on each item. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TListBoxSelectionType.Single">
            <summary>
            The list control is only allowed to have one selected item. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TMalformedUrlError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.MalformedUrl" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.MalformedUrl" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TMalformedUrlError(System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aUrl">See <see cref="P:FlexCel.Core.TMalformedUrlError.Url" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TMalformedUrlError.Url">
            <summary>
            Malformed url.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TMimeWriter">
            <summary>
            A simple class used to create MIME formatted messages. While it does not provide much functionality, it gives enough to create simple multipart archives.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TMimeWriter">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TMimeWriter</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)">
            <param name="message">TextWriter where you are saving the message.</param>
            <param name="contentType">Type of the header as defined in the MIME standard, e.g. "text/plain", "text/html", etc.</param>
            <param name="contentTransferEncoding">How the part will be codified. Use base64 for binary TextWriter and quotedprintable for text.</param>
            <param name="contentLocation">The location for this resource. null if you do not want to set a location.</param>
            <param name="contentId">Content id of the resource, if you want to use it in cid: links. Null if you do not want to specify a content-id. Note that this string will not be escaped by the framework, so make sure it 
            contains valid characters. As it needs to be globally unique, normally a GUID can be a good option here.</param>
            <param name="encodingName">Name for the encoding on this part. Null means do not write an encoding. (for example in binary parts)</param>
            <summary>
            Adds the header for a part in a multipart Mime message. After calling this method, you need to write your data content into
            the TextWriter using <see cref="M:FlexCel.Core.TMimeWriter.WriteQuotedPrintable(System.IO.TextWriter,System.String)" /> or <see cref="M:FlexCel.Core.TMimeWriter.WriteBase64(System.IO.TextWriter,System.Byte[])" /> and after that always call <see cref="M:FlexCel.Core.TMimeWriter.EndPart(System.IO.TextWriter)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.CreateMultiPartMessage(System.IO.TextWriter,FlexCel.Core.TMultipartType,System.String,System.Uri)">
            <param name="message" />
            <param name="multipartType">Type of multipart for this file.</param>
            <param name="contentType">Type of the header as defined in the MIME standard, e.g. "text/plain", "text/html", etc. This is the type of the main part on a related message. Set it to null if there is no main part.</param>
            <param name="contentLocation">The location for the whole mime file. null if you do not want to set a location. for this to work in ie/opera, etc, this should be something like "file:///filename.ext"</param>
            <summary>
            Creates the headers for a multipart MIME file. This must be the first method to call in order to create a MIME file.
            After this, you need to call <see cref="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)" /> and start adding the parts of the message, and you <b>always</b>
            need to end the message by calling <see cref="M:FlexCel.Core.TMimeWriter.EndMultiPartMessage(System.IO.TextWriter)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.EndMultiPartMessage(System.IO.TextWriter)">
            <param name="message" />
            <summary>
            Call this method after the last call to EndPart, to finish the MIME message.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.EndPart(System.IO.TextWriter)">
            <param name="message">TextWriter where you are saving the message.</param>
            <summary>
            Ends a MIME part started with <see cref="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.QEncode(System.String,FlexCel.Core.TQEncodeMetaInfo)">
            <param name="s">String to encode</param>
            <param name="addMetaInfo">Defines if to add the string  "=?charset?encoding?" will be appended at the begining, and "?=" at the end.</param>
            <summary>
            Returns the Q-encode of a string, used in the MIME Headers.  //RFC 2047
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.WriteBase64(System.IO.TextWriter,System.Byte[])">
            <param name="Data">TextWriter where we will write the data.</param>
            <param name="s">String to Encode.</param>
            <summary>
            Writes the base64 encoding of a byte array, as defined in RFC 2045 section 6.8
            This method does not keep the state, so all binary data must be supplied at once.
            As an alternative you could use <see cref="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)" />, but this method
            avoids creating a temporary string, and then doubling the memory needed for the encoding.
            This method will also correctly split the string at 76 characters, while Convert.ToBase64 in .NET 1.1 will not. (2.0 added this support)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.WriteQuotedPrintable(System.IO.TextWriter,System.String)">
            <param name="Data">TextWriter where we will write the data.</param>
            <param name="s">String to Encode.</param>
            <summary>
            Writes the Quoted Printable encoding of a string, as defined in RFC 2045 section 6.7
            This method keeps state and breaks the line  every time it is longer than 76 characters. 
            The state is reset each time <see cref="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)" /> is called.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TMultipartType">
            <summary>
            Different ways to define a multipart arcvhive.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Alternative">
            <summary>
            Parts inside this container ara an alternative one form the other. For example, a message could be sent in HTML and plain Text, once inside a
            different MIME part, and the mail reader should chose the best alternative of the parts to display.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Digest">
            <summary>
            A compilation of messages, used in forwarded emails.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Mixed">
            <summary>
            Parts inside this MIME container are not related, e.g. different attachments.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Related">
            <summary>
            Parts inside this container are related, for example this message could contain an HTML file and its external images.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Signed">
            <summary>
            A part containing files and one signature.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TNoFill">
            <summary>
            There is no fill associated with the shapes.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TNoFill">
            <summary>
            Creates a new TNoFill instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TNoFill.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TNoFill.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TObjectProperties">
            <summary>
            Holds the properties for an object.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TObjectProperties">
            <summary>
            Creates a new empty instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TObjectProperties(FlexCel.Core.TClientAnchor)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TObjectProperties(FlexCel.Core.TClientAnchor,System.String)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aShapeName">Shape name for the object, as it will appear on the names combo box.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TObjectProperties(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TObjectTextProperties,System.Boolean,System.Boolean)">
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aShapeName">Name of the shape, as it appears on the names combobox. Set it to null to not add an imagename.</param>
            <param name="aTextProperties">Propertied of the text in the object.</param>
            <param name="aLock">Specifies if the object is locked.</param>
            <param name="aAutoSize">If true, the object will autosize to hold the text.</param>
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TObjectProperties.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TObjectProperties.EqualValues(FlexCel.Core.TObjectProperties,FlexCel.Core.TObjectProperties)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectProperties.FAutoSize">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectProperties.FCheckboxState">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectProperties.FHidden">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectProperties.FIs3D">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectProperties.FLinkedFmla">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectProperties.FText">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectProperties.FTextProperties">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TObjectProperties.ShapeBorder">
            <summary>
            Linestyle for the comment.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TObjectProperties.ShapeFill">
            <summary>
            Fill style used to fill the background of the comment. If you are using a solid color, only Indexed colors or RGB are allowed here, if you specify something else,
            the color will be converted to RGB. It might be a gradient fill or a texture too. If null, default fill style will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TObjectTextProperties">
            <summary>
            Specifies properties for the text in an autoshape or object.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TObjectTextProperties">
            <summary>
            Creates a new instance and sets its values to defaults.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TObjectTextProperties(System.Boolean,FlexCel.Core.THFlxAlignment,FlexCel.Core.TVFlxAlignment,FlexCel.Core.TTextRotation)">
            <param name="aLockText" />
            <param name="aHAlignment" />
            <param name="aVAlignment" />
            <param name="aTextRotation" />
            <summary>
            Creates a new instance and sets its values.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TObjectTextProperties.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TObjectTextProperties.EqualValues(FlexCel.Core.TObjectTextProperties,FlexCel.Core.TObjectTextProperties)">
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TObjectTextProperties.HAlignment">
            <summary>
            Horizontal alignment for the text in the object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TObjectTextProperties.LockText">
            <summary>
            Specifies if the text of the object is locked.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TObjectTextProperties.TextRotation">
            <summary>
            Determines how the text is orientated in the object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TObjectTextProperties.VAlignment">
            <summary>
            Horizontal alignment for the text in the object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TObjectType">
            <summary>
            A type of object. Do not confuse this with a type of shape ( <see cref="T:FlexCel.Core.TShapeType" /> ) This does not describe the shape
            form (like if it is a rectangle or a circle) but the shape kind (for example if it is a comment, an image or an autoshape)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Arc">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Button">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Chart">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.CheckBox">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.ComboBox">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Comment">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.DialogBox">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.EditBox">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Group">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.GroupBox">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Label">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Line">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.ListBox">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.MicrosoftOfficeDrawing">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.OptionButton">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Oval">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Picture">
            <summary>An image inserted on Excel</summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Polygon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Rectangle">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.ScrollBar">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Spinner">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Text">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TObjectType.Undefined">
            <summary>Unknown object type.</summary>
        </member>
        <member name="T:FlexCel.Core.TOperator">
            <summary>
            Operators that can be found inside a formula
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TOperator.Add">
            <summary>
            +
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Concat">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Div">
            <summary>
            /
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.EQ">
            <summary>
            =
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.GE">
            <summary>
            greater or equal
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.GT">
            <summary>
            greater than
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.LE">
            <summary>
            less or equal
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.LT">
            <summary>
            less than
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Mul">
            <summary>
            *
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.NE">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Neg">
            <summary>
            -
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Nop">
            <summary>
            No operator
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Percent">
            <summary>
            %
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Power">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Sub">
            <summary>
            -
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.UPlus">
            <summary>
            Unary plus.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPanePosition">
            <summary>
            Position on a pane when window is split
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPanePosition.LowerLeft">
            <summary>
            Lower-left corner.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPanePosition.LowerRight">
            <summary>
            Lower-right corner.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPanePosition.UpperLeft">
            <summary>
            Upper left corner. This is the default when you have only one pane.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPanePosition.UpperRight">
            <summary>
            Upper-right corner.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPaperDimensions">
            <summary>
            Dimensions of an Excel paper
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPaperDimensions(FlexCel.Core.TPaperSize)">
            <param name="PaperSize">Excel standard papersize.</param>
            <summary>
            Creates a new TPaperDimensions instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPaperDimensions(System.String,System.Double,System.Double)">
            <param name="aPaperName">A string identifying the paper name</param>
            <param name="aWidth">Width in inches/100</param>
            <param name="aHeight">Height in inches/100</param>
            <summary>
            Creates a new TPaperDimensions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPaperDimensions.Height">
            <summary>
            Paper height in inches/100
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPaperDimensions.in100(System.Double)">
            <param name="v">Value in inches/100</param>
            <summary>
            Converts inches/100 to millimeters
            </summary>
            <returns>Value in millimeters</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPaperDimensions.mm(System.Double)">
            <param name="v">Value in millimeters</param>
            <summary>
            Converts millimeters to inches/100
            </summary>
            <returns>Value in inches/100</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPaperDimensions.PaperName">
            <summary>
            Paper Name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPaperDimensions.SizeInPoints">
            <summary>
            The size in points (inches/72)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPaperDimensions.Width">
            <summary>
            Paper width in inches/100
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPaperSize">
            <summary>
            Pre-defined Page sizes. For Printer specific page-sizes, see <see cref="T:FlexCel.Core.TPrinterDriverSettings" />
            Note that a printer specific page size might have a value that is <i>not</i> on this enumeration.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A2">
            <summary>A2 - 420mm x 594mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3">
            <summary>A3 - 297mm x 420mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3Extra">
            <summary>A3 Extra - 322mm x 445mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3ExtraTransverse">
            <summary>A3 Extra Transverse - 322mm x 445mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3Rotated">
            <summary>A3 Rotated - 420mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3Transverse">
            <summary>A3 Transverse - 297mm x 420mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4">
            <summary>A4 - 210mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Extra">
            <summary>A4 Extra - 235mm x 322mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Plus">
            <summary>A4 Plus - 210mm x 330mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Rotated">
            <summary>A4 Rotated - 297mm x 210mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4small">
            <summary>A4 small - 210mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Transverse">
            <summary>A4 Transverse - 210mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5">
            <summary>A5 - 148mm x 210mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5Extra">
            <summary>A5 Extra - 174mm x 235mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5Rotated">
            <summary>A5 Rotated - 210mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5Transverse">
            <summary>A5 Transverse - 148mm x 210mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A6">
            <summary>A6 - 105mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A6Rotated">
            <summary>A6 Rotated - 148mm x 105mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_ISO">
            <summary>B4 (ISO) - 250mm x 353mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_ISO_2">
            <summary>B4 (ISO) - 250mm x 353mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_JIS">
            <summary>B4 (JIS) - 257mm x 364mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_JIS_Rotated">
            <summary>B4 (JIS) Rotated - 364mm x 257mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_ISO">
            <summary>B5 (ISO) - 176mm x 250mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_ISO_Extra">
            <summary>B5 (ISO) Extra - 201mm x 276mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_JIS">
            <summary>B5 (JIS) - 182mm x 257mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_JIS_Rotated">
            <summary>B5 (JIS) Rotated - 257mm x 182mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_JIS_Transverse">
            <summary>B5 (JIS) Transverse - 182mm x 257mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B6_ISO">
            <summary>B6 (ISO) - 125mm x 176mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B6_JIS">
            <summary>B6 (JIS) - 128mm x 182mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B6_JIS_Rotated">
            <summary>B6 (JIS) Rotated - 182mm x 128mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.C">
            <summary>C - 17"" x 22""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.D">
            <summary>D - 22"" x 34""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.DblJapanesePostcard">
            <summary>Dbl. Japanese Postcard - 200mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.DblJapPostcardRot">
            <summary>Dbl. Jap. Postcard Rot. - 148mm x 200mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.E">
            <summary>E - 34"" x 44""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope10">
            <summary>Envelope #10 - 41/8"" x 91/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope11">
            <summary>Envelope #11 - 41/2"" x 103/8""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope12">
            <summary>Envelope #12 - 43/4"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope14">
            <summary>Envelope #14 - 5"" x 111/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope9">
            <summary>Envelope #9 - 37/8"" x 87/8""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC3">
            <summary>Envelope C3 - 324mm x 458mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC4">
            <summary>Envelope C4 - 229mm x 324mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC5">
            <summary>Envelope C5 - 162mm x 229mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC6">
            <summary>Envelope C6 - 114mm x 162mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC6_C5">
            <summary>Envelope C6/C5 - 114mm x 229mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeDL">
            <summary>Envelope DL - 110mm x 220mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeInvite">
            <summary>Envelope Invite - 220mm x 220mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeItaly">
            <summary>Envelope Italy - 110mm x 230mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeMonarch">
            <summary>Envelope Monarch - 37/8"" x 71/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Executive">
            <summary>Executive - 71/4"" x 101/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Folio">
            <summary>Folio - 81/2"" x 13""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.GermanLegalFanfold">
            <summary>German Legal Fanfold - 81/2"" x 13""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.GermanStdFanfold">
            <summary>German Std. Fanfold - 81/2"" x 12""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.JapanesePostcard">
            <summary>Japanese Postcard - 100mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.JapanesePostcardRot">
            <summary>Japanese Postcard Rot. - 148mm x 100mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Ledger">
            <summary>Ledger - 17"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Legal">
            <summary>Legal - 81/2"" x 14""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LegalExtra">
            <summary>Legal Extra - 91/2"" x 15""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Letter">
            <summary>Letter - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterExtra">
            <summary>Letter Extra - 91/2"" x 12""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterExtraTransv">
            <summary>Letter Extra Transv. - 91/2"" x 12""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterPlus">
            <summary>Letter Plus - 812"" x 1211/16""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterRotated">
            <summary>Letter Rotated - 11"" x 81/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Lettersmall">
            <summary>Letter small - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterTransverse">
            <summary>Letter Transverse - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Note">
            <summary>Note - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Quarto">
            <summary>Quarto - 215mm x 275mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s10x11">
            <summary>10x11 - 10"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s10x14">
            <summary>10x14 - 10"" x 14""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s11x17">
            <summary>11x17 - 11"" x 17""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s12x11">
            <summary>12x11 - 12"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s15x11">
            <summary>15x11 - 15"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s63_4Envelope">
            <summary>63/4 Envelope - 35/8"" x 61/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s9x11">
            <summary>9x11 - 9"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Statement">
            <summary>Statement - 51/2"" x 81/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.SuperA_A4">
            <summary>Super A/A4 - 227mm x 356mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.SuperB_A3">
            <summary>Super B/A3 - 305mm x 487mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Tabloid">
            <summary>Tabloid - 11"" x 17""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.TabloidExtra">
            <summary>Tabloid Extra - 1111/16"" x 18""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Undefined">
            <summary>Not defined.</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.USStandardFanfold">
            <summary>US Standard Fanfold - 147/8"" x 11""</summary>
        </member>
        <member name="T:FlexCel.Core.TPathShadeType">
            <summary>
            Enumerates the different gradient modes for a Path gradient.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPathShadeType.Circle">
            <summary>
            Gradient follows a circular path.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPathShadeType.Rect">
            <summary>
            Gradient follows a rectangular path.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPathShadeType.Shape">
            <summary>
            Gradient follows the shape.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPatternFill">
            <summary>
            Shapes are filled with a texture.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPatternFill(FlexCel.Core.TDrawingColor,FlexCel.Core.TDrawingColor,FlexCel.Core.TDrawingPattern)">
            <param name="aFgColor" />
            <param name="aBgColor" />
            <param name="aPattern" />
            <summary>
            Creates a new Pattern fill.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPatternFill.BgColor">
            <summary>
            Background color of a Pattern fill. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPatternFill.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPatternFill.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPatternFill.FgColor">
            <summary>
             Foreground color of a pattern fill.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPatternFill.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPatternFill.Pattern">
            <summary>
            Type of hatching.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPdfCorruptFontInFontFolderError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfCorruptFontInFontFolder" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfCorruptFontInFontFolder" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPdfCorruptFontInFontFolderError(System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TPdfCorruptFontInFontFolderError.FileName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfCorruptFontInFontFolderError.FileName">
            <summary>
            Font file that FlexCel couldn't parse.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPdfFauxBoldOrItalicsError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfFauxBoldOrItalics" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfFauxBoldOrItalics" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPdfFauxBoldOrItalicsError(System.String,System.String,FlexCel.Core.TUIFontStyle)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFontName">See <see cref="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.FontName" /></param>
            <param name="aStyle">See <see cref="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.Style" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.FontName">
            <summary>
            Name of the font that doesn't contain Italics or bold definition.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.Style">
            <summary>
            Style missing from the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPdfFontLicenseDoesntAllowEmbeddingError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfFontLicenseDoesntAllowEmbedding" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfFontLicenseDoesntAllowEmbedding" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPdfFontLicenseDoesntAllowEmbeddingError(System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFontName">See <see cref="P:FlexCel.Core.TPdfFontLicenseDoesntAllowEmbeddingError.FontName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfFontLicenseDoesntAllowEmbeddingError.FontName">
            <summary>
            Font whose license doesn't allow embedding.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPdfFontNotFoundError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfFontNotFound" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfFontNotFound" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPdfFontNotFoundError(System.String,System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFontName">See <see cref="P:FlexCel.Core.TPdfFontNotFoundError.FontName" /></param>
            <param name="aReplacementFontName">See <see cref="P:FlexCel.Core.TPdfFontNotFoundError.ReplacementFontName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfFontNotFoundError.FontName">
            <summary>
            Font that was not found.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfFontNotFoundError.ReplacementFontName">
            <summary>
            Font that was used to replace <see cref="P:FlexCel.Core.TPdfFontNotFoundError.FontName" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPdfGlyphNotInFontError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfGlyphNotInFont" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfGlyphNotInFont" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPdfGlyphNotInFontError(System.String,System.String,System.Int64)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFontName">See <see cref="P:FlexCel.Core.TPdfGlyphNotInFontError.FontName" /></param>
            <param name="aMissingChar">See <see cref="P:FlexCel.Core.TPdfGlyphNotInFontError.MissingChar" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfGlyphNotInFontError.FontName">
            <summary>
            Font that doesn't contain the character.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfGlyphNotInFontError.MissingChar">
            <summary>
            Character missing in the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPdfUsedFallbackFontError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfUsedFallbackFont" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfUsedFallbackFont" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPdfUsedFallbackFontError(System.String,System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aOriginalFontName">See <see cref="P:FlexCel.Core.TPdfUsedFallbackFontError.OriginalFontName" /></param>
            <param name="aSubstitutedFontName">See <see cref="P:FlexCel.Core.TPdfUsedFallbackFontError.SubstitutedFontName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfUsedFallbackFontError.OriginalFontName">
            <summary>
            Font that should be used, but that doesn't contain the needed characters.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPdfUsedFallbackFontError.SubstitutedFontName">
            <summary>
            Fallback font that substituted <see cref="P:FlexCel.Core.TPdfUsedFallbackFontError.OriginalFontName" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPenAlignment">
            <summary>
            Specifies the alignment to be used for the underline stroke. 
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPenAlignment.Center">
            <summary>
            Center pen (line drawn at center of path stroke).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPenAlignment.Inset">
            <summary>
            Inset pen (the pen is aligned on the inside of the edge of the path). 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPieChartOptions">
            <summary>
            Options specific for a Pie chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPieChartOptions(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,FlexCel.Core.ChartLineOptions,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TDataLabel)">
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aFirstSliceAngle">Angle of the first slice in degrees. It can go from 0 to 359.</param>
            <param name="aDonutRadius">Radius of the center of the donut in Percet. 0 Means a Pie without hole.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aLeaderLines">True if there are lines from the slices to the labels.</param>
            <param name="aLeaderLineStyle">Line style for the leader lines, only has meaning if <see cref="P:FlexCel.Core.TPieChartOptions.LeaderLines" /> is true. This value will be copied.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
            <summary>
            Creates a new TPieChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.DonutRadius">
            <summary>
            Radius of the center of the donut in Percet. 0 Means a Pie without hole.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.FirstSliceAngle">
            <summary>
            Angle of the first slice in degrees. It can go from 0 to 359.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.HasShadow">
            <summary>
            True if the chart lines have shadows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.LeaderLines">
            <summary>
            True if there are lines from the slices to the labels.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.LeaderLineStyle">
            <summary>
            Line style for the leader lines, only has smeaning if <see cref="P:FlexCel.Core.TPieChartOptions.LeaderLines" /> is true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPitchFamily">
            <summary>
            Pitch family for a font.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.DEFAULT_PITCH__DECORATIVE_FONT_FAMILY">
            <summary>
            DEFAULT PITCH + DECORATIVE FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.DEFAULT_PITCH__MODERN_FONT_FAMILY">
            <summary>
            DEFAULT PITCH + MODERN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.DEFAULT_PITCH__ROMAN_FONT_FAMILY">
            <summary>
            DEFAULT PITCH + ROMAN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.DEFAULT_PITCH__SCRIPT_FONT_FAMILY">
            <summary>
            DEFAULT PITCH + SCRIPT FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.DEFAULT_PITCH__SWISS_FONT_FAMILY">
            <summary>
            DEFAULT PITCH + SWISS FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.DEFAULT_PITCH__UNKNOWN_FONT_FAMILY">
            <summary>
            DEFAULT PITCH + UNKNOWN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.FIXED_PITCH__DECORATIVE_FONT_FAMILY">
            <summary>
            FIXED PITCH + DECORATIVE FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.FIXED_PITCH__MODERN_FONT_FAMILY">
            <summary>
            FIXED PITCH + MODERN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.FIXED_PITCH__ROMAN_FONT_FAMILY">
            <summary>
            FIXED PITCH + ROMAN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.FIXED_PITCH__SCRIPT_FONT_FAMILY">
            <summary>
            FIXED PITCH + SCRIPT FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.FIXED_PITCH__SWISS_FONT_FAMILY">
            <summary>
            FIXED PITCH + SWISS FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.FIXED_PITCH__UNKNOWN_FONT_FAMILY">
            <summary>
            FIXED PITCH + UNKNOWN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.VARIABLE_PITCH__DECORATIVE_FONT_FAMILY">
            <summary>
            VARIABLE PITCH + DECORATIVE FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.VARIABLE_PITCH__MODERN_FONT_FAMILY">
            <summary>
            VARIABLE PITCH + MODERN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.VARIABLE_PITCH__ROMAN_FONT_FAMILY">
            <summary>
            VARIABLE PITCH + ROMAN FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.VARIABLE_PITCH__SCRIPT_FONT_FAMILY">
            <summary>
            VARIABLE PITCH + SCRIPT FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.VARIABLE_PITCH__SWISS_FONT_FAMILY">
            <summary>
            VARIABLE PITCH + SWISS FONT FAMILY 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPitchFamily.VARIABLE_PITCH__UNKNOWN_FONT_FAMILY">
            <summary>
            VARIABLE PITCH + UNKNOWN FONT FAMILY 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPlotEmptyCells">
            <summary>
            Defines how empty cells will be plotted in the chart.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPlotEmptyCells.Interpolated">
            <summary>
            The cell will be plotted with value interpolated between its nearest points.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPlotEmptyCells.NotPlotted">
            <summary>
            The cell will not be plotted. There will be a gap in the chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPlotEmptyCells.Zero">
            <summary>
            The cell will be plotted with value = 0.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPoint">
            <summary>
            Represents a point on X,Y coordinates. We used instead of System.Drawing.Point because we do not want references to System.Drawing 
            (because .NET 3.0 applications do not need GDI+)
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPoint(System.Int32,System.Int32)">
            <param name="aX">Coordinates for the X value.</param>
            <param name="aY">Coordinates for the Y value.</param>
            <summary>
            Creates a new point.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPoint.Equals(System.Object)">
            <param name="obj" />
            <summary>
            True if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPoint.GetHashCode">
            <summary>
            Hash code for the point.
            </summary>
            <returns>hashcode.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPoint.op_Equality(FlexCel.Core.TPoint,FlexCel.Core.TPoint)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPoint.op_Implicit(FlexCel.Core.TPoint)~System.Drawing.Point">
            <param name="pt" />
            <summary>
            Converts implicitly between a System.Drawing.Point and a TPoint
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPoint.op_Implicit(System.Drawing.Point)~FlexCel.Core.TPoint">
            <param name="pt" />
            <summary>
            Converts implicitly between a System.Drawing.Point and a TPoint
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPoint.op_Inequality(FlexCel.Core.TPoint,FlexCel.Core.TPoint)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPoint.X">
            <summary>
            X coord.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPoint.Y">
            <summary>
            Y coord.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPointF">
            <summary>
            Platform independent point
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPointF(System.Double,System.Double)">
            <param name="aX">X coord.</param>
            <param name="aY">Y coord.</param>
            <summary>
            Creates a new Point.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPointF.Empty">
            <summary>
            Returns a TPointF with X = 0 and Y = 0.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPointF.Equals(System.Object)">
            <param name="obj" />
            <summary>
            True if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPointF.GetHashCode">
            <summary>
            Hash code for the point.
            </summary>
            <returns>hashcode.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPointF.op_Equality(FlexCel.Core.TPointF,FlexCel.Core.TPointF)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPointF.op_Implicit(FlexCel.Core.TPointF)~System.Drawing.PointF">
            <param name="p" />
            <summary>
            Converts between a PointF and a TPointF
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPointF.op_Implicit(System.Drawing.PointF)~FlexCel.Core.TPointF">
            <param name="p" />
            <summary>
            Converts between a System.Drawing.PointF and a TPointF
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPointF.op_Inequality(FlexCel.Core.TPointF,FlexCel.Core.TPointF)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPointF.ToString">
            <summary>
            String with both coordinates.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPointF.X">
            <summary>
            X coord.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TPointF.Y">
            <summary>
            Y coord.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPresetColor">
            <summary>
            Preset colors.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPresetColor.AliceBlue">
            <summary>
            Specifies a color with RGB value (240,248,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.AntiqueWhite">
            <summary>
            Specifies a color with RGB value (250,235,215)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Aqua">
            <summary>
            Specifies a color with RGB value (0,255,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Aquamarine">
            <summary>
            Specifies a color with RGB value (127,255,212)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Azure">
            <summary>
            Specifies a color with RGB value (240,255,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Beige">
            <summary>
            Specifies a color with RGB value (245,245,220)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Bisque">
            <summary>
            Specifies a color with RGB value (255,228,196)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Black">
            <summary>
            Specifies a color with RGB value (0,0,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.BlanchedAlmond">
            <summary>
            Specifies a color with RGB value (255,235,205)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Blue">
            <summary>
            Specifies a color with RGB value (0,0,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.BlueViolet">
            <summary>
            Specifies a color with RGB value (138,43,226)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Brown">
            <summary>
            Specifies a color with RGB value (165,42,42)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.BurlyWood">
            <summary>
            Specifies a color with RGB value (222,184,135)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.CadetBlue">
            <summary>
            Specifies a color with RGB value (95,158,160)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Chartreuse">
            <summary>
            Specifies a color with RGB value (127,255,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Chocolate">
            <summary>
            Specifies a color with RGB value (210,105,30)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Coral">
            <summary>
            Specifies a color with RGB value (255,127,80)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.CornflowerBlue">
            <summary>
            Specifies a color with RGB value (100,149,237)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Cornsilk">
            <summary>
            Specifies a color with RGB value (255,248,220)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Crimson">
            <summary>
            Specifies a color with RGB value (220,20,60)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Cyan">
            <summary>
            Specifies a color with RGB value (0,255,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DeepPink">
            <summary>
            Specifies a color with RGB value (255,20,147)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DeepSkyBlue">
            <summary>
            Specifies a color with RGB value (0,191,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DimGray">
            <summary>
            Specifies a color with RGB value (105,105,105)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkBlue">
            <summary>
            Specifies a color with RGB value (0,0,139)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkCyan">
            <summary>
            Specifies a color with RGB value (0,139,139)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkGoldenrod">
            <summary>
            Specifies a color with RGB value (184,134,11)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkGray">
            <summary>
            Specifies a color with RGB value (169,169,169)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkGreen">
            <summary>
            Specifies a color with RGB value (0,100,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkKhaki">
            <summary>
            Specifies a color with RGB value (189,183,107)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkMagenta">
            <summary>
            Specifies a color with RGB value (139,0,139)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkOliveGreen">
            <summary>
            Specifies a color with RGB value (85,107,47)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkOrange">
            <summary>
            Specifies a color with RGB value (255,140,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkOrchid">
            <summary>
            Specifies a color with RGB value (153,50,204)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkRed">
            <summary>
            Specifies a color with RGB value (139,0,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkSalmon">
            <summary>
            Specifies a color with RGB value (233,150,122)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkSeaGreen">
            <summary>
            Specifies a color with RGB value (143,188,139)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkSlateBlue">
            <summary>
            Specifies a color with RGB value (72,61,139)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkSlateGray">
            <summary>
            Specifies a color with RGB value (47,79,79)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkTurquoise">
            <summary>
            Specifies a color with RGB value (0,206,209)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DkViolet">
            <summary>
            Specifies a color with RGB value (148,0,211)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.DodgerBlue">
            <summary>
            Specifies a color with RGB value (30,144,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Firebrick">
            <summary>
            Specifies a color with RGB value (178,34,34)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.FloralWhite">
            <summary>
            Specifies a color with RGB value (255,250,240)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.ForestGreen">
            <summary>
            Specifies a color with RGB value (34,139,34)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Fuchsia">
            <summary>
            Specifies a color with RGB value (255,0,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Gainsboro">
            <summary>
            Specifies a color with RGB value (220,220,220)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.GhostWhite">
            <summary>
            Specifies a color with RGB value (248,248,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Gold">
            <summary>
            Specifies a color with RGB value (255,215,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Goldenrod">
            <summary>
            Specifies a color with RGB value (218,165,32)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Gray">
            <summary>
            Specifies a color with RGB value (128,128,128)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Green">
            <summary>
            Specifies a color with RGB value (0,128,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.GreenYellow">
            <summary>
            Specifies a color with RGB value (173,255,47)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Honeydew">
            <summary>
            Specifies a color with RGB value (240,255,240)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.HotPink">
            <summary>
            Specifies a color with RGB value (255,105,180)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.IndianRed">
            <summary>
            Specifies a color with RGB value (205,92,92)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Indigo">
            <summary>
            Specifies a color with RGB value (75,0,130)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Ivory">
            <summary>
            Specifies a color with RGB value (255,255,240)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Khaki">
            <summary>
            Specifies a color with RGB value (240,230,140)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Lavender">
            <summary>
            Specifies a color with RGB value (230,230,250)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LavenderBlush">
            <summary>
            Specifies a color with RGB value (255,240,245)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LawnGreen">
            <summary>
            Specifies a color with RGB value (124,252,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LemonChiffon">
            <summary>
            Specifies a color with RGB value (255,250,205)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Lime">
            <summary>
            Specifies a color with RGB value (0,255,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LimeGreen">
            <summary>
            Specifies a color with RGB value (50,205,50)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Linen">
            <summary>
            Specifies a color with RGB value (250,240,230)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtBlue">
            <summary>
            Specifies a color with RGB value (173,216,230)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtCoral">
            <summary>
            Specifies a color with RGB value (240,128,128)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtCyan">
            <summary>
            Specifies a color with RGB value (224,255,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtGoldenrodYellow">
            <summary>
            Specifies a color with RGB value (250,250,120)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtGray">
            <summary>
            Specifies a color with RGB value (211,211,211)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtGreen">
            <summary>
            Specifies a color with RGB value (144,238,144)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtPink">
            <summary>
            Specifies a color with RGB value (255,182,193)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtSalmon">
            <summary>
            Specifies a color with RGB value (255,160,122)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtSeaGreen">
            <summary>
            Specifies a color with RGB value (32,178,170)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtSkyBlue">
            <summary>
            Specifies a color with RGB value (135,206,250)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtSlateGray">
            <summary>
            Specifies a color with RGB value (119,136,153)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtSteelBlue">
            <summary>
            Specifies a color with RGB value (176,196,222)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.LtYellow">
            <summary>
            Specifies a color with RGB value (255,255,224)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Magenta">
            <summary>
            Specifies a color with RGB value (255,0,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Maroon">
            <summary>
            Specifies a color with RGB value (128,0,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedAquamarine">
            <summary>
            Specifies a color with RGB value (102,205,170)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedBlue">
            <summary>
            Specifies a color with RGB value (0,0,205)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedOrchid">
            <summary>
            Specifies a color with RGB value (186,85,211)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedPurple">
            <summary>
            Specifies a color with RGB value (147,112,219)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedSeaGreen">
            <summary>
            Specifies a color with RGB value (60,179,113)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedSlateBlue">
            <summary>
            Specifies a color with RGB value (123,104,238)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedSpringGreen">
            <summary>
            Specifies a color with RGB value (0,250,154)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedTurquoise">
            <summary>
            Specifies a color with RGB value (72,209,204)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MedVioletRed">
            <summary>
            Specifies a color with RGB value (199,21,133)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MidnightBlue">
            <summary>
            Specifies a color with RGB value (25,25,112)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MintCream">
            <summary>
            Specifies a color with RGB value (245,255,250)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.MistyRose">
            <summary>
            Specifies a color with RGB value (255,228,225)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Moccasin">
            <summary>
            Specifies a color with RGB value (255,228,181)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.NavajoWhite">
            <summary>
            Specifies a color with RGB value (255,222,173)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Navy">
            <summary>
            Specifies a color with RGB value (0,0,128)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.None">
            <summary>
            Color is not specified.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.OldLace">
            <summary>
            Specifies a color with RGB value (253,245,230)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Olive">
            <summary>
            Specifies a color with RGB value (128,128,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.OliveDrab">
            <summary>
            Specifies a color with RGB value (107,142,35)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Orange">
            <summary>
            Specifies a color with RGB value (255,165,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.OrangeRed">
            <summary>
            Specifies a color with RGB value (255,69,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Orchid">
            <summary>
            Specifies a color with RGB value (218,112,214)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.PaleGoldenrod">
            <summary>
            Specifies a color with RGB value (238,232,170)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.PaleGreen">
            <summary>
            Specifies a color with RGB value (152,251,152)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.PaleTurquoise">
            <summary>
            Specifies a color with RGB value (175,238,238)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.PaleVioletRed">
            <summary>
            Specifies a color with RGB value (219,112,147)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.PapayaWhip">
            <summary>
            Specifies a color with RGB value (255,239,213)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.PeachPuff">
            <summary>
            Specifies a color with RGB value (255,218,185)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Peru">
            <summary>
            Specifies a color with RGB value (205,133,63)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Pink">
            <summary>
            Specifies a color with RGB value (255,192,203)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Plum">
            <summary>
            Specifies a color with RGB value (221,160,221)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.PowderBlue">
            <summary>
            Specifies a color with RGB value (176,224,230)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Purple">
            <summary>
            Specifies a color with RGB value (128,0,128)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Red">
            <summary>
            Specifies a color with RGB value (255,0,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.RosyBrown">
            <summary>
            Specifies a color with RGB value (188,143,143)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.RoyalBlue">
            <summary>
            Specifies a color with RGB value (65,105,225)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SaddleBrown">
            <summary>
            Specifies a color with RGB value (139,69,19)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Salmon">
            <summary>
            Specifies a color with RGB value (250,128,114)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SandyBrown">
            <summary>
            Specifies a color with RGB value (244,164,96)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SeaGreen">
            <summary>
            Specifies a color with RGB value (46,139,87)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SeaShell">
            <summary>
            Specifies a color with RGB value (255,245,238)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Sienna">
            <summary>
            Specifies a color with RGB value (160,82,45)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Silver">
            <summary>
            Specifies a color with RGB value (192,192,192)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SkyBlue">
            <summary>
            Specifies a color with RGB value (135,206,235)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SlateBlue">
            <summary>
            Specifies a color with RGB value (106,90,205)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SlateGray">
            <summary>
            Specifies a color with RGB value (112,128,144)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Snow">
            <summary>
            Specifies a color with RGB value (255,250,250)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SpringGreen">
            <summary>
            Specifies a color with RGB value (0,255,127)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.SteelBlue">
            <summary>
            Specifies a color with RGB value (70,130,180)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Tan">
            <summary>
            Specifies a color with RGB value (210,180,140)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Teal">
            <summary>
            Specifies a color with RGB value (0,128,128)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Thistle">
            <summary>
            Specifies a color with RGB value (216,191,216)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Tomato">
            <summary>
            Specifies a color with RGB value (255,99,71)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Turquoise">
            <summary>
            Specifies a color with RGB value (64,224,208)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Violet">
            <summary>
            Specifies a color with RGB value (238,130,238)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Wheat">
            <summary>
            Specifies a color with RGB value (245,222,179)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.White">
            <summary>
            Specifies a color with RGB value (255,255,255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.WhiteSmoke">
            <summary>
            Specifies a color with RGB value (245,245,245)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.Yellow">
            <summary>
            Specifies a color with RGB value (255,255,0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPresetColor.YellowGreen">
            <summary>
            Specifies a color with RGB value (154,205,50)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPrinterDriverSettings">
            <summary>
            Printer specific settings. It is a byte array with a Win32 DEVMODE struct.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TPrinterDriverSettings(System.Byte[])">
            <param name="aData" />
            <summary>
            Creates a new instance of a TPrinterDriverSettings class, with a COPY of aData
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if two instances have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.GetData">
            <summary>
            The current printer data as a byte stream. The first 2 bytes are the operating system (0=windows) and
            the rest is a Win32 DEVMODE struct.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.op_Equality(FlexCel.Core.TPrinterDriverSettings,FlexCel.Core.TPrinterDriverSettings)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both objects are equal.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.op_Inequality(FlexCel.Core.TPrinterDriverSettings,FlexCel.Core.TPrinterDriverSettings)">
            <param name="s1" />
            <param name="s2" />
            <summary>
            Returns true if both objects do not have the same value.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TPrintOptions">
            <summary>
            How the sheet should be printed. You can mix value together by and'ing and or'ing the flags. 
            See the example to see how to set or clear one specific value of the enumeration.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.Draft">
            <summary>
            1= Draft quality
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.LeftToRight">
            <summary>
            Print over, then down
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.NoColor">
            <summary>
            1= Black and white
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.None">
            <summary>
            All options cleared.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.NoOrient">
            <summary>
            1=orientation not set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.NoPls">
            <summary>
            if 1, then PaperSize, Scale, Res, VRes, Copies, and Landscape data have not been obtained from the printer, so they are not valid.
            MAKE SURE YOU MAKE THIS BIT = 0 *BEFORE* CHANGING ANY OTHER OPTION. THEY WILL NOT CHANGE IF THIS IS NOT SET.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.Notes">
            <summary>
            1= Print Notes
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.Orientation">
            <summary>
            0= landscape, 1=portrait. You can change this by using xls.PrintLandscape.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.UsePage">
            <summary>
            1=use custom starting page number.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPropertyId">
            <summary>
            Standard properties of an ole file. There are two different sets of properties,
            the standard ones (properties that exist for any file) and the extended ones (properties that exist
            for Ms Office documents)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Author">
            <summary>Author. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Bytes">
            <summary>Number of bytes. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Category">
            <summary>A text string typed by the user that indicates what category the file belongs to (memo, proposal, and so on). It is useful for finding files of same type. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Comments">
            <summary>Comments. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Company">
            <summary>Company name. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.CreateTimeDate">
            <summary>Date of created in UTC time. (Standard property).
            <b>Note:</b> Unless you set this property explicitly, FlexCel will save the current time as the
            creation date. If you are creating a new file this is what you want. But if you are modifying
            and existing file and want to preserve the original creation date, you need to explicitly set ths property.</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.HeadingPairs">
            <summary>Internally used property indicating the grouping of different document parts and the number of items in each group. The titles of the document parts are stored in the TitlesofParts property. The HeadingPairs property is stored as a vector of variants, in repeating pairs of VT_LPSTR (or VT_LPWSTR) and VT_I4 values. The VT_LPSTR value represents a heading name, and the VT_I4 value indicates the count of document parts under that heading. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.HiddenSlides">
            <summary>Number of slides that are hidden. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Keywords">
            <summary>Keywords. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LastPrinted">
            <summary>Last printed date. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LastSavedBy">
            <summary>Last user to save the file. (Standard property).
            <b>Note:</b> Unless you set this property explicitly with XlsFile.DocumentProperties.SetStandardProperty, FlexCel will save the creator instead.
            This is because you don't normally want to save the last user who modified a template.</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LastSavedTimeDate">
            <summary>Date last saved. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Lines">
            <summary>Number of lines. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LinksUpToDate">
            <summary>Boolean value to indicate whether the custom links are hampered by excessive noise, for all applications. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Manager">
            <summary>Manager of the project. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.MMClips">
            <summary>Number of sound or video clips. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NameOfCreatingApplication">
            <summary>Application that created the file. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.None">
            <summary>This is not a valid property. It will do nothing.</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Notes">
            <summary>Number of pages that contain notes. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NumberOfCharacters">
            <summary>Number of characters. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NumberOfPages">
            <summary>Number of pages. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NumberOfWords">
            <summary>Number of words. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Paragraphs">
            <summary>Number of paragraphs. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.PresentationTarget">
            <summary>Target format for presentation (35mm, printer, video, and so on). (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.RevisionNumber">
            <summary>Revision number. (Standard property).
            <b>Note:</b>While this is a string and Windows Explorer will allow you to set any value here, Excel will
            report any file with a revision which is not an integer as invalid.</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.ScaleCrop">
            <summary>Set to True (-1) when scaling of the thumbnail is desired. If not set, cropping is desired. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Security">
            <summary>Security. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Slides">
            <summary>Number of slides. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Status">
            <summary>Status of the document.</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Subject">
            <summary>Document Subject. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Template">
            <summary>Template. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Thumbnail">
            <summary>Thumbnail image. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Title">
            <summary>Document Title. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.TitlesofParts">
            <summary>Names of document parts. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.TotalEditingTime">
            <summary>Total editing time. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Version">
            <summary>Version of the document.</summary>
        </member>
        <member name="T:FlexCel.Core.TProtectedRange">
            <summary>
            Specifies a protected range in a sheet. You can define those ranges in Excel 2007 by going to "Review" tab and selecting "Allow Users to Edit Ranges"
            In Excel 2003, they are available under "Menu-&gt;Tools-&gt;Protection".
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TProtectedRange">
            <summary>
            Creates an empty protected range.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TProtectedRange(System.String,System.String,FlexCel.Core.TXlsCellRange[])">
            <param name="aName">Name for the protected range.</param>
            <param name="aPassword">Password to modify the cells. Keep it null if you don't want to set a password.</param>
            <param name="aRanges">Ranges of cells where this protected range applies. You might pass an array of TXlsCellRanges here or just a single TXlsCellRange object.</param>
            <summary>
            Creates and initializes a protected range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtectedRange.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtectedRange.EncryptionAlgorithm">
            <summary>
            Returns the encryption algorithm used to encrypt the password hash.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtectedRange.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if the 2 objects have the same contents.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtectedRange.GetHashCode">
            <summary>
            Return the hashcode of the object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtectedRange.Name">
            <summary>
            Name of the protected range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtectedRange.Password">
            <summary>
            Password used to protect the range. Use empty or null to have no password. <b>Note:</b> As this password is not saved in the file,
            when you open a file this property will be empty. You can know if a file has a password by looking at <see cref="P:FlexCel.Core.TProtectedRange.PasswordHash" />. 
            Setting this property will set the <see cref="P:FlexCel.Core.TProtectedRange.PasswordHash" /> property using the current <see cref="P:FlexCel.Core.TProtectedRange.EncryptionAlgorithm" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtectedRange.PasswordHash">
            <summary>
            This is the hash for the password that is stored in the file. You shouldn't set this property directly unless you are copying the hash from other place.
            When you set this property, <see cref="P:FlexCel.Core.TProtectedRange.Password" /> will be reset.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtectedRange.Ranges">
            <summary>
            Ranges of cells this protection applies to. You can specify more than one range of cells for the same ProtectedRange.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtectedRange.SecurityDescriptorXLS">
            <summary>
            Returns the security descriptor of the protected range, for XLS files. This is a byte array encapsulating a Windows Security Descriptor,
            and it is used if you are giving permissions to some users in the range.
            Note that because of the different security descriptor formats, FlexCel won't convert between 
            security descriptors from xls and xlsx. Take a look at APIMate to see the descriptor of a particular file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtectedRange.SecurityDescriptorXLSX">
            <summary>
            Returns the security descriptor of the protected range, for XLSX files. This is a string used if you are giving permissions to some users in the range.
            Note that because of the different security descriptor formats, FlexCel won't convert between 
            security descriptors from xls and xlsx. Take a look at APIMate to see the descriptor of a particular file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TProtection">
            <summary>
            Encryption data for an Excel sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.AddProtectedRange(FlexCel.Core.TProtectedRange)">
            <param name="range">range to add.</param>
            <summary>
            Adds a protected range to the sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.AssignedOnPassword">
            <summary>
            Returns true is there is at least one event handler attached to then OnPassword event.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.ClearProtectedRanges">
            <summary>
            Removes all protected ranges in the sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.DeleteProtectedRange(System.Int32)">
            <param name="index">Position of the range to be deleted. 1-based.</param>
            <summary>
            Deletes an existing protected range.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.EncryptionAlgorithmXlsx">
            <summary>
            Encryption algorithm for xlsx files.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.EncryptionType">
            <summary>
            Encryption mode for xls files .
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.GetProtectedRange(System.Int32)">
            <param name="index">Index of the protected range we want to retrieve. 1-based.</param>
            <summary>
            Returns a protected range.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.GetSharedWorkbookProtectionOptions">
            <summary>
            Reads the protection options for the change history.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.GetSheetProtectionOptions">
            <summary>
            Return the sheet protection options for the file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.GetWorkbookProtectionOptions">
            <summary>
            Reads the Workbook protection options for a file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.HasModifyPassword">
            <summary>
            Returns true if the file has a password to modify.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.HasSharedWorkbookPassword">
            <summary>
            Returns true if the change history is protected with a password.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.HasSheetPassword">
            <summary>
            Returns true if the active sheet is protected with a password.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.HasWorkbookPassword">
            <summary>
            Returns true if the workbook is protected with a password.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Core.TProtection.OnPassword">
            <summary>
            It is called when opening a password protected file, so you can supply the correct password.
            If you know beforehand that the file is protected you do not need this event, just use the <see cref="P:FlexCel.Core.TProtection.OpenPassword" /> method on this object.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.OpenPassword">
            <summary>
            Sets the password to open the file. When set, the file will be encrypted. On Excel go to Options-&gt;Security to check it.
            Set this to null to clear it.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.ProtectedRangeCount">
            <summary>
            Returns a the count of protected ranges in the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.RecommendReadOnly">
            <summary>
            Returns true if the file is recommended to open read-only.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.RemoveAllOnPasswordEvents">
            <summary>
            Removes all event handlers attached to OnPassword.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.SetModifyPassword(System.String,System.Boolean,System.String)">
            <param name="modifyPassword">The new password. Set it to null to clear it.</param>
            <param name="recommendReadOnly">When true, Excel will recommend read only when opening a file.</param>
            <param name="reservingUser">The user that reserves the file. It will appear on the password dialog on Excel.</param>
            <summary>
            Sets the password for modifying the file. It won't encrypt the file, it just won't let Excel save the file. On Excel goto Options-&gt;Security to check it.
            Note that you can only set it, there is no way to retrieve an existing password.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.SetSharedWorkbookProtection(System.String,FlexCel.Core.TSharedWorkbookProtectionOptions)">
            <param name="sharedWorkbookPassword">Password to protect this setting. You can set it to null to clear it.</param>
            <param name="sharedWorkbookProtectionOptions">The options to protect.</param>
            <summary>
            Protects the change history from being removed. On Excel goto Protect-&gt;Protect Shared Workbook to check it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.SetSharedWorkbookProtectionOptions(FlexCel.Core.TSharedWorkbookProtectionOptions)">
            <param name="value">Protection options.</param>
            <summary>
            Sets the change history protection options for a file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.SetSheetProtection(System.String,FlexCel.Core.TSheetProtectionOptions)">
            <param name="sheetPassword">Password to protect the active sheet. You can set it to null to clear it.</param>
            <param name="sheetProtectionOptions">The options to protect.</param>
            <summary>
            Protects a sheet. On Excel goto Protect-&gt;Sheet to check it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.SetSheetProtectionOptions(FlexCel.Core.TSheetProtectionOptions)">
            <param name="value">Protection options.</param>
            <summary>
            Sets the sheet protection options for the file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.SetWorkbookProtection(System.String,FlexCel.Core.TWorkbookProtectionOptions)">
            <param name="workbookPassword">Password to protect the file. You can set it to null to clear it.</param>
            <param name="workbookProtectionOptions">The options to protect.</param>
            <summary>
            Protects the workbook. On Excel goto Protect-&gt;Workbook to check it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TProtection.SetWorkbookProtectionOptions(FlexCel.Core.TWorkbookProtectionOptions)">
            <param name="value">Workbook protection options.</param>
            <summary>
            Sets the workbook protection options for a file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TProtection.WriteAccess">
            <summary>
            Reads or sets the user writing the file. Useful to know which user opened the file in Excel when
            you want to save and the file is in use.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TProtectionType">
            <summary>
            Indicates how a sheet will be protected.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TProtectionType.All">
            <summary>
            All things will be protected.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TProtectionType.None">
            <summary>
            Nothing will be protected.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TQEncodeMetaInfo">
            <summary>
            Defines how a string returned by Q-Encode will be handled.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TQEncodeMetaInfo.Always">
            <summary>
            This will always return the Q-Encoded string with "=?charset?encoding?" at the beginning and "?=" at the end.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TQEncodeMetaInfo.None">
            <summary>
            This will return the raw Q-Encoded string, without "=?charset?encoding?" at the beginning or "?=" at the end.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TQEncodeMetaInfo.OnlyIfNeeded">
            <summary>
            This will return the string with "=?charset?encoding?" only if the original string has special characters that need encoding,  if not it will return the original string without encoding.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRangeCopyMode">
            <summary>
            What we do with the cells when we call InsertAndCopyRange.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.All">
            <summary>
            Will copy all (values, ranges, images, formulas, etc).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.AllIncludingDontMoveAndSizeObjects">
            <summary>
            Will copy all objects, including those that are marked as "do not copy" in the file. You will normally not want to use this.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.Formats">
            <summary>
            Will copy cell formatting, but not cell contents. Images and objects will be copied too.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.None">
            <summary>
            Won't copy anything. Only inserts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.OnlyFormulas">
            <summary>
            Will copy all except values. Useful when you are going to replace those values anyway.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.OnlyFormulasAndNoObjects">
            <summary>
            Will copy all except values and objects (like images). Useful when you are going to replace those values anyway.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRangeOp">
            <summary>
            Operation between ranges.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TRangeOp.Intersection">
            <summary>
            The intersection of the 2 ranges.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeOp.Range">
            <summary>
            Creates a range from the Left-Top and Right-Bottom coordinates provided by the opearnds.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeOp.Union">
            <summary>
            An union of the 2 ranges.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRecalcMode">
            <summary>
            Sets how the excel file will be recalculated. Normally FlexCel calculates a file only before saving and when you explicitly call
            <see cref="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)" />. With this enum you can change that behavior.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.Forced">
            <summary>
            The file will *always* be recalculated before saving. Use it if you are loading files that might not be
            recalculated, to make sure they will. If you open a not calculated file 
            on Smart mode and then save it without modifying anything, it will remain not calculated.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.Manual">
            <summary>
            The file will *never* be recalculated by FlexCel (Except if you do a forced recalc: XlsFile.Recalc(true). All formula results will be set to null and formulas will be
            modified so Excel recalculates them when you open the file. If you are only using Excel to open the generated files
            the result will be the same as with a recalculated file, but if you try to open it with a viewer
            you won't see the formula results.
            You should not need to use manual recalculation. The only case where it might be useful is if you are setting the formula results
            yourself and don't want FlexCel to change them when it saves.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.OnEveryChange">
            <summary>
            The file will be recalculated each time a value changes on the sheet. Do not use this mode on normal files,
            as it can be really slow!!  This option could be of use for an interactive viewer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.Smart">
            <summary>
            The file will be recalculated before saving, *only* if there are any changes on the file. This mode
            is the recommended, because it allows you to open and save a file (for example to remove a password)
            without modifying the formula results. If you modify any value on the sheet, a recalculation will be 
            done to get the new values.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRecalcVersion">
            <summary>
            Identifies how FlexCel will identify itself in the generated file, in order to recalculate.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.AlwaysRecalc">
            <summary>
            If you choose this option, Excel will always recalculate the full file on open, and ask for saving changes when closing the file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.Excel2003">
            <summary>
            The file will be identified as if it was saved by Excel 2003. Any newer Excel version opening the file
            will recalculate the file on open, and ask to save changes when closing.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.Excel2007">
            <summary>
            The file will be identified as if it was saved by Excel 2007. Any newer Excel version opening the file
            will recalculate the file on open, and ask to save changes when closing.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.Excel2010">
            <summary>
            The file will be identified as if it was saved by Excel 2010. Any newer Excel version opening the file
            will recalculate the file on open, and ask to save changes when closing.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.Excel2013">
            <summary>
            The file will be identified as if it was saved by Excel 2013. Any newer Excel version opening the file
            will recalculate the file on open, and ask to save changes when closing.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.Excel2016">
            <summary>
            The file will be identified as if it was saved by Excel 2016. Any newer Excel version opening the file
            will recalculate the file on open, and ask to save changes when closing.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.LatestKnownExcelVersion">
            <summary>
            This will use the latest Excel version that FlexCel is aware of. Note that when you update FlexCel to a newer version,
            the recalculating version might change if it adds support for newer Excel versions.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcVersion.SameAsInputFile">
            <summary>
            FlexCel will write the same information that was in the original file it opened. 
            Note that if you create a file with XlsFile.NewFile, then the version will be the 
            version you specify in the NewFile parameters. By default, this is Excel 2003.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRecoveryInvalidFormulaTokens">
            <summary>
            This error happens when in recovery mode and a formula has invalid data.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRecoveryInvalidFormulaTokens(System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TRecoveryInvalidFormulaTokens.FileName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRecoveryInvalidFormulaTokens.FileName">
            <summary>
            File with the invalid formula.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TRecoveryInvalidNameError">
            <summary>
            This error happens when in recovery mode and a name has to be ignored because it can't be read.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRecoveryInvalidNameError(System.String,System.String,System.Int32,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TRecoveryInvalidNameError.FileName" /></param>
            <param name="aNameIndex">See <see cref="P:FlexCel.Core.TRecoveryInvalidNameError.NameIndex" /></param>
            <param name="aExceptionMsg">See <see cref="P:FlexCel.Core.TRecoveryInvalidNameError.ExceptionMsg" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRecoveryInvalidNameError.ExceptionMsg">
            <summary>
            Exception error.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRecoveryInvalidNameError.FileName">
            <summary>
            File with the invalid name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRecoveryInvalidNameError.NameIndex">
            <summary>
            Position of the invalid named range in the name table.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TReferenceStyle">
            <summary>
            Use this enumerator in the property <see cref="P:FlexCel.Core.ExcelFile.FormulaReferenceStyle" /> to specify the reference
            mode that FlexCel will use when you enter formulas as text or when it returns the formula text.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TReferenceStyle.A1">
            <summary>
            Standard A1 mode. Uses letters for the columns and numbers for the rows.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TReferenceStyle.R1C1">
            <summary>
            R1C1 style. Uses numbers for both columns and rows.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRenderCorruptImageError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.RenderCorruptImage" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.RenderCorruptImage" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRenderCorruptImageError(System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TRenderErrorDrawingImageError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.RenderErrorDrawingImage" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.RenderErrorDrawingImage" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRenderErrorDrawingImageError(System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TRenderGenericPreviewError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.RenderGenericPreview" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.RenderGenericPreview" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRenderGenericPreviewError(System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aStackTrace">Stack trace for the error.</param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRenderGenericPreviewError.StackTrace">
            <summary>
            Returns the stack trace for the error.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TRenderMetafileError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.RenderMetafile" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.RenderMetafile" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRenderMetafileError(System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TReplaceAction">
            <summary>
            Specifies actions to do in every replacement.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TReplaceAction.CellValue">
            <summary>
            Value of the replaced cell. You can change it to something else.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TReplaceAction.Col">
            <summary>
            Column of the replaced cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TReplaceAction.ReplacementNumber">
            <summary>
            Number of replacement being made. This number will be 1 for the first replacement, 2 for the second and so on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TReplaceAction.Row">
            <summary>
            Row of the replaced cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TReplaceAction.SkipReplacement">
            <summary>
            Set this value to true to skip the current replacement.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TReplaceAction.Workbook">
            <summary>
            File where the cell is being replaced.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TReplaceAction.XF">
            <summary>
            Format for the replaced cell. Change it if you want to provide custom format for the cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TRichString">
            <summary>
            A string cell value with its rich text information.
            RTFRuns is an array of TRTFRun structures, where each struct identifies a font style for a portion of text.
            For example, if you have:
               Value = "Hello"
               RTFRuns = {FirstChar:1 FontIndex=1, FirstChar=3, FontIndex=2}
                  "H" (char 0) will be formatted with the specific cell format.
                  "el" (chars 1 and 2) will have font number 1
                  "lo" (chars 3 and 4) will have font number 2
                  
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRichString">
            <summary>
            Constructs an empty RichString.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRichString(System.String)">
            <param name="aValue" />
            <summary>
            Constructs a RichString without formatting.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRichString(System.String,FlexCel.Core.TRichString,System.Int32)">
            <param name="aValue">Cell Text</param>
            <param name="aRichString">Rich string with the RTF values to copy. This value will be COPIED, so old reference is not used</param>
            <param name="offset">How many characters the RTFRun must be moved. For example: RichString(s.SubString(3), RTFRuns, 3) will adapt the RTFRun for s to the new substring.</param>
            <summary>
            Constructs a default RichString with text and RTF info. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRichString(System.String,FlexCel.Core.TRTFRun[],FlexCel.Core.ExcelFile)">
            <param name="aValue">Cell Text</param>
            <param name="aRTFRuns">Array of TRTFRuns structs. This value will be COPIED, so old reference is not used</param>
            <param name="aWorkbook">Workbook containing the fonts.</param>
            <summary>
            Constructs a default RichString with text and RTF info.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Add(FlexCel.Core.TRichString)">
            <param name="s1" />
            <summary>
            Adds two richstrings together. If using C#, you can just use the overloaded "+" operator to contactenate rich strings.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Clone">
            <summary>
            Returns a Deep copy of the Rich string.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true when both richstrings are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.FromHtml(System.String,FlexCel.Core.TFlxFormat,FlexCel.Core.ExcelFile)">
            <param name="HtmlString">Html string we want to convert.</param>
            <param name="aCellFormat">Original format of the cell where we want to enter the string. Note that depending on the starting cell, the Rich string will be different.
            For example, if you have a cell with Red text and add a "hello &lt;b&gt; world" string, then resulting
            RichString will include a RED bold "world" string</param>
            <param name="aWorkbook">File where this string will be added.</param>
            <summary>
            Returns a new TRichString from an HTML text. Note that only some tags from
            HTML are converted, the ones that do not have correspondence on Excel rich text 
            will be discarded.<b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)" /></b></summary>
            <returns>A TRichString containing the converted Html.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.GetFont(System.Int32)">
            <param name="i">index of the font (0 based).</param>
            <summary>
            Return the font for character i.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.GetHashCode">
            <summary>
            Hashcode for this richstring.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.GetTypeCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRichString.Item(System.Int32)">
            <param name="index" />
            <summary>
            Returns the character at position index.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRichString.Length">
            <summary>
            Length of the RichString.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRichString.MaxFontIndex">
            <summary>
            The count of Fonts on the richstring.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Addition(FlexCel.Core.TRichString,FlexCel.Core.TRichString)">
            <param name="s1">First string to concatenate.</param>
            <param name="s2">Second string to concatenate.</param>
            <summary>
            Concatenates two TRichString objects. Be careful that formats will be preserved from s1 to s2.
            If s1 ends up in red, s2 will start with red too. If you want to avoid this, make sure s2
            has a font definition at character 0. ALSO, MAKE SURE YOU ARE CONCATENATING RICH STRINGS FROM THE SAME WORKBOOK, SO FONT INDEXES ARE SIMILAR.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Equality(FlexCel.Core.TRichString,FlexCel.Core.TRichString)">
            <param name="s1" />
            <param name="s2" />
            <summary>
            Returns true if both RichStrings are equal.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Implicit(FlexCel.Core.TRichString)~System.String">
            <param name="r" />
            <summary>
            Converts a TRichstring to a string.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Implicit(System.String)~FlexCel.Core.TRichString">
            <param name="s" />
            <summary>
            Converts a string to a TRichstring.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Inequality(FlexCel.Core.TRichString,FlexCel.Core.TRichString)">
            <param name="s1" />
            <param name="s2" />
            <summary>
            Returns true if both RichStrings do not have the same value.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Replace(System.String,System.String)">
            <param name="oldValue">String to replace.</param>
            <param name="newValue">String that will replace oldValue</param>
            <summary>
            Replaces all oldValue strings with newValue strings inside the RichString. (case sensitive) 
            </summary>
            <returns>A new TRichString with all oldValues replaced with newValues.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Replace(System.String,System.String,System.Boolean)">
            <param name="oldValue">String to replace.</param>
            <param name="newValue">String that will replace oldValue</param>
            <param name="CaseInsensitive">If true, it will not take car of case for the search.</param>
            <summary>
            Replaces all oldValue strings with newValue strings inside the RichString. 
            </summary>
            <returns>A new TRichString with all oldValues replaced with newValues.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.RightTrim">
            <summary>
            Trims all the whitespace at the end of the string.
            </summary>
            <returns>The trimmed string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.RTFRun(System.Int32)">
            <param name="index">Index on the list. 0-Based.</param>
            <summary>
            A run of RTF.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRichString.RTFRunCount">
            <summary>
            Number of RTF runs.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.SetFromHtml(System.String,FlexCel.Core.TFlxFormat,FlexCel.Core.ExcelFile)">
            <param name="HtmlString">String with the HTML data.</param>
            <param name="aCellFormat">Initial format of the cell where we want to enter the html string.</param>
            <param name="aWorkbook">ExcelFile where the cell is.</param>
            <summary>
            Sets the rich string content from an HTML Formatted string. <b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)" /></b></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Substring(System.Int32)">
            <param name="index">Start of the substring (0 based)</param>
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and ends at the end of the string.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Substring(System.Int32,System.Int32)">
            <param name="index">Start of the substring (0 based)</param>
            <param name="count">Number of characters to copy.</param>
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToBoolean(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToByte(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToChar(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToDateTime(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToDecimal(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToDouble(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToHtml(FlexCel.Core.ExcelFile,FlexCel.Core.TFlxFormat,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)">
            <param name="aWorkbook">ExcelFile where the cell is.</param>
            <param name="aCellFormat">Format of the cell where this string is.</param>
            <param name="htmlVersion">Version of the html returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param>
            <param name="htmlStyle">Specifies whether to use CSS or not.</param>
            <param name="aEncoding">Encoder used to return the string. Use UTF-8 for normal cases.</param>
            <summary>
            Returns the rich string content as an HTML Formatted string. <b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)" /></b></summary>
            <returns>The string formatted as an HTML string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToHtml(FlexCel.Core.ExcelFile,FlexCel.Core.TFlxFormat,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding,FlexCel.Core.IHtmlFontEvent)">
            <param name="aWorkbook">ExcelFile where the cell is.</param>
            <param name="aCellFormat">Format of the cell where this string is.</param>
            <param name="htmlVersion">Version of the html returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param>
            <param name="htmlStyle">Specifies whether to use CSS or not.</param>
            <param name="aEncoding">Encoder used to return the string. Use UTF-8 for normal cases.</param>
            <param name="OnHtmlFont">Provide this parameter to customize what to do when different fonts are found in the string.</param>
            <summary>
            Returns the rich string content as an HTML Formatted string. <b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)" /></b></summary>
            <returns>The string formatted as an HTML string.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToInt16(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToInt32(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToInt64(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToSByte(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToSingle(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToString">
            <summary>
            Returns the string without Rich text info.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToString(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToType(System.Type,System.IFormatProvider)">
            <param name="conversionType" />
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToUInt16(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToUInt32(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.ToUInt64(System.IFormatProvider)">
            <param name="provider" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRichString.Trim">
            <summary>
            Trims all the whitespace at the beginning and end of the string.
            </summary>
            <returns>The trimmed string.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TRichString.Value">
            <summary>
            Text of the string without formatting. Might be null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TRTFRun">
            <summary>
            One RTF run for the text in a cell. FirstChar is the first (base 0) character to apply the format, and FontIndex is the font index for the text
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TRTFRun(System.Int32,System.Int32)">
            <param name="aFirstChar">First character (0 based).</param>
            <param name="aFontIndex">Font index.</param>
            <summary>
            Creates an RTFRun with the given values.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRTFRun.Equals(System.Object)">
            <param name="obj">The Object to compare with the current TRTFRun.</param>
            <summary>
            Determines whether two TRTFRun instances are equal.
            </summary>
            <returns>true if the specified Object is equal to the current TRTFRun; otherwise, false.</returns>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TRTFRun.FirstChar">
            <summary>
            First character on the string where we will apply the font. (0 based)
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TRTFRun.FontIndex">
            <summary>
            Font index for this string part.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRTFRun.GetHashCode">
            <summary>
            Gets a hashcode for the TRTFRun instance.
            </summary>
            <returns>hashcode.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRTFRun.op_Equality(FlexCel.Core.TRTFRun,FlexCel.Core.TRTFRun)">
            <param name="b1">First TRTFRun instance to compare.</param>
            <param name="b2">Second TRTFRun instance to compare.</param>
            <summary>
            Determines whether two TRTFRun instances are equal. To be considered equal, they must have the same text <b>and</b>
            the same formatting. That is, fontindex and firstchar must be equal.
            </summary>
            <returns>true if both objects have the same text and the same formatting.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRTFRun.op_Inequality(FlexCel.Core.TRTFRun,FlexCel.Core.TRTFRun)">
            <param name="b1">First TRTFRun instance to compare.</param>
            <param name="b2">Second TRTFRun instance to compare.</param>
            <summary>
            Determines whether two TRTFRun instances are different. To be considered equal, they must have the same text <b>and</b>
            the same formatting. That is, fontindex and firstchar must be equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRTFRun.ToByteArray(FlexCel.Core.TRTFRun[])">
            <param name="runs">TRTFRun array</param>
            <summary>
            Converts a TRTFRun array into a byte array for serialization.
            </summary>
            <returns>Serialized byte array</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TRTFRun.ToRTFRunArray(System.Byte[])">
            <param name="runs">Serialized byte array</param>
            <summary>
            Converts a byte array into a TRTFRun array for serialization.
            </summary>
            <returns>TRTFRun array</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TScatterChartOptions">
            <summary>
            Options specific for a Scatter/Bubble chart.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TScatterChartOptions(System.Int32,System.Boolean,System.Int32,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,System.Int32,FlexCel.Core.TBubbleSizeType,System.Boolean,System.Boolean,System.Boolean,FlexCel.Core.TDataLabel)">
            <param name="aAxisNumber">See <see cref="P:FlexCel.Core.TChartOptions.AxisNumber" /></param>
            <param name="aChangeColorsOnEachSeries">See <see cref="P:FlexCel.Core.TChartOptions.ChangeColorsOnEachSeries" /></param>
            <param name="aZOrder">See <see cref="P:FlexCel.Core.TChartOptions.ZOrder" /></param>
            <param name="aSeriesOptions">See <see cref="P:FlexCel.Core.TChartOptions.SeriesOptions" /></param>
            <param name="aPlotArea">See <see cref="P:FlexCel.Core.TChartOptions.PlotArea" /></param>
            <param name="aBubblePercentRatio">See <see cref="P:FlexCel.Core.TScatterChartOptions.BubblePercentRatio" /></param>
            <param name="aBubbleSizeType">See <see cref="P:FlexCel.Core.TScatterChartOptions.BubbleSizeType" /></param>
            <param name="aIsBubbleChart">See <see cref="P:FlexCel.Core.TScatterChartOptions.IsBubbleChart" /></param>
            <param name="aShowNegativeBubbles">See <see cref="P:FlexCel.Core.TScatterChartOptions.ShowNegativeBubbles" /></param>
            <param name="aBubblesHaveShadow">See <see cref="P:FlexCel.Core.TScatterChartOptions.BubblesHaveShadow" /></param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
            <summary>
            Creates a new TScatterChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.BubblePercentRatio">
            <summary>
            Percent of largest bubble compared to chart in general.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.BubblesHaveShadow">
            <summary>
            True if the bubbles have shadows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.BubbleSizeType">
            <summary>
            What the bubble size represents.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.IsBubbleChart">
            <summary>
            True if this is a bubble chart, false if it is a scatter chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.ShowNegativeBubbles">
            <summary>
            True if negative bubbles should be shwown.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TScRGBColor">
            <summary>
            Implements a simple representation of a color in scRGB colorspace. Components are doubles going from 0 to 1.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TScRGBColor(FlexCel.Core.TUIColor)">
            <param name="RGBColor" />
            <summary>
            Creates a new instance from a system color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TScRGBColor(System.Drawing.Color)">
            <param name="RGBColor" />
            <summary>
            Creates a new instance from a system color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TScRGBColor(System.Double,System.Double,System.Double)">
            <param name="scRed" />
            <param name="scGreen" />
            <param name="scBlue" />
            <summary>
            Creates a Color from the sc components.
            <param name="scRed">Red component. (0-1)</param><param name="scGreen">Green component. (0-1)</param><param name="scBlue">Blue component. (0-1)</param></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScRGBColor.B">
            <summary>
            Blue component in the RGB space. (0-255)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is more than color, 0 if both colors are the same, and 1 if obj is less than color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both colors are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScRGBColor.G">
            <summary>
            Green component in the RGB space. (0-255)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.GetHashCode">
            <summary>
            Returns a hashcode for the color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_Equality(FlexCel.Core.TScRGBColor,FlexCel.Core.TScRGBColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_GreaterThan(FlexCel.Core.TScRGBColor,FlexCel.Core.TScRGBColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_Implicit(FlexCel.Core.TScRGBColor)~FlexCel.Core.TUIColor">
            <param name="aColor" />
            <summary>
            Assigns this instance to a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_Implicit(FlexCel.Core.TScRGBColor)~System.Drawing.Color">
            <param name="aColor" />
            <summary>
            Assigns this instance to a system color.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_Implicit(FlexCel.Core.TUIColor)~FlexCel.Core.TScRGBColor">
            <param name="aColor" />
            <summary>
            Assigns a system color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_Implicit(System.Drawing.Color)~FlexCel.Core.TScRGBColor">
            <param name="aColor" />
            <summary>
            Assigns a system color to this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_Inequality(FlexCel.Core.TScRGBColor,FlexCel.Core.TScRGBColor)">
            <param name="o1">First color to compare.</param>
            <param name="o2">Second color to compare.</param>
            <summary>
            Returns true if both colors do not have the same value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.op_LessThan(FlexCel.Core.TScRGBColor,FlexCel.Core.TScRGBColor)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScRGBColor.R">
            <summary>
            Red component in the RGB space. (0-255)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.RGBtoSRGB(System.Double)">
            <param name="component">R, G or B component of the color.</param>
            <summary>
            Converts a RGB value to sRGB using a gamma of 2.2
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScRGBColor.ScB">
            <summary>
            ScBlue component. (between 0 and 1)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScRGBColor.ScG">
            <summary>
            ScGreen component. (between 0 and 1)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TScRGBColor.ScR">
            <summary>
            ScRed component. (between 0 and 1)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TScRGBColor.SRGBtoRGB(System.Double)">
            <param name="component">sR, sG or sB component of the color.</param>
            <summary>
            Converts a sRGB value to RGB using a gamma of 2.2
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TSeriesOptionsList">
            <summary>
            A list of options for the whole series and for specific data points inside these series.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSeriesOptionsList">
            <summary>
            Creates a new TSeriesOptionsList instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.Add(FlexCel.Core.ChartSeriesOptions)">
            <param name="Options">Options to add.</param>
            <summary>
            Adds a new option to the list. If the option is null, nothing will be done.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.GetEnumerator">
            <summary>
            Gets the enumerator for this class. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.GetValues">
            <summary>
            Gets all the values of the series.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSeriesOptionsList.Item(System.Int32)">
            <param name="key" />
            <summary>
            Gets or sets the value for a data point or for the whole series (when key = -1).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.System#Collections#Generic#IEnumerable{System#Int32}#GetEnumerator">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TShapeEffects">
            <summary>
            Contains information for the effects of an autoshape.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeEffects(FlexCel.Core.TFormattingType,FlexCel.Core.TDrawingColor)">
            <param name="aThemeStyle" />
            <param name="aThemeColor" />
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeEffects.Clone">
            <summary>
            Returns a deep copy of this class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeEffects.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if bth object are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeEffects.GetHashCode">
            <summary>
            Returns the hascode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeEffects.ThemeColor">
            <summary>
            Color used for the effects.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeEffects.ThemeStyle">
            <summary>
            Scheme used in the theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TShapeFill">
            <summary>
            Contains the information for the fill of an autoshape.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeFill(System.Boolean,FlexCel.Core.TFillStyle)">
            <param name="aHasFill" />
            <param name="aFillStyle" />
            <summary>
            Creates a simple shape fill.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeFill.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeFill.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeFill.FillStyle">
            <summary>
            Fill for the shape. If this value is null, the fill specified in the theme will be used instead.
            To know the real fill style used even if this value is null, use <see cref="M:FlexCel.Core.TShapeFill.GetFill(FlexCel.Core.IFlexCelPalette)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeFill.GetFill(FlexCel.Core.IFlexCelPalette)">
            <param name="aPalette" />
            <summary>
            Fill style for this object. This method will return <see cref="P:FlexCel.Core.TShapeFill.FillStyle" /> if it isn't null,
            or the default theme fill if it is.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeFill.GetHashCode">
            <summary>
            Hash code for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeFill.HasFill">
            <summary>
            True if the object has fill, false if it is transparent.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeFill.ThemeColor">
            <summary>
            Fill taken from a theme. If <see cref="P:FlexCel.Core.TShapeFill.FillStyle" /> is null, this color here will be used along with the current theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeFill.ThemeStyle">
            <summary>
            Style (subtle, normal, intense) from the theme used, when a theme is used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeFill.UseThemeBk">
            <summary>
            If true and using a theme, the backgroubd fill from the theme will be used, if not, the normal fill from the theme will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TShapeFont">
            <summary>
            Contains information for the font of an autoshape.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeFont(FlexCel.Core.TFontScheme,FlexCel.Core.TDrawingColor)">
            <param name="aThemeScheme" />
            <param name="aThemeColor" />
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeFont.Clone">
            <summary>
            Returns a deep copy of this class.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeFont.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeFont.GetHashCode">
            <summary>
            Returns the hascode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeFont.ThemeColor">
            <summary>
            Color used for the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeFont.ThemeScheme">
            <summary>
            Scheme used in the theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TShapeLine">
            <summary>
            Contains the information for the line style for an autoshape.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeLine">
            <summary>
            Creates a black simple line.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeLine(System.Boolean,FlexCel.Core.TLineStyle)">
            <param name="aHasLine">True if the shape has a line.</param>
            <param name="aLineStyle">Custom line style. If null, the theme line style will be used.</param>
            <summary>
            Creates a line with a line style and no theme.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeLine(System.Boolean,FlexCel.Core.TLineStyle,System.Nullable{FlexCel.Core.TDrawingColor},FlexCel.Core.TFormattingType)">
            <param name="aHasLine">True if the shape has a line.</param>
            <param name="aLineStyle">Custom line style. If null, the theme line style will be used.</param>
            <param name="aThemeColor">Color to use in a theme line style. Will be used only if aLineStyle is null. 
            It has the color that will be used instead of the one in the theme. All other line properties come from the theme.</param>
            <param name="aThemeStyle">Theme that will be used for the line. This only affects the line if aLineStyle is null.</param>
            <summary>
            Creates a line with all the options.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.GetDashing(FlexCel.Core.IFlexCelPalette)">
            <param name="aPalette" />
            <summary>
            Returns the line dashing, if there is a LineStyle this is the Line dashing, else if it is null it is the Theme line dashing.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.GetHashCode">
            <summary>
            Hash code for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.GetHeadArrow(FlexCel.Core.IFlexCelPalette)">
            <param name="aPalette" />
            <summary>
            Returns the line arrow for the head, if there is a LineStyle this is the Line arrow, else if it is null it is the Theme line arrow.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.GetJoin(FlexCel.Core.IFlexCelPalette)">
            <param name="aPalette" />
            <summary>
            Returns the line joining, if there is a LineStyle this is the Line join, else if it is null it is the Theme line join.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.GetLineFill(FlexCel.Core.IFlexCelPalette)">
            <param name="aPalette" />
            <summary>
            This is the color used to draw the line, even if <see cref="P:FlexCel.Core.TShapeLine.LineStyle" /> is null
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.GetTailArrow(FlexCel.Core.IFlexCelPalette)">
            <param name="aPalette" />
            <summary>
            Returns the line arrow for the tail, if there is a LineStyle this is the Line arrow, else if it is null it is the Theme line arrow.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeLine.GetWidth(FlexCel.Core.IFlexCelPalette,System.Int32)">
            <param name="aPalette" />
            <param name="defaultValue" />
            <summary>
            Returns the line width, if there is a LineStyle this is the Line width, else if it is null it is the Theme line width.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeLine.HasLine">
            <summary>
            True if the object has a border, false otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeLine.LineStyle">
            <summary>
            Line style used to draw the line. Note that this can be null, and in this case, 
            a line style from the current theme is used. If this isn't null, the theme properties are ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeLine.ThemeColor">
            <summary>
            Color that will be used instead of the default in the theme, when using a theme to draw the line.
            This property has effect only if <see cref="P:FlexCel.Core.TShapeLine.LineStyle" /> is null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeLine.ThemeStyle">
            <summary>
            Theme used to draw the line. This property has effect only if <see cref="P:FlexCel.Core.TShapeLine.LineStyle" /> is null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TShapeOption">
            <summary>
            Many different configuration options for a shape.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust10Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust2Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust3Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust4Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust5Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust6Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust7Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust8Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust9Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjustValue">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.anchorText">
            <summary>
            How to anchor the text
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.bWMode">
            <summary>
            Settings for modifications to be made when in different forms of black-and-white mode.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.bWModeBW">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.bWModePureBW">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DAmbientIntensity">
            <summary>
            Fixed point intensity
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DDiffuseAmt">
            <summary>
            Fixed-point 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DEdgeThickness">
            <summary>
            Specular edge thickness
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrudeBackward">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrudeForward">
            <summary>
            Distance of extrusion in EMUs
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrudePlane">
            <summary>
            Extrusion direction
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrusionColor">
            <summary>
            Basic color of extruded part of shape; the lighting model used will determine the exact shades used when rendering. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillIntensity">
            <summary>
            Fixed point intensity
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillX">
            <summary>
            Fill light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillY">
            <summary>
            Fill light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillZ">
            <summary>
            magnitudes matter
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyIntensity">
            <summary>
            Fixed point intensity
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyX">
            <summary>
            Key light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyY">
            <summary>
            Key light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyZ">
            <summary>
            magnitudes matter
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DOriginX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DOriginY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRenderMode">
            <summary>
            Full,wireframe, or bcube
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAngle">
            <summary>
            degrees (16.16) about axis
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAxisX">
            <summary>
            These specify the rotation axis; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAxisY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAxisZ">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationCenterX">
            <summary>
            rotation center x (16.16 or g-units)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationCenterY">
            <summary>
            rotation center y (16.16 or g-units)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationCenterZ">
            <summary>
            rotation center z (absolute (emus))
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DShininess">
            <summary>
            Default gives OK results
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DSkewAmount">
            <summary>
            Percentage skew amount
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DSkewAngle">
            <summary>
            degree (16.16) skew angle
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DSpecularAmt">
            <summary>
            Fixed-point 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DTolerance">
            <summary>
            pixels (16.16)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DXRotationAngle">
            <summary>
            degrees (16.16) about x axis
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DXViewpoint">
            <summary>
            X view point (emus)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DYRotationAngle">
            <summary>
            degrees (16.16) about y axis
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DYViewpoint">
            <summary>
            Y view point (emus)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DZViewpoint">
            <summary>
            Z view distance (emus)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cdirFont">
            <summary>
            Font rotation
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromBottom">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromLeft">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromRight">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromTop">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cxstyle">
            <summary>
            Type of connector
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dgmConstrainBounds">
            <summary>
            Diagram constrain bounds
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxTextLeft">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/10 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxTextRight">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/10 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxWrapDistLeft" />
        <member name="F:FlexCel.Core.TShapeOption.dxWrapDistRight" />
        <member name="F:FlexCel.Core.TShapeOption.dxyCalloutDropSpecified">
            <summary>
            if msospcodSpecified, the actual drop distance (9 points)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxyCalloutGap">
            <summary>
            Distance from box to first point.(EMUs) (1/12 inch)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxyCalloutLengthSpecified">
            <summary>
            if fCalloutLengthSpecified, the actual distance (0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dyTextBottom">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/20 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dyTextTop">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/20 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dyWrapDistBottom" />
        <member name="F:FlexCel.Core.TShapeOption.dyWrapDistTop" />
        <member name="F:FlexCel.Core.TShapeOption.f3D">
            <summary>
            Does this shape have a 3D effect?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.f3DOK">
            <summary>
            3D may be set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fArrowheadsOK">
            <summary>
            Allow arrowheads if prop. is set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fAutoTextMargin">
            <summary>
            use host's margin calculations
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fBackground">
            <summary>
            If TRUE, this is the background shape.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fBehindDocument" />
        <member name="F:FlexCel.Core.TShapeOption.fc3DConstrainRotation">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DFillHarsh">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DKeyHarsh">
            <summary>
            Is key lighting harsh?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DLightFace">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DMetallic">
            <summary>
            Use metallic specularity?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DParallel">
            <summary>
            Parallel projection?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DRotationCenterAuto">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DUseExtrusionColor">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCallout">
            <summary>
            Is the shape a callout? (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutAccentBar">
            <summary>
            does callout have accent bar? (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutDropAuto">
            <summary>
            If true, then we occasionally invert the drop distance (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutLengthSpecified">
            <summary>
            if true, we look at dxyCalloutLengthSpecified (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutMinusX">
            <summary>
            (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutMinusY">
            <summary>
            FALSE
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutTextBorder">
            <summary>
            does callout have a text border? (TRUE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fDeleteAttachedObject">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fEditedWrap" />
        <member name="F:FlexCel.Core.TShapeOption.fFilled">
            <summary>
            Is shape filled?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFillOK">
            <summary>
            OK to fill the shape through the UI or VBAs
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFillShadeShapeOK">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFitShapeToText">
            <summary>
            Size shape to fit text size
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFitTextToShape">
            <summary>
            Size text to fit shape size
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fGtext">
            <summary>
            Has text effect
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fGtextOK">
            <summary>
            Text effect (WordArt) supported
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fHidden" />
        <member name="F:FlexCel.Core.TShapeOption.fHitTestFill">
            <summary>
            Should we hit test fill? 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fHitTestLine">
            <summary>
            Should we hit test lines? 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillAngle">
            <summary>
            Fade angle - degrees in 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBackColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBackOpacity">
            <summary>
            Shades only
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBlip">
            <summary>
            Pattern/texture
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBlipFlags">
            <summary>
            Blip flags
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBlipName">
            <summary>
            Blip file name
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillDztype">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillFocus">
            <summary>
            Linear shaded fill focus percent
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillHeight">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillOpacity">
            <summary>
            Fixed 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillOriginX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillOriginY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectBottom">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectLeft">
            <summary>
            For shaded fills, use the specified rectangle instead of the shape's bounding rect to define how large the fade is going to be.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectRight">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectTop">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShadeColors">
            <summary>
            a preset array of colors
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShadePreset">
            <summary>
            Special shades
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShadeType">
            <summary>
            Type of shading, if a shaded (gradient) fill.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShape">
            <summary>
            Register pattern on shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShapeOriginX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShapeOriginY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToBottom">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToLeft">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToRight">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToTop">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillType">
            <summary>
            Type of fill
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillUseRect">
            <summary>
            Use the large rect?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillWidth">
            <summary>
            How big (A units) to make a metafile texture.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fIsButton" />
        <member name="F:FlexCel.Core.TShapeOption.fLine">
            <summary>
            Any line?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLineOK">
            <summary>
            Line style may be set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAdjustHandles">
            <summary>
            Do not adjust
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAgainstGrouping">
            <summary>
            Do not group this shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAgainstSelect">
            <summary>
            Shape may not be selected
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAspectRatio">
            <summary>
            Don't allow changes in aspect ratio
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockCropping">
            <summary>
            No cropping this shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockPosition">
            <summary>
            Don't allow the shape to be moved
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockShapeType">
            <summary>
            Lock the shape type (don't allow Change Shape)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockText">
            <summary>
            Do not edit text
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockVertices">
            <summary>
            Edit Points not allowed
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fNoFillHitTest">
            <summary>
            Hit test a shape as though filled
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fNoHitTestPicture">
            <summary>
            Do not hit test the picture	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fNoLineDrawDash">
            <summary>
            Draw a dashed line if no line
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fOleIcon">
            <summary>
            For OLE objects, whether the object is in icon form
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fOnDblClickNotify" />
        <member name="F:FlexCel.Core.TShapeOption.fOneD" />
        <member name="F:FlexCel.Core.TShapeOption.fPerspective">
            <summary>
            On/off
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fPreferRelativeResize">
            <summary>
            For UI only. Prefer relative resizing. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fPrint" />
        <member name="F:FlexCel.Core.TShapeOption.fRotateText">
            <summary>
            Rotate text with shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fSelectText">
            <summary>
            TRUE if single click selects text, FALSE if two clicks
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fShadow">
            <summary>
            Any shadow?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fshadowObscured">
            <summary>
            Excel5-style shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fShadowOK">
            <summary>
            Shadow may be set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoBottom">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoLeft">
            <summary>
            Defines the G (geometry) coordinate space. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoRight">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoTop">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextAlign">
            <summary>
            alignment on curve
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFBestFit">
            <summary>
            Scale text-on-path
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFBold">
            <summary>
            Bold font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFDxMeasure">
            <summary>
            Do not measure along path
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFItalic">
            <summary>
            Italic font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFKern">
            <summary>
            Kern characters
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFNormalize">
            <summary>
            Stretch char height
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFont">
            <summary>
            font family name
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFReverseRows">
            <summary>
            Reverse row order
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFShadow">
            <summary>
            Shadow font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFShrinkFit">
            <summary>
            Char bounding box
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFSmallcaps">
            <summary>
            Small caps font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFStretch">
            <summary>
            Stretch to fit shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFStrikethrough">
            <summary>
            Strike through font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFTight">
            <summary>
            Tightening or tracking
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFUnderline">
            <summary>
            Underline font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFVertical">
            <summary>
            Rotate characters
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextRTF">
            <summary>
            RTF text string
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextSize">
            <summary>
            default point size
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextSpacing">
            <summary>
            fixed point 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextUNICODE">
            <summary>
            UNICODE text string
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.hspMaster">
            <summary>
            master shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.hspNext">
            <summary>
            ID of the next shape (used by Word for linked textboxes)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.hyperlinkHint">
            <summary>
            Hint used in the hyperlink.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lidRegroup" />
        <member name="F:FlexCel.Core.TShapeOption.lineBackColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineBottomDashStyle">
            <summary>
            Custom dash style of the line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineColor">
            <summary>
            Color of line
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineDashing">
            <summary>
            Can be overridden by:
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineDashStyle">
            <summary>
            As Win32 ExtCreatePen
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndArrowhead">
            <summary>
            Arrow at end
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndArrowLength">
            <summary>
            Arrow at end
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndArrowWidth">
            <summary>
            Arrow at start
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndCapStyle">
            <summary>
            How to end lines
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillBlip">
            <summary>
            Pattern/texture
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillBlipFlags">
            <summary>
            Blip flags
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillBlipName">
            <summary>
            Blip file name
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillDztype">
            <summary>
            How to interpret fillWidth/Height numbers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillHeight">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillShape">
            <summary>
            Register pattern on shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillWidth">
            <summary>
            How big (A units) to make a metafile texture.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineJoinStyle">
            <summary>
            How to join lines
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineLeftDashStyle">
            <summary>
            Custom dash style of the line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineMiterLimit">
            <summary>
            ratio (16.16) of width
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineOpacity">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineRightDashStyle">
            <summary>
            Custom dash style of the line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStartArrowhead">
            <summary>
            Arrow at start
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStartArrowLength">
            <summary>
            Arrow at end
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStartArrowWidth">
            <summary>
            Arrow at start
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStyle">
            <summary>
            Draw parallel lines?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineTopDashStyle">
            <summary>
            Custom dash style of the line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineType">
            <summary>
            Type of line
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineWidth">
            <summary>
            A units; 1pt == 12700 EMUs
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.LockRotation">
            <summary>
            No rotation
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lTxid">
            <summary>
            id for the text, value determined by the host
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.None">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pAdjustHandles">
            <summary>
            This property specifies an array of adjust handles which allow a user to manipulate the geometry of this shape. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pConnectionSites">
            <summary>
            This property specifies an array of connection sites that a user can use to make a link between shapes. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pConnectionSitesDir">
            <summary>
            This property specifies an array of angles corresponding to the connection sites in the 
            pConnectionSites_complex property that are used to determine the direction that a connector links 
            to the corresponding connection site. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOffsetX">
            <summary>
            The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOffsetY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOriginX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOriginY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectivePerspectiveX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectivePerspectiveY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleXToX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleXToY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleYToX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleYToY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveType">
            <summary>
            Where transform applies
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveWeight">
            <summary>
            Scaling factor
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pGuides">
            <summary>
             Array of guide formula for the shape which specify how the geometry of the shape changes as the adjust handles are dragged.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pib">
            <summary>
            Blip to display	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibFlags">
            <summary>
            Blip flags	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibName">
            <summary>
            Blip file name	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibPrintFlags">
            <summary>
            Blip flags	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibPrintName">
            <summary>
            Blip file name	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureActive">
            <summary>
            Server is active (OLE objects only)	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureBiLevel">
            <summary>
            bi-level display	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureBrightness">
            <summary>
            brightness setting	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureContrast">
            <summary>
            contrast setting	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureDblCrMod">
            <summary>
            Modification used if shape has double shadow	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureGamma">
            <summary>
            16.16 gamma	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureGray">
            <summary>
            grayscale display	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureId">
            <summary>
            Host-defined ID for OLE objects (usually a pointer)	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureTransparent">
            <summary>
            transparent color (none if ~0UL)	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pihlShape" />
        <member name="F:FlexCel.Core.TShapeOption.pInscribe">
            <summary>
            This property specifies an array of rectangles specifying how text should be inscribed within this shape. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pRelationTbl">
            <summary>
            This property specifies relationships in a diagram.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pSegmentInfo">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pVertices">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pWrapPolygonVertices" />
        <member name="F:FlexCel.Core.TShapeOption.Rotation">
            <summary>
            Rotation in 1/65536 degrees.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.scaleText">
            <summary>
            Text zoom/scale (used if fFitTextToShape)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowHighlight">
            <summary>
            Embossed color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOffsetX">
            <summary>
            Offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOffsetY">
            <summary>
            Offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOpacity">
            <summary>
            Fixed 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOriginX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOriginY">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowPerspectiveX">
            <summary>
            16.16 / weight
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowPerspectiveY">
            <summary>
            16.16 / weight
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleXToX">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleXToY">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleYToX">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleYToY">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowSecondOffsetX">
            <summary>
            Double offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowSecondOffsetY">
            <summary>
            Double offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowType">
            <summary>
            Type of effect
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowWeight">
            <summary>
            scaling factor
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shapePath">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeOption.spcoa">
            <summary>
            Callout angle (Any)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.spcod">
            <summary>
            Callout drop type (Specified)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.spcot">
            <summary>
            Callout type  (TwoSegment)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.tableRowProperties">
            <summary>
            This property specifies the minimum sizes of the rows in a table.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.txdir">
            <summary>
            Bi-Di Text direction
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.txflTextFlow">
            <summary>
            Text flow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.WrapText">
            <summary>
            	Wrap text at shape margins
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.wzDescription" />
        <member name="F:FlexCel.Core.TShapeOption.wzEquationXML">
            <summary>
             This property is present if the shape represents an equation generated by Office 2007 or later.  
             The property is a string of XML representing a Word 2003 XML document. 
             The original equation is stored within the oMathPara tag within the document. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.wzName" />
        <member name="F:FlexCel.Core.TShapeOption.xLimo">
            <summary>
            This property specifies an x coordinate above which limousine scaling is used in the horizontal 
            direction. This means that points whose x coordinate is greater than xLimo have their x coordinates 
            incremented rather than linearly scaled.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.xlsxShapeDefinition">
            <summary>
            This record has an xlsx/xml definition of the shape.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.yLimo">
            <summary>
            This property specifies an y coordinate above which limousine scaling is used in the vertical 
            direction. This means that points whose y coordinate is greater than yLimo have their y coordinates
            incremented rather than linearly scaled.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TShapeOptionList">
            <summary>
            This class holds a list of key/values pairs specifying the options for a shape.
            To Get a value from it, use: ShapeOptionList[TShapeOption.xxx];
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeOptionList">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TShapeOptionList</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.As1616(FlexCel.Core.TShapeOption,System.Double)">
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <summary>
            Returns a double (Expressed as 16.16) property if it exists, otherwise the default value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsBool(FlexCel.Core.TShapeOption,System.Boolean,System.Int32)">
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <param name="PositionInSet">Boolean properties are grouped so all properties on one set are in only
            one value. So, the last bool property on the set is the first bit, and so on. ONLY THE LAST PROPERTY
            ON THE SET IS PRESENT.</param>
            <summary>
            Returns a bool property if it exists, otherwise the default value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsByteArray(FlexCel.Core.TShapeOption)">
            <param name="key">Property Name.</param>
            <summary>
            Returns a byte array property if it exists, otherwise null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsHyperLink(FlexCel.Core.TShapeOption,FlexCel.Core.TDrawingHyperlink)">
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <summary>
            Returns an hyperlink property if it exists, otherwise the default value.
            You will normally want to use this property with <see cref="F:FlexCel.Core.TShapeOption.pihlShape" />
            since that is the property that holds the link for the objects.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsInt32(FlexCel.Core.TShapeOption,System.Int32)">
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <summary>
            Returns a long property if it exists, otherwise the default value. Note: This method will return negative numbers if the number is bigger than 65536.
            To get an unsigned int, use <see cref="M:FlexCel.Core.TShapeOptionList.AsUInt32(FlexCel.Core.TShapeOption,System.UInt32)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsLong(FlexCel.Core.TShapeOption,System.Int64)">
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <summary>
            Returns a long property if it exists, otherwise the default value. Note: This method will always assume a positive number.
            To get a signed int, use <see cref="M:FlexCel.Core.TShapeOptionList.AsSignedLong(FlexCel.Core.TShapeOption,System.Int64)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsSignedLong(FlexCel.Core.TShapeOption,System.Int64)">
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <summary>
            Returns a long property if it exists, otherwise the default value. Note: This method will return negative numbers if the number is bigger than 65536.
            To get an unsigned int, use <see cref="M:FlexCel.Core.TShapeOptionList.AsLong(FlexCel.Core.TShapeOption,System.Int64)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsUnicodeString(FlexCel.Core.TShapeOption,System.String)">
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <summary>
            Returns an unicode property if it exists, otherwise the default value.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if 2 instances of this class have the same values.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.GetEnumerator">
            <summary>
            Gets the enumerator for this class. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.GetHashCode">
            <summary>
            Hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.System#Collections#Generic#IEnumerable{FlexCel#Core#TShapeOption}#GetEnumerator">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TShapePresetGuideType">
            <summary>
            Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_b">
            <summary>
            Shape Bottom Edge ('b') - Constant value of "h" 
            This is the bottom edge of the shape and since the top edge of the shape is considered the 0 point, the bottom edge is thus the shape height. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_cd">
            <summary>
            m/n of a Circle ('mcdn') - 
            The units here are in 60,000ths of a degree. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_h">
            <summary>
            Shape Height ('h') 
            This is the variable height of the shape defined in the shape properties. This value is received from the shape transform listed within the spPr element. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_hc">
            <summary>
            Horizontal Center ('hc') - Calculated value of "*/ w 1.0 2.0" 
            This is the horizontal center of the shape which is just the width divided by 2. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_hd">
            <summary>
            1/n of Shape Height ('hdn') - Calculated value of "*/ h 1.0 n.0" 
            This is 1/n the shape height. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_l">
            <summary>
            Shape Left Edge ('l') - Constant value of "0" 
            This is the left edge of the shape and the left edge of the shape is considered the horizontal 0 point. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_ls">
            <summary>
            Longest Side of Shape ('ls') - Calculated value of "max w h" 
            This is the longest side of the shape. This value is either the width or the height depending on which is greater. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_r">
            <summary>
            Shape Right Edge ('r') - Constant value of "w" 
            This is the right edge of the shape and since the left edge of the shape is considered the 0 point, the right edge is thus the shape width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_ss">
            <summary>
            Shortest Side of Shape ('ss') - Calculated value of "min w h" 
            This is the shortest side of the shape. This value is either the width or the height depending on which is smaller. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_ssd">
            <summary>
            1/n Shortest Side of Shape ('ssdn') - Calculated value of "*/ ss 1.0 n.0" 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_t">
            <summary>
            Shape Top Edge ('t') - Constant value of "0" 
            This is the top edge of the shape and the top edge of the shape is considered the vertical 0 point. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_vc">
            <summary>
            Vertical Center of Shape ('vc') - Calculated value of "*/ h 1.0 2.0" 
            This is the vertical center of the shape which is just the height divided by 2. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_w">
            <summary>
            Shape Width ('w') 
            This is the variable width of the shape defined in the shape properties. This value is received from the shape transform listed within the spPr element. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapePresetGuideType.Pr_wd">
            <summary>
            1/n of Shape Width ('wdn') - Calculated value of "*/ w 1.0 n.0" 
            This is 1/n the shape width. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TShapeProperties">
            <summary>
            A class describing an Excel graphics object.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TShapeProperties">
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.AddChild(FlexCel.Core.TShapeProperties)">
            <param name="sp">Shape to be added.</param>
            <summary>
            Adds a new child for this autoshape.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.Anchor">
            <summary>
            Coordinates of the shape. Note that when the shape is a group, this value is null and the real anchor is 
            retruned in the first child of the shape.
            To get the real Anchor of a first level object, use <see cref="P:FlexCel.Core.TShapeProperties.NestedAnchor" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.Children(System.Int32)">
            <param name="index">Index of the shape (1-based)</param>
            <summary>
            Returns one of the shapes inside of this one.
            </summary>
            <returns>A child shape.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ChildrenCount">
            <summary>
            Number of shapes that are inside this shape.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.FlipH">
            <summary>
            True if the shape is flipped horizontally.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.FlipV">
            <summary>
            True if the shape is flipped vertically.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.GetAlternateText">
            <summary>
            Returns the Alternate Text for a shape. This is used for example in the "Alt" attribute when exporting to html.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.IsActiveX">
            <summary>
            Returns true if the object is an ActiveX object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.IsInternal">
            <summary>
            Returns true if the object is an internal object, like a comment or the arrow of an autofilter.
            Internal objects shouldn't be modified.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.NestedAnchor">
            <summary>
            Real Coordinates of the shape. Note that when the shape is a group, the value in <see cref="P:FlexCel.Core.TShapeProperties.Anchor" /> is null and the real anchor is 
            returned in the first child of the shape. 
            This method will get the real Anchor of a first level object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.NestedOptions">
            <summary>
            When the shape is a group, the real properties of the shape are in its first children. This method 
            returns the correct shape options.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ObjectPath">
            <summary>
            Use this string to identify the shape when it is not the first on the hierarchy.
            For Example, imagine you have a Group Shape A with 2 children, B and C.
            If you want to change the text on shape C, you need to call SetObjectText(n,ObjectPath);
            <br />
            The object path can be of 2 types: Absolute or relative. Absolute object paths
            start with "\\" and include the parent object. Relative paths don't include the main group shape.
            <br />For example the absolute path "@1\\2\\3" is the same as accessing the object 1, with object path "2\\3"
            <b /> This property returns the relative path, you can get the absolute path with <see cref="P:FlexCel.Core.TShapeProperties.ObjectPathAbsolute" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ObjectPathAbsolute">
            <summary>
            Use this string to identify the shape when it is not the first on the hierarchy.
            For Example, imagine you have a Group Shape A with 2 children, B and C.
            If you want to change the text on shape C, you need to call SetObjectText(n,ObjectPath);
            <br />
            The object path can be of 2 types: Absolute or relative. Absolute object paths
            start with "\\" and include the parent object. Relative paths don't include the main group shape.
            <br />For example the absolute path "1\\2\\3" is the same as accessing the object 1, with object path "2\\3"
            <b /> This property returns the absolute path, you can get the relative path with <see cref="P:FlexCel.Core.TShapeProperties.ObjectPath" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ObjectPathShapeId">
            <summary>
            Returns the object path as a shape id. This is used mostly internally.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ObjectType">
            <summary>
            Type of object. Note that this is not the same as <see cref="P:FlexCel.Core.TShapeProperties.ShapeType" />.
            A comment might have a ShapeType=TShapeType.Rectangle, but its object type is TObjectType.Comment.
            A rectangle Autoshape will also have ShapeType=TShapeType.Rectangle, but its ObjectType will be
            TObjectType.Rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.Print">
            <summary>
            True if the shape should be printed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.RotateTextWithShape">
            <summary>
            If true, the text will be rotated with the shape. Note that this option is only available in Excel 2007 or newer.
            Older Excels will never rotate thet text with the shape.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeId">
            <summary>
            This is an internal identified for the shape. It will remain the same once the file is loaded, but it might
            change when you load the same file at different times.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeName">
            <summary>
            Name of the shape if it is named, null otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeOptions">
            <summary>
            A lot of personalized settings, like shadow type fill color, line type, etc.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeThemeFont">
            <summary>
            Theme Font used for the text in the shape. This property only affects xlsx files, in xls font is always arial black,
            and you can change the font ony inside the rich string, not in a global way. In xls files this will be null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeType">
            <summary>
            Type of shape. Note that this is not the same as <see cref="P:FlexCel.Core.TShapeProperties.ObjectType" />
            A comment might have a ShapeType=TShapeType.Rectangle, but its object type is TObjectType.Comment.
            A rectangle Autoshape will also have ShapeType=TShapeType.Rectangle, but its ObjectType will be
            TObjectType.Rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.Text">
            <summary>
            Text of the shape if is has some, null otherwise.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.TextAsRichString(FlexCel.Core.ExcelFile)">
            <param name="xls">ExcelFile with the string. It is used to calculate indexed colors.</param>
            <summary>
            Converts the TDrawingRichString to a TRichString
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.TextFlags">
            <summary>
            Option flags for the Text shape.
            Mask: 0x000E
                   Horizontal text alignment:
                        1 = left-aligned
                        2 = centered
                        3 = right-aligned
                        4 = justified
            Mask: 0x0070
                   Vertical text alignment:
                        1 = top
                        2 = center
                        3 = bottom
                        4 = justify
            Mask: 0x0200
                    1 if the Lock Text option is on (Format Text Box dialog box, Protection tab)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.TextRotation">
            <summary>
            Text rotation, in degrees * 0xFFFF
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.Visible">
            <summary>
            True if the shape is visible.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TShapeType">
            <summary>
            Enumeration with the different shapes.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout1">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout3">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout90">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout1">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout3">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout90">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonBackPrevious">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonBeginning">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonBlank">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonDocument">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonEnd">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonForwardNext">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonHelp">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonHome">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonInformation">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonMovie">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonReturn">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonSound">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Arc">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Arrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Balloon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector3">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector4">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector5">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentUpArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Bevel">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BlockArc">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout1">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout3">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout90">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BracePair">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.BracketPair">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout1">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout3">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout90">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Can">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ChartPlus">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ChartStar">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ChartX">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Chevron">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Chord">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CircularArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Cloud">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CloudCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Corner">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CornerTabs">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Cube">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector3">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector4">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector5">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedDownArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedLeftArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedRightArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedUpArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Decagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.DiagStripe">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Diamond">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Dodecagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Donut">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.DoubleWave">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.DownArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.DownArrowCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Ellipse">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.EllipseRibbon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.EllipseRibbon2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartAlternateProcess">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartCollate">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartConnector">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDecision">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDelay">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDisplay">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDocument">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartExtract">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartInputOutput">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartInternalStorage">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMagneticDisk">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMagneticDrum">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMagneticTape">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartManualInput">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartManualOperation">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMerge">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMultidocument">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOfflineStorage">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOffpageConnector">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOnlineStorage">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOr">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPredefinedProcess">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPreparation">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartProcess">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPunchedCard">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPunchedTape">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartSort">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartSummingJunction">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartTerminator">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.FoldedCorner">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Frame">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Funnel">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Gear6">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Gear9">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.HalfFrame">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Heart">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Heptagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Hexagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.HomePlate">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.HorizontalScroll">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.HostControl">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.IrregularSeal1">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.IrregularSeal2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.IsocelesTriangle">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftArrowCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftBrace">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftBracket">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftCircularArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightArrowCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightCircularArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightRibbon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightUpArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftUpArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LightningBolt">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Line">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.LineInv">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.MathDivide">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.MathEqual">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.MathMinus">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.MathMultiply">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.MathNotEqual">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.MathPlus">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Moon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Nil">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.NonIsoscelesTrapezoid">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.NoSmoking">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.NotchedCircularArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.NotchedRightArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.NotPrimitive">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Octagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Parallelogram">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Pentagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.PictureFrame">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Pie">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.PieWedge">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Plaque">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.PlaqueTabs">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Plus">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.QuadArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.QuadArrowCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Rectangle">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Ribbon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Ribbon2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightArrowCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightBrace">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightBracket">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightTriangle">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Round1Rect">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Round2DiagRect">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Round2SameRect">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.RoundRectangle">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal16">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal24">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal32">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal4">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal8">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.SmileyFace">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Snip1Rect">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Snip2DiagRect">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Snip2SameRect">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.SnipRoundRect">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.SquareTabs">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Star">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Star10">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Star12">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Star6">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Star7">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Star8">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.StraightConnector1">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.StripedRightArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Sun">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.SwooshArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Teardrop">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchDownCurve">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchDownPour">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchUpCurve">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchUpPour">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextBox">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextButtonCurve">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextButtonPour">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCanDown">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCanUp">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCascadeDown">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCascadeUp">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextChevron">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextChevronInverted">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCircleCurve">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCirclePour">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCurve">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCurveDown">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCurveUp">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflate">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateBottom">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateInflate">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateInflateDeflate">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateTop">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeDown">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeLeft">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeRight">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeUp">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextHexagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextInflate">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextInflateBottom">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextInflateTop">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextOctagon">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextOnCurve">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextOnRing">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextPlainText">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextRing">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextRingInside">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextRingOutside">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextSimple">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextSlantDown">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextSlantUp">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextStop">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextTriangle">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextTriangleInverted">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave1">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave2">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave3">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave4">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.ThickArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Trapezoid">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Trapezoid2007">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpArrowCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpDownArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpDownArrowCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.UturnArrow">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.VerticalScroll">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.Wave">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.WedgeEllipseCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.WedgeRectCallout">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TShapeType.WedgeRRectCallout">
            <summary />
        </member>
        <member name="T:FlexCel.Core.TSharedWorkbookProtectionOptions">
            <summary>
            Options for protecting the change list in a shared workbook. In Excel you can change this settings in Protection-&gt;Protect Shared Workbook.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSharedWorkbookProtectionOptions">
            <summary>
            Initializes empty protection.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSharedWorkbookProtectionOptions(System.Boolean)">
            <param name="aSharingWithTrackChanges">True to protect the change history from being removed.</param>
            <summary>
            Initializes the class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSharedWorkbookProtectionOptions.SharingWithTrackChanges">
            <summary>
            True to protect the change history from being removed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TSheetCalcMode">
            <summary>
            How the file will be calculated by Excel. This enum doesn't affect FlexCel recalculation.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSheetCalcMode.Automatic">
            <summary>
            Automatic recalculation.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetCalcMode.AutomaticExceptTables">
            <summary>
            Automatic recalculation without tables.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetCalcMode.Manual">
            <summary>
            Manual recalculation.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSheetOptions">
            <summary>
            General options for a sheet. In Excel, this settings are located in Tools-&gt;Options-&gt;View in the "Window options" box.
            Most of this options can be set with dedicated methods in <see cref="T:FlexCel.Core.ExcelFile" />, but this type allows to set them all at once, 
            or copy them from other file. This options apply only to the active sheet. For options that apply to all the sheets see <see cref="T:FlexCel.Core.TSheetWindowOptions" /></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.AutomaticGridLineColors">
            <summary>
            If 1, the color of gridlines will be gray. If 0 it will be the color specified at <see cref="P:FlexCel.Core.ExcelFile.GridLinesColor" />.
            Note that calling <see cref="P:FlexCel.Core.ExcelFile.GridLinesColor" /> will automatically set this property to 0.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.None">
            <summary>
            No option is selected.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.OutlineSymbols">
            <summary>
            If 1, Excel will show the outline symbols (+/-) when there are gouped rows or columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.PageBreakView">
            <summary>
            If 1 Excel will show the page breaks.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.RightToLeft">
            <summary>
            If 1, the sheet is Right to left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ShowFormulaText">
            <summary>
            If 1, Excel will show formula text instead of formula results. This is the same as calling <see cref="P:FlexCel.Core.ExcelFile.ShowFormulaText" /></summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ShowGridLines">
            <summary>
            If 0 Excel will hide the gridlines, if 1 it will show them. This is the same as calling <see cref="P:FlexCel.Core.ExcelFile.ShowGridLines" /></summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ShowRowAndColumnHeaders">
            <summary>
            if 0 Excel will hide the "A", "B"... column headers and "1", "2" ... row Headers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ZeroValues">
            <summary>
            If 1 Excel will hide 0 values. This is the same as calling <see cref="P:FlexCel.Core.ExcelFile.HideZeroValues" /></summary>
        </member>
        <member name="T:FlexCel.Core.TSheetProtectionOptions">
            <summary>
            Options for protecting a sheet.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSheetProtectionOptions">
            <summary>
            Initializes a not protected block.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSheetProtectionOptions(FlexCel.Core.TProtectionType)">
            <param name="protectAll">If true, all things in the sheet will be protected. this means a property like <see cref="P:FlexCel.Core.TSheetProtectionOptions.Contents" /> 
            will be true, and others like <see cref="P:FlexCel.Core.TSheetProtectionOptions.CellFormatting" />  will be false.
            If false, nothing will.</param>
            <summary>
            Creates a protected or unprotected sheet.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSheetProtectionOptions(System.Boolean)">
            <param name="allTrue">If true, all properties on this class will be set to true.
            This means cells on the sheet will be protected, and things like Cell formatting will be not. 
            If false, all properties will be set to false.</param>
            <summary>
            Creates a protected or unprotected sheet.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.CellFormatting">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.ColumnFormatting">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.Contents">
            <summary>
            Sheet contents are protected
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.DeleteColumns">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.DeleteRows">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.EditAutoFilters">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.EditPivotTables">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.InsertColumns">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.InsertHyperlinks">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.InsertRows">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.Objects">
            <summary>
            Objects on the sheet are protected.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.RowFormatting">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.Scenarios">
            <summary>
            Scenarios on the sheet are protected.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.SelectLockedCells">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.SelectUnlockedCells">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.SortCellRange">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel &gt;= XP.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TSheetType">
            <summary>
            Sheet types
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSheetType.Chart">
            <summary>
            Chart Sheet
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetType.Dialog">
            <summary>
            An Excel 5.0 dialog sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetType.Macro">
            <summary>
            An Excel 4.0 Macro sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetType.Other">
            <summary>
            Something we don't support. It shouldn't happen.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetType.Worksheet">
            <summary>
            Normal WorkSheet.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSheetView">
            <summary>
            This class has the different "Page View" modes that you can choose in Excel, ad properties of each mode.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSheetView(FlexCel.Core.TSheetViewType,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <param name="aViewType">See <see cref="P:FlexCel.Core.TSheetView.ViewType" />.</param>
            <param name="aShowWhitespace">See <see cref="P:FlexCel.Core.TSheetView.ShowWhitespace" />.</param>
            <param name="aShowRulers">See <see cref="P:FlexCel.Core.TSheetView.ShowRulers" />.</param>
            <param name="aZoomNormal">See <see cref="P:FlexCel.Core.TSheetView.ZoomNormal" />.</param>
            <param name="aZoomPageLayout">See <see cref="P:FlexCel.Core.TSheetView.ZoomPageLayout" />.</param>
            <param name="aZoomPageBreakPreview">See <see cref="P:FlexCel.Core.TSheetView.ZoomPageBreakPreview" />.</param>
            <summary>
            Creates a new TSheetView with the specified values.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSheetView.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both object are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSheetView.GetHashCode">
            <summary>
            Returns the hashcode of the instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetView.ShowRulers">
            <summary>
            If true, Excel will show rulers when in Page Layout mode.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetView.ShowWhitespace">
            <summary>
            If true, when in Page Layout mode Excel will show whitespace between sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetView.ViewType">
            <summary>
            Active view mode.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetView.ZoomNormal">
            <summary>
            Zoom for when we are in normal mode. It must be 0, or a value between 10 and 400. Zero means to use the default zoom.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetView.ZoomPageBreakPreview">
            <summary>
            Zoom for when we are in Page Break Preview mode. It must be 0, or a value between 10 and 400. Zero means to use the default zoom which is 60% for Excel 2013.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSheetView.ZoomPageLayout">
            <summary>
            Zoom for when we are in Page Layout mode. It must be 0, or a value between 10 and 400. Zero means to use the default zoom.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TSheetViewType">
            <summary>
            The page mode of a sheet. You select this in Excel by changing the icons at the bottom right, or from the ribbon, in the "View" tab.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSheetViewType.Normal">
            <summary>
            Normal spreadsheet mode.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetViewType.PageBreakPreview">
            <summary>
            Document as it will appear on the printed page.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetViewType.PageLayout">
            <summary>
            A preview of where pages will break when the document is printed.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSheetWindowOptions">
            <summary>
            General options for how sheets display. In Excel, this settings are located in Tools-&gt;Options-&gt;View in the "Window options" box.
            This options apply only to all the sheets. For options that apply only to the active sheet see <see cref="T:FlexCel.Core.TSheetOptions" /></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.HideWindow">
            <summary>
            If true, the workbook window will be hidden. You will need to go to Window-&gt;Unhide to see it.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.MinimizeWindow">
            <summary>
            If true, the workbok window will be minimized.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.None">
            <summary>
            No option is selected.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.ShowHorizontalScrollBar">
            <summary>
            If false, the horizontal scroll bar will be hidden.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.ShowSheetTabBar">
            <summary>
            If false, the bar with sheet names at the bottom will be hidden.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.ShowVerticalScrollBar">
            <summary>
            If false, the vertical scroll bar will be hidden.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSolidFill">
            <summary>
            Shapes are filled with a solid color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSolidFill(FlexCel.Core.TDrawingColor)">
            <param name="aColor">Color for the fill.</param>
            <summary>
            Creates a new Solid fill.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSolidFill.Color">
            <summary>
            Color used to fill the shape.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSolidFill.CompareTo(System.Object)">
            <param name="obj" />
            <summary>
            Returns -1 if obj is bigger than this, 0 if both objects are the same, and 1 if obj is smaller than this.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSolidFill.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if this instance has the same data as the object obj.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSolidFill.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TSortFormulaMode">
            <summary>
            Defines how FlexCel will sort a range of cells, when you call XlsFile.Sort. You will normally want to specify "MoveFormulas", 
            but for huge amounts of data where you know formulas won't matter, you might choose the "ExcelLike" mode. Note that
            Excel itself doesn't adapt correctly the formulas when sorting, and it works like the ExcelLike mode.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSortFormulaMode.ExcelLike">
            <summary>
            Formulas that are outside the range being sorted won't change. So if you are sorting for example the range A1:B10, and have a formula
            in A20: = A1, after sorting A20 will still be A1, and not reference the cell it used to reference. 
            Formulas inside the range being sorted that point to different rows will not keep pointing to the same row.
            If for example in A1 you have =A2 and the sorting moves row 1 to 5, then the formula will be =A6, instead of pointing
            to the place where row 2 moved.
            This method is faster than the "MoveFormulas" approach, and it is the method Excel itself uses. If you don't have formulas
            pointing to other places in the row being moved, this method can be much faster.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSortFormulaMode.MoveFormulas">
            <summary>
            All formulas will remain pointing to the right places after the sort. This is the correct thing to do, and you will normally want to use this mode, 
            unless it is too slow.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSortOrder">
            <summary>
            The sort order for a sort operation.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSortOrder.Ascending">
            <summary>
            Sort ascending.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSortOrder.Descending">
            <summary>
            Sort descending.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSpinProperties">
            <summary>
            Spin properties of a scrollbar, spinner, listbox or combobox.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSpinProperties">
            <summary>
            Creates an empty TSpinProperties instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSpinProperties(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aMin">Minimum value for the spin control.</param>
            <param name="aMax">Maximum value for the spin control.</param>
            <param name="aIncr">Small increment.</param>
            <param name="aPage">Big increment.</param>
            <summary>
            Creates a new instance with data and a default dx of 16.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSpinProperties(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aMin">Minimum value for the spin control.</param>
            <param name="aMax">Maximum value for the spin control.</param>
            <param name="aIncr">Small increment.</param>
            <param name="aPage">Big increment.</param>
            <param name="aDx">Width of the scrollbar. It should normally be 16.</param>
            <summary>
            Creates a new instance with data.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSpinProperties(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="aMin">Minimum value for the spin control.</param>
            <param name="aMax">Maximum value for the spin control.</param>
            <param name="aIncr">Small increment.</param>
            <param name="aPage">Big increment.</param>
            <param name="aDx">Width of the scrollbar. It should normally be 16.</param>
            <param name="aHorizontal">If true, the spin control will be oriented horizontally.</param>
            <summary>
            Creates a new instance with data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSpinProperties.Clone">
            <summary>
            Creates a copy of the data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSpinProperties.Dx">
            <summary>
            Width of the scrollbar. It should normally be 16.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSpinProperties.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSpinProperties.GetHashCode">
            <summary>
            Hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSpinProperties.Incr">
            <summary>
            How much the scrollbar moves when you press the up or down arrow. You will probably want to keep this at 1.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSpinProperties.IsHorizontal">
            <summary>
            If used in a scrollbar, this property defines if the scrollbar is horizontal or vertical.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSpinProperties.Max">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSpinProperties.Min">
            <summary>
            Minimum value for the spinner/scrollbar.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSpinProperties.Page">
            <summary>
            How much the scrollbar moves when you press pgup/down.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TStackedMode">
            <summary>
            Way the series stack one to the other. This does not apply to all chart types.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TStackedMode.None">
            <summary>
            Data is not Stacked.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStackedMode.Stacked">
            <summary>
            Data is Stacked. (for example in stacked bar chart)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStackedMode.Stacked100">
            <summary>
            Data is stacked and normalized to 100%. (This is a 100% stacked bar/column chart)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TStyleCategory">
            <summary>
            Category to which a cell style belongs. This is only valid for Excel 2007 or newer.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TStyleCategory.Custom">
            <summary>
            Custom style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStyleCategory.DataModel">
            <summary>
            Data model style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStyleCategory.GoodBadNeutral">
            <summary>
            Good, bad, neutral style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStyleCategory.NumberFormat">
            <summary>
            Number format style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStyleCategory.ThemedCell">
            <summary>
            Themed cell style. (ACCENT styles)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStyleCategory.TitleHeading">
            <summary>
            Title and heading style.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSVGAttribute">
            <summary>
            Represents an attribute for using in SVG.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSVGAttribute(System.String,System.String)">
            <param name="aName" />
            <param name="aValue" />
            <summary>
            Creates a new TSVGAttrigbute with null namespace.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TSVGAttribute(System.String,System.String,System.String)">
            <param name="aName" />
            <param name="aValue" />
            <param name="aNamespace" />
            <summary>
            Creates a new TSVGAttribute.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSVGAttribute.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if obj has the same data as this instance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSVGAttribute.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSVGAttribute.Name">
            <summary>
            Name of the SVG atribute.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSVGAttribute.Namespace">
            <summary>
            Namespace of the SVG attribute.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSVGAttribute.op_Equality(FlexCel.Core.TSVGAttribute,FlexCel.Core.TSVGAttribute)">
            <param name="a" />
            <param name="b" />
            <summary>
            Returns true if both structures are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TSVGAttribute.op_Inequality(FlexCel.Core.TSVGAttribute,FlexCel.Core.TSVGAttribute)">
            <param name="a" />
            <param name="b" />
            <summary>
            Returns true if both structures are different.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TSVGAttribute.Value">
            <summary>
            Value of the SVG attribute.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TSVGExportType">
            <summary>
            Customized what data will be included in an svg file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSVGExportType.All">
            <summary>
            The SVG created will have everything, including the xml declaration and the svg tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSVGExportType.NoXmlDeclaration">
            <summary>
            The SVG created will not have an xml declaration. Use this one to embed the svg in other documents.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSystemColor">
            <summary>
            System colors.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TSystemColor.ActiveBorder">
            <summary>
            Specifies an Active Window Border Color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.ActiveCaption">
            <summary>
            Specifies the active window title bar color. In particular the left side color in the color gradient of an active window's title bar if the gradient effect is enabled.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.AppWorkspace">
            <summary>
            Specifies the Background color of multiple document interface (MDI) applications.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.Background">
            <summary>
            Specifies the desktop background color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.BtnFace">
            <summary>
            Specifies the face color for three-dimensional display elements and for dialog box backgrounds.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.BtnHighlight">
            <summary>
            Specifies the highlight color for three-dimensional display elements (for edges facing the light source).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.BtnShadow">
            <summary>
            Specifies the shadow color for three-dimensional display elements (for edges facing away from the light source).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.BtnText">
            <summary>
            Specifies the color of text on push buttons.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.CaptionText">
            <summary>
            Specifies the color of text in the caption, size box, and scroll bar arrow box.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.DkShadow3d">
            <summary>
            Specifies a Dark shadow color for three-dimensional display elements.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.GradientActiveCaption">
            <summary>
            Specifies the right side color in the color gradient of an active window's title bar.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.GradientInactiveCaption">
            <summary>
            Specifies the right side color in the color gradient of an inactive window's title bar.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.GrayText">
            <summary>
            Specifies a grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.Highlight">
            <summary>
            Specifies the color of Item(s) selected in a control.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.HighlightText">
            <summary>
            Specifies the text color of item(s) selected in a control.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.HotLight">
            <summary>
            Specifies the color for a hyperlink or hot-tracked item.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.InactiveBorder">
            <summary>
            Specifies the color of the Inactive window border.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.InactiveCaption">
            <summary>
            Specifies the color of the Inactive window caption. Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.InactiveCaptionText">
            <summary>
            Specifies the color of text in an inactive caption.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.InfoBk">
            <summary>
            Specifies the background color for tooltip controls.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.InfoText">
            <summary>
            Specifies the text color for tooltip controls.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.Light3d">
            <summary>
            Specifies a Light color for three-dimensional display elements (for edges facing the light source).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.Menu">
            <summary>
            Specifies the menu background color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.MenuBar">
            <summary>
            Specifies the background color for the menu bar when menus appear as flat menus.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.MenuHighlight">
            <summary>
            Specifies the color used to highlight menu items when the menu appears as a flat menu.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.MenuText">
            <summary>
            Specifies the color of Text in menus.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.None">
            <summary>
            Color is not specified.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.ScrollBar">
            <summary>
            Specifies the scroll bar gray area color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.Window">
            <summary>
            Specifies window background color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.WindowFrame">
            <summary>
            Specifies the window frame color.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSystemColor.WindowText">
            <summary>
            Specifies the color of text in windows.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TTableDefinition">
            <summary>
            Contains the definition of an Excel table.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTableDefinition">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TTableDefinition</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTextRotation">
            <summary>
            Text direction for objects like comments, that allow rotation, but only in 90 degrees.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TTextRotation.Normal">
            <summary>
            Text is not rotated.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTextRotation.Rotated90Degrees">
            <summary>
            Text is rotated 90 degrees counterclockwise.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTextRotation.RotatedMinus90Degrees">
            <summary>
            Text is rotated 90 degrees clockwise.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTextRotation.Vertical">
            <summary>
            Text is written in vertical layout, a character below the other.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TTheme">
            <summary>
            Contains a complete definition for an Office Theme.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTheme">
            <summary>
            Creates a new standard "Office" theme.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TTheme.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTheme.Elements">
            <summary>
            Elements of the theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTheme.IsStandard">
            <summary>
            Returns true if the theme is standard.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTheme.Name">
            <summary>
            Name of the theme definition. This will be shown in Excel UI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTheme.ThemeVersion">
            <summary>
            Excel version that saved this theme. For Excel 2007 this value is 124226. For themes new to Excel 2010, this value might be 144315
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TThemeColor">
            <summary>
            Specifies one of the 12 theme colors.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Accent1">
            <summary>
            Accent1 Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Accent2">
            <summary>
            Accent2 Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Accent3">
            <summary>
            Accent3 Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Accent4">
            <summary>
            Accent4 Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Accent5">
            <summary>
            Accent5 Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Accent6">
            <summary>
            Accent6 Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Background1">
            <summary>
            Main color for backgrounds in Theme. This theme can also be called "Light1" by Excel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Background2">
            <summary>
            Secondary color for backgrounds in Theme. This theme can also be called "Light2" by Excel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.FollowedHyperLink">
            <summary>
            FollowedHyperLink Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Foreground1">
            <summary>
            Main color for foregrounds in Theme. This theme can also be called "Dark1" by Excel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.Foreground2">
            <summary>
            Secondary color for foregrounds in Theme. This theme can also be called "Dark2" by Excel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.HyperLink">
            <summary>
            HyperLink Theme.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TThemeColor.None">
            <summary>
            No theme color.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TThemeColorScheme">
            <summary>
            A color scheme for a theme.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TThemeColorScheme">
            <summary>
            Creates a new ColorScheme with standard properties.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeColorScheme.Item(FlexCel.Core.TThemeColor)">
            <param name="themeColor" />
            <summary>
            Returns a color definition for a themed color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeColorScheme.Name">
            <summary>
            Name of the color definition. This will be shown in Excel UI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeColorScheme.Reset">
            <summary>
            Resets the color scheme to be the Excel 2007 standard.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TThemeElements">
            <summary>
            Definitions of the elements in a theme (colors, fonts, formats). This is the main part of a theme.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TThemeElements">
            <summary>
            Creates a new theme elements.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeElements.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeElements.ColorScheme">
            <summary>
            Color Scheme in the theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeElements.FontScheme">
            <summary>
            Font Scheme in the theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeElements.FormatScheme">
            <summary>
            Format Scheme (Effects). This won't affect cells in the spreadsheet, but can affect drawings.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeElements.IsStandard">
            <summary>
            Returns true if the elements in this theme are the default ones in Office 2007.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TThemeFont">
            <summary>
            Represents either a major or a minor font for the theme.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TThemeFont">
            <summary>
            Creates a new TThemeFont instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TThemeFont(FlexCel.Core.TThemeTextFont,FlexCel.Core.TThemeTextFont,FlexCel.Core.TThemeTextFont)">
            <param name="aLatin">See <see cref="P:FlexCel.Core.TThemeFont.Latin" /></param>
            <param name="aEastAsian">See <see cref="P:FlexCel.Core.TThemeFont.EastAsian" /></param>
            <param name="aComplexScript">See <see cref="P:FlexCel.Core.TThemeFont.ComplexScript" /></param>
            <summary>
            Creates a new TThemeFont.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeFont.AddFont(System.String,System.String)">
            <param name="script">Script to be associated with the font.</param>
            <param name="typeface">Typeface to associate. Set it to null to delete the element</param>
            <summary>
            Adds a new font to the font collection.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeFont.ClearFonts">
            <summary>
            Clears all font associations.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeFont.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFont.ComplexScript">
            <summary>
            This element specifies that a complex script font be used for a specific run of text. This font is specified with a 
            typeface attribute much like the others but is specifically classified as a complex script font. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFont.EastAsian">
            <summary>
            This element specifies that an East Asian font be used for a specific run of text. This font is specified with a 
            typeface attribute much like the others but is specifically classified as an East Asian font. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeFont.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeFont.GetFont(System.String)">
            <param name="script" />
            <summary>
            Returns the typeface associated with a script.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeFont.GetFontScripts">
            <summary>
            Returns all scripts that have a current association. You can use the values in this array as keys for <see cref="M:FlexCel.Core.TThemeFont.GetFont(System.String)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeFont.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFont.Latin">
            <summary>
                <b>NORMALLY THIS IS ALL YOU HAVE TO CHANGE TO CHANGE A TYPEFACE.</b> Check with APIMate if unsure.
            This element specifies that a Latin font be used for a specific run of text. This font is specified with a typeface 
            attribute much like the others but is specifically classified as a Latin font. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TThemeFontScheme">
            <summary>
            Represents the fonts for a theme.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TThemeFontScheme">
            <summary>
            Creates a new font scheme with standard properties.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFontScheme.MajorFont">
            <summary>
            This element defines the set of major fonts which are to be used under different languages or locals. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFontScheme.MinorFont">
            <summary>
            This element defines the set of minor fonts which are to be used under different languages or locals. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFontScheme.Name">
            <summary>
            Name of the font definition. This will be shown in Excel UI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TThemeFormatScheme">
            <summary>
            Represents the drawing formats (fill styles, line styles, effects) for a theme.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TThemeFormatScheme">
            <summary>
            Creates a new Format scheme instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFormatScheme.BkFillStyleList">
            <summary>
            This element defines a list of background fills that are used within a theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFormatScheme.EffectStyleList">
            <summary>
            This element defines a set of three effect styles that create the effect style list for a theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFormatScheme.FillStyleList">
            <summary>
            This element defines a set of three fill styles that are used within a theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFormatScheme.LineStyleList">
            <summary>
            This element defines a list of three line styles for use within a theme.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeFormatScheme.Name">
            <summary>
            Name of the format definition. This will be shown in Excel UI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TThemeTextFont">
            <summary>
            The characteristics that define a font.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TThemeTextFont(System.String,System.String,FlexCel.Core.TPitchFamily,FlexCel.Core.TFontCharSet)">
            <param name="aTypeface">See <see cref="P:FlexCel.Core.TThemeTextFont.Typeface" /></param>
            <param name="aPanose">See <see cref="P:FlexCel.Core.TThemeTextFont.Panose" /></param>
            <param name="aPitch">See <see cref="P:FlexCel.Core.TThemeTextFont.Pitch" /></param>
            <param name="aCharSet">See <see cref="P:FlexCel.Core.TThemeTextFont.CharSet" /></param>
            <summary>
            Creates a new TThemeTextFont.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeTextFont.CharSet">
            <summary>
            Specifies the character set which is supported by the parent font. This information can be 
            used in font substitution logic to locate an appropriate substitute font when this font is 
            not available. This information is determined by querying the font when present and shall 
            not be modified when the font is not available.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.CompareTo(FlexCel.Core.TThemeTextFont)">
            <param name="obj" />
            <summary>
            Returns -1, 0 or 1 depending if the objects is smaller, equal or bigger than the other.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.CompareTo(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.GetHashCode">
            <summary>
            Returns a hashcode for the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.op_Equality(FlexCel.Core.TThemeTextFont,FlexCel.Core.TThemeTextFont)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.op_GreaterThan(FlexCel.Core.TThemeTextFont,FlexCel.Core.TThemeTextFont)">
            <param name="o1" />
            <param name="o2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.op_Inequality(FlexCel.Core.TThemeTextFont,FlexCel.Core.TThemeTextFont)">
            <param name="f1" />
            <param name="f2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.op_LessThan(FlexCel.Core.TThemeTextFont,FlexCel.Core.TThemeTextFont)">
            <param name="o1" />
            <param name="o2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeTextFont.Panose">
            <summary>
            Specifies the Panose-1 classification number for the current font. 
            This is a string consisting of 20 hexadecimal digits which defines the Panose-1 font classification
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeTextFont.Pitch">
            <summary>
            Specifies the font pitch as well as the font family for the corresponding font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeTextFont.Scheme">
            <summary>
            Returns the scheme for the font, if there is one. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TThemeTextFont.Typeface">
            <summary>
            Specifies the typeface, or name of the font that is to be used. The typeface is a string 
            name of the specific font that should be used in rendering the presentation. If this font is 
            not available within the font list of the generating application than font substitution logic 
            should be utilized in order to select an alternate font. This string can also be "+mj-lt" for the
            major font, and "+mn-lt" for the minor font. To get the typeface name, use <see cref="M:FlexCel.Core.TThemeTextFont.TypefaceName(FlexCel.Core.ExcelFile)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TThemeTextFont.TypefaceName(FlexCel.Core.ExcelFile)">
            <param name="xls" />
            <summary>
            Returns the actual font name used. Different from <see cref="P:FlexCel.Core.TThemeTextFont.Typeface" />, this property will change the "+mj" and "+mn"
            strings in the actual major and minor fonts.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTickType">
            <summary>
            Ticks for an axis.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TTickType.Cross">
            <summary>
            Crosses the axis line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTickType.Inside">
            <summary>
            Inside axis line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTickType.None">
            <summary>
            No Ticks.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTickType.Outside">
            <summary>
            Outside axis line.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TTimePeriod">
            <summary>
            A time period for conditional format.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.Last7Days">
            <summary>
            Last7Days.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.LastMonth">
            <summary>
            LastMonth.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.LastWeek">
            <summary>
            LastWeek.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.NextMonth">
            <summary>
            NextMonth.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.NextWeek">
            <summary>
            NextWeek.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.ThisMonth">
            <summary>
            ThisMonth.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.ThisWeek">
            <summary>
            ThisWeek.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.Today">
            <summary>
            Today.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.Tomorrow">
            <summary>
            Tomorrow.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTimePeriod.Yesterday">
            <summary>
            Yesterday.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TToken">
            <summary>
            This class and all its decendants represent a token in a formula. You can use these classes to modify formulas
            without having to parse the text in them, which can be a difficult task.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TToken(FlexCel.Core.TTokenType)">
            <param name="aTokenType" />
            <summary>
            Creates a new token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TToken.TokenType">
            <summary>
            Returns the type of token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenCellAddress">
            <summary>
            A single cell address in the same sheet or to other sheet. See also TTokenCellRange, TTokenRelativeCellAddress, TTokenRelativeCellRange for other tokens that can contain addresses.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenCellAddress(System.String,FlexCel.Core.TCellAddress)">
            <param name="aExternalBookName">File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.</param>
            <param name="aAddress">Cell where this token will point to.</param>
            <summary>
            Creates a new Cell address token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellAddress.Address">
            <summary>
            Cell address where this reference points to.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellAddress.ExternalBookName">
            <summary>
            File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenCellRange">
            <summary>
            A range of cells. See TTokenCellAddress for single cell references.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenCellRange(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="aExternalBookName">File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.</param>
            <param name="aSheet1">First sheet where the reference points to. Empty or null if the reference points to the same sheet.</param>
            <param name="aSheet2">Second where the reference points to. Empty or null if the reference points to the same sheet.</param>
            <param name="aRow1">First row (1 based).</param>
            <param name="aCol1">First column (1 based).</param>
            <param name="aRow2">Last row (1 based).</param>
            <param name="aCol2">Last column (1 based).</param>
            <param name="aRow1Abs">True if the first row is an absolute reference (like in A$1)</param>
            <param name="aCol1Abs">True if the first column is an absolute reference (like in $A1)</param>
            <param name="aRow2Abs">True if the last row is an absolute reference (like in A$1)</param>
            <param name="aCol2Abs">True if the last column is an absolute reference (like in $A1)</param>
            <summary>
            Creates a new Cell range token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Col1">
            <summary>
            First column of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Col1Absolute">
            <summary>
            True if the reference is absolute (as in $A$1).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Col2">
            <summary>
            Last column of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Col2Absolute">
            <summary>
            True if the reference is absolute (as in $A$1).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.ExternalBookName">
            <summary>
            File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Row1">
            <summary>
            First row of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Row1Absolute">
            <summary>
            True if the reference is absolute (as in $A$1).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Row2">
            <summary>
            Last row of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Row2Absolute">
            <summary>
            True if the reference is absolute (as in $A$1).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Sheet1">
            <summary>
            First sheet where the reference points to. Empty or null if the reference points to the same sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenCellRange.Sheet2">
            <summary>
            Second sheet where the reference points to. Empty or null if the reference points to the same sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenData">
            <summary>
            Constant data, like "Hello" and 1 in the formula: "=IF(A1 = 1,,"Hello")"
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenData(System.Object)">
            <param name="aData">Data.</param>
            <summary>
            Creates a new data token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenData.Data">
            <summary>
            Data represented by this token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenDataArray">
            <summary>
            Array of Constant data, like "Hello" and 1 in the formula: "=IF(A1 = 1,,"Hello")"
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenDataArray(System.Object[,])">
            <param name="aData">Data.</param>
            <summary>
            Creates a new data token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenDataArray.Data">
            <summary>
            Data represented by this token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenFunction">
            <summary>
            A function like "Sum" or "If"
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenFunction(System.String,System.Int32)">
            <param name="aFunctionName">Name of the function.</param>
            <param name="aArgumentCount">Number of arguments for this function. Note that if the function has a fixed
            number of arguments, this parameter is ignored.</param>
            <summary>
            Creates a new function token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenFunction.ArgumentCount">
            <summary>
            Number of arguments for this function. Note that if the function has a fixed
            number of arguments, this parameter is ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenFunction.FunctionName">
            <summary>
            Name of the function represented by this token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenMissingArgument">
            <summary>
            A missing argument for a function. For example the second parameter in the formula: "=IF(A1 = 1,,"Hello")"
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenMissingArgument">
            <summary>
            Creates a new Missing argument token.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenName">
            <summary>
            A named range
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenName(System.String)">
            <param name="aName">Named range.</param>
            <summary>
            Creates a new name token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenName.Name">
            <summary>
            Named range represented by this token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenOperator">
            <summary>
            An operator like "+" or "-"
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenOperator(FlexCel.Core.TOperator)">
            <param name="aOperator">Type of operator.</param>
            <summary>
            Creates a new operator token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenOperator.Operator">
            <summary>
            Operator represented by this token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenParenthesis">
            <summary>
            A parenthesis surrounding the last token. Note that this token is not used in the formula (since RPN doesn't need parenthesis)
            but it is there so Excel can display them.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenParenthesis">
            <summary>
            Creates a new parenthesis token.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenRangeOp">
            <summary>
            An operator that operates in ranges, like union or intersection.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenRangeOp(FlexCel.Core.TRangeOp)">
            <param name="aOperator">Type of operator.</param>
            <summary>
            Creates a new range operator token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRangeOp.Operator">
            <summary>
            Operator represented by this token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenReferenceError">
            <summary>
            This token represents an error like #REF!
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenReferenceError(System.Boolean,System.Boolean,System.Boolean)">
            <param name="aIsArea">If true this is a reference to an area, else to a cell.</param>
            <param name="aIs3D">If true this is a 3d reference, else it is a normal 2D reference.</param>
            <param name="aIsRelative">If true this reference is relative to the cell where the formula is.</param>
            <summary>
            Creates a new TTokenError instance with the corresponding error type.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenReferenceError.Is3D">
            <summary>
            Returns true if this is a reference to to multiple sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenReferenceError.IsArea">
            <summary>
            Returns true if this is a reference to an area of cells.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenReferenceError.IsRelative">
            <summary>
            If true this reference is relative to the cell where the formula is.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenRelativeCellAddress">
            <summary>
            A single cell address in the same sheet or to other sheet. It handles a reference relative to the current cell. So a reference
            in Cell A4 of RowOffset = -1 and ColOffset = 3 would mean the cell D3.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenRelativeCellAddress(System.String,System.String,System.Int32,System.Int32)">
            <param name="aExternalBookName">File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.</param>
            <param name="aSheet">Sheet where the reference points to. Empty or null if the reference points to the same sheet.</param>
            <param name="aRowOffset">The number of rows after or before the current row. It might be negative.</param>
            <param name="aColOffset">The number of columns after or before the current column. It might be negative.</param>
            <summary>
            Creates a new relative cell address token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellAddress.ColOffset">
            <summary>
            The number of columns after or before the current column. It might be negative.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellAddress.ExternalBookName">
            <summary>
            File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellAddress.RowOffset">
            <summary>
            The number of rows after or before the current row. It might be negative.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellAddress.Sheet">
            <summary>
            Sheet where the reference points to. Empty or null if the reference points to the same sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenRelativeCellRange">
            <summary>
            A range of cells with relative references. This is used mostly in named ranges.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenRelativeCellRange(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aExternalBookName">File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.</param>
            <param name="aSheet1">First sheet where the reference points to. Empty or null if the reference points to the same sheet.</param>
            <param name="aSheet2">Second where the reference points to. Empty or null if the reference points to the same sheet.</param>
            <param name="aRowOffset1">First row (1 based).</param>
            <param name="aColOffset1">First column (1 based).</param>
            <param name="aRowOffset2">Last row (1 based).</param>
            <param name="aColOffset2">Last column (1 based).</param>
            <summary>
            Creates a new relative cell range token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellRange.ColOffset1">
            <summary>
            First column of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellRange.ColOffset2">
            <summary>
            Last column of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellRange.ExternalBookName">
            <summary>
            File where the reference points to, when this is a reference to other file. Empty or null if the reference is to the same file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellRange.RowOffset1">
            <summary>
            First row of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellRange.RowOffset2">
            <summary>
            Last row of the range (1 based).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellRange.Sheet1">
            <summary>
            First sheet where the reference points to. Empty or null if the reference points to the same sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenRelativeCellRange.Sheet2">
            <summary>
            Second sheet where the reference points to. Empty or null if the reference points to the same sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenStructuredReference">
            <summary>
            A reference for a cell in a table. For example the reference in the formula =SUM(Table1[[#All],[SomeColumn]])
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenStructuredReference">
            <summary>
            Creates a new Structured Reference argument token.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenType">
            <summary>
            Enumerates the different kind of tokens you can find in a formula
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TTokenType.CellAddress">
            <summary>
            A single cell address in the same sheet or to other sheet. See also CellRange for other tokens that can contain addresses.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.CellRange">
            <summary>
            A range of cells. See CellAddress for single cell references.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.Data">
            <summary>
            Constant data, like "Hello" and 1 in the formula: "=IF(A1 = 1,,"Hello")"
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.DataArray">
            <summary>
            An array of constant data.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.FunctionToken">
            <summary>
            A function like "Sum" or "If"
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.MissingArgument">
            <summary>
            A missing argument for a function. For example the second parameter in the formula: "=IF(A1 = 1,,"Hello")"
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.Name">
            <summary>
            A named range
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.OperatorToken">
            <summary>
            An operator like "+" or "-"
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.Parenthesis">
            <summary>
            A parenthesis surrounding the last token. Note that this token is not used in the formula (since RPN doesn't need parenthesis)
            but it is there so Excel can display them.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.RangeOp">
            <summary>
            Operator in ranges, like "Union" or "Intersection"
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.ReferenceError">
            <summary>
            A token representing a reference to a cell or range that doesn't exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.RelativeCellAddress">
            <summary>
            A cell address relative to the cell where the formula is. This token is used mostly in names.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.RelativeCellRange">
            <summary>
            A cell range relative to the cell where the formula is. This token is used mostly in names.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.StructuredReference">
            <summary>
            A reference to a Table.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.Unsupported">
            <summary>
            This token is not supported by FlexCel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenType.Whitespace">
            <summary>
            Whitespace like " "
            </summary>
        </member>
        <member name="T:FlexCel.Core.TTokenUnsupported">
            <summary>
            This token is not supported by FlexCel.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenUnsupported">
            <summary>
            Creates a new unsupported token.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenWhitespace">
            <summary>
            Whitespace like " ". This is not used in calculation, but it is use by Excel to show the formula as it was entered.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TTokenWhitespace(System.Int32,FlexCel.Core.TTokenWhitespaceCharacter,FlexCel.Core.TTokenWhitespacePosition)">
            <param name="aWhitespaceCount">Whitespace in the formula.</param>
            <param name="aCharacter">Defines the character used in the whitespace.</param>
            <param name="aPosition">Position for the whitespace respect to the next token.</param>
            <summary>
            Creates a new whitespace token.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenWhitespace.Character">
            <summary>
            Character used in the whitespace.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenWhitespace.Position">
            <summary>
            Position of the whitespace.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TTokenWhitespace.WhitespaceCount">
            <summary>
            Number of whitespace characters in this token.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TTokenWhitespaceCharacter">
            <summary>
            Character used in the whitespace.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TTokenWhitespaceCharacter.LineFeed">
            <summary>
            Whitespace consists of character 10 (line feed).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenWhitespaceCharacter.Space">
            <summary>
            Whitespace consists of character 32 (space).
            </summary>
        </member>
        <member name="T:FlexCel.Core.TTokenWhitespacePosition">
            <summary>
            Specifies where the whitespace is added in relation to the next token.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TTokenWhitespacePosition.BeforeClosingParenthesis">
            <summary>
            A parenthesis token covers 2 different parentheses: the open and close ones. So for parentheses, we need 
            2 different cases for whitespace. BeforeClosingParenthesis is for the spaces before the closing parenthesis.
            You would use it for example in the formula '=("hello"     )'
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenWhitespacePosition.BeforeOpenParenthesis">
            <summary>
            A parenthesis token covers 2 different parentheses: the open and close ones. So for parentheses, we need 
            2 different cases for whitespace. BeforeOpenParenthesis is for the spaces before the opening parenthesis.
            You would use it for example in the formula '=    ("hello")'
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTokenWhitespacePosition.BeforeToken">
            <summary>
            This is the normal case. Whitespace is added before the next token. The only case where this option is 
            not used is in the case of parentheses.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUdfEventArgs">
            <summary>
            Encapsulates the parameters to send to an User Defined Function for evaluation.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUdfEventArgs(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32)">
            <param name="aXls">See <see cref="P:FlexCel.Core.TUdfEventArgs.Xls" /></param>
            <param name="aSheet">See <see cref="P:FlexCel.Core.TUdfEventArgs.Sheet" /></param>
            <param name="aRow">See <see cref="P:FlexCel.Core.TUdfEventArgs.Row" /></param>
            <param name="aCol">See <see cref="P:FlexCel.Core.TUdfEventArgs.Col" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Col">
            <summary>
            Column index where the formula is located. This value only has meaning when evaluating formulas in cells. (Not when for example evaluating formulas inside named ranges)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Row">
            <summary>
            Row index where the formula is located. This value only has meaning when evaluating formulas in cells. (Not when for example evaluating formulas inside named ranges)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Sheet">
            <summary>
            Index of the sheet where the formula is located. This value only has meaning when evaluating formulas in cells. (Not when for example evaluating formulas inside named ranges)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Xls">
            <summary>
            ExcelFile that has the formula being evaluated. You might change its ActiveSheet propery inside this method and there is no
            need to restore it back.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIBrush">
            <summary>
            A base brush for painting.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIBrush">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIBrush</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIBrush.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIBrush.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIColor">
            <summary>
            Represents a color used to draw in a canvas (gdi+, wpf, etc) in a way that is independent of the drawing framework.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIColor(System.Int64)">
            <param name="ARGB">Alpha, red, green and blue components as AARRBBGG</param>
            <summary>
            Creates a new color with the ARGB components.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColor.A">
            <summary>
            Alpha component, between 0 and 255.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColor.B">
            <summary>
            Blue component, between 0 and 255
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TUIColor.Empty">
            <summary>
            Returns an empty color. This color isn't valid.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.FromArgb(System.Int32,FlexCel.Core.TUIColor)">
            <param name="alpha">Alpha value for the new color (between 0 and 255)</param>
            <param name="aColor">Source color.</param>
            <summary>
            Returns a color base in other color but with a different transparency.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <param name="red">Red component, between 0 and 255.</param>
            <param name="green">Red component, between 0 and 255.</param>
            <param name="blue">Blue component, between 0 and 255.</param>
            <summary>
            Creates a color from Red, Green and Blue components without transparency.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="alpha">Alpha component, between 0 (completely transparent) and 255 (completely opaque).</param>
            <param name="red">Red component, between 0 and 255.</param>
            <param name="green">Red component, between 0 and 255.</param>
            <param name="blue">Blue component, between 0 and 255.</param>
            <summary>
            Creates a color from Red, Green and Blue components with transparency.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColor.G">
            <summary>
            Green component, between 0 and 255
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.GetHashCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColor.IsEmpty">
            <summary>
            Returns true if this color is the same as <see cref="F:FlexCel.Core.TUIColor.Empty" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColor.IsNamedColor">
            <summary>
            This method returns always false, TUIColor doesn't support named colors.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.op_Equality(FlexCel.Core.TUIColor,FlexCel.Core.TUIColor)">
            <param name="a" />
            <param name="b" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.op_Inequality(FlexCel.Core.TUIColor,FlexCel.Core.TUIColor)">
            <param name="a" />
            <param name="b" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColor.R">
            <summary>
            Red component, between 0 and 255.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColor.ToArgb">
            <summary>
            Gets the 32 bit ARGB color from this structure.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIColorBlend">
            <summary>
            Defines a complex gradient by using an array of <see cref="T:FlexCel.Core.TUIGradientStop" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIColorBlend(System.Int32)">
            <param name="aCount">Number of gradient stops in the blend definition.</param>
            <summary>
            Creates a color blend with n stops.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColorBlend.Count">
            <summary>
            Number of gradient stops in the blend definition.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColorBlend.EnsureMinimumAndMaximum(FlexCel.Core.TUIColor,FlexCel.Core.TUIColor)">
            <param name="Color1">Color for stop at position 1 if it doesn't exist.</param>
            <param name="Color2">Color for stop at position 1 if it doesn't exist.</param>
            <summary>
            Makes sure the blend has at least 2 stops, one at position 0 and the other at position 1.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIColorBlend.InvertColorBlend">
            <summary>
            Reverts the color blen, moving the stop at position 0 to 1, the stop at 1 to 0, and mirroring all other stops in the middle.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIColorBlend.Item(System.Int32)">
            <param name="index" />
            <summary>
            Returns a particular stop in the blend.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIDashStyle">
            <summary>
            Platform independent line style.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TUIDashStyle.Custom">
            <summary>Specifies a user-defined custom dash style.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIDashStyle.Dash">
            <summary>Specifies a line consisting of dashes.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIDashStyle.DashDot">
            <summary>Specifies a line consisting of a repeating pattern of dash-dot.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIDashStyle.DashDotDot">
            <summary>Specifies a line consisting of a repeating pattern of dash-dot-dot.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIDashStyle.Dot">
            <summary>Specifies a line consisting of dots.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIDashStyle.Solid">
            <summary>Specifies a solid line.</summary>
        </member>
        <member name="T:FlexCel.Core.TUIFont">
            <summary>
            Represents a font used for drawing in a pdf/gdi+/wpf/winrt canvas. This class might hold resources which need disposing.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIFont">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIFont</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.Bold">
            <summary>
            Returns true if the font is bold.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.Create(System.String,System.Double)">
            <param name="aName">Name of the font.</param>
            <param name="aSize">Size in points of the font.</param>
            <summary>
            Creates a font with the given name and size.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.Create(System.String,System.Double,FlexCel.Core.TUIFontStyle)">
            <param name="aName">Name of the font.</param>
            <param name="aSize">Size in points of the font.</param>
            <param name="aFontStyle">Style of the font (italic, bold, etc)</param>
            <summary>
            Creates a font with the given name, size and style.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.CreateSimilarFont(System.String,System.Double,FlexCel.Core.TUIFontStyle)">
            <param name="FontName">Name of the font we wish to create.</param>
            <param name="FontSize">Size in points of the font.</param>
            <param name="FontStyle">Style of the font.</param>
            <summary>
            Creates a font which is the most similar to the one you specify. Some fonts don't have specific styles like italics or bold,
            if this is the case, this method will return the same font with a different style.
            </summary>
            <returns>The font if it was possible to create it, or a similar one if it wasn't.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Core.TUIFont.FontCreated">
            <summary>
            Fires after a font has been created. You can use this event to handle fonts that don't exist in your system and are replaced by a different font by the OS.
            Note that this event is static and it applies to the whole app.<br /><b>Remark: </b> As this event fires after the font has been created, it means that if you modify it the font is created twice.
            It is not going to have a big impact in performance, but if possible use the <see cref="E:FlexCel.Core.TUIFont.FontCreating" /> event instead, as it won't cause
            the font to be created twice. This event has to be used only for cases where you want to override the default operating system
            font substitution algorithm.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Core.TUIFont.FontCreating">
            <summary>
            Fires before a font is created. You can customize the font properties and create a different font instead.
            Note that this event is static and it applies to the whole app.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.FontDescent">
            <summary>
            Returns the font descent.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.FontLinespacing">
            <summary>
            Returns the linespacing for the font.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.GetBytes">
            <summary>
            Returns the font file, if available in the platform, or null if the font data can't be read. Currently GetBytes is null in all supported platforms.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.GetHeight(System.Int32)">
            <param name="dpi">Resolution.</param>
            <summary>
            Height of the font for a given resolution.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.GetTTFTable(System.Int64)">
            <param name="tableName" />
            <summary>
            Returns a True Type table for the font, if the platform gives the functionality. Currently supported in OSX only.
            To see if the platform supports returning tables, see <see cref="M:FlexCel.Core.TUIFont.SupportsTTFTables" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.GetWidth(System.String,System.Int32)">
            <param name="aText">Text we want to measure.</param>
            <param name="dpi">Dpi to measure the string.</param>
            <summary>
            Returns the width of a string in device-independent pixels at dpi resolution when written in the current font.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.Italic">
            <summary>
            Returns true if the font is italic.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.Name">
            <summary>
            Name of the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.OnFontCreated(FlexCel.Core.FontCreatedEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of TUIFont.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.OnFontCreating(FlexCel.Core.FontCreatingEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of TUIFont.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.OriginalFontName">
            <summary>
            Returns the name of the font as stored in the xls/x file, and not the font name after it was
            replaced by one of the fonts installed in the machine where we are running.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.SizeInPoints">
            <summary>
            Size in points of the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.Strikeout">
            <summary>
            Returns true if the font is striked out.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.Style">
            <summary>
            Style of the font (bold, italics, etc).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIFont.SupportsTTFTables">
            <summary>
            Returns true if the platform supports returning a TTF table, and you can then use <see cref="M:FlexCel.Core.TUIFont.GetTTFTable(System.Int64)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIFont.Underline">
            <summary>
            Returns true if the font is underlined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIFontStyle">
            <summary>
            The different styles a font can have. 
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TUIFontStyle.Bold">
            <summary>
            Bold Font. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUIFontStyle.Italic">
            <summary>
            Italic Font. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUIFontStyle.Regular">
            <summary>
            Normal Font. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUIFontStyle.Strikeout">
            <summary>
            Strikeout Font. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUIFontStyle.Underline">
            <summary>
            Underlined font. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUIGradientStop">
            <summary>
            A structure describing a gradient point, with its color and position in the gradient.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIGradientStop(System.Double,FlexCel.Core.TUIColor)">
            <param name="aPosition">Between 0 and 1</param>
            <param name="aColor">Color for this particular point.</param>
            <summary>
            Creates a new gradient stop.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIGradientStop.Color">
            <summary>
            Color for this stop in the gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIGradientStop.Position">
            <summary>
            Position of the stop in the gradient. Must be between 0 (start of the gradient) and 1 (end of the gradient).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIGraphics">
            <summary>
            This class represents a native canvas for drawing.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIGraphics">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIGraphics</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIGraphics.Clear(FlexCel.Core.TUIColor)">
            <param name="aColor">Color to fill the image.</param>
            <summary>
            Clears the image to a color.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIGraphics.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIGraphics.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIGraphics.FromImage(FlexCel.Core.TUIImage)">
            <param name="Img" />
            <summary>
            Gets the graphics context from an image.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIGraphics.SetMode(FlexCel.Core.TUIInterpolationMode,FlexCel.Core.TUISmoothingMode)">
            <param name="aInterpolationMode" />
            <param name="aSmoothingMode" />
            <summary>
            Sets the interpolation and smoothing modes.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIHatchBrush">
            <summary>
            A class representing a platform independent hatch brush.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIHatchBrush">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIHatchBrush</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIHatchBrush.BackgroundColor">
            <summary>
            Background color for the pattern.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIHatchBrush.Create(FlexCel.Core.TUIHatchStyle,FlexCel.Core.TUIColor,FlexCel.Core.TUIColor)">
            <param name="hatchStyle">Hathc style for the pattern.</param>
            <param name="ColorFg">Foreground color for the pattern.</param>
            <param name="ColorBg">Background color for the pattern.</param>
            <summary>
            This method will return the apporpiate Brush depending in the Graphics framework you are using to render images.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIHatchBrush.ForegroundColor">
            <summary>
            Foreground color for the pattern.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIHatchBrush.HatchStyle">
            <summary>
            Hatch style for the pattern.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIHatchStyle">
            <summary>
            Specifies the different patterns available.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.BackwardDiagonal">
            <summary>A pattern of lines on a diagonal from upper right to lower left.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Cross">
            <summary>Specifies horizontal and vertical lines that cross.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DarkDownwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DarkHorizontal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DarkUpwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DarkVertical">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DashedDownwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DashedHorizontal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DashedUpwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DashedVertical">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DiagonalBrick">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DiagonalCross">
            <summary>A pattern of crisscross diagonal lines.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Divot">
            <summary>Specifies a hatch that has the appearance of divots.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DottedDiamond">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.DottedGrid">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.ForwardDiagonal">
            <summary>A pattern of lines on a diagonal from upper left to lower right.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Horizontal">
            <summary>A pattern of horizontal lines.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.HorizontalBrick">
            <summary>Specifies a hatch that has the appearance of horizontally layered bricks.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.LargeCheckerBoard">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.LargeConfetti">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.LightDownwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.LightHorizontal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.LightUpwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.LightVertical">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.NarrowHorizontal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.NarrowVertical">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.OutlinedDiamond">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent05">
            <summary>Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:95.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent10">
            <summary>Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:90.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent20">
            <summary>Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:80.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent25">
            <summary>Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:75.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent30">
            <summary>Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:70.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent40">
            <summary>Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:60.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent50">
            <summary>Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:50.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent60">
            <summary>Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:40.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent70">
            <summary>Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:30.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent75">
            <summary>Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:25.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent80">
            <summary>Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Percent90">
            <summary>Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:10.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Plaid">
            <summary>Specifies a hatch that has the appearance of a plaid material.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Shingle">
            <summary>that slant to the right from top points to bottom points.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.SmallCheckerBoard">
            <summary>Specifies a hatch that has the appearance of a checkerboard.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.SmallConfetti">
            <summary>Specifies a hatch that has the appearance of confetti.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.SmallGrid">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.SolidDiamond">
            <summary>Specifies a hatch that has the appearance of a checkerboard placed diagonally.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Sphere">
            <summary>Specifies a hatch that has the appearance of spheres laid adjacent to one another.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Trellis">
            <summary>Specifies a hatch that has the appearance of a trellis.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Vertical">
            <summary>A pattern of vertical lines.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Wave">
            <summary>Specifies horizontal lines that are composed of tildes.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.Weave">
            <summary>Specifies a hatch that has the appearance of a woven material.</summary>
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.WideDownwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.WideUpwardDiagonal">
            <summary />
        </member>
        <member name="F:FlexCel.Core.TUIHatchStyle.ZigZag">
            <summary>Specifies horizontal lines that are composed of zigzags.</summary>
        </member>
        <member name="T:FlexCel.Core.TUIImage">
            <summary>
            A platform independent image.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIImage">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIImage</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.ConvertTo256Colors">
            <summary>
            Converts the image to 256 indexed colors.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.ConvertToBiLevel">
            <summary>
            Converts the image to pure black and white, without diffusion.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.ConvertToBWDither">
            <summary>
            Converts the image to pure black and white, using dithering.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.ConvertToGrayscale">
            <summary>
            Converts the image to shades of gray.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.CreateBitmap(System.Int32,System.Int32,FlexCel.Core.ImageColorDepth,System.Double,System.Double)">
            <param name="width">Width of the bitmap in pixels.</param>
            <param name="height">Height of the bitmap in pixels.</param>
            <param name="aPixelFormat">Pixel Format.</param>
            <param name="hres">Horizontal resolution of the image</param>
            <param name="vres">Vertical resolution of the image</param>
            <summary>
            Creates a bitmap of the specified dimensions.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.FromFile(System.String)">
            <param name="aFileName">A file name.</param>
            <summary>
            Creates an image from a file.
            </summary>
            <returns>The image.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.FromStream(System.IO.Stream)">
            <param name="aStream" />
            <summary>
            Creates an image from a stream.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIImage.Height">
            <summary>
            Height of the image in device-dependent pixels.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIImage.HeightInPoints">
            <summary>
            Height of the image in Points (1/72 of an inch)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIImage.Is8bitGrayscale">
            <summary>
            Returns true if the image has 256 shades of gray.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIImage.IsMetafile">
            <summary>
            Returns true if the file is a WMF or EMF file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.RasterMetafile(FlexCel.Core.TUIRectangle)">
            <param name="Coords" />
            <summary>
            Converts a vectorial metafile to a bitmap.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIImage.RawFormat">
            <summary>
            Format of the image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.Save(System.IO.Stream,FlexCel.Core.TXlsImgType)">
            <param name="outMs" />
            <param name="ImgType" />
            <summary>
            Saves the image to a stream, in the specified format.
            </summary>
            <returns>The actual file format in which the file was saved. It might not be possible to save in the required format, and a different one might be used.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.Save(System.String,FlexCel.Core.TXlsImgType)">
            <param name="fileName" />
            <param name="ImgType" />
            <summary>
            Saves the image to a file.
            </summary>
            <returns>The actual file format in which the file was saved. It might not be possible to save in the required format, and a different one might be used.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImage.SaveStart(System.IO.Stream,FlexCel.Core.ImageExportType,System.Int32)">
            <param name="outStream">Stream where the image will be saved.</param>
            <param name="ExportType">Format for the exported images.</param>
            <param name="totalPages">Number of pages to export.</param>
            <summary>
            Starts saving a multi page image.
            </summary>
            <returns>Image state that will be used when saving the other pages.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIImage.Width">
            <summary>
            Width of the image in device-dependent pixels.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIImage.WidthInPoints">
            <summary>
            Width of the image in Points (1/72 of an inch)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIImageAttributes">
            <summary>
            Platform independent image attributes.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIImageAttributes">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIImageAttributes</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImageAttributes.ColorImage(FlexCel.Core.TUIImageAttributes@,FlexCel.Core.TUIColor,FlexCel.Core.TUIColor)">
            <param name="imgAtt" />
            <param name="bgColor" />
            <param name="fgColor" />
            <summary>
            Adds color to the image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImageAttributes.Create">
            <summary>
            Creates a new image attribute.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImageAttributes.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImageAttributes.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIImageAttributes.MakeTransparent(FlexCel.Core.TUIImageAttributes@,System.Double)">
            <param name="imgAtt" />
            <param name="Opacity" />
            <summary>
            Makes the image transparent.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIInterpolationMode">
            <summary>
            Interpolation mode. See System.Drawing.InterpolationMode for details.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.Bicubic">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.Bilinear">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.Default">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.High">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.HighQualityBicubic">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.HighQualityBilinear">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.Invalid">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.Low">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIInterpolationMode.NearestNeighbor">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUILinearGradientBrush">
            <summary>
            Represents a platform independent linear gradient.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUILinearGradientBrush">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUILinearGradientBrush</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUILinearGradientBrush.Create(FlexCel.Core.TUIRectangle,FlexCel.Core.TUIColor,FlexCel.Core.TUIColor,System.Double,System.Boolean)">
            <param name="CellRect" />
            <param name="Color1" />
            <param name="Color2" />
            <param name="Rotation" />
            <param name="IsAngleScalable" />
            <summary>
            This method will return the apporpiate Brush depending in the Graphics framework you are using to render images.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUILinearGradientBrush.InterpolationColors">
            <summary>
            Colors that define the gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUILinearGradientBrush.Rectangle">
            <summary>
            Rectangle that defines the gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUILinearGradientBrush.SetSigmaBellShape(System.Double)">
            <param name="FillFocus" />
            <summary>
            Sets the colors in the gradient to a sigma shape.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUILinearGradientBrush.TransformElements">
            <summary>
            Transform matrix.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIMultiPageSaver">
            <summary>
            This class is used to carry information when saving multi page images, like for examle a multipage tiff.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIMultiPageSaver">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIMultiPageSaver</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIMultiPageSaver.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIMultiPageSaver.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIMultiPageSaver.SaveAdd(FlexCel.Core.TUIImage)">
            <param name="imageToAdd">Image that will be added to the multipage image.</param>
            <summary>
            Adds a new image to a multi page image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIMultiPageSaver.SaveEnd">
            <summary>
            Finish a multipage image.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIPathGradientBrush">
            <summary>
            A platform-independent Path gradient implementation.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIPathGradientBrush">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIPathGradientBrush</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPathGradientBrush.CenterColor">
            <summary>
            Color for the center of the gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPathGradientBrush.CenterPoint">
            <summary>
            Center of the gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPathGradientBrush.InterpolationColors">
            <summary>
            Colors that define the gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPathGradientBrush.Rectangle">
            <summary>
            Rectangle that defines the gradient.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIPathGradientBrush.SetSigmaBellShape(System.Double)">
            <param name="focus" />
            <summary>
            Sets the colors in the gradient to a sigma shape.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPathGradientBrush.SurroundColor">
            <summary>
            Colors on the ouside of the path.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPathGradientBrush.TransformElements">
            <summary>
            Transform matrix.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIPen">
            <summary>
            A pen used to draw into a canvas.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIPen">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUIPen</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPen.Color">
            <summary>
            Gets or sets the color of the pen.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIPen.Create(FlexCel.Core.TUIColor)">
            <param name="aColor">Color of the pen.</param>
            <summary>
            Creates a new pen with a given color and a width of 1.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIPen.Create(FlexCel.Core.TUIColor,System.Double)">
            <param name="aColor">Color for the pen.</param>
            <param name="aWidth">Width of the pen.</param>
            <summary>
            Creates a new pen with a given color and width.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPen.DashStyle">
            <summary>
            Gets or sets the style of the pen.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIPen.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIPen.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIPen.Width">
            <summary>
            Gets or sets the width of the pen.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUIRectangle">
            <summary>
            A platform independent rectangle. Coordinates are floating point numbers.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUIRectangle(System.Double,System.Double,System.Double,System.Double)">
            <param name="aX">X coordinate of the rectangle.</param>
            <param name="aY">Y coordinate of the rectangle.</param>
            <param name="aWidth">Width of the rectangle.</param>
            <param name="aHeight">Height of the rectangle</param>
            <summary>
            Creates a new UIRectangle with the specified starting point, height and width.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Bottom">
            <summary>
            Bottom coordinate.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Empty">
            <summary>
            Returns a rectangle with X = 0, Y = 0, Width = 0 and Height = 0.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <param name="aLeft">Left coordinate.</param>
            <param name="aTop">Top coordinate.</param>
            <param name="aRight">Right coordinate.</param>
            <param name="aBottom">Bottom coordinate.</param>
            <summary>
            Creates a new rectangle with the specified coordinates.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.GetHashCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Height">
            <summary>
            Height of the rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.Inflate(System.Double,System.Double)">
            <param name="dx">Value to inflate the rectangle in the x direction.</param>
            <param name="dy">Value to inflate the rectangle in the y direction.</param>
            <summary>
            Subtracts dx from the left and adds dx to the right. Subtracts dy from the top and adds dy to the bottom.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.Inflate(FlexCel.Core.TUIRectangle,System.Double,System.Double)">
            <param name="sourceRect">Rectangle with the original coordinates.</param>
            <param name="dx">X offset to inflate.</param>
            <param name="dy">Y offset to inflate.</param>
            <summary>
            Inflates the rectangle by (dx, dy). It is similar to the other inflate overload, but this
            is a static method, it won't modify a rectangle in place.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Left">
            <summary>
            Left coordinate. This is the same as <see cref="P:FlexCel.Core.TUIRectangle.X" />, but it is readonly. (X is read write).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Location">
            <summary>
            Returns a TPointF with the Left and Top coordinates of the rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.MakePositive">
            <summary>
            This method ensures both width adn height are positive. If they are negative, X and Y are moved so the rectangle is the same but with positive dimensions.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.Offset(System.Double,System.Double)">
            <param name="dx">Offset to move the rectangle in the X direction.</param>
            <param name="dy">Offset to move the rectangle in the Y direction.</param>
            <summary>
            Moves the rectangle by (dx, dy), keeping the with and height the same.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.op_Equality(FlexCel.Core.TUIRectangle,FlexCel.Core.TUIRectangle)">
            <param name="r1" />
            <param name="r2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.op_Implicit(FlexCel.Core.TUIRectangle)~System.Drawing.RectangleF">
            <param name="r" />
            <summary>
            Converts implicitly between a System.Drawing.RectangleF and a TUIRectangle.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.op_Implicit(System.Drawing.RectangleF)~FlexCel.Core.TUIRectangle">
            <param name="r" />
            <summary>
            Converts implicitly between a System.Drawing.RectangleF and a TUIRectangle.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.op_Inequality(FlexCel.Core.TUIRectangle,FlexCel.Core.TUIRectangle)">
            <param name="r1" />
            <param name="r2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Right">
            <summary>
            Right coordinate.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Top">
            <summary>
            Top coordinate. This is the same as <see cref="P:FlexCel.Core.TUIRectangle.Y" />, but it is readonly. (Y is read write).
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUIRectangle.Union(FlexCel.Core.TUIRectangle,FlexCel.Core.TUIRectangle)">
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <summary>
            Returns a new rectangle which contains both of the source rectangles.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Width">
            <summary>
            Width of the rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.X">
            <summary>
            Left coordinate of the rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUIRectangle.Y">
            <summary>
            Top coordinate of the rectangle.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUISize">
            <summary>
            A platform independent Size structure. Width and Height are floating point numbers.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUISize(System.Double,System.Double)">
            <param name="aWidth">Width.</param>
            <param name="aHeight">Height.</param>
            <summary>
            Creates a new size with the specified width and height.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISize.Empty">
            <summary>
            Returns a size with width = 0 and height = 0.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISize.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISize.GetHashCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISize.Height">
            <summary>
            Height from the size.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISize.op_Equality(FlexCel.Core.TUISize,FlexCel.Core.TUISize)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISize.op_Implicit(FlexCel.Core.TUISize)~System.Drawing.SizeF">
            <param name="sz" />
            <summary>
            Converts between a TUISize and a System.Drawing.SizeF
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISize.op_Implicit(System.Drawing.SizeF)~FlexCel.Core.TUISize">
            <param name="sz" />
            <summary>
            Converts between a TUISize and a System.Drawing.SizeF
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISize.op_Inequality(FlexCel.Core.TUISize,FlexCel.Core.TUISize)">
            <param name="b1" />
            <param name="b2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISize.Width">
            <summary>
            Width from the size.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUISmoothingMode">
            <summary>
            Smoothing mode. See System.Drawing.Drawing2D.SmoothingMode.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISmoothingMode.AntiAlias">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISmoothingMode.Default">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISmoothingMode.Equals(System.Object)">
            <param name="obj" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISmoothingMode.GetHashCode">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISmoothingMode.HighQuality">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISmoothingMode.HighSpeed">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISmoothingMode.Invalid">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISmoothingMode.None">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISmoothingMode.op_Equality(FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUISmoothingMode)">
            <param name="a1" />
            <param name="a2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISmoothingMode.op_Inequality(FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUISmoothingMode)">
            <param name="a1" />
            <param name="a2" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUISolidBrush">
            <summary>
            A solid brush with a single color.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUISolidBrush">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUISolidBrush</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUISolidBrush.Color">
            <summary>
            Returns the color of the brush.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUISolidBrush.Create(FlexCel.Core.TUIColor)">
            <param name="aColor">Color for the brush.</param>
            <summary>
            This is a factory method that will create the correct brush depending in what UI framework you are using. (TUISolidBrush is an abstract class)
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUITextureBrush">
            <summary>
            A brush using an image as a pattern.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUITextureBrush">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUITextureBrush</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUITextureBrush.Create(FlexCel.Core.TUIImage,System.Double[],System.Double[])">
            <param name="img">Image for the brush.</param>
            <param name="atm">Transform Matrix for the pattern.</param>
            <param name="canvasMatrix">Transform matrix for the graphics context.</param>
            <summary>
            This method will return the appropriate Brush depending in the Graphics framework you are using to render images.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUITextureBrush.Image">
            <summary>
            Image used to paint the brush.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUITextureBrush.TransformElements">
            <summary>
            Transform matrix.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUnknownChartOptions">
            <summary>
            Options for an unknown chart. This class does not have any information except the charttype.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUnknownChartOptions">
            <summary>
            Creates a new TUnknownChartOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUnsupportedFormula">
            <summary>
            An unsupported formula, the cell it is in, and the reason why it is not supported.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUnsupportedFormula">
            <summary>
            Creates a new empty instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUnsupportedFormula(FlexCel.Core.TUnsupportedFormulaErrorType,FlexCel.Core.TCellAddress,System.String,System.String)">
            <param name="aErrorType">See <see cref="P:FlexCel.Core.TUnsupportedFormula.ErrorType" /></param>
            <param name="aCell">See <see cref="P:FlexCel.Core.TUnsupportedFormula.Cell" /></param>
            <param name="aFunctionName">See <see cref="P:FlexCel.Core.TUnsupportedFormula.FunctionName" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TUnsupportedFormula.FileName" /></param>
            <summary>
            Creates a new instance of a TUnsupported formula class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.Cell">
            <summary>
            Cell where the formula is (1 based)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUnsupportedFormula.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects have the same values.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.ErrorType">
            <summary>
            Type of error.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.FileName">
            <summary>
            This property has the name of the physical file being evaluated, and can be of use when evaluating linked files. If the files are opened
            from a stream or not from a physical place, it will be null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.FunctionName">
            <summary>
            If the error is <see cref="F:FlexCel.Core.TUnsupportedFormulaErrorType.MissingFunction" /> then this is the name of the missing function.  
            If the error is <see cref="F:FlexCel.Core.TUnsupportedFormulaErrorType.ExternalReference" /> then this is the name of the file not found.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUnsupportedFormula.GetHashCode">
            <summary>
            Hashcode for this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUnsupportedFormulaErrorType">
            <summary>
            Types of error that might happen while recalculating.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.CircularReference">
            <summary>
            There is a circular reference on this cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.ExternalReference">
            <summary>
            The file in the external reference was not found.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.FormulaTooComplex">
            <summary>
            FlexCel was not able to parse the formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.FunctionalityNotImplemented">
            <summary>
            The function is supported, but not with those arguments.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.MissingFunction">
            <summary>
            There is a function on the formula that is not implemented by FlexCel.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUnsupportedFormulaList">
            <summary>
            A list of unsupported formulas on a sheet.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUnsupportedFormulaList">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.TUnsupportedFormulaList</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUnsupportedFormulaList.Add(FlexCel.Core.TUnsupportedFormula)">
            <param name="fmla">Unsupported formula.</param>
            <summary>
            Adds a new unsupported formula to the list.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormulaList.Count">
            <summary>
            The number of errors on the list.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormulaList.Item(System.Int32)">
            <param name="index" />
            <summary>
            Returns the items at position index.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUserDefinedFunction">
            <summary>
            Inherit from this class to create your own user defined functions. Make sure you read the pdf documentation to get more information on what user defined functions are
            and how they are created.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUserDefinedFunction(System.String)">
            <param name="aName">Name to be used in the user defined function. This is the same name that should be in the xls file.</param>
            <summary>
            Initializes the name of the user defined function.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TUserDefinedFunction(System.String,System.String)">
            <param name="aName">Name to be used in the user defined function. This is the same name that should be in the xls file.</param>
            <param name="aInternalName">Name that will be used when saving xls (biff8) files. Some functions are saved by Excel 2010 as .xlfn_Name when
            saving xls (not xlsx). This is the name that should be saved in the xls file, not the real name of the function.</param>
            <summary>
            Initializes the name of the user defined function, with an special name for older Excel versions.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.CheckParameters(System.Object[],System.Int32,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="parameters">Array of parameters to check.</param>
            <param name="expectedCount">Number of parameters expected. If this number is variable, specify -1 here.</param>
            <param name="ResultError">Returns the error in the parameters. This parameter is only valid if this function returns false.</param>
            <summary>
            Checks that the parameter array has the expected number of arguments, and that no one is an Error. If any argument is an error
            it is returned in ResultError, since the default in Excel is to stop processing arguments in a function when one is an error.
            </summary>
            <returns>True if all parameters are correct, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="arguments">Extra objects you can use to evaluate the function.</param>
            <param name="parameters">Parameters for the function. When this method is called by FlexCel, this parameter will never be null, but might be an array
            of zero length if there are no parameters.
            <br /> Each parameter in the array will always be one of the following objects:
            <list type="bullet"><item>Null. (Nothing in VB). If the parameter is empty or missing.</item><item>A <see cref="T:System.Boolean" /></item><item>A <see cref="T:System.String" /></item><item>A <see cref="T:System.Double" /></item><item>A <see cref="T:FlexCel.Core.TXls3DRange" /> This will be returned when the argument is a cell reference.</item><item>A <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" />. Except in very special cases (like an IsError function), the expected
            behavior in Excel is that whenever you get an Error parameter your function should return the same error and exit. You can use the method <see cref="M:FlexCel.Core.TUserDefinedFunction.CheckParameters(System.Object[],System.Int32,FlexCel.Core.TFlxFormulaErrorValue@)" />
            to implement that.</item><item>A 2-dimensional array of objects, where each object in the array will be of any of the types mentioned here again.</item></list>
             This class provides utility methods like <see cref="M:FlexCel.Core.TUserDefinedFunction.TryGetDouble(FlexCel.Core.ExcelFile,System.Object,System.Double@,FlexCel.Core.TFlxFormulaErrorValue@)" /> that will help you get an specific type of object from a parameter.
            </param>
            <summary>
            Override this method to provide your own implementation on the function.<br />
            If this method throws an exception, it will not be handled and the recalculation will be aborted. So if you want to return an error, return a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> value.
            <br /><b>Do not use any global variable in this method</b>, it must be stateless and always return the same value when called with the same arguments.
            <br />
            See the PDF documentation for more information.
            </summary>
            <returns>Return any object you want here. Normally a double, a string, a boolean a TFlxFormulaErrorValue or a null. If this method returns a class, it will be converted to an allowed value, normally to a string. </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.GetSingleParameter(FlexCel.Core.ExcelFile,System.Object)">
            <param name="xls">ExcelFile that will be used to read the value if param is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])" /></param>
            <summary>
            Returns a single value from a parameter. 
            If the parameter is a cell range and the cell range has only one cell, this method will return the
            value of the cell, else it will return an error.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUserDefinedFunction.InternalName">
            <summary>
            Name that will be used when saving xls (biff8) files. Some functions are saved by Excel 2010 as .xlfn_Name when
            saving xls (not xlsx). This is the name that should be saved in the xls file, not the real name of the function.       
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TUserDefinedFunction.Name">
            <summary>
            Name that will be assigned to the function.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetArray(FlexCel.Core.ExcelFile,System.Object,System.Object[,]@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])" /></param>
            <param name="ResultValue">Value of the parameter as an array. If TryGetArray returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetArray returns true (there was no error), this value is undefined.</param>
            <summary>
            Tries to retrieve an array from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <returns>True if the parameter can be converted to an array, false if there was an error.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetBoolean(FlexCel.Core.ExcelFile,System.Object,System.Boolean@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])" /></param>
            <param name="ResultValue">Value of the parameter as a boolean. If TryGetBoolean returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetBoolean returns true (there was no error), this value is undefined.</param>
            <summary>
            Tries to retrieve a boolean from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <returns>True if the parameter can be converted to a boolean, false if there was an error.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetCellRange(System.Object,FlexCel.Core.TXls3DRange@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])" /></param>
            <param name="ResultValue">Value of the parameter as a TXls3DRange. If TryGetRange returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetCellRange returns true (there was no error), this value is undefined.</param>
            <summary>
            Tries to retrieve a cell range from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <returns>True if the parameter can be converted to a cell range, false if there was an error.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetDate(FlexCel.Core.ExcelFile,System.Object,System.Boolean,System.DateTime@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])" /></param>
            <param name="SuppressTime">If true, the date returned will have the time set to 0:00 no matter the real value.</param>
            <param name="ResultValue">Value of the parameter as double. If TryGetDate returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetDate returns true (there was no error), this value is undefined.</param>
            <summary>
            Tries to retrieve a date/time from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <returns>True if the parameter can be converted to a datetime, false if there was an error.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetDouble(FlexCel.Core.ExcelFile,System.Object,System.Double@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])" /></param>
            <param name="ResultValue">Value of the parameter as double. If TryGetDouble returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetDouble returns true (there was no error), this value is undefined.</param>
            <summary>
            Tries to retrieve a double from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <returns>True if the parameter can be converted to a double, false if there was an error.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetDoubleList(FlexCel.Core.ExcelFile,System.Object[],System.Int32,System.Int32,FlexCel.Core.IUserDefinedFunctionAggregator,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="Xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="parameters">The parameters passed to the function.</param>
            <param name="startParam">First parameter we want to evaluate.</param>
            <param name="endParam">Last parameter we want to evaluate. If &lt; 0, it will evaluate all parameters from startParam to parameters.Length</param>
            <param name="agg">A class decending from TUserDefinedFunctionAggregator that will process the values for every entry in the range.</param>
            <param name="Err">Value of the error when converting the parameter. If TryGetDouble returns true (there was no error), this value is undefined.</param>
            <summary>
            Tries to retrieve a list of double arguments from the parameters, starting at parameter startParam.
            Use this method for functions that accept a range of numeric values as an entry. (for example =Sum(a1:a10))
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetString(FlexCel.Core.ExcelFile,System.Object,System.String@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])" /></param>
            <param name="ResultValue">Value of the parameter as string. If TryGetString returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetString returns true (there was no error), this value is undefined.</param>
            <summary>
            Tries to retrieve a string from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <returns>True if the parameter can be converted to a string, false if there was an error.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TUserDefinedFunctionLocation">
            <summary>
            Defines where the custom function is located, if inside a macro in the same file, or inside a macro in an external file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionLocation.External">
            <summary>
            The custom function is defined in an external file or addin. Whenever you add this function to a workbook, references will be created to an external function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionLocation.Internal">
            <summary>
            The custom function is defined inside the same file where the formula is. Whenever you add this function to a workbook, references will be created to a
            macro in the same file.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUserDefinedFunctionScope">
            <summary>
            Defines how custom functions are added to the recalculation engine.
            If a function is defined in both Global and Local scope, Local scope will be used.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionScope.Global">
            <summary>
            Function will be added for all instances of FlexCel. You will normally use this setting only once at the beginning of your application.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionScope.Local">
            <summary>
            Functions will be available only for the instance where they were added. Use this option if you might have different custom functions with the same name in different 
            spreadsheets, and adding the function globally would clash. You will normally use this setting when adding the formulas after creating the ExcelFile
            instances.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TValueAxis">
            <summary>
            Information about an Axis of values. (normally the y axis)
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TValueAxis">
            <summary>
            Constructs a new TValueAxisOptions instance with all values set to automatic.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TValueAxis(System.Double,System.Double,System.Double,System.Double,System.Double,FlexCel.Core.TValueAxisOptions,FlexCel.Core.TFlxChartFont,System.String,FlexCel.Core.TAxisLineOptions,FlexCel.Core.TAxisTickOptions,FlexCel.Core.TAxisRangeOptions,FlexCel.Core.TDataLabel)">
            <param name="aMin">See <see cref="P:FlexCel.Core.TValueAxis.Min" /></param>
            <param name="aMax">See <see cref="P:FlexCel.Core.TValueAxis.Max" /></param>
            <param name="aMajor">See <see cref="P:FlexCel.Core.TValueAxis.Major" /></param>
            <param name="aMinor">See <see cref="P:FlexCel.Core.TValueAxis.Minor" /></param>
            <param name="aCrossValue">See <see cref="P:FlexCel.Core.TValueAxis.CrossValue" /></param>
            <param name="aAxisOptions">See <see cref="P:FlexCel.Core.TValueAxis.AxisOptions" /></param>
            <param name="aFont">See <see cref="P:FlexCel.Core.TBaseAxis.Font" />. This parameter will be cloned.</param>
            <param name="aNumberFormat">See <see cref="P:FlexCel.Core.TBaseAxis.NumberFormat" /></param>
            <param name="aAxisLineOptions">See <see cref="P:FlexCel.Core.TBaseAxis.AxisLineOptions" />. This parameter will be cloned.</param>
            <param name="aTickOptions">See <see cref="P:FlexCel.Core.TBaseAxis.TickOptions" />. This parameter will be cloned.</param>
            <param name="aRangeOptions">See <see cref="P:FlexCel.Core.TBaseAxis.RangeOptions" /> This parameter will be cloned.</param>
            <param name="aCaption">See <see cref="P:FlexCel.Core.TBaseAxis.Caption" /> This parameter will be cloned.</param>
            <summary>
            Constructs a new TValueAxisOptions instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TValueAxis.AxisOptions">
            <summary>
            Enumerates which of the other options contain valid values or are automatic.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TValueAxis.CrossValue">
            <summary>
            Value where the other Axis will cross this one, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Major">
            <summary>
            Value for the major unit, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Max">
            <summary>
            Maximum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Min">
            <summary>
            Minimum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Minor">
            <summary>
            Value for the minor unit, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TValueAxisOptions">
            <summary>
            Options for a Value Axis.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoCross">
            <summary>
            Use automatic crossing point.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMajor">
            <summary>
            Use automatic major units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMax">
            <summary>
            Use automatic maximum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMin">
            <summary>
            Use automatic minimum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMinor">
            <summary>
            Use automatic minor units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.LogScale">
            <summary>
            Use logarithmic scale.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.MaxCross">
            <summary>
            The category Axis will cross at the maximum value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.None">
            <summary>
            All magnitudes will be manual.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.Reverse">
            <summary>
            Values will be in reverse order.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TVFlxAlignment">
            <summary>
            Vertical Alignment on a cell.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.bottom">
            <summary>
            Aligned to the bottom.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.center">
            <summary>
            Vertically centered on the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.distributed">
            <summary>
            Distributed on the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.justify">
            <summary>
            Justified on the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.top">
            <summary>
            Aligned to the top.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TWorkbookProtectionOptions">
            <summary>
            Options for protecting the workbook.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TWorkbookProtectionOptions">
            <summary>
            Initializes empty protection.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TWorkbookProtectionOptions(System.Boolean,System.Boolean)">
            <param name="aWindow">True if the window will be protected.</param>
            <param name="aStructure">True if the structure will be protected.</param>
            <summary>
            Initializes the class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TWorkbookProtectionOptions.Structure">
            <summary>
            Structure is protected.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TWorkbookProtectionOptions.Window">
            <summary>
            Window is protected.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TWorkspace">
            <summary>
            This class links together a group of spreadsheets, so you can recalculate among linked spreadsheets. 
            In order to use it, just define an object of this class and add all the files you need for the linked recalculation.
            If you don't know in advance which files you will need, you can use the <see cref="E:FlexCel.Core.TWorkspace.LoadLinkedFile" /> event.
            <br />Note that whenever you recalculate any file in the workspace, all files will be recalculated, so you don't need to calculate them twice.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TWorkspace">
            <summary>
            Creates a new workspace.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.Add(System.String,FlexCel.Core.ExcelFile)">
            <param name="FileName">Name that this file will have in the workspace. When recalculating a linked formula, this name will be used.
            If you want to include paths in the name you can too, but it is normally not needed since FlexCel will search for the simple filename anyway.
            You only need to include paths if you have 2 files with the same name in different folders used in the recalculation.</param>
            <param name="xls">Excel file to add.</param>
            <summary>
            Adds a file to the workspace. Whenever you recalculate any file in this workspace, all linked files will be recalculated too.
            <b>Note that you can't add two files with the same name or same reference twice to this collection.</b></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.Clear">
            <summary>
            Removes all files from the workspace.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TWorkspace.Count">
            <summary>
            Number of linked files in this workspace.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.GetEnumerator">
            <summary>
            Returns an enumerator with all the files in the Workspace.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.GetFile(System.Int32)">
            <param name="index">Index of the file in the workspace. (1 based)</param>
            <summary>
            Returns the file at index. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TWorkspace.Item(System.String)">
            <param name="fileName" />
            <summary>
            Returns the Excel file with the given name. To get the file at a given position, use <see cref="M:FlexCel.Core.TWorkspace.GetFile(System.Int32)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Core.TWorkspace.LoadLinkedFile">
            <summary>
            Use this event to load files to recalculate on demand, if you don't know a priori which linked files you need.
            Note that this event will add the new file to the workspace. 
            It will only be called once for each file, even if the file is used many times.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.OnLoadLinkedFile(FlexCel.Core.LoadLinkedFileEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of TWorkspace. See also <see cref="E:FlexCel.Core.TWorkspace.LoadLinkedFile" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.Recalc(System.Boolean)">
            <param name="forced">When true this method will perform a recalc in all files. When false, it will only recalculate the files where there has been a change. </param>
            <summary>
            Use this method to force a recalculation of all the spreadsheets in the workspace. This is the same as calling Recalc() in any of the files in the workspace.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.RecalcAndVerify">
            <summary>
            This method will do the same as <see cref="M:FlexCel.Core.ExcelFile.RecalcAndVerify" />, but for a workspace of files.
            </summary>
            <returns>A list with the unsupported functions in the workspace.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TWorkspace.System#Collections#Generic#IEnumerable{FlexCel#Core#ExcelFile}#GetEnumerator">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TXls3DRange">
            <summary>
            A 3d Excel range.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXls3DRange">
            <summary>
            Creates an empty 3d range.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXls3DRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aSheet1">First sheet of the range.</param>
            <param name="aSheet2">Second sheet of the range.</param>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
            <summary>
            Creates a new TXls3DRange class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXls3DRange.IsOneCell">
            <summary>
            Returns true if the range has only one cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.op_Equality(FlexCel.Core.TXls3DRange,FlexCel.Core.TXls3DRange)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both objects are equal.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.op_Inequality(FlexCel.Core.TXls3DRange,FlexCel.Core.TXls3DRange)">
            <param name="s1" />
            <param name="s2" />
            <summary>
            Returns true if both objects do not have the same value.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXls3DRange.Sheet1">
            <summary>
            First sheet of the range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXls3DRange.Sheet2">
            <summary>
            Second sheet of the range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TXlsBiffVersion">
            <summary>
            The specific Excel version that FlexCel will emulate when reading and saving files.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TXlsBiffVersion.Excel2003">
            <summary>
            FlexCel will identify itself as Excel 2003 in the generated xls files. It will also ignore the
            extra information written by Excel 2007 when reading xls files created with it.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsBiffVersion.Excel2007">
            <summary>
            FlexCel will identify itself as Excel 2007 in the generated xls files.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsCellRange">
            <summary>
            An Excel Cell range, 1-based.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsCellRange">
            <summary>
            Creates an empty Cell range.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsCellRange(System.String)">
            <param name="rangeDef">Definition for the range, in Excel A1 notation. For example A1:B3</param>
            <summary>
            Creates a cell range based in an Excel range string, like "A1:A10"
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsCellRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
            <summary>
            Creates a new TXlsCellRange class.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Bottom">
            <summary>
            Last row on range.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsCellRange.CellRef">
            <summary>
            Gets or sets the string that defines the range in A1 notation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Clone">
            <summary>
            Returns a copy of the original range.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsCellRange.ColCount">
            <summary>
            Number of columns on the range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Dec">
            <summary>
            Returns a COPY of the range decremented by one.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.FullRange">
            <summary>
            Creates a range with all cells on the sheet (65536 rows x 256 columns in Excel 97-2003)
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.HasCol(System.Int32)">
            <param name="col">Column we want to know if is on the range.</param>
            <summary>
            True if the specified column is in the range
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.HasRow(System.Int32)">
            <param name="row">Row we want to know if is on the range.</param>
            <summary>
            True if the specified row is in the range
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Inc">
            <summary>
            Returns a COPY of the range incremented by one.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsCellRange.IsOneCell">
            <summary>
            Returns true if the range has only one cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Left">
            <summary>
            First column on range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Offset(System.Int32,System.Int32)">
            <param name="newTopRow" />
            <param name="newLeftCol" />
            <summary>
            Creates a new range with the start at newTopRow, newLeftCol.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.op_Equality(FlexCel.Core.TXlsCellRange,FlexCel.Core.TXlsCellRange)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both objects are equal.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.op_Inequality(FlexCel.Core.TXlsCellRange,FlexCel.Core.TXlsCellRange)">
            <param name="s1" />
            <param name="s2" />
            <summary>
            Returns true if both objects do not have the same value.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Right">
            <summary>
            Last column on range.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsCellRange.RowCount">
            <summary>
            Number of rows on the range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Top">
            <summary>
            First row on range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Transpose">
            <summary>
            Returns the range transposed, rows by columns.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TXlsImgType">
            <summary>
            Possible image types on an excel sheet.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Bmp">
            <summary>
            Windows Bitmap. As this is not compressed, don't use it except for really small images.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Emf">
            <summary>
            Enhanced Windows Metafile. This is a Vectorial image format.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Gif">
            <summary>
            Gif Image.
            This is NOT supported in xls file format, only xlsx.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Jpeg">
            <summary>
            JPEG Image. This is a lossy compressed bitmap, best suited for photos.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Pict">
            <summary>
            Macintosh PICT. This won't be rendered by FlexCel, and you shouldn't add images in this format.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Png">
            <summary>
            Portable Network Graphics. This is a lossless compressed bitmap, best suited for text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Tiff">
            <summary>
            Tiff Image: http://partners.adobe.com/public/developer/tiff/index.html#spec 
            This is NOT supported in xls file format, only xlsx.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Unknown">
            <summary>
            Unsupported image format.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Wmf">
            <summary>
            Windows Metafile. This is a Vectorial image format.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsMargins">
            <summary>
            Sheet margin for printing, in inches.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsMargins">
            <summary>
            Creates default Margins
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsMargins(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <param name="aLeft">Left margin in inches.</param>
            <param name="aTop">Top margin in inches.</param>
            <param name="aRight">Right margin in inches.</param>
            <param name="aBottom">Bottom margin in inches.</param>
            <param name="aHeader">Header margin in inches.</param>
            <param name="aFooter">Footer margin in inches.</param>
            <summary>
            Creates Personalized Margins. All units are in inches.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Bottom">
            <summary>
            Bottom Margin in inches.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Footer">
            <summary>
            Footer Margin in inches. Space for the footer at bottom of page, it is taken from Bottom margin.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Header">
            <summary>
            Header Margin in inches. Space for the header at top of page, it is taken from Top margin.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Left">
            <summary>
            Left Margin in inches.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Right">
            <summary>
            Right Margin in inches.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Top">
            <summary>
            Top Margin in inches.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TXlsNamedRange">
            <summary>
            An Excel named range.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsNamedRange">
            <summary>
            Creates an empty NamedRange.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsNamedRange(System.String,System.Int32,System.Int32,System.String)">
            <param name="aName">Name of the range.</param>
            <param name="aNameSheetIndex">Sheet index for the sheet that holds the range. 0 means a global range (default on Excel)</param>
            <param name="aOptionFlags">Options of this Range.</param>
            <param name="aRangeFormula">The formula for the range, expressed as text. For example: "A1:B2,C3:C7"
            <br />Note that with <b>relative</b> references, we always consider "A1" to be the cell where the name is. This means that the formula:
            "=$A$1 + A1" when evaluated in Cell B8, will read "=$A$1 + B8". To provide a negative offset, you need to wrap the formula.
            For example "=A1048575" will evaluate to B7 when evaluated in B8.
            </param>
            <summary>
            Creates a complex Named range, with a formula.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsNamedRange(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aName">Name of the range.</param>
            <param name="aNameSheetIndex">Sheet index for the sheet that holds the range. 0 means a global range (default on Excel)</param>
            <param name="aSheetIndex">Sheet index where the range apply. This is where row and col properties apply, not where the range is stored. (1-based)</param>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
            <param name="aOptionFlags">Options of this Range.</param>
            <summary>
            Creates a new Named range with the given values. Use this overload to create a simple range.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsNamedRange(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <param name="aName">Name of the range.</param>
            <param name="aNameSheetIndex">Sheet index for the sheet that holds the range. 0 means a global range (default on Excel)</param>
            <param name="aSheetIndex">Sheet index where the range apply. This is where row and col properties apply, not where the range is stored. (1-based)</param>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
            <param name="aOptionFlags">Options of this Range.</param>
            <param name="aRangeFormula">The formula for the range, expressed as text. Use it if the range is complex and cannot be expressed with aSheetIndex, aFirstRow... etc
            When you specify this parameter, all SheetIndex, aFirstRow, etc. lose their meaning.</param>
            <summary>
            Creates a new Named range with the given values. Use this overload to create a simple range.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.BuiltIn">
            <summary>
            True if the range is a built in name. Built in names are 1 char long.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.CalcExp">
            <summary>
            True if the range contains a complex function.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Comment">
            <summary>
            Returns the comment associated with the name, if there is one. Comments are only available in Excel 2007, but they are saved too in xls file format.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both objects are equal.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Function">
            <summary>
            True if the range is a function.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.FunctionGroup">
            <summary>
            Specifies the function group index if the defined name refers to a function. The function 
            group defines the general category for the function. This attribute is used when there is 
            an add-in or other code project associated with the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.GetInternalName(FlexCel.Core.InternalNameRange)">
            <param name="name">Internal name we want to find.</param>
            <summary>
            Returns the string that corresponds to an internal name.
            </summary>
            <returns>The one-char string that represents that internal name.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.GetRanges(FlexCel.Core.ExcelFile)">
            <param name="Workbook">File which contains this range.</param>
            <summary>
            Returns a list of ranges and cells included in this name. This can be used to parse for example the PRINT_TITLES
            range, which might be something like "1:1,A:A". ("," is the union operator in Excel formulas).This method would return
            an array with the ranges 1:1 and A:A.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Hidden">
            <summary>
            True if the range is hidden.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.IsValidRangeName(System.String,System.Boolean@)">
            <param name="Name">String we want to check.</param>
            <param name="IsInternal">Returns true if this is an internal name, like Print_Range. Internal names have only one character.</param>
            <summary>
            Returns true if the string is a valid name for a named range. Valid names must start with 
            a letter or an underscore
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Name">
            <summary>
            The name of the range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.NameSheetIndex">
            <summary>
            The sheet index for the name (1 based). A named range can have the same name than other
            as long as they are on different sheets. The default value(0) means a global named range, not tied to
            any specific sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.op_Equality(FlexCel.Core.TXlsNamedRange,FlexCel.Core.TXlsNamedRange)">
            <param name="o1" />
            <param name="o2" />
            <summary>
            Returns true if both objects are equal.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.op_Inequality(FlexCel.Core.TXlsNamedRange,FlexCel.Core.TXlsNamedRange)">
            <param name="s1" />
            <param name="s2" />
            <summary>
            Returns true if both objects do not have the same value.
            Note this is for backwards compatibility, this is a class and not immutable,
            so this method should return true if references are different. But that would break old code.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.OptionFlags">
            <summary>
            Options of the range. You can access the options by using the corresponding properties. (Hidden, BuiltIn, etc).<br />
            You can use this property to set them all at the same time.<br />
            You can get the properties by OR'ing the following values:<br /><br />
            01. Name is hidden. Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.Hidden" />.<br />
            02. Name is a function. Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.Function" />.<br />
            04. Name is a VB procedure. If set you also need to set 08 (name is a macro). Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.VisualBasicProc" />.<br />
            08. Name is a Macro. Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.Proc" />.<br />
            16. Name returns an Array. Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.CalcExp" />.<br />
            32. Name is a BuiltIn name (like Print_Area). Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.BuiltIn" />.<br />
            8192. Name will be published when exporting to html. Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.PublishToServer" />.<br />
            16384. Indicates that the name is used as a workbook parameter 
            on a version of the workbook that is published to or rendered on a Web or application server. Corresponds to the property <see cref="P:FlexCel.Core.TXlsNamedRange.WorkbookParameter" />.<br /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Proc">
            <summary>
            True if the range is a function on a macro sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.PublishToServer">
            <summary>
            Indicates whether the defined name is included in the 
            version of the workbook that is published to or rendered on a Web or application server. This is new to Excel 2007.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.RangeFormula">
            <summary>
            This is a formula defining the range. It can be used to define complex ranges.
            For example you can use "=Sheet1!$A:$B,Sheet1!$1:$2". 
            When this parameter is set, SheetIndex, Left, Top, Right and Bottom properties have no meaning.
            <br />Note that with <b>relative</b> references, we always consider "A1" to be the cell where the name is. This means that the formula:
            "=$A$1 + A1" when evaluated in Cell B8, will read "=$A$1 + B8". To provide a negative offset, you need to wrap the formula.
            For example "=A1048575" will evaluate to B7 when evaluated in B8.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.SheetIndex">
            <summary>
            The Sheet index where the row and col properties apply. 1-based. When RangeFormula is set, it is not used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.VisualBasicProc">
            <summary>
            True if the range is a Visual Basic Procedure
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.WorkbookParameter">
            <summary>
            Indicates that the name is used as a workbook parameter 
            on a version of the workbook that is published to or rendered on a Web or application server. This is new to Excel 2007.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TXlsSheetVisible">
            <summary>
            Sheet visibility.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TXlsSheetVisible.Hidden">
            <summary>Sheet is hidden, can be shown by the user with excel.</summary>
        </member>
        <member name="F:FlexCel.Core.TXlsSheetVisible.VeryHidden">
            <summary>Sheet is hidden, only way to show it is with a macro. (user can't see it with excel)</summary>
        </member>
        <member name="F:FlexCel.Core.TXlsSheetVisible.Visible">
            <summary>Sheet is visible to the user.</summary>
        </member>
        <member name="T:FlexCel.Core.TXlsTooManyPageBreaksError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.XlsTooManyPageBreaks" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.XlsTooManyPageBreaks" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsTooManyPageBreaksError(System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TXlsTooManyPageBreaksError.FileName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsTooManyPageBreaksError.FileName">
            <summary>
            File with too many page breaks.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TXlsxInvalidNameError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.XlsxInvalidName" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.XlsxInvalidName" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsxInvalidNameError(System.String,System.String,System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TXlsxInvalidNameError.FileName" /></param>
            <param name="aName">See <see cref="P:FlexCel.Core.TXlsxInvalidNameError.Name" /></param>
            <param name="aDefinition">See <see cref="P:FlexCel.Core.TXlsxInvalidNameError.Definition" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsxInvalidNameError.Definition">
            <summary>
            Definition of the invalid named range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsxInvalidNameError.FileName">
            <summary>
            File with the invalid name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsxInvalidNameError.Name">
            <summary>
            Name of the invalid named range.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TXlsxMissingPartError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.XlsxMissingPart" /> error. Look at <see cref="F:FlexCel.Core.FlexCelError.XlsxMissingPart" />
            for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TXlsxMissingPartError(System.String,System.String,System.String)">
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message" /></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TXlsxMissingPartError.FileName" /></param>
            <param name="aPartName">See <see cref="P:FlexCel.Core.TXlsxMissingPartError.PartName" /></param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsxMissingPartError.FileName">
            <summary>
            File with the missing part.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.TXlsxMissingPartError.PartName">
            <summary>
            Name of the missing part.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TZippyFileInfo">
            <summary>
              Stores information for a single file inside the zip file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TZippyFileInfo.CompressedSize">
            <summary>
              Size of the compressed file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TZippyFileInfo.CompressionMode">
            <summary>
              How the file was stored in the zip file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TZippyFileInfo.FileDateTime">
            <summary>
              Date and time the file was stored.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TZippyFileInfo.FileName">
            <summary>
              Full name for the file, as explained in
              <see cref="M:FlexCel.Core.TZippyReader.GetFileName(System.Int32)" />. You can use
              <see cref="M:FlexCel.Core.TZippyReader.ExtractFileName(System.String)" /> to get the filename without the path.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Core.TZippyFileInfo.UncompressedSize">
            <summary>
              Size of the file uncompressed.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TZippyReader">
            <summary>
              Simple class for reading the contents of a zip file. It can read from multiple
             files at the same time, but not multithreaded.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TZippyReader">
            <summary>
              Creates a new TZippyReader.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.Close">
            <summary>
              Frees the memory associated with the object, and if this class owns
              the stream, it will free the associated stream too.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.CopyStream(System.IO.Stream,System.IO.Stream)">
            <param name="input">Input stream.</param>
            <param name="output">Output stream.</param>
            <summary>
            Utility method. Copies the stream from input to output.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:FlexCel.Core.TZippyReader" /> object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.Dispose(System.Boolean)">
            <param name="disposing">If set to <c>true</c> this code is called from a Dispose call; if not from a finalizer.</param>
            <summary>
            See dispose pattern.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.ExtractFile(System.Int32,System.String)">
            <param name="Index">
              Index (0 based) of the file. Must be between 0 and
              <see cref="M:FlexCel.Core.TZippyReader.FileCount" /> - 1.
            </param>
            <param name="aNameOnDisk">
              Name of the extracted file on the disk.
            </param>
            <summary>
              Extracts a file from the zip file into the disk.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.ExtractFile(System.String,System.String)">
            <param name="aFileName">
              Name of the file on the zip file. See description and remarks at
              <see cref="M:FlexCel.Core.TZippyReader.FileExists(System.String)" />.
            </param>
            <param name="aNameOnDisk">
              Name of the extracted file on the disk.
            </param>
            <summary>
              Extracts a file from the zip file into the disk.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.ExtractFileName(System.String)">
            <param name="aFileName">
              Full Name and path of the file. See description and remarks at
              <see cref="M:FlexCel.Core.TZippyReader.FileExists(System.String)" />.
            </param>
            <summary>
              Returns the filename part of a full zip path. For example, if
              aFileName is 'test/test2/file1.zip' this method will return
              'file1.zip'
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.ExtractFilePath(System.String)">
            <param name="aFileName">
              Full Name and path of the file. See description and remarks at
              <see cref="M:FlexCel.Core.TZippyReader.FileExists(System.String)" />.
            </param>
            <summary>
              Returns the path part of a full zip path, including the trailing slash. For example, if
              aFileName is 'test/test2/file1.zip' this method will return
              'test/test2/'
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.FileCount">
            <summary>
              Returns the number of files inside the zip file, including files in
              all folders.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.FileExists(System.String)">
            <param name="aFileName">
              File that you want to find. If the file is in a folder, you must
              always use a forward slash ("/") to separate folders. The name
              shouldn't start with a slash. Names are case sensitive. Empty folders
              are stored as files with zero size and ending in a forward slash. Non
              empty folders are not stored.
            </param>
            <summary>
              Returns true if a file exists inside the zip file.
            </summary>
            <returns>
              True if the file exists, false otherwise.
            </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.GetFile(System.Int32)">
            <param name="Index">
              Index (0 based) of the file. Must be between 0 and
              <see cref="M:FlexCel.Core.TZippyReader.FileCount" /> - 1.
            </param>
            <summary>
              Returns the contents of the file at position Index. See
              <see cref="M:FlexCel.Core.TZippyReader.GetFile(System.String)" /> for description and remarks.
            </summary>
            <returns>
              Stream with the file contents. You must free this stream once you are
              done reading.
            </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.GetFile(System.String)">
            <param name="aFileName">
              Name of the file. See description and remarks at
              <see cref="M:FlexCel.Core.TZippyReader.FileExists(System.String)" />.
            </param>
            <summary>
              Returns a stream with the contents of file aFileName.
              <b>You must free this stream</b> once you are done reading, even if
              the TZippyReader object owns the main stream.
            </summary>
            <returns>
              Stream with the file contents. You need to free this stream once you
              are done reading.
            </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.GetFileInfo(System.Int32)">
            <param name="Index">
              Index (0 based) of the file. Must be between 0 and <see cref="M:FlexCel.Core.TZippyReader.FileCount" /> - 1.
            </param>
            <summary>
              Returns the information for the file at position "Index" in the zip file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.GetFileInfo(System.String)">
            <param name="aFileName">
              Full Name and path of the file. See description and remarks at
              <see cref="M:FlexCel.Core.TZippyReader.FileExists(System.String)" />.
            </param>
            <summary>
              Returns the information for file "aFileName" in the zip file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.GetFileName(System.Int32)">
            <param name="Index">
              Index (0 based) of the file. Must be between 0 and <see cref="M:FlexCel.Core.TZippyReader.FileCount" /> - 1.
            </param>
            <summary>
              Returns the filename for the file at position Index.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.IsZipValid(System.IO.Stream)">
            <param name="aStream">
              Stream with the contents.
            </param>
            <summary>
              Returns true if the stream contains a valid zip file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.IsZipValid(System.String)">
            <param name="aZipFileName">
              File to test.
            </param>
            <summary>
              Returns true if the file is a valid zip file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.Open(System.String)">
            <param name="aZipFileName">
              File to open.
            </param>
            <summary>
              Opens an existing filename. If the file isn't a supported zip file,
              an Exception will be raised.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.Open(System.IO.Stream,System.Boolean)">
            <param name="aStream">
              Stream that contains the file to load.
            </param>
            <param name="aOwnsStream">
              If true, aStream will be destroyed when
              you destroy this object. If false, no attempt to free the Stream will
              be done.
            </param>
            <summary>
              Opens an existing stream for reading. If the file isn't a supported
              zip file, an exception will be raised. If you prefer to not raise an
              exception, use <see cref="M:FlexCel.Core.TZippyReader.TryOpen(System.IO.Stream,System.Boolean)" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyReader.TryOpen(System.IO.Stream,System.Boolean)">
            <param name="aStream">
              Stream that contains the file to load.
            </param>
            <param name="aOwnsStream">
              If true, aStream will be destroyed when
              you destroy this object. If false, no attempt to free the Stream will
              be done
            </param>
            <summary>
              Tries to open a zip file and load the contents. If the file is
              invalid no Exception will be thrown. Note that other exceptions like
              a disk read error will still be raised. You can use this method
              instead of "if (TZippyReader.IsZipValid(stream))
              TZippyReader.Open(stream)" as it will be faster because it doesn't
              have to read the file twice.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.TZippyWriter">
            <summary>
              Simple class for writing to a zip file. It can compress on the fly as
              you are generating the file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.TZippyWriter">
            <summary>
              Creates a new TZippyWriter object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.Add(System.String)">
            <param name="aFileName">
              FileName for the new file inside the zip file. For information and
              remarks about it, see <see cref="M:FlexCel.Core.TZippyReader.GetFileName(System.Int32)" /></param>
            <summary>
              Creates a new file in the zip file, and returns a new stream where
              you can write data to it on the fly. If you just want to add an
              existing stream or file to the zip file, use <see cref="M:FlexCel.Core.TZippyWriter.AddFile(System.String,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" />
              or <see cref="M:FlexCel.Core.TZippyWriter.AddStream(System.IO.Stream,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" /> instead.
              <b>Important: The stream returned is owned by this TZippyWriter object, and you shouldn't destroy it.</b></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.Add(System.String,FlexCel.Core.TCompressionMode)">
            <param name="aFileName">
              FileName for the new file inside the zip file. For information and
              remarks about it, see <see cref="M:FlexCel.Core.TZippyReader.GetFileName(System.Int32)" /></param>
            <param name="CompressionMode">
              How the file will be stored. We support deflated and stored modes.
              You can use stored to store files that are already compressed (like a
              png image), and deflated for the rest.
            </param>
            <summary>
              Creates a new file in the zip file, and returns a new stream where
              you can write data to it on the fly. If you just want to add an
              existing stream or file to the zip file, use <see cref="M:FlexCel.Core.TZippyWriter.AddFile(System.String,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" />
              or <see cref="M:FlexCel.Core.TZippyWriter.AddStream(System.IO.Stream,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" /> instead.
              <b>Important: The stream returned is owned by this TZippyWriter object, and you shouldn't destroy it.</b></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.Add(System.String,System.DateTime,FlexCel.Core.TCompressionMode)">
            <param name="aFileName">
              FileName for the new file inside the zip file. For information and
              remarks about it, see <see cref="M:FlexCel.Core.TZippyReader.GetFileName(System.Int32)" /></param>
            <param name="aFileDateTime">
              Date and time for the file that will be created inside the zip file.
            </param>
            <param name="CompressionMode">
              How the file will be stored. We support deflated and stored modes.
              You can use stored to store files that are already compressed (like a
              png image), and deflated for the rest.
            </param>
            <summary>
              Creates a new file in the zip file, and returns a new stream where
              you can write data to it on the fly. If you just want to add an
              existing stream or file to the zip file, use <see cref="M:FlexCel.Core.TZippyWriter.AddFile(System.String,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" />
              or <see cref="M:FlexCel.Core.TZippyWriter.AddStream(System.IO.Stream,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" /> instead.
              <b>Important: The stream returned is owned by  this TZippyWriter object, and you shouldn't destroy it.</b></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.AddFile(System.String,System.String,System.DateTime,FlexCel.Core.TCompressionMode)">
            <param name="aNameOnDisk">
              File on the disk that you want to add to the zip file.
            </param>
            <param name="aNameOnZip">
              FileName for the new file inside the zip file. For information and
              remarks about it, see <see cref="M:FlexCel.Core.TZippyReader.GetFileName(System.Int32)" /></param>
            <param name="aFileDateTime">
              Date and time for the file that will be created inside the zip file.
            </param>
            <param name="CompressionMode">
              How the file will be stored. We support deflated and stored modes.
              You can use stored to store files that are already compressed (like a
              png image), and deflated for the rest.
            </param>
            <summary>
              Adds an existing file to the zip file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.AddStream(System.IO.Stream,System.String,System.DateTime,FlexCel.Core.TCompressionMode)">
            <param name="aDataStream">
              Stream with the data that you want to add to the zip file.
            </param>
            <param name="aNameOnZip">
              FileName for the new file inside the zip file. For information and
              remarks about it, see <see cref="M:FlexCel.Core.TZippyReader.GetFileName(System.Int32)" /></param>
            <param name="aFileDateTime">
              Date and time for the file that will be created inside the zip file.
            </param>
            <param name="CompressionMode">
              How the file will be stored. We support deflated and stored modes.
              You can use stored to store files that are already compressed (like a
              png image), and deflated for the rest.
            </param>
            <summary>
              Adds an existing stream to the zip file. Note that this method will
              add the data of an existing stream,  if you want to get a stream
              where you can write data and it will be added on the fly to the zip
              file, use <see cref="M:FlexCel.Core.TZippyWriter.Add(System.String)" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.Close">
            <summary>
              Finalizes the zip file, by writing the final headers. <b>You normally
              don't need to call this method</b>, since it will be called automatically
              when you destroy the object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.CreateZip(System.String)">
            <param name="aZipFileName">
              Name of the file that will be created on disk.
            </param>
            <summary>
              Creates a zip file on disk. After creating it, you can add new files
              with <see cref="M:FlexCel.Core.TZippyWriter.Add(System.String)" />, <see cref="M:FlexCel.Core.TZippyWriter.AddFile(System.String,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" /> and
              <see cref="M:FlexCel.Core.TZippyWriter.AddStream(System.IO.Stream,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.CreateZip(System.IO.Stream,System.Boolean)">
            <param name="aStream">
              Stream where you want to create the file.
            </param>
            <param name="aOwnsStream">
              If true, aStream will be freed when you destroy this object. If
              false, you need to destroy the stream yourself.
            </param>
            <summary>
              Creates a zip file in a stream. After creating it, you can add new
              files with <see cref="M:FlexCel.Core.TZippyWriter.Add(System.String)" />, <see cref="M:FlexCel.Core.TZippyWriter.AddFile(System.String,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" /> and
              <see cref="M:FlexCel.Core.TZippyWriter.AddStream(System.IO.Stream,System.String,System.DateTime,FlexCel.Core.TCompressionMode)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.Dispose">
            <summary>
            
            Destroys the object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary>
            Destroys the object according to a normal dispose pattern.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Core.TZippyWriter.GetCompressionMode(System.String)">
            <param name="aFileName">
              Name of the file as it will be stored in the zip file.
            </param>
            <summary>
              Returns the compression mode for a file name. This method is
              used when you don't specify a compression mode or it is cmAutomatic.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.VirtualCellEndReadingEventArgs">
            <summary>
            Arguments passed in the event.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.VirtualCellEndReadingEventArgs">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Core.VirtualCellEndReadingEventArgs</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.VirtualCellEndReadingEventHandler">
            <param name="sender">Excel file that has been loaded. At the time this event is called, it is fully loaded.</param>
            <param name="e">Arguments for the event.</param>
            <summary>
            Delegate for virtual cell reads. This delegate is called after the full file has been read.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.VirtualCellReadEventArgs">
            <summary>
            Arguments passed in the event.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.VirtualCellReadEventArgs(FlexCel.Core.CellValue,System.String,System.String[])">
            <param name="aCell">Cell value.</param>
            <param name="aNextSheet">Sheet where the next cell will be.</param>
            <param name="aSheetNames">An array with all the sheet names in the file.</param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.VirtualCellReadEventArgs.Cell">
            <summary>
            Value and position of a cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.VirtualCellReadEventArgs.NextSheet">
            <summary>
            Sheet where the next cell will be. By default, this value is set automatically, but you can 
            change to other value to skip some sheets, or set it to null or empty to end reading the file.<br />
            If for example you are at sheet "Sheet1" and set NextSheet to be "Sheet5", then the next time this event is called it will be with
            the first cell of Sheet5. To stop reading this sheet and move to the next, set "NextSheet" to be <see cref="P:FlexCel.Core.VirtualCellReadEventArgs.SheetNames" />[<see cref="P:FlexCel.Core.VirtualCellReadEventArgs.Cell" />.Sheet]
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.VirtualCellReadEventArgs.SheetNames">
            <summary>
            Array with all the sheet names in the file. You can use this array and <see cref="P:FlexCel.Core.VirtualCellReadEventArgs.Cell" />.Sheet to know the current and next sheet names.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.VirtualCellReadEventHandler">
            <param name="sender">Excel file from where we are reading. Remember that the file is not fully loaded when this event is called, so you are not likely to be able to use this parameter.</param>
            <param name="e">Contains the value of the cell we are reading.</param>
            <summary>
            Delegate for virtual cell reads.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Core.VirtualCellStartReadingEventArgs">
            <summary>
            Arguments passed in the event.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Core.VirtualCellStartReadingEventArgs(System.String[],System.String)">
            <param name="aSheetNames">Array with all the sheet names available in the file.</param>
            <param name="aNextSheet">This is the next sheet that will be read by FlexCel. You can change it to start reading the file
            by a different sheet, or set it to empty or null to finish reading the file.</param>
            <summary>
            Creates a new instance.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Core.VirtualCellStartReadingEventArgs.NextSheet">
            <summary>
            This is the next sheet that will be read by FlexCel. You can change it to start reading the file
            by a different sheet, or set it to empty or null to finish reading the file. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Core.VirtualCellStartReadingEventArgs.SheetNames">
            <summary>
            A list with all the sheets available in the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Core.VirtualCellStartReadingEventHandler">
            <param name="sender">Excel file from where we are reading. Remember that the file is not fully loaded when this event is called, so you are not likely to be able to use this parameter.</param>
            <param name="e">Arguments for the event.</param>
            <summary>
            Delegate for virtual cell reads. It is called before we start reading the file, but after sheet names are known.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUIFont">
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIFont.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIFont.FontDescent">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIFont.FontLinespacing">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIFont.GetHeight(System.Int32)">
            <param name="dpi" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIFont.GetTTFTable(System.Int64)">
            <param name="tableName" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIFont.GetWidth(System.String,System.Int32)">
            <param name="aText" />
            <param name="dpi" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIFont.Handle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIFont.Name">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIFont.SizeInPoints">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIFont.Style">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIFont.SupportsTTFTables">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUIGraphics">
            <summary />
            <remarks />
        </member>
        <member name="C:FlexCel.Draw.TOSXUIGraphics(FlexCel.Draw.TOSXUIImage,System.Double)">
            <param name="aImage" />
            <param name="Scale" />
            <summary />
            <remarks />
        </member>
        <member name="C:FlexCel.Draw.TOSXUIGraphics(MonoMac.CoreGraphics.CGContext,System.Double,System.Double,System.Double,FlexCel.Core.TPaperDimensions)">
            <param name="aGraphics" />
            <param name="aDpi" />
            <param name="aWidthPix" />
            <param name="aHeightPix" />
            <param name="aPaperSize" />
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIGraphics.Clear(FlexCel.Core.TUIColor)">
            <param name="aColor" />
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIGraphics.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIGraphics.Handle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIGraphics.PaperSize">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIGraphics.SetMode(FlexCel.Core.TUIInterpolationMode,FlexCel.Core.TUISmoothingMode)">
            <param name="aInterpolationMode" />
            <param name="aSmoothingMode" />
            <summary />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUIHatchBrush">
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIHatchBrush.BackgroundColor">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIHatchBrush.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIHatchBrush.ForegroundColor">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIHatchBrush.Handle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIHatchBrush.HatchStyle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUIImage">
            <summary />
            <remarks />
        </member>
        <member name="C:FlexCel.Draw.TOSXUIImage(MonoMac.CoreGraphics.CGBitmapContext)">
            <param name="aContext" />
            <summary />
            <remarks />
        </member>
        <member name="C:FlexCel.Draw.TOSXUIImage(System.IO.Stream)">
            <param name="aStream" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.CGContext">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.Clone">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.ConvertTo256Colors">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.ConvertToBiLevel">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.ConvertToBWDither">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.ConvertToGrayscale">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.CreateCGImage">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.GetImgType(System.String)">
            <param name="typeId" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.GetTypeId(FlexCel.Core.TXlsImgType)">
            <param name="imgType" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.Height">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.HeightInPoints">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.Is8bitGrayscale">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.IsMetafile">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.RasterMetafile(FlexCel.Core.TUIRectangle)">
            <param name="Coords" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.RawFormat">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.Save(System.IO.Stream,FlexCel.Core.TXlsImgType)">
            <param name="outMs" />
            <param name="ImgType" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIImage.SaveStart(System.IO.Stream,FlexCel.Core.ImageExportType,System.Int32)">
            <param name="outStream" />
            <param name="ExportType" />
            <param name="totalPages" />
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.Width">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIImage.WidthInPoints">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUIImageAttributes">
            <summary />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUILinearGradientBrush">
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUILinearGradientBrush.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUILinearGradientBrush.Handle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUILinearGradientBrush.InterpolationColors">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUILinearGradientBrush.Rectangle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUILinearGradientBrush.SetSigmaBellShape(System.Double)">
            <param name="FillFocus" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUILinearGradientBrush.TransformElements">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUIPathGradientBrush">
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPathGradientBrush.CenterColor">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPathGradientBrush.CenterPoint">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIPathGradientBrush.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPathGradientBrush.Handle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPathGradientBrush.InterpolationColors">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPathGradientBrush.Rectangle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUIPathGradientBrush.SetSigmaBellShape(System.Double)">
            <param name="FillFocus" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPathGradientBrush.SurroundColor">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPathGradientBrush.TransformElements">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUIPen">
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPen.Color">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPen.DashStyle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUIPen.Width">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUISolidBrush">
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUISolidBrush.Color">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Draw.TOSXUITextureBrush">
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Draw.TOSXUITextureBrush.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUITextureBrush.Handle">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUITextureBrush.Image">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Draw.TOSXUITextureBrush.TransformElements">
            <summary />
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.FlexCelPdfException">
            <summary>
            Exception thrown when an exception on the PDF engine happens. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.FlexCelPdfException">
            <summary>
            Creates a new FlexCelPdfException
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.FlexCelPdfException(System.String)">
            <param name="message">Error Message</param>
            <summary>
            Creates a new FlexCelPdfException with an error message.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.FlexCelPdfException(System.String,FlexCel.Pdf.PdfErr)">
            <param name="message">Error Message</param>
            <param name="aErrorCode">Error code of the exception.</param>
            <summary>
            Creates a new FlexCelPdfException with an error message and an exception code.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.FlexCelPdfException(System.String,System.Exception)">
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
            <summary>
            Creates a nested Exception.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.FlexCelPdfException(System.String,FlexCel.Pdf.PdfErr,System.Exception)">
            <param name="message">Error Message.</param>
            <param name="aErrorCode">Error code of the exception.</param>
            <param name="inner">Inner Exception.</param>
            <summary>
            Creates a nested Exception.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.FlexCelPdfException.ErrorCode">
            <summary>
            Error code on the Exception.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.FontEmbedEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.OnFontEmbed" />.
            Use this event to specify which fonts to embed and which fonts to ignore. Note that unicode fonts will be 
            embedded no matter what you say here.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.FontEmbedEventArgs(FlexCel.Core.TUIFont,System.Boolean)">
            <param name="aInputFont" />
            <param name="aEmbed" />
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.FontEmbedEventArgs.Embed">
            <summary>
            Return true if you want to embed this font, false if you don't want to. If you don't modify this value, the default will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.FontEmbedEventArgs.InputFont">
            <summary>
            The font for which you need to return the data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.FontEmbedEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for reading the font data.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.GetFontDataEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontData" />.
            Use this event to provide font information for embedding.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.GetFontDataEventArgs(FlexCel.Core.TUIFont)">
            <param name="aFont" />
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.GetFontDataEventArgs.Applied">
            <summary>
            Set Applied = false if the font is not being processed by the event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.GetFontDataEventArgs.FontData">
            <summary>
            Return the full font file as a byte array here.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.GetFontDataEventArgs.InputFont">
            <summary>
            The font for which you need to return the data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.GetFontDataEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for reading the font data.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.GetFontFolderEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontFolder" />.
            Use this event to provide font information for embedding.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.GetFontFolderEventArgs(FlexCel.Core.TUIFont,System.String)">
            <param name="aFont" />
            <param name="aPath" />
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.GetFontFolderEventArgs.Applied">
            <summary>
            Set Applied = false if the font is not being processed by the event, and FlexCel should try to find the font path for the font as if the event wasn't assigned.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.GetFontFolderEventArgs.FontPath">
            <summary>
            Return here the font path to the "Fonts" folder where ttf files are located. <br />
            In MonoDroid, we use a "@folder" syntax to refer to assets. So for example to specify that
            the fonts are in the "fonts" folder asset, return "@fonts" here. If the fonts are in a normal folder, just return the folder.
            <br />
            Note: In FlexCel 6 we've changed this name from "FontFolder" to "FontPath" because the behavior changed, so you code won't
            compile and you get a chance to fix the FontFolder references.
            In FlexCel 5 or older, after specifying the path, FlexCel would append "..\Fonts" to whatever you specified, unless
            a variable "AppendFontFolder" was true. In FlexCel 6 we've simplified this in order to comply with all the possible
            font folders in different OSs. Now "FontPath" is the actual font path, FlexCel won't add anything to it.
            <br /><b>When replacing FontFolder by FontPath in your app, make sure to Add "..\Fonts" if needed, as FontPath won't add it.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.GetFontFolderEventArgs.InputFont">
            <summary>
            The font for which you need to return the data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.GetFontFolderEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for reading the font data.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.IPdfPageTagger">
            <summary>
            Implement this interface in order to tag a pdf file created by TPdfWriter. This interface will be
            called after every page is generated. Note that FlexCelPdfExport already
            implements it so there is no need to define it again.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.IPdfPageTagger.AddContentTag(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <param name="objId">Id of the object being inserted. Get a value with GetObjectIds(int)</param>
            <param name="parentObjId">Id of the object which is parent to this one, in order to create the tag tree.
            Use a negative number if the tag derives directly from the root.</param>
            <param name="childMcId">The id used in TagContentBegin/TagContentEnd.</param>
            <param name="name">Name of the tag.</param>
            <param name="altText">Alt text for the tag, if applicable. Use null or empty if there is no Alt text.</param>
            <summary>
            Adds a new tag to the structure tree, with a child which was added with TagContentBegin/TagContentEnd.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.IPdfRoleTag">
            <summary>
            Implement this interface in order to add roles to the structure tree.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.IPdfRoleTag.AddRole(System.String,System.String)">
            <param name="name">Name of the new role.</param>
            <param name="map">Existing role which will be used to map name.</param>
            <summary>
            Adds a new role.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.IPdfTagActions">
            <summary>
            Events that allow you to tag a pdf document.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.IPdfTagActions.DefineRoles(FlexCel.Pdf.IPdfRoleTag)">
            <param name="role">Use this object to define new roles.</param>
            <summary>
            This event allows you to define alias roles.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.IPdfTagActions.TagsInPage(System.Int32,FlexCel.Pdf.IPdfPageTagger)">
            <param name="pageNumber">Page that we are currently exporting.</param>
            <param name="tagger">Object for setting up the tags.</param>
            <summary>
            This event will be called after each page is completed, and allows you to specify the tags for the page.
            All tags in the page should be defined here.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.IPdfTagActions.TagsTeardown(FlexCel.Pdf.IPdfTeardownTagger)">
            <param name="tagger">Object for setting up the tags.</param>
            <summary>
            This event will be called before finalizing the document, and allows you to specify the global tags on it.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.IPdfTagger">
            <summary>
            Base interface for tagging pdf documents.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.IPdfTagger.AddStructTag(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String)">
            <param name="objId">Id of the object being inserted. Get a value with <see cref="M:FlexCel.Pdf.IPdfTagger.GetObjectIds(System.Int32)" /></param>
            <param name="parentObjId">Id of the object which is parent to this one, in order to create the tag tree.
            Use a negative number if the tag derives directly from the root.</param>
            <param name="childrenObjIds">A list of the children tags, to create the Tag tree.</param>
            <param name="name">Name of the tag.</param>
            <param name="altText">Alt text for the tag, if applicable. Use null or empty if there is no Alt text.</param>
            <summary>
            Adds a new tag to the structure tree.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.IPdfTagger.GetObjectIds(System.Int32)">
            <param name="count">Number of Ids to reserve.</param>
            <summary>
            Reserves count Ids from the file, so you can use them to define your tags. <b>IMPORTANT:</b> You must use all
            the Ids you reserve.
            </summary>
            <returns>First reserved Id.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.IPdfTeardownTagger">
            <summary>
            Implement this interface in order to tag a pdf file created by TPdfWriter. This interface will be
            called after every the document is finished, and allows youto write global tags. Note that FlexCelPdfExport already
            implements it so there is no need to define it again.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.PdfErr">
            <summary>
            Error Codes. We use this and not actual strings to make sure all are correctly spelled.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.CannotAttachFilesInPDFA1OrA2">
            <summary>
            A PDF/A-1 or PDF/A-2 file can't have attached files. Use PDF/A-3 for allowing embedding files.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrFontNotFound">
            <summary>
            The font was not found.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInternal">
            <summary>
            Internal error.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidAllowedChanges">
            <summary>
            AllowedChanges value is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidFont">
            <summary>
            The font file for this font is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidPageNumber">
            <summary>
            Invalid page number.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidPageSize">
            <summary>This PaperKind is not supported. Please use a custom Paper size.</summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidPngImage">
            <summary>The png image is corrupt, invalid, or not in a format FlexCel can understand.</summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrNoDotsInSigName">
            <summary>
            Signature names cannot contain dots.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrSigningLengthToSmall">
            <summary>
            The estimated size for the signature was smaller than the final size.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrTryingToSignStartedDocument">
            <summary>
            A pdf file must be signed before calling BeginDoc.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrUnassingedSignerFactory">
            <summary>
            There is no signer associated with the signature.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.PdfMessages">
            <summary>
            FlexCel Native PDF Constants. It reads the resources from the active locale, and
            returns the correct string.
            If your language is not supported and you feel like translating the messages,
            please send us a copy. We will include it on the next FlexCel version. 
            <para>To add a new language:
            <list type="number"><item>
               Copy the file pdfmsg.resx to your language (for example, pdfmsg.es.resx to translate to spanish)
            </item><item>
               Edit the new file and change the messages(you can do this visually with visual studio)
            </item><item>
               Add the .resx file to the FlexCel project
            </item></list></para></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfMessages.GetString(FlexCel.Pdf.PdfErr,System.Object[])">
            <param name="ResName">Error Code.</param>
            <param name="args">Parameters for this error.</param>
            <summary>
            Reruns a string based on the PdfErr enumerator, formatted with args.
            This method is used to get an Exception error message. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfMessages.ThrowException(FlexCel.Pdf.PdfErr,System.Object[])">
            <param name="ResName">Error Code.</param>
            <param name="args">Parameters for this error.</param>
            <summary>
            Throws a standard FlexCelPdfException.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfMessages.ThrowException(System.Exception,FlexCel.Pdf.PdfErr,System.Object[])">
            <param name="e">Inner exception.</param>
            <param name="ResName">Error Code.</param>
            <param name="args">Parameters for this error.</param>
            <summary>
            Throws a standard FlexCelPdfException with innerException.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.PdfWriter">
            <summary>
            A simple class for creating PDF files. It will not hold contents into memory, so it can be used with little memory.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.PdfWriter">
            <summary>
            Creates a new PDF file instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.AddBookmark(FlexCel.Pdf.TBookmark)">
            <param name="bookmark" />
            <summary>
            Adds a new bookmark to the document. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.AddFontDescent">
            <summary>
            When false, (the default) text base will be at the y coordinate. For example, DrawString(..., y=100,...)
            will draw a string with its base at 100. Font descent (for example the lower part of a "p") will be below
            100, and the ascent (the upper part) will be above. This is the standard PDF behavior.
            When true, all text will be drawn above the y coordinate. (both ascent and descent).
            This is the standard GDI+ behavior, when StringFormat.LineAlignment=StringAlignment.Far.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.AttachFile(System.String,System.String,System.String,FlexCel.Pdf.TPdfAttachmentKind)">
            <param name="fileName">Name on disk of the file to attach. This will also be the name of the file in 
            the pdf. If you want to specify a different name in the pdf than the name on disk, use <see cref="M:FlexCel.Pdf.PdfWriter.AttachFile(System.String,System.String,System.String,System.DateTime,FlexCel.Pdf.TPdfAttachmentKind,FlexCel.Pdf.TPdfAttachmentDataProviderDelegate)" /></param>
            <param name="mimeType">Mime type of the file being attached. 
            You can use <see cref="T:FlexCel.Core.StandardMimeType" /> for predefined types.
            Note that while this might be null or Empty for standard pdf files, for PDF/A3 mime type is required.
            If you don't know the mime type, you must specify StandardMimeType.OctectStream.
            </param>
            <param name="description">Description of the file that the pdf reader will show in the attachment pane.
            While not required by PDF/A-3, it is recommended to provide a description for the file.</param>
            <param name="attachmentKind">How the attachment relates to the pdf file. This is required by PDF/A-3.</param>
            <summary>
            Attachs a file to the pdf file. You can attach files at any time while creating the pdf,
            but the file will be read only when you call <see cref="M:FlexCel.Pdf.PdfWriter.EndDoc" />. The files that are in the list
            at the moment of calling EndDoc are the ones that will be saved, and they contents of the files will be read then.
            <br /> You can remove all the attachments in the file by calling <see cref="M:FlexCel.Pdf.PdfWriter.ClearAttachments" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.AttachFile(System.String,System.String,System.String,System.DateTime,FlexCel.Pdf.TPdfAttachmentKind,FlexCel.Pdf.TPdfAttachmentDataProviderDelegate)">
            <param name="fileName">Name that will be used for the file in the pdf.</param>
            <param name="mimeType">Mime type of the file being attached. 
            You can use <see cref="T:FlexCel.Core.StandardMimeType" /> for predefined types.
            Note that while this might be null or Empty for standard pdf files, for PDF/A3 mime type is required.
            If you don't know the mime type, you must specify StandardMimeType.OctectStream.
            </param>
            <param name="description">Description of the file that the pdf reader will show in the attachment pane.
            While not required by PDF/A-3, it is recommended to provide a description for the file.</param>
            <param name="modificationTimeLocalTimeZone">Modification date of the attachment file in the local time zone.
            Use DateTime.MinValue to not write a modification date for the file. </param>
            <param name="attachmentKind">How the attachment relates to the pdf file. This is required by PDF/A-3.</param>
            <param name="dataProvider">This can be a delegate or lambda expression that will load the data for the file when
            actually embedding it. This action will be called at the moment of embedding and must provide the data for the file.</param>
            <summary>
            Attachs a file to the pdf file. You can attach files at any time while creating the pdf,
            but the file will be read only when you call <see cref="M:FlexCel.Pdf.PdfWriter.EndDoc" />. The files that are in the list
            at the moment of calling EndDoc are the ones that will be saved, and they contents of the files will be read then.
            <br /> You can remove all the attachments in the file by calling <see cref="M:FlexCel.Pdf.PdfWriter.ClearAttachments" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.BeginDoc(System.IO.Stream)">
            <param name="aDataStream" />
            <summary>
            Call this method before starting the output.
            It will initialize a new page. After this you can call <see cref="M:FlexCel.Pdf.PdfWriter.DrawString(System.String,FlexCel.Core.TUIFont,FlexCel.Core.TUIBrush,System.Double,System.Double)" />, <see cref="M:FlexCel.Pdf.PdfWriter.NewPage" />, etc.
            Always end the document with a call to <see cref="M:FlexCel.Pdf.PdfWriter.EndDoc" /> and then remember to close the stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ClearAttachments">
            <summary>
            Removes all existing attachments in the writer.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ClipBeziers(FlexCel.Core.TPointF[],System.Boolean)">
            <param name="aPoints">Array of points for the curve. See GDI+ DrawBeziers function for more information.</param>
            <param name="exclude">When true, all region OUTSIDE the region will be intersected with the current clipping region.</param>
            <summary>
            Intersects the clipping area with a bezier region. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ClipPolygon(FlexCel.Core.TPointF[],System.Boolean)">
            <param name="aPoints">Array of points for the polygon.</param>
            <param name="exclude">When true, all region OUTSIDE the polygon will be intersected with the current clipping region.</param>
            <summary>
            Intersects the clipping area with a polygon. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ClipRectangle(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <param name="x1" />
            <param name="y1" />
            <param name="width" />
            <param name="height" />
            <param name="exclude">When true, all region OUTSIDE the rectangle will be intersected with the current clipping region.</param>
            <summary>
            Intersect the clip region with a rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Comment(System.Double,System.Double,System.Double,System.Double,System.String,FlexCel.Pdf.TPdfCommentProperties)">
            <param name="x">x coord.</param>
            <param name="y">y coord.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <param name="comment">Text to put into the comment.</param>
            <param name="commentProperties">Properties for the comment.</param>
            <summary>
            Creates a comment on the pdf file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Compress">
            <summary>
            Set it to true to compress the text on the generated pdf file. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawAndFillBeziers(FlexCel.Core.TUIPen,FlexCel.Core.TUIBrush,FlexCel.Core.TPointF[])">
            <param name="aPen">Pen for the outline. If null, no outline will be drawn.</param>
            <param name="aBrush">Brush for filling. If null, the shape will not be filled.</param>
            <param name="aPoints">Array of points for the curve. See GDI+ DrawBeziers function for more information.</param>
            <summary>
            Draws and/or fills a bezier path. If Brush is not null, the shape will be closed for filling.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawAndFillPolygon(FlexCel.Core.TUIPen,FlexCel.Core.TUIBrush,FlexCel.Core.TPointF[])">
            <param name="aPen">Pen for the outline. If null, no outline will be drawn.</param>
            <param name="aBrush">Brush for filling. If null, the shape will not be filled.</param>
            <param name="aPoints">Array of points for the polygon.</param>
            <summary>
            Draws and/or fills a polygon. The shape will be closed.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawAndFillRectangle(FlexCel.Core.TUIPen,FlexCel.Core.TUIBrush,System.Double,System.Double,System.Double,System.Double)">
            <param name="aPen">Pen for the line. Might be null.</param>
            <param name="aBrush">Brush for the fill. Might be null.</param>
            <param name="x1" />
            <param name="y1" />
            <param name="width" />
            <param name="height" />
            <summary>
            Draws and fills a rectangle specified by a coordinate pair, a width, and a height. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawImage(FlexCel.Core.TUIImage,FlexCel.Core.TUIRectangle,System.IO.Stream)">
            <param name="image">Image to insert. If it is not JPEG or PNG, it will be converted to PNG.</param>
            <param name="rect">Rectangle where the image will be.</param>
            <param name="imageData">Stream with the raw image data. Not required, might be null.</param>
            <summary>
            Draws an image on the canvas. Image can be any type, but all except jpeg will be converted to PNG.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawImage(FlexCel.Core.TUIImage,FlexCel.Core.TUIRectangle,System.IO.Stream,System.Int64,System.Boolean)">
            <param name="image">Image to insert. If it is not JPEG or PNG, it will be converted to PNG.</param>
            <param name="rect">Rectangle where the image will be.</param>
            <param name="imageData">Stream with the raw image data. Not required, might be null.</param>
            <param name="transparentColor">Color to make transparent. To specify no transparent color use <see cref="F:FlexCel.Core.FlxConsts.NoTransparentColor" /></param>
            <param name="defaultToJpg">When true and the image is not on a supported format (or imageData==null) the image will
            be converted to JPG. If false, the image will be converted to PNG.</param>
            <summary>
            Draws an image on the canvas. Image can be any type, but all except jpeg will be converted to PNG.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawLine(FlexCel.Core.TUIPen,System.Double,System.Double,System.Double,System.Double)">
            <param name="aPen">Pen used to draw the line. Width and color are used.</param>
            <param name="x1" />
            <param name="y1" />
            <param name="x2" />
            <param name="y2" />
            <summary>
            Draws a line on the current page.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawLines(FlexCel.Core.TUIPen,FlexCel.Core.TPointF[])">
            <param name="aPen">The pen to draw the lines.</param>
            <param name="points">An array of points. Its length must be more than 2.</param>
            <summary>
            Draws an array of line connecting pairs of points.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawRectangle(FlexCel.Core.TUIPen,System.Double,System.Double,System.Double,System.Double)">
            <param name="aPen">Pen for the line.</param>
            <param name="x1" />
            <param name="y1" />
            <param name="width" />
            <param name="height" />
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawString(System.String,FlexCel.Core.TUIFont,FlexCel.Core.TUIBrush,System.Double,System.Double)">
            <param name="s">String to write.</param>
            <param name="aFont">Font to draw the text.</param>
            <param name="aBrush">Brush used for Color.</param>
            <param name="x">X coord. (default from bottom left)</param>
            <param name="y">Y coord. (default from bottom left. Might change with <see cref="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown" /> value)</param>
            <summary>
            Writes a string to the current page.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawString(System.String,FlexCel.Core.TUIFont,FlexCel.Core.TUIPen,FlexCel.Core.TUIBrush,System.Double,System.Double)">
            <param name="s">String to write.</param>
            <param name="aFont">Font to draw the text.</param>
            <param name="aPen">Pen to draw the text outline. If null, no outline will be drawn.</param>
            <param name="aBrush">Brush used for Color. If null, only the outline will be drawn.</param>
            <param name="x">X coord. (default from bottom left)</param>
            <param name="y">Y coord. (default from bottom left. Might change with <see cref="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown" /> value)</param>
            <summary>
            Writes a string to the current page.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.EmbedColorProfile">
            <summary>
            If true, a color profile will be embedded in the generated pdf files. An embedded color profile can increase
            the size of the generated file in some kilobytes, and it isn't required or needed, so you'll normally want to 
            keep this property false. For PDF/A, it is required, but when you set the PdfType to PDF/A the color profile will
            always be included anyway, and this property will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.EndDoc">
            <summary>
            Always call this method to write the final part of a pdf file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FallbackFonts">
            <summary>
            A semicolon (;) separated list of font names to try when a character is not found in the used font.<br />
            When a character is not found in a font, it will display as an empty square by default. By setting this
            property, FlexCel will try to find a font that supports this character in this list, and if found, use that font
            to render the character.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FillRectangle(FlexCel.Core.TUIBrush,System.Double,System.Double,System.Double,System.Double)">
            <param name="aBrush">Brush to fill.</param>
            <param name="x1" />
            <param name="y1" />
            <param name="width" />
            <param name="height" />
            <summary>
            Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
            No line is drawn around the rectangle.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FontDescent(FlexCel.Core.TUIFont)">
            <param name="aFont">Font to measure.</param>
            <summary>
            Returns the font height on points * Scale. (1/72 of an inch * Scale)
            </summary>
            <returns>Font height.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FontEmbed">
            <summary>
            Determines what fonts will be embedded on the generated pdf. 
            Note that when using UNICODE fonts WILL BE EMBEDDED no matter the value of this property. Also if creating PDF/A files.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FontHeight(FlexCel.Core.TUIFont)">
            <param name="aFont">Font to measure.</param>
            <summary>
            Returns the font height on points * Scale. (1/72 of an inch * Scale)
            </summary>
            <returns>Font height.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FontLinespacing(FlexCel.Core.TUIFont)">
            <param name="aFont">Font to measure.</param>
            <summary>
            Returns the font white space on points * Scale. (1/72 of an inch * Scale)
            </summary>
            <returns>The blank space between lines.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FontMapping">
            <summary>
            Determines how fonts will be replaced on the generated pdf. Pdf comes with 4 standard font families,
            Serif, Sans-Serif, Monospace and Symbol. You can use for example the standard Helvetica instead of Arial and do not worry about embedding the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FontSubset">
            <summary>
            When <see cref="P:FlexCel.Pdf.PdfWriter.FontEmbed" /> is set to embed the fonts, this setting determines if the full font will be embedded,
            or only the characters used in the document. If the full font is embedded the resulting file will be larger, but 
            it will be possible to edit it with a third party tool once it has been generated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.GetBookmarks">
            <summary>
            Returns all the bookmarks on the file. Note that this will return a COPY of the bookmarks,
            so changing them will not change them in the file. You need to use <see cref="M:FlexCel.Pdf.PdfWriter.SetBookmarks(FlexCel.Pdf.TBookmarkList)" /> to replace the new list.
            </summary>
            <returns>Existing bookmarks on the file.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.GetFontData">
            <summary>
            Use this event if you want to provide your own font information for embedding for a particular instance. 
            Note that if you don't assign this event, <see cref="P:FlexCel.Pdf.PdfWriter.GetFontDataGlobal" /> will be used instead.
            If GetFontData and GetFontDataGlobal are not assigned the default method will be used, and this 
            will try to find the font on the Fonts folder. To change the font folder, use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontFolder" /> event
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.GetFontDataGlobal">
            <summary>
            Use this event if you want to provide your own font information for embedding for the full application. 
            Note that if you assign <see cref="P:FlexCel.Pdf.PdfWriter.GetFontData" /> for a particular object instance it will be used instead.
            <b>Important: </b> This event isn't thread safe or guarded by any lock. You should set it once when your application starts
            and never modify it. For changing a particular instance, use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontData" /> instead. If you aren't sure, use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontData" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.GetFontFolder">
            <summary>
            Use this event if you want to provide your own font information for embedding for a particular object instance.
            <br />For changing the font folder for the full application, use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontFolderGlobal" /> instead.
            Normally FlexCel will search for fonts on [System]\Fonts folder. If your fonts are in 
            other location, you can tell FlexCel where they are here. If you prefer just to give FlexCel
            the full data on the font, you can use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontData" /> event instead.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.GetFontFolderGlobal">
            <summary>
            Use this event if you want to provide your own font folder for the full application. 
            Note that if you assign <see cref="P:FlexCel.Pdf.PdfWriter.GetFontFolder" /> for a particular object instance it will be used instead.
            <b>Important: </b> This event isn't thread safe or guarded by any lock. You should set it once when your application starts
            and never modify it. For changing a particular instance, use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontFolder" /> instead. If you aren't sure, use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontFolder" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.GetMatrix">
            <summary>
            Returns the drawing matrix in use. The elements in this matrix are similar to the ones returned by
            "System.Drawing.Drawing2D.Matrix.Elements" and have the same meaning.
            <b>Important remark. This matrix is the real one, and does not consider things like <see cref="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown" /> or <see cref="P:FlexCel.Pdf.PdfWriter.Scale" />.</b>
            You will probably want to use <see cref="M:FlexCel.Pdf.PdfWriter.Transform(FlexCel.Core.TPointF)" /> to find out the coordinates of a point.
            </summary>
            <returns>The internal transformation matrix.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Hyperlink(System.Double,System.Double,System.Double,System.Double,System.String)">
            <param name="x">x coord.</param>
            <param name="y">y coord.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <param name="url">Url where to navigate to.</param>
            <summary>
            Creates an Hyperlink on the selected region with the specified Url.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Hyperlink(System.Double,System.Double,System.Double,System.Double,System.Uri)">
            <param name="x">x coord.</param>
            <param name="y">y coord.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <param name="url">Url where to navigate to.</param>
            <summary>
            Creates an Hyperlink on the selected region with the specified Url.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Hyperlink(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <param name="x">x coord.</param>
            <param name="y">y coord.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <param name="pageDest">Page where the hyperlink will go.</param>
            <param name="xDest">X offset from the start of the page for the destination.</param>
            <param name="yDest">Y offset from the start of the page for the destination.</param>
            <summary>
            Creates a local Hyperlink on the selected region to another page of the pdf document.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.InitialZoomAndPage">
            <summary>
            Sets the default zoom and initial page when opening the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.IntersectClipRegion(FlexCel.Core.TUIRectangle)">
            <param name="Rect" />
            <summary>
            Intersects the current clipping region with the new one. 
            There is no command to reset or expand a clipping region, you need to use
            <see cref="M:FlexCel.Pdf.PdfWriter.SaveState" /> and <see cref="M:FlexCel.Pdf.PdfWriter.RestoreState" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Kerning">
            <summary>
            By default, pdf does not do any kerning with the fonts. This is, on the string "AVANT", it won't
            compensate the spaces between "A" and "V". (they should be smaller) 
            If you turn this property on, FlexCel will calculate the kerning and add it to the generated file.
            The result file will be a little bigger because of the kerning info on all strings, but it will also
            look a little better.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.MeasureString(System.String,FlexCel.Core.TUIFont)">
            <param name="text">String to measure.</param>
            <param name="aFont">Font to measure</param>
            <summary>
            Returns the size of a string in points * Scale. (1/72 of an inch * Scale)
            </summary>
            <returns>Size of the string in points.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.NewPage">
            <summary>
            Closes the active page and creates a new one. All following commands will go to the new page.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.OnFontEmbed">
            <summary>
            Use this event if you want to manually specify which fonts to embed into the pdf document.
            Note that this applies for a single PdfWriterInstance, to set it for the full application, use <see cref="P:FlexCel.Pdf.PdfWriter.OnFontEmbedGlobal" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.OnFontEmbedGlobal">
            <summary>
            Use this event if you want to manually specify which fonts to embed into the pdf document for the full application.
            Note that if you assign <see cref="P:FlexCel.Pdf.PdfWriter.OnFontEmbed" /> for a particular object instance it will be used instead.
            <b>Important: </b> This event isn't thread safe or guarded by any lock. You should set it once when your application starts
            and never modify it. For changing a particular instance, use <see cref="P:FlexCel.Pdf.PdfWriter.OnFontEmbed" /> instead. If you aren't sure, use <see cref="P:FlexCel.Pdf.PdfWriter.OnFontEmbed" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.PageLayout">
            <summary>
            Sets the default page layout when opening the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.PageLayoutDisplay">
            <summary>
            Sets the default page display layout when opening the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.PageSize">
            <summary>
            Page size of the active page. You can change it *before* calling NewPage() and it will change for the new sheets.
            Note that once NewPage() (or BeginDoc() for the first page) is called, the page size will remain constant for that page.
            This property must be changed before.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.PdfType">
            <summary>
            Defines the type of pdf being created. Note that if you set this property to other value than standard,
            other properties might be ignored. For example, when creating a PDF/A file all fonts must be embedded so 
            the value of the FontEmbed property will be ignored.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.PdfVersion">
            <summary>
            Defines the version of pdf being created. For maximum compatibility you can choose PDF 1.4. (Acrobat 5.0, but
            can be opened by any version of Acrobat, even if version less than 1.4 won't have all the features).
            Choosing PDF 1.6 (Acrobat 7) allows for more compression and smaller files, but you'll need Acrobat 7 or newer 
            to see the files. Older versions won't be able to open it at all.
            <br />
            Note that this value will be ignored if you are creating PDFA-1 (as it requires PDF1-4). Also for signing,
            FlexCel requires PDF1-6.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Properties">
            <summary>
            Properties of the PDF file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.RestoreState">
            <summary>
            Restores the graphic state saved by a <see cref="M:FlexCel.Pdf.PdfWriter.SaveState" /> call.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Rotate(System.Double,System.Double,System.Double)">
            <param name="x">Point where the canvas is rotated.</param>
            <param name="y">Point where the canvas is rotated.</param>
            <param name="Alpha">Angle in degrees.</param>
            <summary>
            Rotates the canvas around point (x,y).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.SaveState">
            <summary>
            Saves the current graphic state. Be sure to always call <see cref="M:FlexCel.Pdf.PdfWriter.RestoreState" />
            each time you call this method.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Scale">
            <summary>
            A scale factor to change X and Y coordinates. When Scale=1, the using is the point (1/72 of an inch).
            Font size is not affected by scale, it is always in points.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ScaleBy(System.Double,System.Double)">
            <param name="xScale">X Scale</param>
            <param name="yScale">Y Scale</param>
            <summary>
            Scales the canvas. It premultiplies the matrix, to keep the correct order.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.SetBookmarks(FlexCel.Pdf.TBookmarkList)">
            <param name="bookmarks">List to replace. If null, bookmarks will be cleared.</param>
            <summary>
            Replaces the bookmarks on the file with other list. The new list will be copied,
            so you can change the old list after setting it and it will not affect the file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Sign(FlexCel.Pdf.TPdfSignature)">
            <param name="aSignature">Signature used for signing. Set it to null to stop signing the next documents.</param>
            <summary>
            Signs the pdf documents with the specified <see cref="T:FlexCel.Pdf.TPdfSignature" /> or <see cref="T:FlexCel.Pdf.TPdfVisibleSignature" />.
            <b>Note:</b> This method must be called <b>before</b> calling <see cref="M:FlexCel.Pdf.PdfWriter.BeginDoc(System.IO.Stream)" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.TagActions">
            <summary>
            Implement this interface in order to define the tags.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.TagContentBegin(System.String,System.Int32,System.String)">
            <param name="tag">Name of the tag. It might be "P", "Clip", "Artifact", etc.</param>
            <param name="mcid">Identifier for the tag. MCID must be unique in each page. If negative, no MCID will be written: This can be used in artifacts for example.</param>
            <param name="atts">Attributes other than mcid. If null or empty, no attributes will be written</param>
            <summary>
            Marks the start of a content tag inside a stream. Must be finished with a call to <see cref="M:FlexCel.Pdf.PdfWriter.TagContentEnd" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.TagContentEnd">
            <summary>
            Ends marking content which started with <see cref="M:FlexCel.Pdf.PdfWriter.TagContentBegin(System.String,System.Int32,System.String)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Transform(FlexCel.Core.TPointF)">
            <param name="p">Point you want to map to the user coordinates.</param>
            <summary>
            Transforms the point according to the current transformation Matrix. See <see cref="M:FlexCel.Pdf.PdfWriter.GetMatrix" /> to get the actual matrix.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.UnlicensedFontAction">
            <summary>
            Defines what to do when a font has a license that doesn't allow embedding, and you are trying to embed the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.UnlicensedReplacementFont">
            <summary>
            When trying to embed a font that isn't licensed for embedding, and <see cref="P:FlexCel.Pdf.PdfWriter.UnlicensedFontAction" /> is TUnlicensedFontAction.Replace
            this property specifies the font that will be used to replace it. If null or empty, Arial will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown">
            <summary>
            When true, the y axis origin corresponds to the upper corner of a sheet and bigger Y coordinates will 
            move down on the paper. This is the standard GDI+ behavior.
            When false, the Y origin is at the bottom and it grows up into the page. This is the standard PDF behavior.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TBookmark">
            <summary>
            An entry on the Bookmark list for a PDF file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TBookmark(System.String,FlexCel.Pdf.TPdfDestination,System.Boolean)">
            <param name="aTitle">Title of the bookmark item.</param>
            <param name="aDestination">Page where the bookmark points to.</param>
            <param name="aChildrenCollapsed">If true all children from this bookmark will be collapsed.</param>
            <summary>
            Creates a new TBookmark instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TBookmark(System.String,FlexCel.Pdf.TPdfDestination,System.Boolean,FlexCel.Core.TUIColor,FlexCel.Pdf.TBookmarkStyle)">
            <param name="aTitle">Title of the bookmark item.</param>
            <param name="aDestination">Page where the bookmark points to.</param>
            <param name="aChildrenCollapsed">If true all children from this bookmark will be collapsed.</param>
            <param name="aTextColor">Text color for the bookmark entry.</param>
            <param name="aTextStyle">Text style for the bookmark entry.</param>
            <summary>
            Creates a new TBookmark instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.AddChild(FlexCel.Pdf.TBookmark)">
            <param name="child">Child bookmark to add.</param>
            <summary>
            Adds a new child of this bookmark on the outline.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.AllOpenCount">
            <summary>
            Returns a list of all open children of this bookmark. Mostly for internal use.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.Child(System.Int32)">
            <param name="i">Number of child to get.</param>
            <summary>
            Returns one child of the current bookmark.
            </summary>
            <returns>i-th Child of the bookmark.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.ChildCount">
            <summary>
            Returns the number of children of this bookmark.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.ChildrenCollapsed">
            <summary>
            If true, all children of this bookmark will be collapsed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.Destination">
            <summary>
            Page where the bookmark points to.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.TextColor">
            <summary>
            Text color for the bookmark entry.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.TextStyle">
            <summary>
            Text style for the bookmark entry.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.Title">
            <summary>
            Title of the bookmark item.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TBookmarkList">
            <summary>
            A list of bookmarks.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TBookmarkList">
            <summary>
            Creates a new instance of TBookmarkList.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.Add(FlexCel.Pdf.TBookmark)">
            <param name="bookmark" />
            <summary>
            Adds a new bookmark to the list.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.AllOpenCount">
            <summary>
            Returns the count of all open bookmarks in all levels.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.Clear">
            <summary>
            Removes all items on the list.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmarkList.Count">
            <summary>
            Number of items on the list.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.GetEnumerator">
            <summary>
            An enumerator for this collection.
            </summary>
            <returns>An enumerator for this collection.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TBookmarkList.Item(System.Int32)">
            <param name="index" />
            <summary>
            Returns item at position index on the list.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.RemoveAt(System.Int32)">
            <param name="index">Position where to remove the bookmark.</param>
            <summary>
            Removes item at position index on the list.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.System#Collections#Generic#IEnumerable{FlexCel#Pdf#TBookmark}#GetEnumerator">
            <summary />
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TBookmarkStyle">
            <summary>
            This enum indicates the text style for a bookmark entry.
            You can combine the entries by or'ing them together.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TBookmarkStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TBookmarkStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TBookmarkStyle.None">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TFontEmbed">
            <summary>
            The way fonts will be embedded on the resulting pdf file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TFontEmbed.Embed">
            <summary>
            All fonts will be embedded. The file will be larger than when not embedding fonts, but it will print on any computer. 
            Note that you can control which fonts to embed and which not with the OnFontEmbed event.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontEmbed.None">
            <summary>
            No font will be embedded. The result file will be smaller, but the file might not look fine on a
            computer without the font installed. It is recommended that you embed the fonts.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontEmbed.OnlySymbolFonts">
            <summary>
            This is a compromise between embedding all fonts and not embedding them. It will only embed fonts with symbols, and leave normal fonts
            not embedded.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TFontMapping">
            <summary>
            How fonts will be replaced on the generated PDF file.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TFontMapping.DontReplaceFonts">
            <summary>
            All actual fonts will be used. If you use this option and do not embed fonts, the fonts will look bad on computers
            without them installed. If you embed fonts, files will be larger.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontMapping.ReplaceAllFonts">
            <summary>
            Serif fonts will be mapped to Times, MonoSpace to Courier, Sans-Serif to Helvetica and Symbol fonts to Symbol. Using this option
            you can get the smallest file sizes and 100% portability, but the resulting file will only use those fonts. Use it with care, specially if you use symbol fonts.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontMapping.ReplaceStandardFonts">
            <summary>
            Arial will be replaced with Helvetica, Times new roman with Times and True type Courier with
            PS1 Courier. All other fonts will remain unchanged.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TFontSubset">
            <summary>
            Determines if full fonts will be embedded in the generated pdf files, or only the characters being used.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TFontSubset.DontSubset">
            <summary>
            All characters of the font will be embedded into the file. This setting creates bigger files, but they can be edited after generated.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontSubset.Subset">
            <summary>
            Only characters actually used by the document will be embedded into the file. This will create smaller files than 
            embedding the full font, but it will be difficult to edit the document once it has been created. 
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPageLayout">
            <summary>
            Viewer settings when the document is opened for the first time.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.AttachmentPanel">
            <summary>
            Show the attachments panel.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.FullScreen">
            <summary>
            Open the document in FullScreen mode.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.None">
            <summary>
            Keep the layout as defined by the user.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.OptionalContent">
            <summary>
            Show the optional content group panel.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.Outlines">
            <summary>
            Show the Outlines pane when opening the document.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.Thumbs">
            <summary>
            Show the thumbs pane when opening the document.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPageLayoutDisplay">
            <summary>
            How the pages will display when the document is opened for the first time.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPageLayoutDisplay.None">
            <summary>
            Don't specify any setting: Open the document as defined in the viewer.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayoutDisplay.OneColumnContinuous">
            <summary>
            Display the pages in one continuous column.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayoutDisplay.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayoutDisplay.TwoColumnContinuousLeft">
            <summary>
            Display  the  pages  in  two continuous columns,  with  odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayoutDisplay.TwoColumnContinuousRight">
            <summary>
            Display  the  pages  in  two continuous columns,  with  odd-numbered pages on the right.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayoutDisplay.TwoPageLeft">
            <summary>
            Display the pages two at a time, with odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayoutDisplay.TwoPageRight">
            <summary>
            Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfAllowedChanges">
            <summary>
            Changes allowed in a signed PDF document.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPdfAllowedChanges.FillingForms_PageTemplates_Signing">
            <summary>
            Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAllowedChanges.FillingForms_PageTemplates_Signing_Annotations">
            <summary>
            Permitted are filling in forms, instantiating page templates, and signing, as well as annotation creation, deletion, and modification; other changes invalidate the signature
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAllowedChanges.None">
            <summary>
            No changes to the document are permitted; any change to the document invalidates the signature.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfAttachmentDataProviderDelegate">
            <param name="writer">Object used to write the attachment data into the file.</param>
            <summary>
            Delegate used to attach files to a pdf file.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfAttachmentKind">
            <summary>
            Specifies how the attached file relates to the pdf file. It is required by PDF/A3
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPdfAttachmentKind.Alternative">
            <summary>
            Alternative data.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAttachmentKind.Data">
            <summary>
            Supporting data for the pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAttachmentKind.Source">
            <summary>
            Data is the source for the pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAttachmentKind.Supplement">
            <summary>
            Data that suplements the data in the pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAttachmentKind.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfAttachmentWriter">
            <summary>
            Class used to write the file contents of one attachment into a PDF file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfAttachmentWriter.BytesWritten">
            <summary>
            Returns how many bytes have been written into the stream.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfAttachmentWriter.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfAttachmentWriter.Write(System.Byte[])">
            <param name="data">Data to be written.</param>
            <summary>
            Writes a byte array into the file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfAttachmentWriter.Write(System.IO.Stream)">
            <param name="data">Stream with the data that will be written. Make sure it is at the correct position.</param>
            <summary>
            Writes an stream into the file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfAttachmentWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <param name="data">Data to be written.</param>
            <param name="offset">Offset in Data of the first byte to be written.</param>
            <param name="count">Numbers of bytes to be written.</param>
            <summary>
            Writes part of a byte array into the file.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfCommentIcon">
            <summary>
            Icon for a pdf comment
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Comment">
            <summary>A callout icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Help">
            <summary>A ? inside a circle icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Insert">
            <summary>A triangle icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Key">
            <summary>A key icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.NewParagraph">
            <summary>A small triangle icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Note">
            <summary>A sheet of paper icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Paragraph">
            <summary>A "Pi" icon.</summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfCommentProperties">
            <summary>
            Properties for a PDF comment.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfCommentProperties(FlexCel.Pdf.TPdfCommentProperties)">
            <param name="aProps" />
            <summary>
            Creates a new TPdfCommentProperties instance based on the data form another instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfCommentProperties(FlexCel.Pdf.TPdfCommentType,FlexCel.Pdf.TPdfCommentIcon,System.Double,FlexCel.Core.TUIColor,FlexCel.Core.TUIColor)">
            <param name="aCommentType" />
            <param name="aIcon" />
            <param name="aOpacity" />
            <param name="aBackgroundColor" />
            <param name="aLineColor" />
            <summary>
            Creates a new instance of a comment object.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.BackgroundColor">
            <summary>
            Background color for the comment. Only visible if <see cref="P:FlexCel.Pdf.TPdfCommentProperties.CommentType" /> is NOT Text
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.CommentType">
            <summary>
            Type of comment.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.Icon">
            <summary>
            Icon for the comment. Only visible if <see cref="P:FlexCel.Pdf.TPdfCommentProperties.CommentType" /> is Text
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.LineColor">
            <summary>
            Line color for the comment. Only visible if <see cref="P:FlexCel.Pdf.TPdfCommentProperties.CommentType" /> is NOT Text
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.Opacity">
            <summary>
            A value between 0 and 1 specifying the opacity of the note.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfCommentType">
            <summary>
            Different types of comments.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentType.Circle">
            <summary>
            A Circle or ellipsis including the comment.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentType.Square">
            <summary>
            A rectangle including the comment.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentType.Text">
            <summary>
            An icon that will show the comment.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfDestination">
            <summary>
            Represents a destination inside a PDF document.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfDestination(System.Int32)">
            <param name="aPageNumber">Page where the destination points to. (1 based)</param>
            <summary>
            Creates a new TPdfDestination instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfDestination(System.Int32,FlexCel.Pdf.TZoomOptions)">
            <param name="aPageNumber">Page where the destination points to. (1 based)</param>
            <param name="aZoomOptions">Zoom options for this destination.</param>
            <summary>
            Creates a new TPdfDestination instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfDestination(System.Int32,System.Double,System.Double,System.Double)">
            <param name="aPageNumber">Page where the destination points to. (1 based)</param>
            <param name="aX">X offset in points from the left.</param>
            <param name="aY">Y offset in points from the top.</param>
            <param name="aZoom">Zoom to display in the destination.</param>
            <summary>
            Creates a new TPdfDestination instance with ZoomOptions = Zoom and the needed parameters.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfDestination.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfDestination.PageNumber">
            <summary>
            Page where the destination will point to. (1 based)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfDestination.X">
            <summary>
            X offset of the page in points from the left. A negative number means keep the default.
            This value is only used if ZoomOptions is Zoom.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfDestination.Y">
            <summary>
            Y offset of the page in points from the top. A negative number means keep the default.
            This value is only used if ZoomOptions is Zoom.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfDestination.Zoom">
            <summary>
            Zoom to show at the destination. A negative or 0 number means keep the default.
            This value is only used if ZoomOptions is Zoom.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfDestination.ZoomOptions">
            <summary>
            Zoom options for this destination.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfPng">
            <summary>
            A class for reading a PNG image. Mostly for internal use, but it can
            return some very basic information on a PNG file too.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfPng.GetPngInfo(System.IO.Stream)">
            <param name="PngImageData">Stream with the image data.</param>
            <summary>
            Returns the basic information on a png file. Null if the file is not PNG.
            </summary>
            <returns>Null if the image is invalid, or the image properties otherwise.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfProperties">
            <summary>
            Encapsulates the document properties for the PDF file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfProperties">
            <summary>
            Creates a new instance of the class. All properties are set to null.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfProperties(System.String,System.String,System.String,System.String,System.String)">
            <param name="aTitle">Document title.</param>
            <param name="aAuthor">Document author.</param>
            <param name="aSubject">Document subject.</param>
            <param name="aKeywords">Keywords to search on the document.</param>
            <param name="aCreator">Application that created the document.</param>
            <summary>
            Creates a new instance of the class with given properties.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfProperties(System.String,System.String,System.String,System.String,System.String,System.String)">
            <param name="aTitle">Document title.</param>
            <param name="aAuthor">Document author.</param>
            <param name="aSubject">Document subject.</param>
            <param name="aKeywords">Keywords to search on the document.</param>
            <param name="aCreator">Application that created the document.</param>
            <param name="aLanguage">Language identifier specifying the natural language for the document. This should be a standard specifier like "en-US".
            <br />Note that the language will be used by text-to-speech engines to read text out loud, so it is recommended to set this property.</param>
            <summary>
            Creates a new instance of the class with given properties.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Author">
            <summary>
            Document author.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Creator">
            <summary>
            Application that created the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Keywords">
            <summary>
            Keywords to search on the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Language">
            <summary>
            Language identifier specifying the natural language for the document. This should be a standard specifier like "en-US".
            <br />Note that the language will be used by text-to-speech engines to read text out loud, so it is recommended to set this property.
            <br />You can see a list of languages here: http://msdn.microsoft.com/en-us/library/ee825488(v=cs.20).aspx
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Subject">
            <summary>
            Document subject.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Title">
            <summary>
            Document title.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfSignature">
            <summary>
            Describes a non visible signature for a PDF file. For a visible signature, use <see cref="T:FlexCel.Pdf.TPdfVisibleSignature" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfSignature(FlexCel.Pdf.TPdfSignerFactory,System.String,System.String,System.String,System.String)">
            <param name="aSignerFactory">See <see cref="P:FlexCel.Pdf.TPdfSignature.SignerFactory" /></param>
            <param name="aName">See <see cref="P:FlexCel.Pdf.TPdfSignature.Name" /></param>
            <param name="aReason">See <see cref="P:FlexCel.Pdf.TPdfSignature.Reason" /></param>
            <param name="aLocation">See <see cref="P:FlexCel.Pdf.TPdfSignature.Location" /></param>
            <param name="aContactInfo">See <see cref="P:FlexCel.Pdf.TPdfSignature.ContactInfo" /></param>
            <summary>
            Creates an invisible signature. For a visible signature, create a <see cref="T:FlexCel.Pdf.TPdfVisibleSignature" /> class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.AllowedChanges">
            <summary>
            Specifies which changes are allowed in the signed pdf.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.ContactInfo">
            <summary>
            Information provided by the signer to enable a recipient to contact the signer to verify the signature; for example, a phone number.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.Location">
            <summary>
            The CPU host name or physical location of the signing. Leave it null for not specifying a location.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.Name">
            <summary>
            Name to be given to the signature. This will be displayed in the "signatures" tab, and acrobat normally names it "Signature".
            It cannot be null.
            <b>Note:</b> Signature names cannot contain dots. An exception will be thrown if you try to enter a name with a dot here.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.Reason">
            <summary>
            The reason for the signing, such as "I agree...". Leave it null if you do not want to specify a reason.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.SignDate">
            <summary>
            Sign Date. Use DateTime.MinValue to use the current date.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.SignerFactory">
            <summary>
            Object that implements the actual signing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfSigner">
            <summary>
            Represents an abstract class to create a pdf PKCS7 DER encoded signature.
            Descend from this class to create your own SignerFactory implementations.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfSigner">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Pdf.TPdfSigner</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Dispose(System.Boolean)">
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.EstimateLength">
            <summary>
            Returns the estimated length for the data that will be returned in <see cref="M:FlexCel.Pdf.TPdfSigner.GetSignature" />. 
            Note that this method will be called <b>before</b> finishing the pdf, so you still don't know what the final signature will be.
            You can return a number larger than what <see cref="M:FlexCel.Pdf.TPdfSigner.GetSignature" /> will return at the end of the pdf creation, but <b>never smaller</b>.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Finalize">
            <summary>
            Finalizer for the class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.GetSignature">
            <summary>
            This method is called only once at the end of the pdf creation. It should release all handles and temporary memory used to calculate 
            the data hash, and return a PKCS7 DER-encoded signature.
            </summary>
            <returns>a PKCS7 DER-encoded signature.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Write(System.Byte[],System.Int32,System.Int32)">
            <param name="buffer">Data written to the pdf.</param>
            <param name="offset">Offset in buffer where to start writing data.</param>
            <param name="count">Number of bytes from buffer that will be written.</param>
            <summary>
            This method is called each time new data is added to the pdf. When overwriting this method, use it to incrementally calculate the hash of the data.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfSignerFactory">
            <summary>
            Override this factory when creating your own <see cref="T:FlexCel.Pdf.TPdfSigner" /> class, so it is returned here.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfSignerFactory">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Pdf.TPdfSignerFactory</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Pdf.TPdfSignerFactory.CreateSigner">
            <summary>
            This method should return an instance of your customized <see cref="T:FlexCel.Pdf.TPdfSigner" /> class.
            </summary>
            <returns>A new TPdfSigner instance. Do not reuse instances, always return a new instance here since it will be disposed.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPdfToken">
            <summary>
            Tokens for creating a PDF file. Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AcroFormName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.adbe_pkcs7_detachedName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Adobe_PPKLiteName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AFName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AFRelationshipName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AlphaName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AlternativeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AltName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AnnotName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AnnotsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.APName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AssetId">
            <summary>'@': Used by android assets.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AuthorName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BaseFontName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BBoxName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.beginbfchar">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.beginbfrange">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BitsPerComponentName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BitsPerSampleName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Bold">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BoldItalic">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Border0">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BorderName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BoundsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BSName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ByteRangeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.C0Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.C1Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CallObj">
            <summary>
            A call to an indirect object.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CAName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CapHeightName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CatalogName">
            <summary>
            Catalog
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CIDFontType2Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CIDSetName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CIDSystemInfo">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CIDToGIDMap">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CloseArray">
            <summary>
            ]
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CloseString">
            <summary>
            )
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ColorsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ColorSpaceName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ColumnsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandBDC">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandBeginText">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandBezier">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandClipPath">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandClipPathEvenOddRule">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandClosePath">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Commandcs">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandDo">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandEMC">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandEndText">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandFillAndStroke">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandFillPath">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandFont">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Commandgs">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandLineTo">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandLineToAndStroke">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandLineWidth">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandMove">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandRectangle">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Commandscn">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetAlphaBrush">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetAlphaPen">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetBrushColor">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetLineStyle">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetPenColor">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandStroke">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextKerningWrite">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextMove">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextRendering">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextWrite">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ContactInfoName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ContentsName">
            <summary>
            /Contents
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CoordsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CountName">
            <summary>
            /Count
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CreationDateName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CreatorName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DataName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DCTDecodeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DecodeParmsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DescendantFontsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DescName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DestName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DestOutputProfileName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DeviceGrayName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DeviceRGBName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DigestLocationName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DigestMethodName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DigestValueName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DocMDPName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DomainName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DWName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EFName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EmbeddedFileName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EmbeddedFilesName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EncodeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EncodingName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.endbfchar">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.endbfrange">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EndDictionary">
            <summary>
            &gt;&gt;
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EndObj">
            <summary>
            End of an indirect object.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EndStream">
            <summary>
            endstream
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Eof">
            <summary>
            Last line of the file.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EscapeString">
            <summary>
            \
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ExtendName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ExtGStateName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FalseText">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FamilyBold">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FamilyItalic">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FamilyOblique">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FfName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FieldMDPName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FieldsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FilespecName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FilterName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FirstCharName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FirstName">
            <summary>
            /First
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FitHName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FitName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FitVName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FlagsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FlateDecodeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontAscentName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontBBoxName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontDescentName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontDescriptorName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontFile2Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontFolder">
            <summary>
            Windows font folder.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontNameName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontPrefix">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FormName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FormTypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FRMName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FTName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FullScreenName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FunctionName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FunctionsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FunctionTypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GradientPrefix">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GroupName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GStatePrefix">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GTS_PDFA1Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.HatchPrefix">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Header14">
            <summary>
            Pdf header for acrobat 5.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Header16">
            <summary>
            Pdf header for acrobat 7.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.HeaderComment">
            <summary>
            Comment with more than 4 bytes&gt;128.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.HeightName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ICName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.IdentityHName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.IDName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageBName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageCName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageIName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageMaskName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImgPrefix">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.IndexedName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.InfoName">
            <summary>
            Info Keyword.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Italic">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ItalicAngleName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.KeywordsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.KidsName">
            <summary>
            /Kids
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.KName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LangName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LastCharName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LastName">
            <summary>
            /Last
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Length1Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LengthName">
            <summary>
            /length
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LimitsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LinkData">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LinkName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LinuxFontFolder">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LocationName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MarkedName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MarkInfoName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MaskName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MatrixName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MatteName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MCIDName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MD5Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MediaBoxName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MetadataName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ModDateName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.n0Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.n2Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NameName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NamesName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NextName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.None">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NullText">
            <summary>
            null
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NumsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Obj">
            <summary>
            Indirect object
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ObjStmName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OneColumnName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OpenActionName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OpenArray">
            <summary>
            [
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OpenString">
            <summary>
            (
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OutlinesName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OutputConditionIdentifierName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OutputIntentName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OutputIntentsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PageLayoutName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PageModeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PageName">
            <summary>
            Page
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PagesName">
            <summary>
            Pages
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PaintTypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ParamsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ParentName">
            <summary>
            /Parent
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ParentTreeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ParentTreeNextKeyName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternColorSpacePrefix">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternPrefix">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternTypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PDFName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PermsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PgName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PredictorName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PrevName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ProcSetName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Producer">
            <summary>
            Producer of the document.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ProducerName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsBold">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsBoldItalic">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsBoldOblique">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsCourier">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsHelvetica">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsItalic">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsOblique">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsRoman">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsSymbol">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsTimes">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RangeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ReasonName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RectName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ReferenceName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RegistryNameName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ResourcesName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RoleMapName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RootName">
            <summary>
            Root keyword.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ShadingName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ShadingTypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SigFlagsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SigName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SigRefName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SinglePageName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SizeName">
            <summary>
            Size keyword.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SMaskName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SourceName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.sRGBId">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StArial">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StartDictionary">
            <summary>
            &lt;&lt;
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StartXRef">
            <summary>
            XRef subsection inside trailer.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StCourier">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StCourierNew">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StemVName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StFixedFonts">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StHelvetica">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StMicrosoftSansSerif">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StMicrosoftSerif">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Stream">
            <summary>
            stream
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StructElemName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StructParentsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StructTreeRootName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StSerifFonts">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StSymbolFonts">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StTimes">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StTimesNewRoman">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SubFilterName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SubjectName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SubtypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SupplementName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TextName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TilingTypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TitleName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ToUnicodeData">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ToUnicodeData2">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ToUnicodeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Trailer">
            <summary>
            Begin of a trailer section.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TransformMethodName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TransformParamsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TransparencyName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TrueText">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TrueTypeName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TTCExtension">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TTFExtension">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TwoColumnLeftName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TwoColumnRightName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TwoPageLeftName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TwoPageRightName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Type0Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Type1Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TypeName">
            <summary>
            /Type
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UFName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UnspecifiedName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UpDir">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UseAttachmentsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UseOCName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UseOutlinesName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UseThumbsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.V1_2Name">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.VName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WidgetName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WidthName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WidthsName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WinAnsiEncodingName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XMLName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XObjectName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XRef">
            <summary>
            XRef section.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XRefName">
            <summary>
            /XRef
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XStepName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XYZName">
            <summary />
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.YStepName">
            <summary />
        </member>
        <member name="T:FlexCel.Pdf.TPdfType">
            <summary>
            The variant of pdf that will be created.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPdfType.PDFA1">
            <summary>
            PDF/A-1a or b  (http://en.wikipedia.org/?title=PDF/A)
            Note that PDF/A-1 generates larger files than PDF/A-2, and also doesn't support transparency.
            But PDF/A-1 is a more commonly used standard at the time of writing this documentation.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfType.PDFA2">
            <summary>
            PDF/A-2a or b. FlexCel will create smaller files in PDF/A-2 mode than in PDF/A-1 mode, so if possible
            you should try to use PDF/A-2 instead of A1. A2 also supports transparency. In FlexCel case, FlexCel can
            also sign PDF/A-2 files, but no PDF/A-1.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfType.PDFA3">
            <summary>
            PDF/A-3. Note that the only difference with PDF/A2 is the ability to embed other files inside the PDF file.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfType.Standard">
            <summary>
            A normal pdf file.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfVersion">
            <summary>
            Specifies the version of PDF that FlexCel will generate.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TPdfVersion.v14">
            <summary>
            The files will be in Pdf 1.4 format (Acrobat 5). Older Acrobat versions will still able to open the file,
            but might miss features like transparency.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfVersion.v16">
            <summary>
            The files will be in Pdf 1.6 format (Acrobat 7). This allows for smaller files, but older Acrobat versions
            won't be able to open the file at all. You'll need Acrobat 7 or newer to see them.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfVisibleSignature">
            <summary>
            Describes a visible signature in a PDF file. For an invisible signature, see <see cref="T:FlexCel.Pdf.TPdfSignature" />.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPdfVisibleSignature(FlexCel.Pdf.TPdfSignerFactory,System.String,System.String,System.String,System.String,System.Int32,FlexCel.Core.TUIRectangle,System.Byte[])">
            <param name="aSignerFactory">See <see cref="P:FlexCel.Pdf.TPdfSignature.SignerFactory" /></param>
            <param name="aName">See <see cref="P:FlexCel.Pdf.TPdfSignature.Name" /></param>
            <param name="aReason">See <see cref="P:FlexCel.Pdf.TPdfSignature.Reason" /></param>
            <param name="aLocation">See <see cref="P:FlexCel.Pdf.TPdfSignature.Location" /></param>
            <param name="aContactInfo">See <see cref="P:FlexCel.Pdf.TPdfSignature.ContactInfo" /></param>
            <param name="aPage">See <see cref="P:FlexCel.Pdf.TPdfVisibleSignature.Page" /></param>
            <param name="aRect">See <see cref="P:FlexCel.Pdf.TPdfVisibleSignature.Rect" /></param>
            <param name="aImageData">See <see cref="P:FlexCel.Pdf.TPdfVisibleSignature.ImageData" /></param>
            <summary>
            Creates a new visible signature for a PDF file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfVisibleSignature.ImageData">
            <summary>
            The image that will be shown in the signature as an array of bytes.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfVisibleSignature.Page">
            <summary>
            Page where the signature will go. (1 based). Use 0 to place the signature at the last page.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPdfVisibleSignature.Rect">
            <summary>
            Rectangle where the signature will go in the page. It is measured in points (1/72 of an inch) from the left lower corner of the page.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TPngInformation">
            <summary>
            Basic information about a PNG file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Pdf.TPngInformation">
            <summary>
            Creates a new TPngInformation class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.BitDepth">
            <summary>
            Bith depth of the image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.ColorType">
            <summary>
            Png ColorType (See png reference for more information)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.CompressionMethod">
            <summary>
            Png Compression method (See png reference for more information)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.Height">
            <summary>
            Height of the image on pixels.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.HorizontalResolution">
            <summary>
            Horizontal resolution of the image in dpi. If the image doesn't have resolution information, this value will be 0.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.VerticalResolution">
            <summary>
            Vertical resolution of the image in dpi. If the image doesn't have resolution information, this value will be 0.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.Width">
            <summary>
            Width of the image on pixels.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Pdf.TTagMode">
            <summary>
            Specifies how the document will be tagged.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TTagMode.Full">
            <summary>
            Document will be tagged with all tags.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TTagMode.None">
            <summary>
            Document will not be tagged.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TUnlicensedFontAction">
            <summary>
            Determines what to do when trying to embed a font that isn't licensed for embedding.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TUnlicensedFontAction.Error">
            <summary>
            If the font doesn't have a valid license, FlexCel will throw an exception and won't complete the exporting.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TUnlicensedFontAction.Ignore">
            <summary>
            FlexCel won't look at the licensing of the font, and embed it anyway. Note that to use this option, you need to have a
            copyright agreement to distribute the font with its owner. Also note that in PDF/A mode this option is similar to Error and
            an Exception will be thrown. This is because PDF/A doesn't allow to embed fonts which don't have the correct license,
            and the document wouldn't validate.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TUnlicensedFontAction.Replace">
            <summary>
            If the font doesn't have a valid license, FlexCel will replace it by the font specified in the UnlicensedFontReplacement property. 
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TZoomOptions">
            <summary>
            Zoom options for a PDF destination.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.Fit">
            <summary>
            Display the page with its contents magnified just enough
            to fit the entire page within the window both horizontally and vertically. If
            the required horizontal and vertical magnification factors are different, use
            the smaller of the two, centering the page within the window in the other
            dimension.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.FitH">
            <summary>
            Display the page with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified
            just enough to fit the entire width of the page within the window.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.FitV">
            <summary>
            Display the page with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified
            just enough to fit the entire height of the page within the window.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.None">
            <summary>
            None, leave the zoom unchanged.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.Zoom">
            <summary>
            Display  the  page  with  the  coordinates  (left, top)  posi-
            tioned at the upper-left corner of the window and the contents of the page
            magnified by the factor zoom. A negative value for any of the parameters left, top,
            or zoom specifies that the current value of that parameter is to be retained un-
            changed. A zoom value of 0 has the same meaning as a negative value.
            </summary>
        </member>
        <member name="T:FlexCel.Render.FlexCelHtmlExport">
            <summary>
            A component for exporting an Excel file to HTML.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelHtmlExport">
            <summary>
            Creates a new FlexCelHtmlExport instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelHtmlExport(FlexCel.Core.ExcelFile)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <summary>
            Creates a new FlexCelHtmlExport and assigns it to an ExcelFile.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelHtmlExport(FlexCel.Core.ExcelFile,System.Boolean)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <param name="aAllowOverwritingFiles">When true, existing files will be overwritten.</param>
            <summary>
            Creates a new FlexCelHtmlExport and assigns it to an ExcelFile, setting AllowOverwritingFiles to the desired value.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing HTML and image files or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.AntiAliased">
            <summary>
            This affects how the text is rendered for example when exporting a chart. Some modes will look a little blurred but with better quality.
            Consult the .NET framework documentation on SmoothingMode for more information
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.BackgroundColor">
            <summary>
            Background color for empty cells. This is White by default, but you migth want to make it TUIColor.Empty
            if you want the cells to not cover the background.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.BaseUrl">
            <summary>
            If this property is not null, all hyperlinks stating with this value will be converted to relative links, by removing this string form them.
            <br />Hyperlinks in Excel must be absolute by default, so this property is a way to get relative hyperlinks.
            <br />For example, if BaseUrl is "http://www.tmssoftware.com/" and an Excel file has a link "http://www.tmssoftware.com/test.html"
            the link in the generated HTML file will be "test.html"
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Cancel">
            <summary>
            Cancels a running export. This method is equivalent to setting <see cref="P:FlexCel.Render.FlexCelHtmlExport.Canceled" /> = true.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.Canceled">
            <summary>
            If true the export has been canceled with <see cref="M:FlexCel.Render.FlexCelHtmlExport.Cancel" /> method.
            You can't set this variable to false, and setting it true is the same as calling <see cref="M:FlexCel.Render.FlexCelHtmlExport.Cancel" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ClassPrefix">
            <summary>
            Prefix to be appended to all CSS classes. For example, if you set it to "test", CSS classes will be
            named like ".test1234". Normally you do not need to change this property, but if you need to insert multiple
            Excel files in the same HTML page, you need to ensure all classes have an unique ClassPrefix.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.DoHtmlFont(FlexCel.Core.HtmlFontEventArgs)">
            <param name="e" />
            <summary>
            This method is for internal use.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.EmbedImages">
            <summary>
            If true, images will be embedded in the HTML file using base64 encoded data uris as defined in http://tools.ietf.org/html/rfc2397 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.String,System.String)">
            <param name="htmlFileName">File name of the html file to be created.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the main file. 
            If for example htmlFileName is "c:\reports\html\index.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <summary>
            Exports the active sheet of the the associated xls workbook to a file. CSS will be saved internally in the file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.IO.TextWriter,System.String,FlexCel.Render.TCssInformation)">
            <param name="html">TextWriter where the result will be written.</param>
            <param name="fileName">FileName used to generate the supporting files. If you leave it null, no images will be saved as there will not be filename for them.</param>
            <param name="css">Use this parameter to store all CSS information in an external file. Set it to null
            if you want to store the CSS inside the HTML file. If you want to share the CSS between multiple files, make sure
            you pass the same css parameter to all Export calls.</param>
            <summary>
            Exports the active sheet of the associated xls workbook to a TextWriter. Note that you need to supply the stream for saving the images 
            in the <see cref="E:FlexCel.Render.FlexCelHtmlExport.GetImageInformation" /> event (if you want to save the images).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.String,System.String,FlexCel.Render.TCssInformation)">
            <param name="htmlFileName">File name of the html file to be created.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the main file. 
            If for example htmlFileName is "c:\reports\html\index.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="css">Use this parameter to store all CSS information in an external file. Set it to null
            if you want to store the CSS inside the HTML file. If you want to share the CSS between multiple files, make sure
            you pass the same css parameter to all Export calls.</param>
            <summary>
            Exports the active sheet of the the associated xls workbook to a file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.String,System.String,System.String)">
            <param name="htmlFileName">File name of the html file to be created.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the main file. 
            If for example htmlFileName is "c:\reports\html\index.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlPath. 
            If you set it to null, no css file created and the css will be stored inside each HTML file.
            If for example htmlpath is "c:\reports" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <summary>
            Exports the active sheet of the the associated xls workbook to a file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportAllVisibleSheetsAsOneHtmlFile(System.String,System.String,System.String,System.String)">
            <param name="htmlFileName">Path where the generated html file will be stored.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the path in htmlFileName. 
            If for example htmlFileName is "c:\reports\html\test.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlFileName Path.
            if you set it to null, no css file created and the css will be stored inside each HTML file. 
            If for example htmlFileName is "c:\reports\test.htm" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <param name="sheetSeparator">An HTML string to write between all the different sheets being exported. You can use for example &lt;hr /&gt; here
            to add an horizontal line. You can also use the special macros &lt;#SheetName&gt;, &lt;#SheetCount&gt;, &lt;#SheetPos&gt; &lt;#PrevSheetName&gt; and &lt;#PrevSheetPos&gt; here to enter the current sheet name, 
            the number of sheets and the current sheet respectively. The macros are case insensitive, you can enter them in any combination of upper and lower case.</param>
            <summary>
            Exports all visible sheets in an xls file one after the other in the same html file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportAllVisibleSheetsAsOneHtmlFile(System.IO.TextWriter,System.String,System.String,System.String,System.String)">
            <param name="html">Stream where the HTML file will be saved.</param>
            <param name="htmlFileName">The filename itself won't be used (since the html file is saved to a stream), but it will tell the path where the generated extra files (for example images) will be stored, and also the way images are named.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the path in htmlFileName. 
            If for example htmlFileName is "c:\reports\html\test.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlFileName Path.
            if you set it to null, no css file created and the css will be stored inside each HTML file. 
            If for example htmlFileName is "c:\reports\test.htm" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <param name="sheetSeparator">An HTML string to write between all the different sheets being exported. You can use for example &lt;hr /&gt;&lt;p&gt;Sheet &lt;#SheetName&gt;&lt;/p&gt; here
            to add an horizontal line. You can also use the special macros &lt;#SheetName&gt;, &lt;#SheetCount&gt; and &lt;#SheetPos&gt; here to enter the current sheet name, 
            the number of sheets and the current sheet respectively. The macros are case insensitive, you can enter them in any combination of upper and lower case.</param>
            <summary>
            Exports all visible sheets in an xls file one after the other in the same html stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportAllVisibleSheetsAsTabs(System.String,System.String,System.String,System.String,System.String,FlexCel.Render.TSheetSelector)">
            <param name="htmlPath">Path where html files will be stored. (one per sheet in the workbook)</param>
            <param name="htmlFileNamePrefix">This is a string that will be added to every file generated, at the beggining of the filename.
            For example, if htlmFileNamePrefix = "test_" and htmlFileNamePostfix = ".html", "sheet1" will be exported as "test_sheet1.html".
            If generating a single file (MHTML format), htmlFileNamePrefix + htmlFileNamePostFix will be used, without a sheet name.<br /> Note
            that you can change the sheetname to some other string in the OnSheetName event, so the final name will be htmlFileNamePrefix +
            "string returned in OnSheetName" + htmlFileNamePostfix.</param>
            <param name="htmlFileNamePostfix">This is a string that will be added to every file generated, at the end of the filename. Make sure you include the extension here.
            For example, if htlmFileNamePrefix = "test_" and htmlFileNamePostfix = ".html", "sheet1" will be exported as "test_sheet1.html"
            If generating a single file (MHTML format), htmlFileNamePrefix + htmlFileNamePostFix will be used, without a sheet name.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the htmlPath. 
            If for example htmlPath is "c:\reports\html" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html files.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlPath. Note that the css will be shared among all sheets, so only one file will be created.
            if you set it to null, no css file created and the css will be stored inside each HTML file. It is recommended that you provide an extenal name here,
            so the CSS is shared webpages are smaller. If for example htmlpath is "c:\reports" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <param name="sheetSelector">Information about how to draw the tabs that will allow you to switch between the sheets.
            Set it to null if you do not want to include a sheet selector.</param>
            <summary>
            This method will export all the visible sheets on an xls file to an html file, writing each sheet in a different file.
            This is equivalent to calling Export on every sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportAllVisibleSheetsAsTabs(System.String,System.String,System.String,System.String,System.String,FlexCel.Render.TSheetSelector,FlexCel.Core.OnSheetNameEventHandler)">
            <param name="htmlPath">Path where html files will be stored. (one per sheet in the workbook)</param>
            <param name="htmlFileNamePrefix">This is a string that will be added to every file generated, at the beggining of the filename.
            For example, if htlmFileNamePrefix = "test_" and htmlFileNamePostfix = ".html", "sheet1" will be exported as "test_sheet1.html".
            If generating a single file (MHTML format), htmlFileNamePrefix + htmlFileNamePostFix will be used, without a sheet name.<br /> Note
            that you can change the sheetname to some other string in the OnSheetName event, so the final name will be htmlFileNamePrefix +
            "string returned in OnSheetName" + htmlFileNamePostfix.</param>
            <param name="htmlFileNamePostfix">This is a string that will be added to every file generated, at the end of the filename. Make sure you include the extension here.
            For example, if htlmFileNamePrefix = "test_" and htmlFileNamePostfix = ".html", "sheet1" will be exported as "test_sheet1.html"
            If generating a single file (MHTML format), htmlFileNamePrefix + htmlFileNamePostFix will be used, without a sheet name.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the htmlPath. 
            If for example htmlPath is "c:\reports\html" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html files.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlPath. Note that the css will be shared among all sheets, so only one file will be created.
            if you set it to null, no css file created and the css will be stored inside each HTML file. It is recommended that you provide an extenal name here,
            so the CSS is shared webpages are smaller. If for example htmlpath is "c:\reports" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <param name="sheetSelector">Information about how to draw the tabs that will allow you to switch between the sheets.
            Set it to null if you do not want to include a sheet selector.</param>
            <param name="OnSheetName">Use this event to customize the filename for the created files, and use something different than the sheet name.</param>
            <summary>
            This method will export all the visible sheets on an xls file to an html file, writing each sheet in a different file.
            This is equivalent to calling Export on every sheet.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ExportNamedRanges">
            <summary>
            When true FlexCel will insert a span in the first cell of every named range with "id" = the name of the range.
            You can access then this with javascript.<br /> For a fine grain control of how names are exported, you can use <see cref="E:FlexCel.Render.FlexCelHtmlExport.NamedRangeExport" /> event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportToClipboardFormat(System.IO.Stream)">
            <param name="resultStream">Stream where the html will be exported.</param>
            <summary>
            Exports the file in the format expacted by the CT_HTML clipboard format:
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms649015(v=vs.85).aspx
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ExtraInfo">
            <summary>
            Extra information to be added to the HTML file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.FixIE6TransparentPngSupport">
            <summary>
            By default, Internet explorer does not support transparent PNGs. Normally this is not an issue, since Excel does not use 
            much transparency. But if you rely on transparent images and don't want to use gif images instead of png, you can set this
            property to true. It will add special code to the HTML file to support transparent images in IE6.<br /><b>Note:</b> If setting this property to false, you might want to set <see cref="P:FlexCel.Render.FlexCelHtmlExport.ImageBackground" /> to Color.White instead
            of TUIColor.Empty to ensure images have no transparent background.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.FixIE6WordWrapSupport">
            <summary>
            Some older browsers (and Word 2007) might not support the CSS white-space tag. In this case, if a line longer than a cell cannot be expanded to the right
            (because there is data in the next cell) it will wrap down instead of being cropped. This fix will cut the text on this cell to the displayable
            characters. If a letter was displayed by the half on the right, after applying this fix it will not display.
            This fix is automatically applied when <see cref="P:FlexCel.Render.FlexCelHtmlExport.FixOutlook2007CssSupport" /> is selected, so there is normally no reason to apply it. You might get 
            a smaller file with this fix (if you have a lots of hidden text), but the display will not be as accurate as when it is off, so it is reccomended to keep it off.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.FixOutlook2007CssSupport">
            <summary>
            Outlook 2007 renders HTML worse than previous versions, since it switched to the Word 2007 rendering engine instead of
            Internet Explorer to show HTML emails. If you apply this fix, some code will be added to the generated HTML file to improve
            the display in Outlook 2007. Other browsers will not be affected and will still render the original file. Turn this option on if
            you plan to email the generated file as an HTML email or to edit them in Word 2007. Note that the pages will not validate with the
            w3c validator if this option is on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.GeneratedFiles">
            <summary>
            Contains all the generated files by the component. Note that it might contain files not actually generated, if an error happened while trying to create them.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelHtmlExport.GetImageInformation">
            <summary>
            Use this event to customize where to save the images when exporting to HTML.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HasSaveImageEvent">
            <summary>
            Override this property when creating your own <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnSaveImage(FlexCel.Render.SaveImageEventArgs)" /> descendant. This method should return true
            if there is any event attached to it.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HeadingStyle">
            <summary>
            Style definition for the gutter cells when printing row numbers or column names. This text must be 
            a valid CSS style definition, without including the braces ("{}").
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HeadingWidth">
            <summary>
            Width in points of the left gutter when printing row numbers and column names.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HidePrintObjects">
            <summary>
            Select which kind of objects should not be exported to html. By default we do *not* export headers and footers, since they are normally not what you want when exporting to HTML.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HtmlFileFormat">
            <summary>
            Format of the HTML file to be generated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelHtmlExport.HtmlFont">
            <summary>
            Use this event to customize the fonts used in the exported file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HtmlVersion">
            <summary>
            Version of the HTML generated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.IgnoreSharingViolations">
            <summary>
            When this property is true and the component tries to write any file that is locked by other thread, it will not raise
            an error and just assume the other thread will write the correct image. You will normally want to have this true, so you can have many threads
            writing to the same file without issues. Note that when <see cref="P:FlexCel.Render.FlexCelHtmlExport.AllowOverwritingFiles" /> is false, this property has no effect.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ImageBackground">
            <summary>
            When this property is set to TUIColor.Empty (the default), images will be rendered with a transparent background. 
            While this is the normal behavior, sometimes you might not want transparent images (for example to support Internet Explorer 6
            without setting <see cref="P:FlexCel.Render.FlexCelHtmlExport.FixIE6TransparentPngSupport" /> to true), and then you could use Color.White here.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ImageNaming">
            <summary>
            This property defines how the images will be named by FlexCel. You can always override the name using the <see cref="E:FlexCel.Render.FlexCelHtmlExport.GetImageInformation" /> event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ImageResolution">
            <summary>
            Resolution for the exported images. The bigger the resolution, the bigger the image size and quality. Use 96 for standard screen resolution.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.InterpolationMode">
            <summary>
            This affects how the images, charts, etc are rendered for the image file. Some modes will look a little blurred but with better quality.
            Consult the .NET framework documentation on SmoothingMode for more information
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.LinksInNewWindow">
            <summary>
            If true, the links will be exported with a target=_blank attribute so they open in a new window.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelHtmlExport.NamedRangeExport">
            <summary>
            Use this event to customize how a named range if exported to the HTML file. Note that for this event to be called,
            you first need to set <see cref="P:FlexCel.Render.FlexCelHtmlExport.ExportNamedRanges" /> = true. If you want to change the id that will be exported or
            exclude certain named from being exported, you can do so here.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.OnGetImageInformation(FlexCel.Render.ImageInformationEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelHtmlExport.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.OnHtmlFont(FlexCel.Core.HtmlFontEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelHtmlExport.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.OnNamedRangeExport(FlexCel.Render.NamedRangeExportEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelHtmlExport.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.OnSaveImage(FlexCel.Render.SaveImageEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelHtmlExport.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.PartialExportAdd(FlexCel.Render.TPartialExportState,System.String,System.String)">
            <param name="partialExportState">Object where we will collect all the css and needed information on the files being exported. Call this method
            once for every sheet you want to export, using the same partialExportState parameter.</param>
            <param name="htmlFileName">Name of the stored html file. This affects the path where images will be saved, and also the way images will be named.</param>
            <param name="relativeImagePath">Path relative to the path of htmlFileName, where images will be stored.</param>
            <summary>
            This method is designed to export a part of the HTML inside other HTML file.
             You should call this method once for every file you wish to export, 
             in order to let FlexCel consolidate the needed CSS classes and information into the partialExportState parameter.
             Once you have "filled" the partialExportState object with all the information on files you wish to export, you can call the methods
             in partialExportState to write the CSS or body parts of the HTML file.
            <p>Note that this overload version will automatically save the images to disk when needed. If for any reason you do not want
            to save the images, use the overload with SaveImagesToDisk parameter.</p></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.PartialExportAdd(FlexCel.Render.TPartialExportState,System.String,System.String,System.Boolean)">
            <param name="partialExportState">Object where we will collect all the css and needed information on the files being exported. Call this method
            once for every sheet you want to export, using the same partialExportState parameter.</param>
            <param name="htmlFileName">Name of the stored html file. This affects the path where images will be saved, and also the way images will be named.</param>
            <param name="relativeImagePath">Path relative to the path of htmlFileName, where images will be stored.</param>
            <param name="SaveImagesToDisk">When true, any image found in the file will be saved to disk (to relative imagepath) as the file is added.
            If false, the links for the image will be written but no image will be saved to disk, you have to do this yourself. Note that when 
            saving MHTML files this parameter doesn't matter, since images will not be saved to disk anyway.</param>
            <summary>
            This method is designed to export a part of the HTML inside other HTML file.
             You should call this method once for every file you wish to export, 
             in order to let FlexCel consolidate the needed CSS classes and information into the partialExportState parameter.
             Once you have "filled" the partialExportState object with all the information on files you wish to export, you can call the methods
             in partialExportState to write the CSS or body parts of the HTML file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.Progress">
            <summary>
            Progress of the export. This variable can be accessed from other thread or from the OnProgress event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ReplaceSeparatorMacros(FlexCel.Core.ExcelFile,System.Int32,System.String)">
            <param name="Work" />
            <param name="i" />
            <param name="Separator" />
            <summary>
            This method is for internal use. It will replace the sheet name, pos and count macros in a sheet separator.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.SavedImagesFormat">
            <summary>
            File format in which the images will be saved. Note that Ie6 does not support transparency in PNGs by default,
            so if you have transparent images and you want to make you page compatible with IE6, you should save as gif or use <see cref="P:FlexCel.Render.FlexCelHtmlExport.FixIE6TransparentPngSupport" /></summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelHtmlExport.SaveImage">
            <summary>
            Use this event to save the images into other place. Note that this event only fires when saving HTML, not MTHML.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.SmoothingMode">
            <summary>
            This affects how the images, charts, etc are rendered for the image file. Some modes will look a little blurred but with better quality.
            Consult the .NET framework documentation on SmoothingMode for more information
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.UseContentId">
            <summary>
            When exporting to <b>MHTML</b>, some mail clients might have problems understanding the newer "Content-Location" header to show the images.
            When this property is true, we will use the older "Content-Id" header that is better supported than Content Location in the mime headers
            to reference the images. You are strongly encouraged to keep this property
            true in order to maximize the number of mail readers compatible. When Exporting to HTML (not MHTML), this property has no effect.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.UsePrintScale">
            <summary>
            If false (the default) the print scale of the sheet will be ignored when exporting to html. If true,
            sheets will be exported honoring the zoom of the page.Note that if PrintToFit is true, then this value 
            will be ignored and zoom will be 100%.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.VerticalTextAsImages">
            <summary>
            When true and text is vertical, FlexCel will replace the text with an image in order to show it correctly in HTML.
            When false, text will be rendered normally without rotation.
            Note that when using HTML5 this property is ignored, since HTML5 allows text rotation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.Workbook">
            <summary>
            The ExcelFile to export.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.FlexCelHtmlExportProgress">
            <summary>
            Indicates how much of the report has been generated.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExportProgress.Row">
            <summary>
            The row that is being written.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExportProgress.SheetNumber">
            <summary>
            The sheet we are exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExportProgress.TotalRows">
            <summary>
            The total number of rows exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.FlexCelImgExport">
            <summary>
            A component for exporting an Excel file to an image. It can return an image object, or the
            actual bytes of an specific file format. (like gif, tiff or png)
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelImgExport">
            <summary>
            Creates a new FlexCelImgExport instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelImgExport(FlexCel.Core.ExcelFile)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <summary>
            Creates a new FlexCelImgExport and assigns it to an ExcelFile.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelImgExport(FlexCel.Core.ExcelFile,System.Boolean)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <param name="aAllowOverwritingFiles">When true, existing files will be overwritten.</param>
            <summary>
            Creates a new FlexCelImgExport and assigns it to an ExcelFile, setting AllowOverwritingFiles to the desired value.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelImgExport.AfterPaint">
            <summary>
            Fires after the image has been drawn, allowing to modify it.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing image files or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.AllVisibleSheets">
            <summary>
            If true, All visible sheets on the workbook will be printed. See <see cref="P:FlexCel.Render.FlexCelImgExport.ResetPageNumberOnEachSheet" /> for behavior of the page number when printing multiple sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelImgExport.BeforePaint">
            <summary>
            Fires before drawing the image, allowing to modify it or to modify the XlsFile associated.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.ExportNext(FlexCel.Core.TUIGraphics,FlexCel.Render.TImgExportInfo@)">
            <param name="imgData">Graphics where the image will be stored. Set it to null to skip the page.</param>
            <param name="exportInfo"> Information needed to export, cached for speed. The first time you call this method (or when you change xls.ActiveSheet), make exportInfo=null</param>
            <summary>
            Exports the associated xls workbook to a graphics stream. You need to provide a 
            Graphics object with the correct dimensions. (To get the needed dimensions, use <see cref="M:FlexCel.Render.FlexCelImgExport.GetRealPageSize" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.ExportNext(System.IO.Stream,FlexCel.Core.ImageColorDepth,FlexCel.Core.TXlsImgType,FlexCel.Render.TImgExportInfo@)">
            <param name="imgStream">Stream where the image will be exported.</param>
            <param name="colorDepth">Number of colors for the image.</param>
            <param name="imgFormat">Format for the saved image</param>
            <param name="exportInfo"> Information needed to export, cached for speed. The first time you call this method (or when you change xls.ActiveSheet), make exportInfo=null</param>
            <summary>
            Exports the associated xls workbook to a stream.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.ExportNext(System.String,FlexCel.Core.ImageColorDepth,FlexCel.Core.TXlsImgType,FlexCel.Render.TImgExportInfo@)">
            <param name="fileName">File to export.</param>
            <param name="colorDepth">Number of colors for the image.</param>
            <param name="imgFormat">Format for the saved image</param>
            <param name="exportInfo"> Information needed to export, cached for speed. The first time you call this method (or when you change xls.ActiveSheet), make exportInfo=null</param>
            <summary>
            Exports the associated xls workbook to a file.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.ExportSheetBackgroundImages">
            <summary>
            If false (the default) then the background images in the sheet won't be exported. Note that Excel doesn't
            print or export background images, and when it shows them on the screen they look the same no matter the sheet zoom.
            When you set this to true we will try to export the image, but it will grow and shrink when you zoom, making it look different
            from what Excel shows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.GetFirstPageExportInfo">
            <summary>
            Returns information needed for exporting multiple pages on one sheet. You normally 
            don't need to use this method, but you can use it to speed up multiple displays.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.GetRealPageSize">
            <summary>
            Returns the page dimensions for the active sheet. You can use it to create a bitmap to export the data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.GetRealPageSize(System.Int32)">
            <param name="ActiveSheet" />
            <summary>
            Returns the page dimensions for a sheet. You can use it to create a bitmap to export the data.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.HidePrintObjects">
            <summary>
            Select which kind of objects should not be printed or exported to the image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.OnAfterPaint(FlexCel.Render.ImgPaintEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelImgExport.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.OnBeforePaint(FlexCel.Render.ImgPaintEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelImgExport.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PageSize">
            <summary>
            Image page size. Set it to null to use the paper size on the xls file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.ResetPageNumberOnEachSheet">
            <summary>
            This property only makes sense when <see cref="P:FlexCel.Render.FlexCelImgExport.AllVisibleSheets" /> is true. On that case, if this property is true each sheet of
            the workbook will have the page number reset. For example if the xls file has 2 sheets and each has 3 pages: 
            When ResetPageNumberOnEachSheet = true then footers will look like "Page 1 of 3". If false, they will look like "Page 5 of 6"
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.Resolution">
            <summary>
            "The default resolution on pixels per inch for the rendered images. For the screen, this is 96."
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.SaveAsImage(System.IO.Stream,FlexCel.Core.ImageExportType,FlexCel.Core.ImageColorDepth)">
            <param name="fileStream">Stream where the image will be saved.</param>
            <param name="exportFormat">Image format.</param>
            <param name="ColorDepth">Color depth for the image, if applicable. Some formats (like fax, that is monochrome) do not allow different color depots.</param>
            <summary>
            Saves the current Excel file on an image stream. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.SaveAsImage(System.String,FlexCel.Core.ImageExportType,FlexCel.Core.ImageColorDepth)">
            <param name="fileName">File where the image will be saved.</param>
            <param name="exportFormat">Image format.</param>
            <param name="ColorDepth">Color depth for the image, if applicable. Some formats (like fax, that is monochrome) do not allow different color depths.</param>
            <summary>
            Saves the current Excel file as an image file. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.TotalPages">
            <summary>
            Return the pages to print. This is a costly operation, so cache the results.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.Workbook">
            <summary>
            The ExcelFile to print.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.FlexCelPdfExport">
            <summary>
            A component for exporting an Excel file to PDF.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelPdfExport">
            <summary>
            Creates a new FlexCelPdfExport instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelPdfExport(FlexCel.Core.ExcelFile)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <summary>
            Creates a new FlexCelPdfExport and assigns it to an ExcelFile.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelPdfExport(FlexCel.Core.ExcelFile,System.Boolean)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <param name="aAllowOverwritingFiles">When true, existing files will be overwritten.</param>
            <summary>
            Creates a new FlexCelPdfExport and assigns it to an ExcelFile, setting AllowOverwritingFiles to the desired value.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.AfterGeneratePage">
            <summary>
            Fires after each new page is generated on the pdf, and after all content is written to the page. (The page is written)
            You can use this event to add some text or images on top of the page contents.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing pdf files or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.AttachFile(System.String,System.String,System.String,FlexCel.Pdf.TPdfAttachmentKind)">
            <param name="fileName">Name on disk of the file to attach. This will also be the name of the file in 
            the pdf. If you want to specify a different name in the pdf than the name on disk, use <see cref="M:FlexCel.Render.FlexCelPdfExport.AttachFile(System.String,System.String,System.String,System.DateTime,FlexCel.Pdf.TPdfAttachmentKind,FlexCel.Pdf.TPdfAttachmentDataProviderDelegate)" /></param>
            <param name="mimeType">Mime type of the file being attached. 
            You can use <see cref="T:FlexCel.Core.StandardMimeType" /> for predefined types.
            Note that while this might be null or Empty for standard pdf files, for PDF/A3 mime type is required.
            If you don't know the mime type, you must specify StandardMimeType.OctectStream.
            </param>
            <param name="description">Description of the file that the pdf reader will show in the attachment pane.
            While not required by PDF/A-3, it is recommended to provide a description for the file.</param>
            <param name="attachmentKind">How the attachment relates to the pdf file. This is required by PDF/A-3.</param>
            <summary>
            Attachs a file to the pdf file. You can attach files at any time while creating the pdf,
            but the file will be read only when you call <see cref="M:FlexCel.Render.FlexCelPdfExport.EndExport" />. The files that are in the list
            at the moment of calling EndExport are the ones that will be saved, and they contents of the files will be read then.
            <br /> You can remove all the attachments in the file by calling <see cref="M:FlexCel.Render.FlexCelPdfExport.ClearAttachments" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.AttachFile(System.String,System.String,System.String,System.DateTime,FlexCel.Pdf.TPdfAttachmentKind,FlexCel.Pdf.TPdfAttachmentDataProviderDelegate)">
            <param name="fileName">Name that will be used for the file in the pdf.</param>
            <param name="mimeType">Mime type of the file being attached. 
            You can use <see cref="T:FlexCel.Core.StandardMimeType" /> for predefined types.
            Note that while this might be null or Empty for standard pdf files, for PDF/A3 mime type is required.
            If you don't know the mime type, you must specify StandardMimeType.OctectStream.
            </param>
            <param name="description">Description of the file that the pdf reader will show in the attachment pane.
            While not required by PDF/A-3, it is recommended to provide a description for the file.</param>
            <param name="modificationTimeLocalTimeZone">Modification date of the attachment file in the local time zone.
            Use DateTime.MinValue to not write a modification date for the file. </param>
            <param name="attachmentKind">How the attachment relates to the pdf file. This is required by PDF/A-3.</param>
            <param name="dataProvider">This can be a delegate or lambda expression that will load the data for the file when
            actually embedding it. This action will be called at the moment of embedding and must provide the data for the file.</param>
            <summary>
            Attachs a file to the pdf file. You can attach files at any time while creating the pdf,
            but the file will be read only when you call <see cref="M:FlexCel.Render.FlexCelPdfExport.EndExport" />. The files that are in the list
            at the moment of calling EndExport are the ones that will be saved, and they contents of the files will be read then.
            <br /> You can remove all the attachments in the file by calling <see cref="M:FlexCel.Render.FlexCelPdfExport.ClearAttachments" />.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.BeforeGeneratePage">
            <summary>
            Fires after each new page is generated on the pdf, but before any content is written to the page. (The page is blank)
            You can use this event to add a watermark or a background image.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.BeforeNewPage">
            <summary>
            Fires before each new page is generated on the pdf.
            You can use this event to change the pagesize for the new sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)">
            <param name="pdfStream">Stream that will contain the new pdf file.</param>
            <summary>
            Initializes the PDF exporting to a new file. After calling this method
            you can call <see cref="M:FlexCel.Render.FlexCelPdfExport.ExportSheet" /> to export different xls files to the same pdf, or <see cref="M:FlexCel.Render.FlexCelPdfExport.ExportAllVisibleSheets(System.Boolean,System.String)" />.
            You should always end the document with a call to <see cref="M:FlexCel.Render.FlexCelPdfExport.EndExport" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.CalcPrintArea">
            <summary>
             Calculates the actual spreadsheet range that will be printed. This is given by:
             1)If you specified non zero values on PrintRange, this will be used.
             2)If any value in PrintRange is zero and there is a Print Area defined on the
             spreadsheet, the Print Area will be used.
             3)If there is no PrintRange and no Print Area defined, the visible cells on the
             sheet will be printed.
             </summary>
            <returns>The area that will be exported.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Cancel">
            <summary>
            Cancels a running export. This method is equivalent to setting <see cref="P:FlexCel.Render.FlexCelPdfExport.Canceled" /> = true.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Canceled">
            <summary>
            If true the export has been canceled with <see cref="M:FlexCel.Render.FlexCelPdfExport.Cancel" /> method.
            You can't set this variable to false, and setting it true is the same as calling <see cref="M:FlexCel.Render.FlexCelPdfExport.Cancel" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ClearAttachments">
            <summary>
            Removes all existing attachments in the writer.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Compress">
            <summary>
            When true, the pdf file will be compressed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.CurrentPage">
            <summary>
            Returns the next page that we are going to print.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.CurrentPageInSheet">
            <summary>
            Returns the next page we are going to print, on the current sheet.
            When not printing more than one sheet, it is equivalent to <see cref="P:FlexCel.Render.FlexCelPdfExport.CurrentPage" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.EndExport">
            <summary>
            Writes the trailer information on a PDF file. Always call this method after calling <see cref="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Export(System.IO.Stream)">
            <param name="pdfStream">Stream where the result will be written.</param>
            <summary>
            Exports the active sheet of the associated xls workbook to a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Export(System.String)">
            <param name="fileName">File to export.</param>
            <summary>
            Exports the active sheet of the associated xls workbook to a file.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportAllVisibleSheets(System.Boolean,System.String)">
            <param name="resetPageNumberOnEachSheet">If true, each new sheet will reset the page number shown on Excel headers and footers.</param>
            <param name="bookmarkName">If not null, each sheet will be added as an entry on the Bookmarks in the pdf file, under the name specified here.
            If you want the Bookmark window to be visible when you open the pdf file, set <see cref="P:FlexCel.Pdf.PdfWriter.PageLayout" /> = <see cref="T:FlexCel.Pdf.TPageLayout" /> 
            Also, use the <see cref="E:FlexCel.Render.FlexCelPdfExport.GetBookmarkInformation" /> event to further customize what goes in each of the entries.
            </param>
            <summary>
            This method will export all the visible sheets on an xls file to pdf.
            Different than calling ExportSheet for each sheet, this method can keep the page number growing on each sheet, without resetting it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportAllVisibleSheets(System.String,System.Boolean,System.String)">
            <param name="fileName">File where the file will be saved.</param>
            <param name="resetPageNumberOnEachSheet">If true, each new sheet will reset the page number shown on Excel headers and footers.</param>
            <param name="bookmarkName">If not null, each sheet will be added as an entry on the Bookmarks in the pdf file, under the name specified here.
            If you want the Bookmark window to be visible when you open the pdf file, set <see cref="P:FlexCel.Pdf.PdfWriter.PageLayout" /> = <see cref="T:FlexCel.Pdf.TPageLayout" /> 
            Also, use the <see cref="E:FlexCel.Render.FlexCelPdfExport.GetBookmarkInformation" /> event to further customize what goes in each of the entries.
            </param>
            <summary>
            This method will export all the visible sheets on an xls file to pdf.
            This method is a shortcut for creating a filestream, calling <see cref="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)" /> on the filestream, calling
            <see cref="M:FlexCel.Render.FlexCelPdfExport.ExportAllVisibleSheets(System.Boolean,System.String)" /> and then calling <see cref="M:FlexCel.Render.FlexCelPdfExport.EndExport" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportSheet">
            <summary>
            Exports the activesheet on the current XlsFile.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportSheet(System.Int32,System.Int32)">
            <param name="startPageToDisplay">First page that the headers and footers on the xls file will show. If you are exporting only one sheet to the pdf file,
            this can be 1. If you are exporting more than one sheet to the same pdf file, you will want to set StartPage to the actual page on the pdf.</param>
            <param name="totalPagesToDisplay">The total number of pages to display on Excel headers and footers. If you are exporting only one sheet to the pdf file, set it to -1, and it will be calculated automatically. If not, please supply here the total number of pages the file will have so FlexCel can show footers like "page 1 of 50"</param>
            <summary>
            Exports the active sheet on the current XlsFile. You can define which is the first page to print and the global count of pages, so the 
            page numbers on headers and footers of the excel file correspond with the actual pages on the pdf.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportSheet(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="startPageToDisplay">First page that the headers and footers on the xls file will show. If you are exporting only one sheet to the pdf file,
            this can be 1. If you are exporting more than one sheet to the same pdf file, you will want to set StartPage to the actual page on the pdf.</param>
            <param name="totalPagesToDisplay">The total number of pages to display on Excel headers and footers. If you are exporting only one sheet to the pdf file, set it to -1, and it will be calculated automatically. If not, please supply here the total number of pages the file will have so FlexCel can show footers like "page 1 of 50"</param>
            <param name="startPageToExport">First page on the file to export (first page is 1).</param>
            <param name="totalPagesToExport">How many pages will be exported. If you specify a negative number here (the default), all pages from startPageToExport will be exported.</param>
            <summary>
            Exports the active sheet on the current XlsFile. You can define which is the first page to print and the global count of pages, so the 
            page numbers on headers and footers of the excel file correspond with the actual pages on the pdf.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.ExportSheetBackgroundImages">
            <summary>
            If false (the default) then the background images in the sheet won't be exported. Note that Excel doesn't
            print or export background images, and when it shows them on the screen they look the same no matter the sheet zoom.
            When you set this to true we will try to export the image, but it will grow and shrink when you zoom, making it look different
            from what Excel shows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FallbackFonts">
            <summary>
            A semicolon (;) separated list of font names to try when a character is not found in the used font.<br />
            When a character is not found in a font, it will display as an empty square by default. By setting this
            property, FlexCel will try to find a font that supports this character in this list, and if found, use that font
            to render the character.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FCompress">
            <summary>
            If true, the file will be compressed. This property is just for derived classes, for normal cases use <see cref="P:FlexCel.Render.FlexCelPdfExport.Compress" /></summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FFallbackFonts">
            <summary>
            Only for use in derived classes. Use <see cref="P:FlexCel.Render.FlexCelPdfExport.FallbackFonts" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FFontEmbed">
            <summary>
            Only for use in derived classes. Use <see cref="P:FlexCel.Render.FlexCelPdfExport.FontEmbed" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FFontMapping">
            <summary>
            Only for use in derived classes. Use <see cref="P:FlexCel.Render.FlexCelPdfExport.FontMapping" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FFontSubset">
            <summary>
            Only for use in derived classes. Use <see cref="P:FlexCel.Render.FlexCelPdfExport.FontSubset" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FontEmbed">
            <summary>
            Determines what fonts will be embedded on the generated pdf. Note that when using UNICODE, fonts will be embedded anyway, no matter what this setting is.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FontMapping">
            <summary>
            Determines how fonts will be replaced on the generated pdf. Pdf comes with 4 standard font families,
            Serif, Sans-Serif, Monospace and Symbol. You can use for example the standard Helvetica instead of Arial and do not worry about embedding the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FontSubset">
            <summary>
            Determines if the full font will be embedded or only the characters used, when embedding fonts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FPageSize">
            <summary>
            Only for use in derived classes. Use <see cref="P:FlexCel.Render.FlexCelPdfExport.PageSize" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FPdfStream">
            <summary>
            Stream where the file will be saved. You can use this in a derived class to write your own data to the stream.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FPrintRange">
            <summary>
            Only for use in derived classes. Use "PrintRangeLeft/Top/Right/Bottom" instead.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.FProperties">
            <summary>
            Only for use in derived classes. Use <see cref="P:FlexCel.Render.FlexCelPdfExport.Properties" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.GetBookmarkInformation">
            <summary>
            Use this event to customize what goes inside the bookmarks when exporting multiple sheets of an xls file.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.GetFontData">
            <summary>
            Use this event if you want to provide your own font information for embedding. 
            Note that if you don't assign this event, the default method will be used, and this 
            will try to find the font on the Fonts folder. To change the font folder, use <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontFolder" /> event
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.GetFontFolder">
            <summary>
            Use this event if you want to provide your own font information for embedding. 
            Normally FlexCel will search for fonts on [System]\Fonts folder. If your fonts are in 
            other location, you can tell FlexCel where they are here. If you prefer just to give FlexCel
            the full data on the font, you can use <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontData" /> event instead.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.HidePrintObjects">
            <summary>
            Select which kind of objects should not be printed or exported to pdf.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.InitialZoomAndPage">
            <summary>
            Sets the default zoom and initial page when opening the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Kerning">
            <summary>
            By default, pdf does not do any kerning with the fonts. This is, on the string "AVANT", it won't
            compensate the spaces between "A" and "V". (they should be smaller) 
            If you turn this property on, FlexCel will calculate the kerning and add it to the generated file.
            The result file will be a little bigger because of the kerning info on all strings, but it will also
            look a little better.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnAfterGeneratePage(FlexCel.Render.PageEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport. See also <see cref="E:FlexCel.Render.FlexCelPdfExport.AfterGeneratePage" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnBeforeGeneratePage(FlexCel.Render.PageEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport. See also <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeGeneratePage" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnBeforeNewPage(FlexCel.Render.PageEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport. See also <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeNewPage" /></summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.OnFontEmbed">
            <summary>
            Use this event if you want to manually specify which fonts to embed into the pdf document.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnGetBookmarkInformation(FlexCel.Render.GetBookmarkInformationArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PageLayout">
            <summary>
            Sets the default page layout when opening the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PageLayoutDisplay">
            <summary>
            Sets the default page display layout when opening the document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PageSize">
            <summary>
            Pdf page size. Set it to null to use the paper size on the xls file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelPdfExport.PdfCanvas">
            <summary>
            Writer where the pdf commands will be sent. Only for use in derived classes.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PdfType">
            <summary>
            Defines the type of pdf being created. Note that if you set this property to other value than standard,
            other properties might be ignored. For example, when creating a PDF/A file all fonts must be embedded so 
            the value of the FontEmbed property will be ignored.
            See the <see cref="P:FlexCel.Render.FlexCelPdfExport.TagMode" /> property to detemine if the file will be PDF/A-na or PDF/A-nb. If tagging is true
            (the default) the generated files will be "a". If not, they will be "b", since b doesn't require tagging.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PdfVersion">
            <summary>
            Defines the version of pdf being created. For maximum compatibility you can choose PDF 1.4. (Acrobat 5.0, but
            can be opened by any version of Acrobat, even if version less than 1.4 won't have all the features).
            Choosing PDF 1.6 (Acrobat 7) allows for more compression and smaller files, but you'll need Acrobat 7 or newer 
            to see the files. Older versions won't be able to open it at all.
            <br />
            Note that this value might be ignored if you are creating PDFA-1 (as it requires PDF1-4). Also for signing,
            FlexCel requires PDF1-6.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Progress">
            <summary>
            Progress of the export. This variable can be accessed from other thread, or from the <see cref="E:FlexCel.Render.FlexCelPdfExport.AfterGeneratePage" /> event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Properties">
            <summary>
            Pdf file properties. Note that if <see cref="P:FlexCel.Render.FlexCelPdfExport.UseExcelProperties" /> is true and the values are null or empty,
            the properties from the exported workbook will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Sign(FlexCel.Pdf.TPdfSignature)">
            <param name="aSignature">Signature used for signing. Set it to null to stop signing the next documents.</param>
            <summary>
            Signs the pdf documents with the specified <see cref="T:FlexCel.Pdf.TPdfSignature" /> or <see cref="T:FlexCel.Pdf.TPdfVisibleSignature" />.
            <b>Note:</b> This method must be called <b>before</b> calling <see cref="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.TagMode">
            <summary>
            If TagMode is full (the default), the generated file will be tagged. Tagged pdfs provide better accesibility support,
            but the files can be significantly bigger and take a little longer to create. If you prefer smaller files
            even if not accessible, turn this option off. Note that when creating PDF/A files with <see cref="P:FlexCel.Render.FlexCelPdfExport.PdfType" /> 
            this property defines if the file is PDF/A-na or PDF/A-nb. 
            This is because PDF/A-1a and PDF/A-2a require tagged files, so if this option is true the geneated files will be "a".
            If this option is false, then the generated files will be "b" which is a less strict standard and doesn't require tagging.
            To reduce file size, you might want to set <see cref="P:FlexCel.Render.FlexCelPdfExport.PdfVersion" /> to a value bigger than 1_4, since
            this will allow FlexCel to use better compression not available in PDF 1.4.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.TotalPagesInSheet">
            <summary>
            Returns the number of pages that the active sheet will use when exported to pdf.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.UnlicensedFontAction">
            <summary>
            Defines what to do when a font has a license that doesn't allow embedding, and you are trying to embed the font.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.UnlicensedReplacementFont">
            <summary>
            When trying to embed a font that isn't licensed for embedding, and <see cref="P:FlexCel.Render.FlexCelPdfExport.UnlicensedFontAction" /> is TUnlicensedFontAction.Replace
            this property specifies the font that will be used to replace it. If null or empty, Arial will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.UseExcelProperties">
            <summary>
            When this property is true, the properties of the Excel file will be used when the property is null or empty.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Workbook">
            <summary>
            The ExcelFile to print.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.FlexCelPdfExportProgress">
            <summary>
            Indicates how much of the report has been generated.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExportProgress.Page">
            <summary>
            The page that is being written.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExportProgress.TotalPage">
            <summary>
            The total number of pages exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.FlexCelSVGExport">
            <summary>
            A component for exporting an Excel file to an SVG (Scalable Vector Graphics) image. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelSVGExport">
            <summary>
            Creates a new FlexCelSVGExport instance.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelSVGExport(FlexCel.Core.ExcelFile)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <summary>
            Creates a new FlexCelSVGExport and assigns it to an ExcelFile.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.FlexCelSVGExport(FlexCel.Core.ExcelFile,System.Boolean)">
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <param name="aAllowOverwritingFiles">When true, existing files will be overwritten.</param>
            <summary>
            Creates a new FlexCelSVGExport and assigns it to an ExcelFile, setting AllowOverwritingFiles to the desired value.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing image files or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.AllVisibleSheets">
            <summary>
            If true, all visible sheets on the workbook will be printed. See <see cref="P:FlexCel.Render.FlexCelSVGExport.ResetPageNumberOnEachSheet" /> for behavior of the page number when printing multiple sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.Compress">
            <summary>
            When true, the pdf file will be compressed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.ExportSheetBackgroundImages">
            <summary>
            If false (the default) then the background images in the sheet won't be exported. Note that Excel doesn't
            print or export background images, and when it shows them on the screen they look the same no matter the sheet zoom.
            When you set this to true we will try to export the image, but it will grow and shrink when you zoom, making it look different
            from what Excel shows.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.ExportType">
            <summary>
            How much of the svg will be exported.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="F:FlexCel.Render.FlexCelSVGExport.FCompress">
            <summary>
            If true, the file will be compressed. This property is just for derived classes, for normal cases use <see cref="P:FlexCel.Render.FlexCelSVGExport.Compress" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.HidePrintObjects">
            <summary>
            Select which kind of objects should not be printed or exported to the image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.IdPrefix">
            <summary>
            Prefix to be used in all definitions inside the svg file. For normal SVG files you can leave this null,
            but if you are embedding the files inside an html file, you need to ensure every image has unique identifiers.
            All SVG identifiers from different images inside an html file must be unique.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.LinksInNewWindow">
            <summary>
            IF true, links will be exported to open in a new window. (using the show=new attribute in svg links)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.PageSize">
            <summary>
            Image page size. Set it to null to use the paper size on the xls file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.ResetPageNumberOnEachSheet">
            <summary>
            This property only makes sense when <see cref="P:FlexCel.Render.FlexCelSVGExport.AllVisibleSheets" /> is true. On that case, if this property is true each sheet of
            the workbook will have the page number reset. For example if the xls file has 2 sheets and each has 3 pages: 
            When ResetPageNumberOnEachSheet = true then footers will look like "Page 1 of 3". If false, they will look like "Page 5 of 6"
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.FlexCelSVGExport.SaveAsImage(System.Action{FlexCel.Render.SVGExportParameters})">
            <param name="saveParameters">Action that will be called once for every page to export. When this action is called you can 
            assign a file name for the image, a title and description, cancel the export, etc.</param>
            <summary>
            Saves the current Excel file on an SVG image stream. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.FlexCelSVGExport.Workbook">
            <summary>
            The ExcelFile to print.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.GetBookmarkInformationArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.GetBookmarkInformation" />, 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.GetBookmarkInformationArgs(FlexCel.Pdf.PdfWriter,System.Int32,System.Int32,FlexCel.Pdf.TBookmark)">
            <param name="aPdfWriter">The file we are processing.</param>
            <param name="aCurrentPage">The page that is being generated. 0 means the global bookmark parent of all the sheets.</param>
            <param name="aCurrentPageInSheet">The page that is being generated, relative to the sheet.</param>
            <param name="aBookmark">Bookmark that we are about to include. you can customize it on this event.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.Bookmark">
            <summary>
            Bookmark that we are about to include.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.CurrentPage">
            <summary>
            Page currently printing. 0 means the global bookmark parent of all the sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.CurrentPageInSheet">
            <summary>
            Page currently printing, relative to the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.File">
            <summary>
            The file with the pdf data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.GetBookmarkInformationEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            This event will happend each time a PDF bookmark is automatically added by FlexCel. You can use it to customize the bookmark, for example change the font color or style.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.ImageInformationEventArgs">
            <summary>
            Arguments passed on <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnGetImageInformation(FlexCel.Render.ImageInformationEventArgs)" />, 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.ImageInformationEventArgs(FlexCel.Core.ExcelFile,System.Int32,FlexCel.Core.TShapeProperties,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,FlexCel.Render.THtmlImageFormat)">
            <param name="aWorkbook">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.Workbook" /></param>
            <param name="aObjectIndex">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ObjectIndex" /></param>
            <param name="aShapeProps">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ShapeProps" /></param>
            <param name="aImageStream">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream" /></param>
            <param name="aImageFile">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageFile" /></param>
            <param name="aImageLink">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageLink" /></param>
            <param name="aAlternateText">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.AlternateText" /></param>
            <param name="aHyperLink">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.HyperLink" /></param>
            <param name="aHyperLinkTitle">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.HyperLinkTitle" /></param>
            <param name="aSavedImageFormat">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.SavedImageFormat" /></param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.AlternateText">
            <summary>
            Alternate text for the image, to show in the "ALT" tag when a browser cannot display images.
            By default this is set to the text in the box "Alternative Text" in the web tab on the image properties.
            If no Alternative text is supplied in the file, the image name will be used here.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.HyperLink">
            <summary>
            Hyperlink where the image will point to. This is automatically read from the image hyperlink if it has one,
            but you can modify, delete or add a new hyperlink for any image with this property.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.HyperLinkTitle">
            <summary>
            Hyperlink title if the image has an hyperlink.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ImageFile">
            <summary>
            The file where the image will be saved. If <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream" /> is not null, this property will do nothing.
            If both this property and <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream" /> are null, the image will not be saved.
            When saving as MHTML this parameter does nothing, since all images will be saved in the same MTHML stream.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ImageLink">
            <summary>
            The link that will be inserted in the html file. Change it if you change the default image location.
            Set it to null to not add a link to this image in the generated html file. If you want to avoid exporting all images,
            you can use <see cref="T:FlexCel.Core.THidePrintObjects" /> for that. But if you just want to avoid exporting one image in a file, you can do it
            by setting <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream" />, <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageFile" /> and this property to null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ImageStream">
            <summary>
            The stream where the images will be saved. Keep it null to store the image as a file using <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageFile" />.
            When saving as MHTML this parameter does nothing, since all images will be saved in the same MTHML stream.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ObjectIndex">
            <summary>
            Object index of the object being rendered. You can use xls.GetObject(objectIndex) to get the object properties, or you can use this
            property to attach an unique number in the sheet to the image filename. If the image is not an object (for example it is a rotated text)
            this property will be -1.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.SavedImageFormat">
            <summary>
            File format in which to save this image. Do not modify it to keep the default format.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ShapeProps">
            <summary>
            Shape properties of the object being rendered. You can use them to get the name of the object, its size, etc.
             If the image is not an object (for example it is a rotated text)
            this property will be null. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.Workbook">
            <summary>
            ExcelFile with the image, positioned in the sheet that we are rendering. 
            Make sure if you modify ActiveSheet of this instance to restore it back to the original value before exiting the event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.ImageInformationEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate used to specify where to store the images on a page.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.ImgPaintEventArgs">
            <summary>
            Arguments passed on Paint events.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.ImgPaintEventArgs(FlexCel.Core.TUIGraphics,FlexCel.Core.TUIRectangle,System.Int32,System.Int32,System.Int32)">
            <param name="aGraphics">Gets the graphics used to paint.</param>
            <param name="aPageBounds">Gets the rectangle in which to paint.</param>
            <param name="aCurrentPage">The page we are printing.</param>
            <param name="aCurrentPageInSheet">The page we are printing, relative to the current sheet.</param>
            <param name="aTotalPages">The total number of pages we have available to export.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.CurrentPage">
            <summary>
            Gets the current page number.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.CurrentPageInSheet">
            <summary>
            Gets the current page number, relative to the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.Graphics">
            <summary>
            Gets the graphics used to paint.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.PageBounds">
            <summary>
            Gets the rectangle in which to paint.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.TotalPages">
            <summary>
            Gets the total number of pages available to export.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.NamedRangeExportEventArgs">
            <summary>
            Arguments passed on <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnNamedRangeExport(FlexCel.Render.NamedRangeExportEventArgs)" />, 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.NamedRangeExportEventArgs(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32,FlexCel.Core.TXlsNamedRange,System.String)">
            <param name="aWorkbook" />
            <param name="aSheet" />
            <param name="aRow" />
            <param name="aCol" />
            <param name="aNamedRange" />
            <param name="aNameId" />
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.NamedRangeExportEventArgs.Col">
            <summary>
            Column index (1 based) of the html cell we are exporting. This number should be the same as the first column in the <see cref="P:FlexCel.Render.NamedRangeExportEventArgs.NamedRange" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.NamedRangeExportEventArgs.NamedRange">
            <summary>
            Named range that is being exported.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.NamedRangeExportEventArgs.NameId">
            <summary>
            This property is by default the same as <see cref="P:FlexCel.Render.NamedRangeExportEventArgs.NamedRange" />.Name.  If you want to change the id
            of the span that will be exported to HTML, change it to the new value. To not export this name, set it to null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.NamedRangeExportEventArgs.Row">
            <summary>
            Row index (1 based) of the html cell we are exporting. This number should be the same as the first row in the <see cref="P:FlexCel.Render.NamedRangeExportEventArgs.NamedRange" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.NamedRangeExportEventArgs.Sheet">
            <summary>
            Sheet index (1 based) of the html cell we are exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.NamedRangeExportEventArgs.Workbook">
            <summary>
            ExcelFile with the name, positioned in the sheet that we are rendering. 
            Make sure if you modify ActiveSheet of this instance to restore it back to the original value before exiting the event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.NamedRangeExportEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate used to customize exporting of named ranges on a page.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.PageEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeGeneratePage" />, 
            <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeNewPage" /> and <see cref="E:FlexCel.Render.FlexCelPdfExport.AfterGeneratePage" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.PageEventArgs(FlexCel.Render.FlexCelPdfExport,FlexCel.Core.ExcelFile,System.Int32,FlexCel.Pdf.PdfWriter,System.Int32,System.Int32)">
            <param name="aPdfExport">The PdfExport component which is doing the export.</param>
            <param name="aWorkbook">Excel file that is being exported.</param>
            <param name="aCurrentSheet">Sheet that we are currently exporting.</param>
            <param name="aPdfWriter">The file we are processing.</param>
            <param name="aCurrentPage">The page that is being generated.</param>
            <param name="aCurrentPageInSheet">The page in the current sheet that is being generated.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.CurrentPage">
            <summary>
            Page currently printing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.CurrentPageInSheet">
            <summary>
            Page currently printing on the sheet printing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.CurrentSheet">
            <summary>
            Sheet that is currently being printed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.File">
            <summary>
            The file with the pdf data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.PdfExport">
            <summary>
            The FlexCelPdfExport component doing the export.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.Workbook">
            <summary>
            ExcelFile we are exporting. Note that this might be a light clone of the workbook assigned to the FlexCelPdfExport component,
            so it might be different.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.PageEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Generic delegate for After/Before page events.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.PaintEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for Paint events.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.SaveImageEventArgs">
            <summary>
            Arguments passed on <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnSaveImage(FlexCel.Render.SaveImageEventArgs)" />, 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.SaveImageEventArgs(FlexCel.Core.ExcelFile,System.Int32,FlexCel.Core.TShapeProperties,System.String,System.String,System.String,FlexCel.Render.THtmlImageFormat,FlexCel.Core.TUIImage)">
            <param name="aWorkbook">See <see cref="P:FlexCel.Render.SaveImageEventArgs.Workbook" /></param>
            <param name="aObjectIndex">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ObjectIndex" /></param>
            <param name="aShapeProps">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ShapeProps" /></param>
            <param name="aImageFile">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ImageFile" /></param>
            <param name="aImageLink">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ImageLink" /></param>
            <param name="aAlternateText">See <see cref="P:FlexCel.Render.SaveImageEventArgs.AlternateText" /></param>
            <param name="aSavedImageFormat">See <see cref="P:FlexCel.Render.SaveImageEventArgs.SavedImageFormat" /></param>
            <param name="aImageToSave">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ImageToSave" /></param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.AlternateText">
            <summary>
            Alternate text for the image, to show in the "ALT" tag when a browser cannot display images.
            By default this is set to the text in the box "Alternative Text" in the web tab on the image properties.
            If no Alternative text is supplied in the file, the image name will be used here.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ImageFile">
            <summary>
            The file where the image is expected to be saved.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ImageLink">
            <summary>
            The link that will be inserted in the html file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ImageToSave">
            <summary>
            Image that will be saved. You can use it to save it yourself.
            Note that when saving as SVG, this will be null.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ObjectIndex">
            <summary>
            Object index of the object being rendered. You can use xls.GetObject(objectIndex) to get the object properties. 
            If the image is not an object (for example it is a rotated text)
            this property will be -1.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.Processed">
            <summary>
            Set this property to true if you have taken care of saving the image, and FlexCel does not need to save it.
            If you just used this event to get information on the image being saved, but would like to keep the normal flux,
            set it to false.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.SavedImageFormat">
            <summary>
            File format in which the image is. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ShapeProps">
            <summary>
            Shape properties of the object being rendered. You can use them to get the name of the object, its size, etc.
             If the image is not an object (for example it is a rotated text)
            this property will be null. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.Workbook">
            <summary>
            ExcelFile with the image, positioned in the sheet that we are rendering. 
            Make sure if you modify ActiveSheet of this instance to restore it back to the original value before exiting the event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.SaveImageEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate used to specify where to store the images on a page.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.SheetSelectorEntryEventArgs">
            <summary>
            Arguments passed on FlexCel.Render.TStandardSheetSelector.OnSheetSelectorEntry. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.SheetSelectorEntryEventArgs(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.String,System.String)">
            <param name="aWorkbook">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.Workbook" /></param>
            <param name="aActiveSheet">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.ActiveSheet" /></param>
            <param name="aRenderingSheet">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.RenderingSheet" /></param>
            <param name="aLink">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.Link" /></param>
            <param name="aEntryText">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.EntryText" /></param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.ActiveSheet">
            <summary>
            Sheet index of the entry. This is equivalent to <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.Workbook" />.ActiveSheet
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.EntryText">
            <summary>
            Text that will be written in this cell of the selector.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.Link">
            <summary>
            Place where this entry should link to.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.RenderingSheet">
            <summary>
            Sheet we are currently rendering. You can compare if (RenderingSheet == ActiveSheet)
            to highlight the active sheet when drawing the selector.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.Workbook">
            <summary>
            ExcelFile we are drawing the sheet selector in, positioned in the sheet that we are rendering. 
            Make sure if you modify ActiveSheet of this instance to restore it back to the original value before exiting the event.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.SheetSelectorEntryEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate used to specify how the Sheet Selector will be like.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.SVGExportParameters">
            <summary>
            Parameters used when exporting to SVG.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.Canceled">
            <summary>
            Set this property to true to cancel the export process.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.Description">
            <summary>
            Description to be saved with the image. If null or empty, the svg image will have no description tag.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.ExtraSVGAttributes">
            <summary>
            Extra attributes that will be added to the &lt;svg&gt; definition. Keep it null to not add any extra attribute.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.FileName">
            <summary>
            Filename where the image will be saved. If you leave it null or empty, the image won't be saved to a file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.FileStream">
            <summary>
            Stream where the image will be saved. If you leave it null, the image won't be saved to a stream.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.PageNumber">
            <summary>
            Page number we are currently exporting.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.SheetPageNumber">
            <summary>
            Page number in the sheet we are exporting. Different from <see cref="P:FlexCel.Render.SVGExportParameters.PageNumber" />, this value is local to the
            current sheet, and it is reset every time we export a different sheet. If you are exporting a single sheet (FlexCelSVGExport.AllVisibleSheets is false), then
            this variable will have the same value as <see cref="P:FlexCel.Render.SVGExportParameters.PageNumber" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.Title">
            <summary>
            Title to be saved with the image. If null or empty, the svg image will have no title tag.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.TotalPages">
            <summary>
            Total number of pages to export.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.TotalPagesInSheet">
            <summary>
            Number of pages in the sheet we are exporting. Different from <see cref="P:FlexCel.Render.SVGExportParameters.TotalPages" />, this value is local to the
            current sheet, and it is reset every time we export a different sheet. If you are exporting a single sheet (FlexCelSVGExport.AllVisibleSheets is false), then
            this variable will have the same value as <see cref="P:FlexCel.Render.SVGExportParameters.TotalPages" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.SVGExportParameters.Workbook">
            <summary>
            Excel file that we are exporting. Note that this is a LightClone() of the original ExcelFile that was passed
            to the export, and might have a different active sheet. If you need to access the file from the export action, 
            use this paameter and not the original ExcelFile.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.TCssInformation">
            <summary>
            Encapsulates the information needed to create external CSS files.
            Note that if you use the same TCssInformation instance to create different html files, the CSS file created will be only one.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.TCssInformation(System.IO.TextWriter,System.String)">
            <param name="aData">HtmlTextWriter where an external CSS file will be stored. If null, no CSS file will be created. A link to a CSS file might be still included if you set the Url to a non null value.</param>
            <param name="aUrl">URL of the css file that will be linked to this file. If null, all css information will be stored inside the html file.</param>
            <summary>
            Creates a new instance of TCssInformation.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TCssInformation.Data">
            <summary>
            HtmlTextWriter where an external CSS file will be stored. If null, no CSS file will be created. A link to a CSS file might be still included if you set the Url to a non null value.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TCssInformation.Url">
            <summary>
            URL of the css file that will be linked to this file. If null, no CSS file will be created and all CSS information will be stored inside the html file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.TGeneratedFiles">
            <summary>
            An object containing all the files generated in the export.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.Clear">
            <summary>
            Clears all the files in the object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.GetCssFiles">
            <summary>
            Name of the css files generated.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.GetHtmlFiles">
            <summary>
            Name of the html files generated.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.GetImageFiles">
            <summary>
            Name of the image files generated.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.THtmlExtraInfo">
            <summary>
            Stores extra data to write in the HTML file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.THtmlExtraInfo">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Render.THtmlExtraInfo</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.BodyEnd">
            <summary>
            Extra strings to be added before the closing &lt;/body&gt; tag and after the table data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.BodyStart">
            <summary>
            Extra strings to be added after the opening &lt;body&gt; tag and before the table data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.HeadEnd">
            <summary>
            Extra strings to be added before the closing &lt;/head&gt; tag.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.HeadStart">
            <summary>
            Extra strings to be added after the opening &lt;head&gt; tag.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.Meta">
            <summary>
            Extra strings to be added in the meta section of the header. You could specify keywords here, for example.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.PrintAreaSeparator">
            <summary>
            Extra strings to be added after each section of a non-contiguous print area has been exported.
            Note that normally print areas are square, and in that case this property has no effect. This property
            only works when the print area has more than one section.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.Title">
            <summary>
            Title of the HTML file. If left null, the title of the page will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.THtmlImageFormat">
            <summary>
            Possible values in which we can save an image when exporting to HTML.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.THtmlImageFormat.Gif">
            <summary>
            Save image as GIF. Image will be converted to 256 colors.
            </summary>
        </member>
        <member name="F:FlexCel.Render.THtmlImageFormat.Jpeg">
            <summary>
            Save image as JPEG. Note that transparency is not supported in JPEG.
            </summary>
        </member>
        <member name="F:FlexCel.Render.THtmlImageFormat.Png">
            <summary>
            Save image as PNG. Note that transparency in PNG is not supported in ie6 unless you apply a fix.
            </summary>
        </member>
        <member name="F:FlexCel.Render.THtmlImageFormat.Svg">
            <summary>
            Save image as SVG. SVG is a vectorial format supported by most modern browsers, and it allows
            smooth scaling of charts or autoshapes when zooming in high-dpi/retina devices.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TImgExportInfo">
            <summary>
            Holds information needed to export the pages, so it is only calculated once.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.TImgExportInfo">
            <summary>
            Creates a new TImgExportInfo. You shouldn't need to create instances of this directly.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.ActiveSheet">
            <summary>
            TImageInfo for the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TImgExportInfo.Clone(FlexCel.Render.TImgExportInfo)">
            <param name="source" />
            <summary>
            Returns a deep copy of a TImgExportInfo. This method will work even if the source object is null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.CurrentPage">
            <summary>
            Last page printed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.CurrentSheet">
            <summary>
            Sheet that is being printed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.NextSheet">
            <summary>
            Sheet of the next page to print.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TImgExportInfo.Sheet(System.Int32)">
            <param name="index">Sheet on the list (1 based).</param>
            <summary>
            Returns the Image export info for one of the sheets.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.SheetCount">
            <summary>
            Return the count of the sheets on the workbook.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TImgExportInfo.TotalLogicalPages(System.Boolean)">
            <param name="ResetPageNumberOnEachSheet" />
            <summary>
            Returns the total count of pages if ResetPageNumberOnEachSheet is false, or the page number for the current sheet if true.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.TotalPages">
            <summary>
            Total pages to print for all the sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.TOneImgExportInfo">
            <summary>
            Holds information needed to export one of the workbook sheets, so it is only calculated once.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.TOneImgExportInfo">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Render.TOneImgExportInfo</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TOneImgExportInfo.Clone(FlexCel.Render.TOneImgExportInfo)">
            <param name="source" />
            <summary>
            Clones a TImageExportInfo even if it is null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.CurrentPage">
            <summary>
            Last page printed on this sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.CurrentPrintArea">
            <summary>
            Area that is currently being printed. A print area might consist in many independent areas.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PageBounds">
            <summary>
            Limits of the page in inches/100.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PagePrintRange">
            <summary>
            Range that has been printed. Note that before printing, the values here are invalid and you should use <see cref="P:FlexCel.Render.TOneImgExportInfo.PrintRanges" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PaintClipRect">
            <summary>
            Coordinates to print. One per every isolated range in the print area of the sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PrintRange">
            <summary>
            Range that will be printed. When the print area is composed of different non contiguous parts
            you should use <see cref="P:FlexCel.Render.TOneImgExportInfo.PrintRanges" /> to get all the parts.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PrintRanges">
            <summary>
            Range that will be printed.
            One per every isolated range in the print area of the sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.TotalPages">
            <summary>
            Total pages on the ActiveSheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.ZoomUsed">
            <summary>
            The final zoom that will be used in the sheet after applying print to fit or other factors.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Render.TPartialExportState">
            <summary>
            This class is used to save the needed information to partially export a file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.TPartialExportState(System.IO.TextWriter,System.String)">
            <param name="aCssData">TextWriter where an external CSS file will be stored. If null, no CSS file will be created, even when a link to a external file might.</param>
            <param name="aCssUrl">URL of the css file that will be linked to this file. If null, all css information will be stored inside the html file.</param>
            <summary>
            Creates a new instance of TPartialExportState.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TPartialExportState.BodyCount">
            <summary>
            Number of parts added to this object.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.EndHtmlFile(System.IO.TextWriter)">
            <param name="writer">TextWriter where we are going to save the results.</param>
            <summary>
            Writes the "&lt;/body&gt;" end tag in the html file and the head/html end tags. It also finalizes the parts when saving to MHTML.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.GetImage(System.Int32,System.Int32)">
            <param name="bodyIndex">Index of the document where you want to retrieve the images. (1 based)</param>
            <param name="imageIndex">Image index in the document. (1 based)</param>
            <summary>
            Returns one of the images for one of the saved sheets.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveBody(System.IO.TextWriter,System.Int32,System.String)">
            <param name="writer">Writer where you are going to write the information.</param>
            <param name="index">Index of the part that you wish to write. It must be 1 &lt;= index &lt;= <see cref="P:FlexCel.Render.TPartialExportState.BodyCount" /></param>
            <param name="relativeImagePath">Image path relative to the main file where the images will be saved. Note that this path 
            <b>does not apply to normal images.</b> This is used for example to save the rotated text as images if this option is enabled.</param>
            <summary>
            Use this method to output the body information on this object to an HTML page.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveCss(System.IO.TextWriter)">
            <param name="writer">Writer where you are going to write the information.</param>
            <summary>
            Use this method to output the CSS information on this object to the header of an HTML page. If you are using en external
            StyleSheet, this method will output a link to it, or if you are using an internal one it will output the actual classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveFullHeaders(System.IO.TextWriter,System.String)">
            <param name="writer">Writer where you are going to write the information.</param>
            <param name="htmlFileName">File name of the file you are generating. There is no need to supply this parameter, it is only to add extra
            information to the generated file. You can leave it null.</param>
            <summary>
            This method will output the full HTML headers needed to create an HTML file with the information in this object.
            If you wish to mix the output of the file with existing headers, you can use <see cref="M:FlexCel.Render.TPartialExportState.SaveRelevantHeaders(System.IO.TextWriter)" /> instead to get only
            the relevant information to mix in the headers, or <see cref="M:FlexCel.Render.TPartialExportState.SaveCss(System.IO.TextWriter)" /> to get only the CSS classes that need to be put in the header.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveRelevantHeaders(System.IO.TextWriter)">
            <param name="writer" />
            <summary>
            This method is a middle ground between <see cref="M:FlexCel.Render.TPartialExportState.SaveCss(System.IO.TextWriter)" /> and <see cref="M:FlexCel.Render.TPartialExportState.SaveFullHeaders(System.IO.TextWriter,System.String)" />.
            It will output only the headers that you need to add to an existing HTML file in order to include the body in the body part.
            This means that the tags like &lt;html&gt; are not included.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.StartBody(System.IO.TextWriter)">
            <param name="writer">TextWriter where we are going to save the results.</param>
            <summary>
            Starts writing a body declaration. After calling this method, you should call <see cref="M:FlexCel.Render.TPartialExportState.SaveBody(System.IO.TextWriter,System.Int32,System.String)" /> for the
            parts you want to save, and end up with a call to <see cref="M:FlexCel.Render.TPartialExportState.EndHtmlFile(System.IO.TextWriter)" /></summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.TSheetSelector">
            <summary>
            Abstract class to implement a Sheet Selector. Derive from this class for example to implement
            tabs with images. For a standard implementation using CSS Tabs and divs, use <see cref="T:FlexCel.Render.TStandardSheetSelector" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.TSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <param name="position">Position where the Sheet selector will be placed. Remember you can 'or' together many values
            on the enumeration to for example have a selector at the top and at the bottom.</param>
            <summary>
            Contructs a new TSheetSelector instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.AfterDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <param name="Reference">The position of the SheetSelector that is being created. 
            you can use <see cref="P:FlexCel.Render.TSheetSelector.SheetSelectorPosition" /> to know if this is one of the selectors you need to render.</param>
            <summary>
            Use this method to customize actions to do before the SheetSelector is drawn. 
            In the <see cref="T:FlexCel.Render.TStandardSheetSelector" /> implementation, this method is used to add a table for layout
            if <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable" /> is true.
            Note that this method is called once for each of the possible positions of Reference, even if you do not need to draw a selector in that position.
            The order in which this method will be called is: Top, Left, Right, Bottom.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <param name="Reference">The position of the SheetSelector that is being created. 
            you can use <see cref="P:FlexCel.Render.TSheetSelector.SheetSelectorPosition" /> to know if this is one of the selectors you need to render.</param>
            <summary>
            Use this method to customize actions to do after the SheetSelector is drawn. 
            In the <see cref="T:FlexCel.Render.TStandardSheetSelector" /> implementation, this method is used to add a table for layout
            if <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable" /> is true.
            Note that this method is called once for each of the possible positions of Reference, even if you do not need to draw a selector in that position.
            The order in which this method will be called is: Top, Left, Right, Bottom.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.DrawOneSheetSelector(FlexCel.Core.ExcelFile,FlexCel.Render.TSheetSelectorPosition)">
            <param name="xls">ExcelFile we are exporting. It is positioned on the sheet we are exporting, but its active sheet can be changed on this method
            and there is no need to restore it. It will be restored by the framework.</param>
            <param name="Position">Position where the sheet selector will be placed. Note that this method will always
            be called with only one value, but it might be called more than once if constants in the TSheetSelectorPosition enumeration are
            or'ed together.</param>
            <summary>
            Override this method on a child class if you want to completely customize how the Sheet Selector is drawn.
            Normally when deriving from <see cref="T:FlexCel.Render.TStandardSheetSelector" /> you can just change the CSS properties of this class to customize the SheetSelector, but you can use this if you want to 
            provide a completely different selector. You can use the <see cref="P:FlexCel.Render.TSheetSelector.Links" /> collection to know which hyperlinks to place in each place.
            Note that different from <see cref="M:FlexCel.Render.TSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)" />, this method is <b>only</b> called for the positions where the selector has to be rendered.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.EncodeAsHtml(System.String)">
            <param name="s">String that you want to encode.</param>
            <summary>
            This method will encode an string so it is valid html. For example, it will replace "&amp;" by "&amp;amp;" in the text.
            </summary>
            <returns>Encoded string.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TSheetSelector.Links">
            <summary>
            A list of links that should go in the sheet selector, one per tab. Use them when creating your
            own sheet selector to know where to point the link in the tabs to.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TSheetSelector.SheetSelectorPosition">
            <summary>
            An enumerator defining all the positions where the SheetSelector will be drawn.Read it to know where to draw the selector.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.WriteCssClasses">
            <summary>
            This method is in charge of writing the style definitions in the header of the html file.
            Note that when deriving from <see cref="T:FlexCel.Render.TStandardSheetSelector" /> you normally do not need to override this method, you can just change the CSS properties of this class.
            You can override this method if you want full control on how to export the classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.WriteLn(System.String)">
            <param name="s" />
            <summary>
            Use this method to write a line inside the stream when overriding this class.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.TSheetSelectorPosition">
            <summary>
            Where to place the tabs for selecting a sheet when exporting multiple sheets.
            You might combine more than one, for example, to have tabs at the top and bottom:
            C#: TSheetSelectorPosition.Top | TSheetSelectorPosition.Bottom
            VB.NET, Delphi.NET: TSheetSelectorPosition.Top or TSheetSelectorPosition.Bottom
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Bottom">
            <summary>
            Add the tabs at the bottom of the html document.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Left">
            <summary>
            Add the tabs at the left of the html document.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.None">
            <summary>
            Do not add tabs for the sheets.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Right">
            <summary>
            Add the tabs at the right of the html document.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Top">
            <summary>
            Add the tabs at the top of the html document.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TStandardSheetSelector">
            <summary>
            Implements a standard sheet selector (with CSS tabs) that will allow you to change the page when exporting multiple sheets.
            You can customize its default behavior by altering the CSS properties, or by inheriting from it and replacing the virtual methods.
            If you want to create a completely new type of sheet selector, derive it from <see cref="T:FlexCel.Render.TSheetSelector" /> instead of this class.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.TStandardSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <param name="position">Position where the Sheet selector will be placed. Remember you can 'or' together many values
            on the enumeration to for example have a selector at the top and at the bottom.</param>
            <summary>
            Contructs a new TStandardSheetSelector instance.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.AfterDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <param name="Reference" />
            <summary />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <param name="Reference" />
            <summary>
            This method is overriden to add a table for layout when <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable" /> is true.
            See the documentation in <see cref="M:FlexCel.Render.TSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)" /> for more information on this method.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssGeneral">
            <summary>
            Style to be applied to the selector. This is a general setting, you can later further customize the style when
            the selector is at the Left, Top, Right or Bottom with the corresponding <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenLeft" />, <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenTop" />, <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenRight" /> and <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenBottom" /> properties.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssStyleLayoutTable">
            <summary>
            Style to be applied to the layout table if <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable" /> is true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssStyleSheetContent">
            <summary>
            Style to be applied to the sheet content.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssTags">
            <summary>
            This property has a list of Macros that you can use in the CSS definitions. You can reference this value in the
            CSS properties by using &lt;#variable&gt;
            <p>For example, you could set a Macro "Mycolor" with CssTags.Add("mycolor", "red"); and then
            define a CssProperty: CssWhenTop.Main = "background-color:&lt;#mycolor&gt;";
            </p><p>This method by default contains the following Macros:
            <list type="bullet"><item>width: Width of the selector when it is on the right or on the left.</item><item>bordercolor: Color for the borders.</item><item>pagecolor: Color of the page. This is normally white, and will be used in the color of the
            active tab, so it blends with the page background.</item><item>activetabfg: Color for the text in the active tab. The default is black.</item><item>unselectedtabbg: Color for the background of the unselected tabs. The default is gray, so the active tab stands out.</item><item>unselectedtabfg: Color for the text in the unselected tabs.</item><item>hoverbg: Color for the unselected tab when you hover the mouse over it.</item><item>hoverfg: Color for the text of the unselected tab when you hover the mouse over it.</item></list></p><p>You can modify those Macros or add your own definitions here and use them when defining your CSS.</p><b>Note that the variables are not case sensitive. You can write them in any combination of lowercase and uppercase.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenBottom">
            <summary>
            Specific style to be applied to the selector when it goes at the bottom. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenLeft">
            <summary>
            Specific style to be applied to the selector when it goes at the left. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenRight">
            <summary>
            Specific style to be applied to the selector when it goes at the right. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenTop">
            <summary>
            Specific style to be applied to the selector when it goes at the top. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.DrawOneSheetSelector(FlexCel.Core.ExcelFile,FlexCel.Render.TSheetSelectorPosition)">
            <param name="xls">ExcelFile we are exporting. It is positioned on the sheet we are exporting, but its active sheet can be changed on this method
            and there is no need to restore it. It will be restored by the framework.</param>
            <param name="Position">Position where the sheet selector will be placed. Note that this method will always
            be called with only one value, but it might be called more than once if constants in the TSheetSelectorPosition enumeration are
            or'ed together.</param>
            <summary>
            This method overrides the abstract parent to provide a CSS implementation for tabs.
            Override this method on a child class if you want to completely customize how the Sheet Selector is drawn.
            Normally you can just change the CSS properties of this class to customize the SheetSelector, but you can use this if you want to 
            provide a completely different selector. You can use the <see cref="P:FlexCel.Render.TSheetSelector.Links" /> collection to know which hyperlinks to place in each place.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.LayoutTable">
            <summary>
            When this property is true (the default), both selectors at the left and at the right will be layed out in a table.
            This has the advantage that block will not wrap down when resizing the window. But if you would prefer not to use tables for layout,
            you can turn this property off, and the layout will be pure CSS (and it will wrap down when there is not enough space). 
            If you do not have a selector in the left or the right this property does nothing.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.OnSheetSelectorEntry(FlexCel.Render.SheetSelectorEntryEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of TStandardSheetSelector.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.ReplaceMacros(System.String)">
            <param name="s" />
            <summary>
            This is an utility method that will replace all the &lt;#...&gt; macros inside a tag by its values.
            Normally you do not need to call this method, since it is called automatically by <see cref="M:FlexCel.Render.TStandardSheetSelector.WriteOneCssRule(System.String,System.String,System.String)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="E:FlexCel.Render.TStandardSheetSelector.SheetSelectorEntry">
            <summary>
            Use this event to customize the text and link on the individual tabs. The tab style itself must be modified with the CSS properties.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.UseSheetTabColors">
            <summary>
            When true (the default) and the sheets have a tab color defined in Excel, FlexCel will use this color to render the sheet tabs.
            If false, the default tab color will be used. Note that if the sheets don't have a color defined in Excel, also the default tab color will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.WriteCssClasses">
            <summary>
            This method is in charge of writing the style definitions in the header of the html file.
            Note that you normally do not need to override this method, you can just change the CSS properties of this class.
            You can override this method if you want full control on how to export the classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.WriteOneCssClass(FlexCel.Render.TStandardSheetSelectorStyles,System.String)">
            <param name="Selector">Collection of rules to write.</param>
            <param name="subSelector">A string that will be added at the end of every rule name.</param>
            <summary>
            This method is an utility to write all the classes of an TStandardSheetSelectorStyles class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.WriteOneCssRule(System.String,System.String,System.String)">
            <param name="Selector">A string with the style for the class. It can contain Macros (&lt;#...&gt;) and they will be replaced when writing the rule.</param>
            <param name="Rule">Name of the rule.</param>
            <param name="SubSelector">A string to be added at the end of the rule name.</param>
            <summary>
            This method is an utility to write one rule in a TStandarSheetSelectorStyles class.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Render.TStandardSheetSelectorStyles">
            <summary>
            Holds the styles for one of the positions of a <see cref="T:FlexCel.Render.TStandardSheetSelector" />.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Render.TStandardSheetSelectorStyles">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Render.TStandardSheetSelectorStyles</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.ActiveTab">
            <summary>
            Style to be applied to the Active tab.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.ActiveText">
            <summary>
            Style to be applied to the text of the selected tab.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.Links">
            <summary>
            Style to be applied to the links in the unselected tabs. Note that the active tab does not have a link.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.List">
            <summary>
            Style of the list used for the different entries in the selector. this defaults to
            "list-style: none", but you can use something like "list-style: upper-roman inside" to for example place roman number on each text.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.Main">
            <summary>
            Style to be applied to the whole Selector.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.UnselectedTab">
            <summary>
            Style to be applied to a tab when it is not the Active one.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.UnselectedTabHover">
            <summary>
            Style to be applied to an unselected tab when you hover the mouse over it.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.ApplyFormatTagEnum">
            <summary>
            Configuration strings used in applying a part of a format. Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.All">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Background">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BackgroundColor">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BackgroundPattern">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Border">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderBottom">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderExterior">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderLeft">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderRight">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderTop">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Font">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontColor">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontFamily">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontSize">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontStyle">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontUnderline">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Hidden">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Locked">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.NumericFormat">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Rotation">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.ShrinkToFit">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextAlign">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextAlignHoriz">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextAlignVert">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextIndent">
            <summary />
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextWrap">
            <summary />
        </member>
        <member name="T:FlexCel.Report.ConfigTagEnum">
            <summary>
            Configuration strings. Internal use.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.AtLeast">
            <summary>
            A table that has at least N rows.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Columns">
            <summary>
            A table with the columns of other table.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Distinct">
            <summary>
            Distinct filter.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Join">
            <summary>
            A table generated from joining the columns of multiple tables.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.NRows">
            <summary>
            An empty table with n rows.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Relationship">
            <summary>
            Relationship tag.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Split">
            <summary>
            Split Tag on config sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.SQL">
            <summary>
            SQL tag.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.SQLParam">
            <summary>
            Identifier for sql parameters on the config sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Top">
            <summary>
            Top n records in a dataset.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Union">
            <summary>
            A table generated by adding the rows of multiple tables.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.UserTable">
            <summary>
            User table tag on config sheet.
            </summary>
        </member>
        <member name="T:FlexCel.Report.FlexCelReport">
            <summary>
            Component for creating reports on Excel based on a template. It will read an xls file, replace tags with data read from
            a database or memory, and save a new file with the data.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.FlexCelReport">
            <summary>
            Creates a new FlexCelReport component.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.FlexCelReport(System.Boolean)">
            <param name="aAllowOverwritingFiles">If false, FlexCelReport will never overwrite an existing file, and you have to delete it before creating it again.</param>
            <summary>
            Creates a new FlexCelReport component and sets the desired Overwrite mode for files. <seealso cref="P:FlexCel.Report.FlexCelReport.AllowOverwritingFiles" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddConnection(System.String,System.Data.IDbDataAdapter,System.Globalization.CultureInfo)">
            <param name="connectionName">This is the name you will use on the template to refer to this adapter.</param>
            <param name="adapter">The adapter that will be used.</param>
            <param name="locale">The locale for the created tables.</param>
            <summary>
            Adds an adapter to use from the template on the DIRECT SQL commands.
            <b>For security reasons, make sure this adapter ONLY GRANTS READONLY ACCESS TO THE DATA</b></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddConnection(System.String,System.Data.IDbDataAdapter,System.Globalization.CultureInfo,System.Boolean)">
            <param name="connectionName">This is the name you will use on the template to refer to this adapter.</param>
            <param name="adapter">The adapter that will be used.</param>
            <param name="locale">The locale for the created tables.</param>
            <param name="caseSensitive">When true strings will be case sensitive, and "a" will be different from "A"</param>
            <summary>
            Adds an adapter to use from the template on the DIRECT SQL commands.
            <b>For security reasons, make sure this adapter ONLY GRANTS READONLY ACCESS TO THE DATA</b></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddRelationship(System.String,System.String,System.String,System.String)">
            <param name="masterTable">Master table for the relationship.</param>
            <param name="detailTable">Detail table for the relationship.</param>
            <param name="masterKeyFields">Key fields in the master table that relate with the key fields in the detail table.
            Must not be null, and normally will be an array with a single field. It must be the same length as detailKeyFields/&gt;</param>
            <param name="detailKeyFields">Key fields in the detail table that relate with the key fields in the master table.
            Must not be null, and normally will be an array with a single field.</param>
            <summary>
            Adds a relationship between two tables. Note that if your tables are datasets, or come from Entity Framework,
            or your master detail tables are nested, you probably don't need to call this method. FlexCel will detect the relationships automatically
            and use them. This method is only for when you have custom data with no DataRelationships (as in a dataset) and where detail
            tables are not nested to the master (as in Entity Framework).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddRelationship(System.String,System.String,System.String[],System.String[])">
            <param name="masterTable">Master table for the relationship.</param>
            <param name="detailTable">Detail table for the relationship.</param>
            <param name="masterKeyFields">Key fields in the master table that relate with the key fields in the detail table.
            Must not be null, and normally will be an array with a single field. It must be the same length as detailKeyFields/&gt;</param>
            <param name="detailKeyFields">Key fields in the detail table that relate with the key fields in the master table.
            Must not be null, and normally will be an array with a single field.</param>
            <summary>
            Adds a relationship between two tables. Note that if your tables are datasets, or come from Entity Framework,
            or your master detail tables are nested, you probably don't need to call this method. FlexCel will detect the relationships automatically
            and use them. This method is only for when you have custom data with no DataRelationships (as in a dataset) and where detail
            tables are not nested to the master (as in Entity Framework).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddSqlParameter(System.String,System.Data.IDbDataParameter)">
            <param name="parameterName">The name of the parameter without special symbols, as it is written
            on the DIRECT SQL string. This might be different from the real parameter name.
            For example, on SQL Server, parameterName might be "MyParameter" while
            parameter.ParameterName would be "@MyParameter"</param>
            <param name="parameter">The parameter to add.</param>
            <summary>
            Adds an SQL parameter to use from the template on the DIRECT SQL commands.
            Note that the parameter must have a name even if you are using
            positional parameters ("?") because on the template you should always write 
            named parameters.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.Data.DataSet)">
            <param name="tables">Dataset containing the tables to add.</param>
            <summary>
            Use this method to load all tables on a dataset at once. This is equivalent to calling <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)" />
            for each of the tables on the dataset.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.Data.DataSet,FlexCel.Report.TDisposeMode)">
            <param name="tables">Dataset containing the tables to add.</param>
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this dataset after running the report. Use it when adding datasets created on the fly, so you do not have to dispose them yourself.</param>
            <summary>
             Use this method to load all tables on a dataset at once. When disposeMode is DoNotDispose, this is equivalent to calling <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)" />
             for each of the tables on the dataset. If disposeMode is DisposeTable, this will make the same as calling AddTable() with disposeTable equal to false for
             each table on the dataset. And when finished all the dataset will be disposed.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,FlexCel.Report.VirtualDataTable)">
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available in the report.</param>
            <summary>
            Use this method to add any custom object as a datasource for FlexCel. Make sure to read "Virtual Datasets" on UsingFlexCelReports.pdf.
            Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)" /> to add datasets.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)">
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available to the report.</param>
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report. <b>Note: </b> If you don't know the tables before 
            running the report (and you are not using User Tables or Direct SQL) you can use the <see cref="E:FlexCel.Report.FlexCelReport.LoadTable" /> event to load them in demand instead of using AddTable.
            This way you will only load the tables you need.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataView)">
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available to the report.</param>
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report. <b>Note: </b> If you don't know the tables before 
            running the report (and you are not using User Tables or Direct SQL) you can use the <see cref="E:FlexCel.Report.FlexCelReport.LoadTable" /> event to load them in demand instead of using AddTable.
            This way you will only load the tables you need.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,FlexCel.Report.VirtualDataTable,FlexCel.Report.TDisposeMode)">
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available in the report.</param>
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this table after running the report. Use it when adding tables created on the fly, so you do not have to dispose them yourself.</param>
            <summary>
             Use this method to add any custom object as a datasource for FlexCel. Make sure to read "Virtual Datasets" on UsingFlexCelReports.pdf.
             Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)" /> to add datasets.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable,FlexCel.Report.TDisposeMode)">
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available to the report.</param>
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this table after running the report. Use it when adding tables created on the fly, so you do not have to dispose them yourself.
            </param>
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report. <b>Note: </b> If you don't know the tables before 
            running the report (and you are not using User Tables or Direct SQL) you can use the <see cref="E:FlexCel.Report.FlexCelReport.LoadTable" /> event to load them in demand instead of using AddTable.
            This way you will only load the tables you need.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataView,FlexCel.Report.TDisposeMode)">
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available to the report.</param>
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this table after running the report. Use it when adding tables created on the fly, so you do not have to dispose them yourself.
            </param>
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report. <b>Note: </b> If you don't know the tables before 
            running the report (and you are not using User Tables or Direct SQL) you can use the <see cref="E:FlexCel.Report.FlexCelReport.LoadTable" /> event to load them in demand instead of using AddTable.
            This way you will only load the tables you need.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="T">
                <markup>
                    <include item="SMCMissingParamTag">
                        <parameter>typeparam</parameter>
                        <parameter>T</parameter>
                        <parameter>M:FlexCel.Report.FlexCelReport.AddTable``1(System.String,System.Collections.Generic.IEnumerable{``0})</parameter>
                    </include>
                </markup>
            </typeparam>
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available in the report.</param>
            <summary>
            Use this method to add any IEnumerable as a datasource for FlexCel. You can use this method
            to add LINQ tables.
            Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)" /> to add datasets.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable``1(System.String,System.Collections.Generic.IEnumerable{``0},FlexCel.Report.TDisposeMode)">
            <typeparam name="T">
                <markup>
                    <include item="SMCMissingParamTag">
                        <parameter>typeparam</parameter>
                        <parameter>T</parameter>
                        <parameter>M:FlexCel.Report.FlexCelReport.AddTable``1(System.String,System.Collections.Generic.IEnumerable{``0},FlexCel.Report.TDisposeMode)</parameter>
                    </include>
                </markup>
            </typeparam>
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available in the report.</param>
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this table after running the report. Use it when adding tables created on the fly, so you do not have to dispose them yourself.</param>
            <summary>
             Use this method to add any IEnumerable as a datasource for FlexCel. You can use this method
             to add LINQ tables.
             Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)" /> to add datasets.
             </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.AfterGenerateSheet">
            <summary>
            Fires After each sheet on the file is generated.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.AfterGenerateWorkbook">
            <summary>
            Fires After the report has been fully generated but is not saved.
            Allows to do last clean up things before saving the report.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing files or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.BeforeGenerateSheet">
            <summary>
            Fires Before each sheet on the file is generated.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.BeforeGenerateWorkbook">
            <summary>
            Fires before starting to generate the report but after the template has been loaded.
            It allows to do some in-place modifications to the template before generating the report.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.BeforeReadTemplate">
            <summary>
            Fires before starting to generate the report and before the template has been loaded.
            It allows to set the template password if you are using one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Cancel">
            <summary>
            Cancels a running report. This method is equivalent to setting <see cref="P:FlexCel.Report.FlexCelReport.Canceled" /> = true.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.Canceled">
            <summary>
            If true the report has been canceled with <see cref="M:FlexCel.Report.FlexCelReport.Cancel" /> method.
            You can't set this variable to false, and setting it true is the same as calling <see cref="M:FlexCel.Report.FlexCelReport.Cancel" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearConnections">
            <summary>
            Clear the collection of connections available to the report. Use <see cref="M:FlexCel.Report.FlexCelReport.AddConnection(System.String,System.Data.IDbDataAdapter,System.Globalization.CultureInfo,System.Boolean)" /> to add new connections to it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearExpressions">
            <summary>
            Destroys all user-defined expressions on the report. To add new expressions, use <see cref="M:FlexCel.Report.FlexCelReport.SetExpression(System.String,System.Object)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearParameters">
            <summary>
            Clear the collection of SQL parameters available to the report. Use <see cref="M:FlexCel.Report.FlexCelReport.AddSqlParameter(System.String,System.Data.IDbDataParameter)" /> to add new parameters to it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearRelationships">
            <summary>
            Clears all relationships added by <see cref="M:FlexCel.Report.FlexCelReport.AddRelationship(System.String,System.String,System.String,System.String)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearTables">
            <summary>
            Clear the collection of tables available to the report. Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.Data.DataSet)" /> to add new tables to it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearUserFunctions">
            <summary>
            Destroys all user defined functions on the report. To add new functions, use <see cref="M:FlexCel.Report.FlexCelReport.SetUserFunction(System.String,FlexCel.Report.TFlexCelUserFunction)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearValues">
            <summary>
            Destroys all variables on the report. To add new variables, use <see cref="M:FlexCel.Report.FlexCelReport.SetValue(System.String,System.Object)" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.DebugExpressions">
            <summary>
            Set this value to true if you want to analyze how FlexCel is evaluating the tags in a file. When true, a full stack
            trace will be written in the cell instead of the tag values. See the section on Debugging reports in the "Using FlexCel Reports (Designing Templates)" for
            information on how to use those stack traces.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.DeleteEmptyBands">
            <summary>
            Determines if FlexCel will delete or just clear ranges with empty datasets (0 records). 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.DeleteEmptyRanges">
            <summary>
            This property is obsolete. Use DeleteEmptyBands instead. Determines if FlexCel will delete or just clear ranges with empty datasets (0 records). 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.DisableSQLValidation">
            <summary>
            If false (the default) FlexCelReport will only allow DirectSQL queries that begin with "SELECT", to avoid people doing inserts
            or deletes from the config sheet.
            If true, FlexCelReport will pass the DirectSQL queries you write in the config sheet directly to the server.
            <b>Caution:</b> Setting this property to true might have security implications. Take a look at the remarks.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary>
            Override this instance when creating descendants of FlexCelReport.
            Remember to always call base.Dispose(disposing).
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.EnterFormulas">
            <summary>
            When true, FlexCel will try to enter any string starting with "=" as a formula instead of text. 
            If this property is true, any string you enter that starts with "=" must be a valid formula, or an error will be raised.
            When you know a priori which cells will have formulas, you might want to use the &lt;#formula&gt; tag instead.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.ErrorActions">
            <summary>
            Determines if FlexCel will throw Exceptions or just ignore errors on specific situations. When the errors are ignored, they will
            be logged into the <see cref="T:FlexCel.Core.FlexCelTrace" /> class.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.ErrorsInResultFile">
            <summary>
            When true and there is an error reading cells in the template or writing the cells in the report, the
            error message will be written in the corresponding cell on the generated report. No Exception will be thrown.
            <br />You can use this property to <b>DEBUG</b> reports, as it provides an easy
            way to see all errors at once in the place they are produced. But is it recommended that you leave this property <b>FALSE</b> in production, 
            or you could create xls files with error messages inside. See also <see cref="P:FlexCel.Report.FlexCelReport.DebugExpressions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.GetImageData">
            <summary>
            Fires before an image is saved to the report.
            Use it if the image is on a proprietary format on the database, to return a format FlexCel can understand.
            </summary>
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.GetInclude">
            <summary>
            Fires before including a file with &lt;#include&gt;.
            Use it if you want to provide an alternative path for the file, of if you want to read the include
            file from a different place, for example a database or an embedded resource.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.GetTable(System.String)">
            <param name="tableName">Name of the table to retrieve.</param>
            <summary>
            Returns the VirtualDataTable with the specified name that was added to the report.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.HtmlMode">
            <summary>
            When true, FlexCel will interpret the text as HTML, and honor the tags that it can understand.
            Note that when in HtmlMode, many consecutive spaces will be interpreted as one, and carriage returns
            will be interpreted as spaces. To enter real carriage returns you need to enter a &lt;br&gt; tag (unless the text is inside &lt;pre&gt; tags). 
            Also &amp; symbols need to be escaped. For more info on HTML syntax supported, see <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)" /><br />Note that the &lt;#HTML&gt; tag can overwrite the Html behavior on a cell by cell basis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.LoadTable">
            <summary>
            Fires whenever an undefined table is called, allowing to load your own datasets in demand to the report. For more control, you might use User Tables. Look at the example for more information.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnAfterGenerateSheet(FlexCel.Report.GenerateEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateSheet" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnAfterGenerateWorkbook(FlexCel.Report.GenerateEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateWorkbook" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnBeforeGenerateSheet(FlexCel.Report.GenerateEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateSheet" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnBeforeGenerateWorkbook(FlexCel.Report.GenerateEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateWorkbook" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnBeforeReadTemplate(FlexCel.Report.GenerateEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.BeforeReadTemplate" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnGetImageData(FlexCel.Report.GetImageDataEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.GetImageData" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnGetInclude(FlexCel.Report.GetIncludeEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.GetInclude" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnLoadTable(FlexCel.Report.LoadTableEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.LoadTable" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnUserTable(FlexCel.Report.UserTableEventArgs)">
            <param name="e" />
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.UserTable" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.Progress">
            <summary>
            Progress of the report. This variable must be accessed from other thread.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.RecalcMode">
            <summary>
            Determines if the report will be recalculated before saving.
            See <see cref="P:FlexCel.Core.ExcelFile.RecalcMode" /> for more info.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.RecalcVersion">
            <summary>
                <b>Before changing this property, look at <see cref="P:FlexCel.Core.ExcelFile.RecalcVersion" /></b> Determines if the formulas will be recalculated when Excel opens them.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.ResetCellSelections">
            <summary>
            When true, all sheets will selections will be reset to A1. This way, you do not need to care about setting the correct selection when editing the template.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Run(FlexCel.Core.ExcelFile)">
            <param name="aWorkbook">ExcelFile that contains the template file, and that will contain the generated file once this method runs.</param>
            <summary>
            Executes the report, reading from an ExcelFile and writing the results to it again.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Run(System.IO.Stream,System.IO.Stream)">
            <param name="templateStream">Stream with the template.</param>
            <param name="outStream">Stream where the result will be written.</param>
            <summary>
            Executes the report, reading from a stream and writing to a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Run(System.String,System.String)">
            <param name="templateFileName">File with the template to use.</param>
            <param name="outFileName">File to create.</param>
            <summary>
            Executes the report, reading from a file and writing to a file.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.SemiAbsoluteReferences">
            <summary>
            When this property is set to true, absolute references to cells inside bands being copied will be treated as relative.
            This way, if you have "=$A$1" inside a band and cell A1 is also inside the band, it will change to A2,A3..etc when the band is copied down. 
            This can be useful in a master-detail report, where you want the cells in the detail to point to a fixed cell inside every record of the master.
            See <see cref="P:FlexCel.Core.ExcelFile.SemiAbsoluteReferences" /> for more information.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.SetExpression(System.String,System.Object)">
            <param name="name">Name of the expression to set. Case insensitive.</param>
            <param name="value">Value of the expression.</param>
            <summary>
            Sets an user-defined expression to be used in the report. Different from <see cref="M:FlexCel.Report.FlexCelReport.SetValue(System.String,System.Object)" /> this method will evaluate the
            &lt;#tags&gt; in "value". This allows you to provide formula functionality to end users, and to reuse the same report for 
            different formulas.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.SetUserFunction(System.String,FlexCel.Report.TFlexCelUserFunction)">
            <param name="name">Name that the function will have on the report. Case insensitive.</param>
            <param name="functionImplementation">An implementation of the user function.</param>
            <summary>
            Adds a new user defined function to be used with the report. 
            For information on how to create the user function, see <see cref="T:FlexCel.Report.TFlexCelUserFunction" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.SetValue(System.String,System.Object)">
            <param name="name">Name of the variable to set. Case insensitive.</param>
            <param name="value">Value of the variable.</param>
            <summary>
            Sets a variable for the report. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.SqlParameterReplace">
            <summary>
            Format string for replacing the standard parameter names on DIRECT SQL commands. You can leave it empty for ODBC, OLEDB or SQLSERVER databases.
            See Also <see cref="P:FlexCel.Report.FlexCelReport.SqlParametersType" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.SqlParametersType">
            <summary>
            Type of parameters for the database. Positional parameters are the ones where you write 
            "?" on the sql, and positional are when you write a name, like "@employee" or ":orderid".
            See Also <see cref="P:FlexCel.Report.FlexCelReport.SqlParameterReplace" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.TryToConvertStrings">
            <summary>
            When true, FlexCel will try to convert strings to numbers or dates before entering them into the cells. 
            <b>USE THIS PROPERTY WITH CARE!</b>  You shouldn't normally need to use this property, since FlexCel automatically
            enters numbers or dates in the DataSets as number or dates in the Excel file. If you need to use this property,
            it means that data in your database is stored as strings when they should not be. So the correct fix is to fix the columns
            you know should have numbers to have numbers, NOT to use this property. This is just a workaround when you can't do anything else about it.<br />
            Note also that this method is not efficient since it has to "guess" what a string might be if anything, and it might be wrong.
            Also, it might have issues with locales: Does the string "1/2/2008" means January 2 or February 1? Depends on the locale.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.UseLegacyLookup">
            <summary>
            When true, FlexCel will use DataViews to do lookups in DataSets, instead of using its own internal lookup algorithm.
            Only set this property to true if you have legacy reports that break when you use the internal lookup algorithm, because they depended
            in bugs in the DataView lookup implementation. For all new code, keep this property false.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.UserTable">
            <summary>
            Fires on each &lt;#USER TABLE&gt; tag in the config sheet, allowing to add your own datasets to the report.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.FlexCelReportProgress">
            <summary>
            Indicates how much of the report has been generated.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReportProgress.Counter">
            <summary>
            A meaningless counter that is increased from time to time. It is not possible to know what is the final count.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReportProgress.Phase">
            <summary>
            Phase of the report.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.FlexCelReportProgress.Sheet">
            <summary>
            The Sheet we are working on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.FlexCelReportProgressPhase">
            <summary>
            Phase of the report we are in.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.CopyStructure">
            <summary>
            Inserting the needed rows/ranges for the report.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.Done">
            <summary>
            Report has finished.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.FillData">
            <summary>
            Replacing the tags with the new values.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.FinalCleanup">
            <summary>
            Fixing pagebreak or delete rows tags.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.NotRunning">
            <summary>
            Report is inactive.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.OrganizeData">
            <summary>
            Organizing the data on the template.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.ReadTemplate">
            <summary>
            Reading and parsing the template.
            </summary>
        </member>
        <member name="T:FlexCel.Report.GenerateEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateWorkbook" />, <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateWorkbook" />, <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateSheet" /> and <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateSheet" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.GenerateEventArgs(FlexCel.Core.ExcelFile)">
            <param name="aExcelFile">The file we are processing.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GenerateEventArgs.File">
            <summary>
            The file with the report data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.GenerateEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Generic delegate for After/Before generate events.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.GetImageDataEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.GetImageData" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.GetImageDataEventArgs(FlexCel.Core.ExcelFile,System.String,System.Byte[],System.Double,System.Double)">
            <param name="aExcelFile">The file we are processing.</param>
            <param name="aImageName">The name of the image on the Excel sheet. Use it to identify it.</param>
            <param name="aImageData">The image data.</param>
            <param name="aHeight">The height of the image in pixels. Change it to resize the image.</param>
            <param name="aWidth">The width of the image in pixels. Change it to resize the image.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.File">
            <summary>
            The file with the report data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.Height">
            <summary>
            The height of the image in pixels. Change it to resize the image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.ImageData">
            <summary>
            The data of the image. You can modify it to return another image format.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.ImageName">
            <summary>
            The name of the image on the Excel sheet. Use it to identify it.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.Width">
            <summary>
            The width of the image in pixels. Change it to resize the image.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.GetImageDataEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for GetImageData event.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.GetIncludeEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.GetInclude" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.GetIncludeEventArgs(FlexCel.Core.ExcelFile,System.String,System.Byte[])">
            <param name="aExcelFile">The ExcelFile that has the report doing the include.</param>
            <param name="aFileName">File that we are trying to include.</param>
            <param name="aIncludeData">The included file as an array of bytes. If you return null, the file will be searched on disk.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetIncludeEventArgs.File">
            <summary>
            The file with the report.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetIncludeEventArgs.FileName">
            <summary>
            File we are trying to include. you can modify it to point to other place. 
            If the including file is a real file (not an stream) and FileName is relative, it will be relative to the
            including file path.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.GetIncludeEventArgs.IncludeData">
            <summary>
            Here you can return the included file as an array of bytes.
            If you return null, the filename will be used to search for a file on the disk. 
            If the including file is a real file (not an stream) and FileName is relative, it will be relative to the
            including file path.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.GetIncludeEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for GetInclude event.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.ILinqDataTable">
            <summary>
            Interface for generic methods in ILinqDataTable.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.ILinqDataTable.FindOrigTableName">
            <summary>
            Returns the base table this one is created from. This is used in relationships, 
            to find out the relationships of the master table.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.ILinqDataTable.HasDetail(System.String)">
            <param name="dataTableName">Name for the linked datatable that we are searching for.</param>
            <summary>
            Returns true if the database has a linked datatable with name dataTableName.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.ILinqDataTableState">
            <summary>
            This interface is used by <see cref="T:FlexCel.Report.TLinqDataTableState`1" /> for calling generic methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.ILinqDataTableState.GetDetail``1(FlexCel.Report.TLinqDataTable{``0},System.Boolean@)">
            <typeparam name="Q" />
            <param name="Detail">Detail data table calling this method.</param>
            <param name="IsEmptyList">Return true if the enumerator has 0 records.</param>
            <summary>
            Returns a detail table. This is used in master-detail relationships to get the nested table for the detail band.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.LoadTableEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.LoadTable" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.LoadTableEventArgs(System.String)">
            <param name="aTableName">The table that needs to be loaded on demand.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.LoadTableEventArgs.TableName">
            <summary>
            The table that needs to be loaded on demand.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.LoadTableEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for LoadTable event.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.ReportTag">
            <summary>
            Tags used in reports.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColFull1">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColFull2">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColRange1">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColRange2">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.ReportTag.ConfigTag(FlexCel.Report.ConfigTagEnum)">
            <param name="tag" />
            <summary>Returns a particular configuration tag.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.ReportTag.ConfigTagParams(FlexCel.Report.ConfigTagEnum)">
            <param name="tag" />
            <summary>Returns the parameters for a particular configuration tag.</summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabFull1">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabFull2">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabRange1">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabRange2">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.DbSeparator">
            <summary>"."</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.InternalDB">
            <summary>"__##INT_RNAL_"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.KeepColsTogether">
            <summary>
            Named Range starting with KeepColumns_
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.KeepRowsTogether">
            <summary>
            Named Range starting with KeepRows_
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.ParamDelim">
            <summary>Function delimiter. (for example: "&lt;#if(xx ; yy ; zz)&gt;</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.RelationshipSeparator">
            <summary>"-&gt;"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowFull1">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowFull2">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowRange1">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowRange2">
            <summary>Range delimiter.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggAvg">
            <summary>"Avg"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggMax">
            <summary>"Max"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggMin">
            <summary>"Min"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggSum">
            <summary>"Sum"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignBottom">
            <summary>"Bottom"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignCenter">
            <summary>"Center"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignLeft">
            <summary>"LEFT"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignRight">
            <summary>"Right"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignTop">
            <summary>"Top"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofit">
            <summary>"Autofit"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitModeBalanced">
            <summary>"Balanced"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitModeFirst">
            <summary>"First"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitModeLast">
            <summary>"Last"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitModeNone">
            <summary>"None"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitOff">
            <summary>"Selected"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitOn">
            <summary>"All"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrClose">
            <summary>Close a Tag.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCloseHLink">
            <summary>Close an Hyperlink Tag. As we can't use # on hyperlink texts, this gives an alternative.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCloseParen">
            <summary>Close Parenthesis.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrConfigSheet">
            <summary>CONFIG</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCopyCols">
            <summary>"C"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCopyRows">
            <summary>"R"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCopyRowsAndCols">
            <summary>"RC"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDebug">
            <summary>DEBUG</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDefinedGlobal">
            <summary>"Global"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDefinedLocal">
            <summary>"Local"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDeleteLastRow">
            <summary>"X"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontGrow">
            <summary>"DontGrow"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontInsertRanges">
            <summary>"FIXED"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontKeepAutofit">
            <summary>"Fixed"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontShrink">
            <summary>"DontShrink"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDynamicInclude">
            <summary>"Dynamic"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrEndKeepTogether">
            <summary>
            End of tag for keeprowstogether and keepcolstogether
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrEqual">
            <summary>=</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrErrorsInResultFile">
            <summary>ERRORSINRESULTFILE</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrExcludeSheet">
            <summary>"."</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrFullDelete">
            <summary>"Full"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrFullDs">
            <summary>"*"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrFullDsCaptions">
            <summary>"**"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrHide">
            <summary>"Hide"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrInCol">
            <summary>"InCol"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrInRow">
            <summary>"InRow"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrKeepAutofit">
            <summary>"Keep"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpen">
            <summary>Open a Tag.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpenHLink">
            <summary>**WARNING**Excel2003 does not let you write this either on hyperlinks, so use StrOpenHLink2.
            Open an Hyperlink Tag. As we can't use # on hyperlink texts, this gives an alternative.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpenHLink2">
            <summary>Open an Hyperlink Tag. As we can't use # on hyperlink texts, this gives an alternative.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpenParen">
            <summary>Open Parenthesis.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrQuote">
            <summary>Quote.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrRelativeDelete">
            <summary>"Relative"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrRowCountColumn">
            <summary>"#RecordCount"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrRowPosColumn">
            <summary>"#RecordPos"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrShow">
            <summary>"Show"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrStaticInclude">
            <summary>"Static"</summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.ReportTag.TagTableKeys">
            <summary>
            List of tag ids.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.ReportTag.TryGetTag(System.String,FlexCel.Report.TValueType@)">
            <param name="TagId" />
            <param name="ResultValue" />
            <summary>All available tags.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.ReportTag.TryGetTagParams(System.String,System.Int32@)">
            <param name="key" />
            <param name="ResultValue" />
            <summary>Number of params for all available tags.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TAggregateType">
            <summary>
            Enumeration with the different kind of aggratations that can be done in a FlexCelReport.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.TAggregateType.Average">
            <summary>
            Average all values.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TAggregateType.Max">
            <summary>
            Max of all values.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TAggregateType.Min">
            <summary>
            Minimum of all values.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TAggregateType.Sum">
            <summary>
            Sum all values.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TDeleteEmptyBands">
            <summary>
            Defines how bands will be removed when they have 0 records.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.TDeleteEmptyBands.ClearDataAndFormats">
            <summary>
            The cells in the sheet won't move, but all data and formats in the cells will be cleared.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TDeleteEmptyBands.ClearDataOnly">
            <summary>
            The cells in the sheet won't move, but the data in the cells will be cleared. Formats of the cell will remain.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TDeleteEmptyBands.MoveRangeUp">
            <summary>
            All the sheet will be moved up, and the rows of the band will disappear.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TDisposeMode">
            <summary>
            Indicates if FlexCel must dispose a table after it is done using it.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.TDisposeMode.DisposeAfterRun">
            <summary>
            FlexCel will dispose this table after it has finish using it. Use this option when adding temporary datasets, so you do not have to take care of disposing
            the table yourself.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TDisposeMode.DoNotDispose">
            <summary>
            FlexCel will not dispose the table. Use this option for example when adding a table that was created on the designer.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TErrorActions">
            <summary>
            Enumerates what to do on different FlexCel error situations.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.TErrorActions.ErrorOnTooManyPageBreaks">
            <summary>
            When true and the number of manual pagebreaks is bigger than the maximum Excel allows,
            an Exception will be raised. When false, the page break will be silently ommited.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TErrorActions.None">
            <summary>
            FlexCel will try to recover from most errors.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TFieldExpressions`1">
            <typeparam name="T" />
            <summary>
            A class to store compiled expressions to access fields in a <see cref="T:FlexCel.Report.TLinqDataTable`1" />. 
            This is faster than reading the field values with reflection. Field expressions will be created on demand,
            so if you never use a field, an expression for it won't be created.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TFieldExpressions`1(`0System`0.`0Reflection`0.`0PropertyInfo`0[])">
            <param name="aFields" />
            <summary>
            Creates a new instance and assigns it to an array of PropertyInfo. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TFieldExpressions`1.GetNestedProp(`0System`0.`0Reflection`0.`0PropertyInfo`0[])">
            <param name="Props" />
            <summary>
            Gets a compiled expression for a nested property
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TFieldExpressions`1.Item(`0System`0.`0Int32`0)">
            <param name="index" />
            <summary>
            Gets the compiled expression for the needed field.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TFlexCelUserFunction">
            <summary>
            A class used to define a FlexCel user function, that you can call from a report.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TFlexCelUserFunction">
            <summary>
                <markup>
                    <include item="SMCAutoDocConstructor">
                        <parameter>FlexCel.Report.TFlexCelUserFunction</parameter>
                    </include>
                </markup>
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TFlexCelUserFunction.Evaluate(System.Object[])">
            <param name="parameters">An array of objects.</param>
            <summary>
            Override this method on a derived class to implement your own defined function.
            </summary>
            <returns>The derived class should return the value of the function on the return parameter.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TLinqDataTable`1">
            <typeparam name="T">
                <markup>
                    <include item="SMCMissingParamTag">
                        <parameter>typeparam</parameter>
                        <parameter>T</parameter>
                        <parameter>T:FlexCel.Report.TLinqDataTable`1</parameter>
                    </include>
                </markup>
            </typeparam>
            <summary>
            An implementation of a VirtualDataTable using IEnumerator and Linq. 
            This class is abstract so to use it you should inherit from it and override the needed methods.
            In normal cases you won't need to override this class, as FlexCel already has an implementation of
            it that deals with IEnumerator tables. Inheriting from this class is only for very special cases.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TLinqDataTable`1(`0System`0.`0String`0,`0FlexCel`0.`0Report`0.`0VirtualDataTable`0,`0System`0.`0Linq`0.`0IQueryable`0{`0T`0})">
            <param name="aTableName">Name of the table that will be created.</param>
            <param name="aCreatedBy">Table that created this table (via a filter, distinct, etc), or null if this table wasn't created from another VirtualDataTable.</param>
            <param name="aData">Data. Can't be null in this particular constructor.</param>
            <summary>
            Creates a new table with "tablename" name and a source data.
            Data can't be null when using this constructor.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TLinqDataTable`1(`0System`0.`0String`0,`0FlexCel`0.`0Report`0.`0VirtualDataTable`0,`0System`0.`0Linq`0.`0IQueryable`0{`0T`0},`0FlexCel`0.`0Report`0.`0TLinqDataTable`0{`0T`0},`0System`0.`0String`0[])">
            <param name="aTableName">Name for the new table.</param>
            <param name="aCreatedBy">Table that created this table (via a filter, distinct, etc), or null if this table wasn't created from another VirtualDataTable.</param>
            <param name="aData">Data for the table. Might be null if in a master-detail relationship.</param>
            <param name="aOrigTable">Real table from where the data comes. We will use this to find the relationships.</param>
            <param name="aFilters">A string with all the filters that need to be applied to this table.</param>
            <summary>
            This constructor is used to create a nested detail table. Data might be null when calling this constructor
            when it will be read from the master table every time the master record changes.
            <b>IMPORTANT: When creating a descendant of this class, you always need to provide this constructor as it will
            be called automatically when creating filtered of detail tables.</b></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTable`1.ColumnCount">
            <summary>
            Returns the number of columns of the table.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.CreateNewDataTable(`0System`0.`0String`0,`0FlexCel`0.`0Report`0.`0VirtualDataTable`0,`0System`0.`0Linq`0.`0IQueryable`0{`0T`0},`0FlexCel`0.`0Report`0.`0TLinqDataTable`0{`0T`0},`0System`0.`0String`0[])">
            <param name="aTableName">Name for the new table.</param>
            <param name="aCreatedBy">Table that created this table (via a filter, distinct, etc), or null if this table wasn't created from another VirtualDataTable.</param>
            <param name="aData">Data for the table. Might be null if in a master detail relationship.</param>
            <param name="aOrigTable">Real table from where the data comes. We will use this to find the relationships.</param>
            <param name="aFilters">A string with all the filters that need to be applied to this table.</param>
            <summary>
            Override this method when inheriting from this class to return the correct object.
            To do so, you will need to create a constructor in your class with parameters (aTableName, aCreator, aOrigTable, aFilters),
            call the inherited constructor in this class with the same parameters, and then in this method create a new
            instance of your class with the above constructor. 
            </summary>
            <returns>A new instance of the class.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTable`1.Data">
            <summary>
            Data on this table. It might be null, if this table is linked to another.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.Dispose(`0System`0.`0Boolean`0)">
            <param name="disposing" />
            <summary>
            Override this method on derived classes.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTable`1.Fields">
            <summary>
            Field definitions.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.FilterData(`0System`0.`0String`0,`0System`0.`0String`0)">
            <param name="newDataName">How this new VirtualDataSet will be named. This is what the user wrote on the config sheet,
            when creating a filtered dataset. Note that as with all the VirtualDataSets, this name is meaningless except for error messages.</param>
            <param name="rowFilter">Filter for the new data. This can be null, an empty string, or whatever the user wrote on the "filter" column
            on the config sheet. Note that if the Filter is "distinct()" this method will not be called, but <see cref="M:FlexCel.Report.VirtualDataTable.GetDistinct(System.String,System.Int32[])" /> instead.
            This method will not be called if the filter is "Split()" either.</param>
            <summary>
            This method should return a new VirtualDataTable instance with the data filtered. If RowFilter is null,
            this method should return a copy of the dataset with a different name.
            Note that you might have the same data with different states, so this method might be called more than once.
            </summary>
            <returns>A new VirtualDataTable with the filtered data and the new name.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTable`1.Filters">
            <summary>
            An array of filter strings that must be applied to this dataset.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.FindOrigTableName">
            <summary>
            Original name of the table. This will be used in relationships.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.GetColumn(`0System`0.`0String`0)">
            <param name="columnName">Name of the column to search.</param>
            <summary>
            Returns a column indentifier that you can later use on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)" />. 
            Return -1 if the column does not exist, and make sure this search is case insensitive.
            </summary>
            <returns>Column identifier if found, -1 if not found.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.GetColumnCaption(`0System`0.`0Int32`0)">
            <param name="columnIndex">Column index returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the column caption for a column identifier. This method is used on generic dataset to write the header column.
            For most uses, <see cref="M:FlexCel.Report.VirtualDataTable.GetColumnName(System.Int32)" /> will be used.
            </summary>
            <returns>The name of the column at columnIndex. If the columnIndex is not valid it should throw an Exception, since
            this method will only be called for columnIndexes returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.GetColumnName(`0System`0.`0Int32`0)">
            <param name="columnIndex">Column index returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the column name for a column identifier. This method is the reverse of <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></summary>
            <returns>The name of the column at columnIndex. If the columnIndex is not valid it should throw an Exception, since
            this method will only be called for columnIndexes returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.GetDetail(`0System`0.`0String`0,`0FlexCel`0.`0Report`0.`0VirtualDataTable`0)">
            <param name="dataTableName">Name of the detail dataset we are looking for.</param>
            <param name="dataTable">Detail dataset that we are looking for.</param>
            <summary>
            Override this method if the table has linked tables that you can use for master detail relationships
            instead of normal relationships. This is the case for example in Entity Framework. 
            </summary>
            <returns>The dataset if it is a detail dataset, null otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.GetDistinct(`0System`0.`0String`0,`0System`0.`0Int32`0[])">
            <param name="newDataName">How this new VirtualDataSet will be named. This is what the user wrote on the config sheet,
            when creating the distinct dataset. Note that as with all the VirtualDataSets, this name is meaningless except for error messages.</param>
            <param name="filterFields">Fields where to apply the "distinct" condition.</param>
            <summary>
            Override this method to return a new VirtualDataSet with unique values.
            Note that the returned dataset will not have all the columns this one has, only the ones defined on "filterFields"
            </summary>
            <returns>A new VirtualDataTable with the filtered data and the new name.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.GetRelationWith(`0FlexCel`0.`0Report`0.`0VirtualDataTable`0)">
            <param name="aDetail">Detail table from where we want to get the relationship.</param>
            <summary>
            Override this method if the datatable has intrinsic relationships that you want to use.
            For example DataSets have DataRelationships, or Entity Framework tables are related as properties from the 
            master to the detail. All those relationships that are not explicitly defined in the report should be returned here.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTable`1.HasDetail(`0System`0.`0String`0)">
            <param name="dataTableName">Name for the linked datatable that we are searching for.</param>
            <summary>
            Returns true if the database has a linked datatable with name dataTableName.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTable`1.Locale">
            <summary>
            Locale for this dataset. This might be needed to create datatables with data and the same locale.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TLinqDataTableState`1">
            <typeparam name="T">Type of the object that will be enumerated.</typeparam>
            <summary>
            This class implements support for Linq queries in FlexCelReport. 
            Inherit this class if you want to implement some non-standard Linq query provider.
            For normal cases, you don't need to do anything since FlexCel already implements a descendant of this
            class with the default functionality.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TLinqDataTableState`1(`0FlexCel`0.`0Report`0.`0VirtualDataTable`0,`0System`0.`0Linq`0.`0IQueryable`0{`0T`0},`0FlexCel`0.`0Report`0.`0TLinqFieldDefinitions`0{`0T`0},`0System`0.`0String`0[],`0System`0.`0String`0,`0FlexCel`0.`0Report`0.`0TMasterDetailLink`0[],`0FlexCel`0.`0Report`0.`0TSplitLink`0)">
            <param name="aTableData" />
            <param name="aData" />
            <param name="aFields" />
            <param name="aFilters" />
            <param name="sort" />
            <param name="masterDetailLinks" />
            <param name="splitLink" />
            <summary>
            Creates a new LinqDataTableState.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTableState`1.Data">
            <summary>
            Data for the table. Note that this might change in a master-detail report, every time the master
            changes its active record, Data in the detail will change to the records for the master.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.Dispose(`0System`0.`0Boolean`0)">
            <param name="disposing" />
            <summary>
            Override this method on derived classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.Eof">
            <summary>
            Returns true when at the end of the table.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTableState`1.Fields">
            <summary>
            A list of then public fields in the datatype.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.FilteredRowCount(`0FlexCel`0.`0Report`0.`0TMasterDetailLink`0[])">
            <param name="masterDetailLinks">List of all the master tables that are related to this one.
            If there are no parents on this VirtualDataTableState, this will be an empty array, not null.
            </param>
            <summary>
            This method will be called when a Split master wants to know how many records its detail has. For example, if the detail has 30 records 
            and the split is at 10, the Split master will call this method to find out that it has to return 3 on its own record count.
            You need to filter the data here depending on the master detail relationships, but not on the splitLink.
            </summary>
            <returns>The count of records for a specific position of the master datasets.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTableState`1.Filters">
            <summary>
            A list of filter strings that must be applied to the data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.GetDetail``1(`0FlexCel`0.`0Report`0.`0TLinqDataTable`0{`0Q`0},`0System`0.`0Boolean`0@)">
            <typeparam name="Q">
                <markup>
                    <include item="SMCMissingParamTag">
                        <parameter>typeparam</parameter>
                        <parameter>Q</parameter>
                        <parameter>M:FlexCel.Report.TLinqDataTableState`1.GetDetail``1(FlexCel.Report.TLinqDataTable{``0},System.Boolean@)</parameter>
                    </include>
                </markup>
            </typeparam>
            <param name="Detail">Detail data table calling this method.</param>
            <param name="IsEmptyList">Return true if the enumerator has 0 records.</param>
            <summary>
            Returns a detail table. This is used in master-detail relationships to get the nested table for the detail band.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.GetFilterAction(`0System`0.`0String`0)">
            <param name="rowFilter">String with the filter as the user wrote it in the report.</param>
            <summary>
            This method returns a function that can be used to filter the data. This implementation
            calls <see cref="M:FlexCel.Report.TLinqDataTableState`1.SqlFilter(System.String)" /> when rowFilter starts with "@", or calls <see cref="M:FlexCel.Report.TLinqDataTableState`1.SimpleFilter(System.String)" /> when
            rowFilter doesn't start with "@". You might want to replace this method
            by a different one that filters in other way.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.GetValue(`0System`0.`0Int32`0)">
            <param name="column">Column identifier returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the value for row <see cref="P:FlexCel.Report.VirtualDataTableState.Position" />, at the column "column"
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.GetValue(`0System`0.`0Int32`0,`0System`0.`0Int32`0)">
            <param name="row">Row identifier (0 based)</param>
            <param name="column">Column identifier returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the value for row "row", at the column "column". You need to overload this method only if you want to support DBValue tag.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.MoveFirst">
            <summary>
            This method is called when we want to move to the first record. 
            You can always know the current record with <see cref="P:FlexCel.Report.VirtualDataTableState.Position" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.MoveMasterRecord(`0FlexCel`0.`0Report`0.`0TMasterDetailLink`0[],`0FlexCel`0.`0Report`0.`0TSplitLink`0)">
            <param name="masterDetailLinks">List of all the master tables that are related to this one.
            If there are no parents on this VirtualDataTableState, this will be an empty array, not null.
            Use it on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)" /> to filter the data and then return only the records that satisfy the master-detail relationships on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)" /></param>
            <param name="splitLink">Parent Split table if this dataset is on a Split relationship, or null if there is none.
            Use it to know how many records you should retun on <see cref="P:FlexCel.Report.VirtualDataTableState.RowCount" />. Note that a table might be on Master-Detail relationship 
            *and* split relationship. In this case you need to first filter the records that are on the master detail relationship, and then apply the split to them.
            </param>
            <summary>
            This method will be called each time that the master datasource moves its position. Use it to filter the data returned
            if this is used on a master-detail relationship.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.MoveNext">
            <summary>
            This method is called when we want to move to the next record.
            You can always know the current record with <see cref="P:FlexCel.Report.VirtualDataTableState.Position" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTableState`1.RowCount">
            <summary>
            Returns the number of rows available on the dataset, for the current state. Note that this method can be called many times, so it should be fast.
            Use a cache if necessary. Do *not* use something like "return select count(*) from table" here, it would be too slow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.SimpleFilter(`0System`0.`0String`0)">
            <param name="rowFilter" />
            <summary>
            This method is called by <see cref="M:FlexCel.Report.TLinqDataTableState`1.GetFilterAction(System.String)" /> when the rowFilter doesn't start with "@".
            It will do a simple parse of the rowFilter string, allowing "AND" "OR" "()" and equality comparisons.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.SortData(`0System`0.`0String`0)">
            <param name="SortStr">Sort string the user wrote in the report.</param>
            <summary>
            Sorts the data according to SortStr.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.SortDataByField``1(`0System`0.`0Int32`0,`0System`0.`0Boolean`0,`0System`0.`0Boolean`0)">
            <typeparam name="Q" />
            <param name="SortField" />
            <param name="First" />
            <param name="Descending" />
            <summary>
            This method is used by the current <see cref="M:FlexCel.Report.TLinqDataTableState`1.SortData(System.String)" /> implementation, and it creates an expression to sort the data.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqDataTableState`1.SplitLink">
            <summary>
            Split link.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.SqlFilter(`0System`0.`0String`0)">
            <param name="rowFilter" />
            <summary>
            This method is called by <see cref="M:FlexCel.Report.TLinqDataTableState`1.GetFilterAction(System.String)" /> when the rowFilter starts with "@". When overriding
            <see cref="M:FlexCel.Report.TLinqDataTableState`1.GetFilterAction(System.String)" /> you might want to call this method if rowfilter starts with "@".
            <br />
             This implementation
            tries to find a "Where(string)" method in the data and call it.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqDataTableState`1.TryAggregate(`0FlexCel`0.`0Report`0.`0TAggregateType`0,`0System`0.`0Int32`0,`0System`0.`0Nullable`0{`0System`0.`0Double`0}@)">
            <param name="aggregateType">Which operation to do on the dataset. (Max/Min/etc)</param>
            <param name="colIndex">Index of the field in which we want to aggregate.</param>
            <param name="resultValue">Returns the result of the operation in the dataset.</param>
            <summary>
            This method is used by the "AGGREGATE" tag in a FlexCel report to calculate the maximum/minimum/average/etc of 
            the values in the table. If you don't implement this method, FlexCel will still calculate those values by looping
            through the dataset, but if you have a faster way to do it (like with a "select max(field) from table") then implement this
            method and return true.
            </summary>
            <returns>True if this method is implemented, false if not. Note that even if we return false here,
            FlexCel will still calculate the aggregate by looping through all the records.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TLinqFieldDefinitions`1">
            <typeparam name="T">
                <markup>
                    <include item="SMCMissingParamTag">
                        <parameter>typeparam</parameter>
                        <parameter>T</parameter>
                        <parameter>T:FlexCel.Report.TLinqFieldDefinitions`1</parameter>
                    </include>
                </markup>
            </typeparam>
            <summary>
            Holds a list of field definitions, used to find the fields in classes available to the report.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TLinqFieldDefinitions`1">
            <summary>
            Creates and initializes all the fields in the class.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqFieldDefinitions`1.ColumnCount">
            <summary>
            Number of first-class fields in the class. (doesn't include nested ones like "Employee.Name")
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqFieldDefinitions`1.ContainsColumn(`0System`0.`0String`0)">
            <param name="columnName" />
            <summary>
            Returns true if the dataset contains a given column.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqFieldDefinitions`1.ExtraExpressions">
            <summary>
            Expressions added at runtime, to support nested properties like a.b.c
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqFieldDefinitions`1.ExtraFields">
            <summary>
            Definitions added on runtime, to support nested fields like Employee.Name
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqFieldDefinitions`1.FieldExpressions">
            <summary>
            A list of compiled field expressions that can be used to find the values of the fields without using reflection.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqFieldDefinitions`1.Fields">
            <summary>
            Type definitions for the properties of the class this table holds.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqFieldDefinitions`1.FieldsByName">
            <summary>
            A dictionary to find the field position in the <see cref="P:FlexCel.Report.TLinqFieldDefinitions`1.Fields" /> or <see cref="P:FlexCel.Report.TLinqFieldDefinitions`1.ExtraFields" /> array given its name.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqFieldDefinitions`1.GetColumn(`0System`0.`0String`0)">
            <param name="columnName">Column we are searching for.</param>
            <summary>
            Returns the index for a field given its name. Note that for nested fields, this number might be 
            bigger than <see cref="P:FlexCel.Report.TLinqFieldDefinitions`1.ColumnCount" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqFieldDefinitions`1.GetValue(`0T`0,`0System`0.`0Int32`0)">
            <param name="obj" />
            <param name="column" />
            <summary>
            Returns the value of the field for a given object. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLinqFieldDefinitions`1.Item(`0System`0.`0Int32`0)">
            <param name="index" />
            <summary>
            Returns the properties of the field at index.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLinqFieldDefinitions`1.TryGetColumn(`0System`0.`0String`0,`0System`0.`0Int32`0@)">
            <param name="columnName">Column we are searching for.</param>
            <param name="ResultValue">Index for the column.</param>
            <summary>
            Returns the index for a field given its name. Note that for nested fields, this number might be 
            bigger than <see cref="P:FlexCel.Report.TLinqFieldDefinitions`1.ColumnCount" /></summary>
            <returns>True if the column exists.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TLookupFieldDefinition">
            <summary>
            Encapsulates the data for a lookup tag in a report.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TLookupFieldDefinition(System.Int32[],System.Int32,System.String)">
            <param name="aKeyFields">A list of fields to be used in the key. The array will be copied so you can reuse it.</param>
            <param name="aResultField">The field to be returned from the lookup.</param>
            <param name="aOriginalKeyFieldsDefinition">The key fields definition as it is written in the lookup tag. You will normally not need this data.</param>
            <summary>
            Creates a new lookupfield definition. Fields will be copied.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLookupFieldDefinition.Equals(System.Object)">
            <param name="obj" />
            <summary>
            Returns true if both structs are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLookupFieldDefinition.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLookupFieldDefinition.KeyFields">
            <summary>
            The key fields in the lookup.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLookupFieldDefinition.op_Equality(FlexCel.Report.TLookupFieldDefinition,FlexCel.Report.TLookupFieldDefinition)">
            <param name="a1" />
            <param name="a2" />
            <summary>
            Returns true if both structs are the same.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TLookupFieldDefinition.op_Inequality(FlexCel.Report.TLookupFieldDefinition,FlexCel.Report.TLookupFieldDefinition)">
            <param name="a1" />
            <param name="a2" />
            <summary>
            Returns true if both structs are different.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLookupFieldDefinition.OriginalKeyFieldsDefinition">
            <summary>
            The key fields definition as it is written in the lookup tag. You will normally not need this data.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TLookupFieldDefinition.ResultField">
            <summary>
            The result field for the lookup.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TMasterDetailLink">
            <summary>
            A parent table and a parent field used on a master-detail relationship.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TMasterDetailLink(FlexCel.Report.VirtualDataTableState,System.Int32,System.String)">
            <param name="aParentDataSource">See <see cref="P:FlexCel.Report.TMasterDetailLink.ParentDataSource" /></param>
            <param name="aParentField">See <see cref="P:FlexCel.Report.TMasterDetailLink.ParentField" /></param>
            <param name="aChildFieldName">See <see cref="P:FlexCel.Report.TMasterDetailLink.ChildFieldName" /></param>
            <summary>
            Creates a new instance of TMasterDetailLink with the given values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TMasterDetailLink.ChildFieldName">
            <summary>
            Column name on the detail dataset that is related with <see cref="P:FlexCel.Report.TMasterDetailLink.ParentField" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TMasterDetailLink.ParentDataSource">
            <summary>
            A table that is acting as a master on a master detail relationship.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TMasterDetailLink.ParentField">
            <summary>
            Column index of the key that acts as primary key on the relationship.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TOneCellValue">
            <summary>
            A list of TOneSectionValue. Has a parsed version of what is on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TOneCellValue.Dispose">
            <summary>
            Frees the resources of the cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.TOneCellValue.Dispose(System.Boolean)">
            <param name="isDisposing" />
            <summary>
            Disposes the resources of the cell.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TRelation">
            <summary>
            A data relation between two tables. Different from standard .NET datarelations, this class is not tied
            to ADO.NET, and allows you to specify relationships between any arbitrary VirtualDataTable objects.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TRelation(FlexCel.Report.VirtualDataTable,FlexCel.Report.VirtualDataTable,System.Int32[],System.Int32[])">
            <param name="aParentTable">See <see cref="P:FlexCel.Report.TRelation.ParentTable" /></param>
            <param name="aChildTable">See <see cref="P:FlexCel.Report.TRelation.ChildTable" /></param>
            <param name="aParentColumns">See <see cref="P:FlexCel.Report.TRelation.ParentColumns" /></param>
            <param name="aChildColumns">See <see cref="P:FlexCel.Report.TRelation.ChildColumns" /></param>
            <summary>
            Creates a new relation with the given values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TRelation.ChildColumns">
            <summary>
            And array of colum indexes on the Detail table that are related to the master.
            ChildColumns[0] is related to ParentColumns[0], ChildColumns[1] to ParentColunns[1], and so on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TRelation.ChildTable">
            <summary>
            Table that acts as a detail on a Master-Detail relationship.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TRelation.ParentColumns">
            <summary>
            And array of colum indexes on the Master table that are related to the detail
            ChildColumns[0] is related to ParentColumns[0], ChildColumns[1] to ParentColunns[1], and so on.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TRelation.ParentTable">
            <summary>
            Table that acts as a master on a Master-Detail relationship.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TSplitLink">
            <summary>
            Specifies a "Split" relation between two tables.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.TSplitLink(FlexCel.Report.VirtualDataTableState,System.Int32)">
            <param name="aParentDataSource">See <see cref="P:FlexCel.Report.TSplitLink.ParentDataSource" /></param>
            <param name="aSplitCount">See <see cref="P:FlexCel.Report.TSplitLink.SplitCount" /></param>
            <summary>
            Create a new TSplitLink with the given values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TSplitLink.ParentDataSource">
            <summary>
            Table that acts as a parent on the split relationship. Read its <see cref="P:FlexCel.Report.VirtualDataTableState.Position" /> to know
            which group of splitted records to return.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.TSplitLink.SplitCount">
            <summary>
            Split the detail every "SplitCount" number of records. If for example Splitcount is 5 and 
            the detail table has 14 registers, it should be split as 5 records, 5 records, 4 records.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.TSqlParametersType">
            <summary>
            How the parameters for Direct SQL queries are.
            Change it only if your database uses positional parameters and it is
            not ODBC or OLEDB.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.TSqlParametersType.Automatic">
            <summary>
            FlexCel will try to guess the correct type.
            Currently it will return Positional for ODBC and OLEDB Parameters
            and Named for everything else.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TSqlParametersType.Named">
            <summary>
            Parameter is named. For example, "@param1" or ":Param2"
            </summary>
        </member>
        <member name="F:FlexCel.Report.TSqlParametersType.Positional">
            <summary>
            Name of parameter is not important, and we only care about position.
            For example "?"
            </summary>
        </member>
        <member name="T:FlexCel.Report.TValueType">
            <summary>
            All the things we can find on a cell.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.Report.TValueType.Aggregate">
            <summary>
            Does an operation like sum or average over a dataset.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Array">
            <summary>
            An array of values. Useful for example as the KeyValues argument of the Lookup field.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.AutofitSettings">
            <summary>
            Sets autofit settings for the whole sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.AutoPageBreaks">
            <summary>
            FlexCel should automatically calculate the page breaks in this sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ColumnWidth">
            <summary>
            Adjusts the column width to a specified value.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Comment">
            <summary>
            This one will not really be stored.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ConfigSheet">
            <summary>
            #Config
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Const">
            <summary>
            A constant value, like 2 or "a".
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DataSet">
            <summary>
            A value from a Dataset. This tag is written as "&lt;#DataTable.Column&gt;
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DbValue">
            <summary>
            Gets the value of a dataset given a row or a column.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Defined">
            <summary>
            Returns true if the expression is defined.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DefinedFormat">
            <summary>
            Returns true if the format is defined.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteCol">
            <summary>
            Delete Column
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteRange">
            <summary>
            #Delete Range
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteRow">
            <summary>
            #Delete row
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteSheet">
            <summary>
            A #Delete sheet
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Equal">
            <summary>
            A #= tag
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Evaluate">
            <summary>
            An expression that will be evaluated
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatCell">
            <summary>
            Format cell
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatCol">
            <summary>
            Format column
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatRange">
            <summary>
            Format range
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatRow">
            <summary>
            Format row
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Formula">
            <summary>
            The contents of this cell should be entered as formula.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FullDataSet">
            <summary>
            A dataset with "*"
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FullDataSetCaptions">
            <summary>
            Captions for a full dataset.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.HPageBreak">
            <summary>
            Horizontal page break
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Html">
            <summary>
            Defines if the cell has HTML formatted data or not.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.IF">
            <summary>
            An #IF construct
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.IFS">
            <summary>
            An #IFS construct
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgDelete">
            <summary>
            Only used inside images, to delete an image.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgFit">
            <summary>
            Only used inside images, to specify how to modify the containing cells to hold the image.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgPos">
            <summary>
            Only used inside images, to specify its position inside the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgSize">
            <summary>
            Only used inside images, to specify its zoom in % and its aspect ratio.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Include">
            <summary>
            An include Tag.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.List">
            <summary>
            Concatenates all values in a dataset as a list.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Lookup">
            <summary>
            A lookup field. Parameters are: DataBase, KeyFields, KeyValues, ResultField.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.MergeRange">
            <summary>
            A cell that will be merged.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Preprocess">
            <summary>
            An expression that will be pre evaluated and used to modify the template.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Property">
            <summary>
            A report variable, like &lt;#Variable&gt;
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Ref">
            <summary>
            The parameter is considered a reference and will be changed when copying the ranges.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Regex">
            <summary>
            A regular expression replace.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.RowHeight">
            <summary>
            Adjusts the row height to a specified value.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.SWITCH">
            <summary>
            A #SWITCH construct
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.VPageBreak">
            <summary>
            Vertical page break
            </summary>
        </member>
        <member name="T:FlexCel.Report.UserTableEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.UserTable" /></summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.UserTableEventArgs(System.String,System.String)">
            <param name="aTableName">The value written on the cell "Table name" on the config sheet. You can use it as an extra parameter.</param>
            <param name="aParameters">The parameters passed on the &lt;#User Table(parameters)&gt; tag.</param>
            <summary>
            Creates a new Argument.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.UserTableEventArgs.Parameters">
            <summary>
            The parameters on the &lt;#User Table(parameters)&gt; tag.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.UserTableEventArgs.TableName">
            <summary>
            The value written on the cell "Table name" on the config sheet. You can use it as an extra parameter.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.UserTableEventHandler">
            <param name="sender" />
            <param name="e" />
            <summary>
            Delegate for UserTable event.
            </summary>
            <remarks />
        </member>
        <member name="T:FlexCel.Report.VirtualDataTable">
            <summary>
            Base class for a table used on FlexCelReport.
            Inherit from this class and <see cref="T:FlexCel.Report.VirtualDataTableState" /> to create your custom sources of data.
            Make sure you read the documentation on <b>UsingFlexCelReports.pdf</b> for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.VirtualDataTable(System.String,FlexCel.Report.VirtualDataTable)">
            <param name="aTableName">Name for the virtual data table. Note that this name is *not* used anywhere in FlexCel code, except to report errors.
            The Table names that are used on reports are the ones in <see cref="T:FlexCel.Report.VirtualDataTableState" /></param>
            <param name="aCreatedBy">Table that created this table (via a filter, distinct, etc), or null if this table wasn't created from another VirtualDataTable.</param>
            <summary>
            Creates a new virtual datatable instance and assigns a name to it.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.ColumnCount">
            <summary>
            Returns the number of columns of the table.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.CreatedBy">
            <summary>
            Returns the table that created this one (by a filter, distinct, etc), or null if this table 
            was not created from another VirtualDataTable.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.CreateState(System.String,FlexCel.Report.TMasterDetailLink[],FlexCel.Report.TSplitLink)">
            <param name="sort">A string showing how to sort this dataset. This string might be null, empty, or whatever the user wrote on the config sheet.</param>
            <param name="masterDetailLinks">A list of the the master datatables and relation fields on the bands outside this one. 
            You can pass this parameter to the VirtualDataSetState so it can create indexes on the required fields. 
            This parameter will be an empty array if no master detail relationships apply to the VirtualDataSetState, but it will not be null.
            </param>
            <param name="splitLink">A link to a parent Split datasource with the number of records to split, or null if there is no parent split datasource.</param>
            <summary>
            Creates a VirtualDataSetState to be used in a report. Make sure you override this method on your derived classes
            and point it to the correct VirtualDataSet descendant.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.Dispose">
            <summary>
            Dispose whatever is needed on the children here.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary>
            Override this method on derived classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.FilterData(System.String,System.String)">
            <param name="newDataName">How this new VirtualDataSet will be named. This is what the user wrote on the config sheet,
            when creating a filtered dataset. Note that as with all the VirtualDataSets, this name is meaningless except for error messages.</param>
            <param name="rowFilter">Filter for the new data. This can be null, an empty string, or whatever the user wrote on the "filter" column
            on the config sheet. Note that if the Filter is "distinct()" this method will not be called, but <see cref="M:FlexCel.Report.VirtualDataTable.GetDistinct(System.String,System.Int32[])" /> instead.
            This method will not be called if the filter is "Split()" either.</param>
            <summary>
            This method should return a new VirtualDataTable instance with the data filtered. If RowFilter is null,
            this method should return a copy of the dataset with a different name.
            Note that you might have the same data with different states, so this method might be called more than once.
            </summary>
            <returns>A new VirtualDataTable with the filtered data and the new name.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.FullDataSetColumnCount">
            <summary>
            Returns the columns in the table for a full dataset. Normally this is the same as <see cref="P:FlexCel.Report.VirtualDataTable.ColumnCount" />
            but your implementation might choose to hide some of the fields available in the full ColumnCount when dumping all fields.
            If you change this method, you need also to review <see cref="M:FlexCel.Report.VirtualDataTable.GetFullDataSetColumn(System.Int32)" /> so it returns the correct column for the dataset.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)">
            <param name="columnName">Name of the column to search.</param>
            <summary>
            Returns a column indentifier that you can later use on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)" />. 
            Return -1 if the column does not exist, and make sure this search is case insensitive.
            </summary>
            <returns>Column identifier if found, -1 if not found.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetColumnCaption(System.Int32)">
            <param name="columnIndex">Column index returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the column caption for a column identifier. This method is used on generic dataset to write the header column.
            For most uses, <see cref="M:FlexCel.Report.VirtualDataTable.GetColumnName(System.Int32)" /> will be used.
            </summary>
            <returns>The name of the column at columnIndex. If the columnIndex is not valid it should throw an Exception, since
            this method will only be called for columnIndexes returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetColumnName(System.Int32)">
            <param name="columnIndex">Column index returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the column name for a column identifier. This method is the reverse of <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></summary>
            <returns>The name of the column at columnIndex. If the columnIndex is not valid it should throw an Exception, since
            this method will only be called for columnIndexes returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetDetail(System.String,FlexCel.Report.VirtualDataTable)">
            <param name="dataTableName">Name of the detail dataset we are looking for.</param>
            <param name="dataTable">Detail dataset that we are looking for.</param>
            <summary>
            Override this method if the table has linked tables that you can use for master detail relationships
            instead of normal relationships. This is the case for example in Entity Framework. 
            </summary>
            <returns>The dataset if it is a detail dataset, null otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetDistinct(System.String,System.Int32[])">
            <param name="newDataName">How this new VirtualDataSet will be named. This is what the user wrote on the config sheet,
            when creating the distinct dataset. Note that as with all the VirtualDataSets, this name is meaningless except for error messages.</param>
            <param name="filterFields">Fields where to apply the "distinct" condition.</param>
            <summary>
            Override this method to return a new VirtualDataSet with unique values.
            Note that the returned dataset will not have all the columns this one has, only the ones defined on "filterFields"
            </summary>
            <returns>A new VirtualDataTable with the filtered data and the new name.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetRelationWith(FlexCel.Report.VirtualDataTable)">
            <param name="aDetail">Detail table from where we want to get the relationship.</param>
            <summary>
            Override this method if the datatable has intrinsic relationships that you want to use.
            For example DataSets have DataRelationships, or Entity Framework tables are related as properties from the 
            master to the detail. All those relationships that are not explicitly defined in the report should be returned here.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.Locale">
            <summary>
            Locale for this dataset. This might be needed to create datatables with data and the same locale.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.Lookup(FlexCel.Report.TLookupFieldDefinition,System.Object[],System.String)">
            <param name="LookupFields">Fields used to do the lookup.</param>
            <param name="keyValues">A list of the values for the keys, that you should use to locate the right record.</param>
            <param name="sort">How the data is sorted. This is relevant for TOP tables where not all data is available.</param>
            <summary>
            Looks for a key on this dataset and returns the corresponding value.
            Note: Remember that VirtualDataSet is stateless, so if you use any caching here, make sure you appropiately lock()
            this method so there is no possibility of one thread reading the cache when the other is updating it.
            </summary>
            <returns>The value at "column" , for the record where the columns on "keyNames" have the "keyValues" values.
            If there is more than one record where "keyNames" is equal to "keyValues" you might opt to throw an Exception or just return any of the 
            valid values, depending on the behavior you want for lookup.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.TableName">
            <summary>
            Name for the virtual data table. Note that this name is *not* used anywhere in FlexCel code, except to report errors.
            The Table names that are used on reports are the ones in <see cref="T:FlexCel.Report.VirtualDataTableState" /></summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.Report.VirtualDataTableState">
            <summary>
            A table that corresponds to a band on the report.
            Make sure you read the documentation on <b>UsingFlexCelReports.pdf</b> for more information.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.Report.VirtualDataTableState(FlexCel.Report.VirtualDataTable)">
            <param name="aTableData">VirtualDataTable that created this instance.</param>
            <summary>
            Constructs a new VirtualDataTableState with the specified name. Note that you will not call
            this constructor directly, new VirtualDataTableState instances will be created only by <see cref="M:FlexCel.Report.VirtualDataTable.CreateState(System.String,FlexCel.Report.TMasterDetailLink[],FlexCel.Report.TSplitLink)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.Dispose">
            <summary>
            Dispose whatever is needed on the children here.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.Dispose(System.Boolean)">
            <param name="disposing" />
            <summary>
            Override this method on derived classes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.Eof">
            <summary>
            This method returns if we have reached the last record in the table. The default implementation
            just sees if <see cref="P:FlexCel.Report.VirtualDataTableState.Position" /> = <see cref="P:FlexCel.Report.VirtualDataTableState.RowCount" />. If RowCount is slow and you have a 
            faster way to know if you are at the end, override this method.
            </summary>
            <returns>True if we are at the end of the datatable.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.FilteredRowCount(FlexCel.Report.TMasterDetailLink[])">
            <param name="masterDetailLinks">List of all the master tables that are related to this one.
            If there are no parents on this VirtualDataTableState, this will be an empty array, not null.
            </param>
            <summary>
            This method will be called when a Split master wants to know how many records its detail has. For example, if the detail has 30 records 
            and the split is at 10, the Split master will call this method to find out that it has to return 3 on its own record count.
            You need to filter the data here depending on the master detail relationships, but not on the splitLink.
            </summary>
            <returns>The count of records for a specific position of the master datasets.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.Finalize">
            <summary>
            Finalizer for the class.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)">
            <param name="column">Column identifier returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the value for row <see cref="P:FlexCel.Report.VirtualDataTableState.Position" />, at the column "column"
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32,System.Int32)">
            <param name="row">Row identifier (0 based)</param>
            <param name="column">Column identifier returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)" /></param>
            <summary>
            Returns the value for row "row", at the column "column". You need to overload this method only if you want to support DBValue tag.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.MoveFirst">
            <summary>
            This method is called when we want to move to the first record. 
            You can always know the current record with <see cref="P:FlexCel.Report.VirtualDataTableState.Position" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.MoveMasterRecord(FlexCel.Report.TMasterDetailLink[],FlexCel.Report.TSplitLink)">
            <param name="masterDetailLinks">List of all the master tables that are related to this one.
            If there are no parents on this VirtualDataTableState, this will be an empty array, not null.
            Use it on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)" /> to filter the data and then return only the records that satisfy the master-detail relationships on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)" /></param>
            <param name="splitLink">Parent Split table if this dataset is on a Split relationship, or null if there is none.
            Use it to know how many records you should retun on <see cref="P:FlexCel.Report.VirtualDataTableState.RowCount" />. Note that a table might be on Master-Detail relationship 
            *and* split relationship. In this case you need to first filter the records that are on the master detail relationship, and then apply the split to them.
            </param>
            <summary>
            This method will be called each time that the master datasource moves its position. Use it to filter the data returned
            if this is used on a master-detail relationship.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.MoveNext">
            <summary>
            This method is called when we want to move to the next record.
            You can always know the current record with <see cref="P:FlexCel.Report.VirtualDataTableState.Position" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.Position">
            <summary>
            Returns the active row on the table. (0 based) 
            You should use this value to return the values on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.RowCount">
            <summary>
            Returns the number of rows available on the dataset, for the current state. Note that this method can be called many times, so it should be fast.
            Use a cache if necessary. Do *not* use something like "return select count(*) from table" here, it would be too slow.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.TableData">
            <summary>
            The VirtualDataTable that created this instance.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.TableName">
            <summary>
            Returns the table name assigned on the template to this dataset. Note that this name is the one on the bands in the template.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.TryAggregate(FlexCel.Report.TAggregateType,System.Int32,System.Nullable{System.Double}@)">
            <param name="aggregateType">Which operation to do on the dataset. (Max/Min/etc)</param>
            <param name="colIndex">Index of the field in which we want to aggregate.</param>
            <param name="resultValue">Returns the result of the operation in the dataset.</param>
            <summary>
            This method is used by the "AGGREGATE" tag in a FlexCel report to calculate the maximum/minimum/average/etc of 
            the values in the table. If you don't implement this method, FlexCel will still calculate those values by looping
            through the dataset, but if you have a faster way to do it (like with a "select max(field) from table") then implement this
            method and return true.
            </summary>
            <returns>True if this method is implemented, false if not. Note that even if we return false here,
            FlexCel will still calculate the aggregate by looping through all the records.</returns>
            <remarks />
        </member>
        <member name="T:FlexCel.XlsAdapter.ETokenException">
            <summary>
            Exception thrown when an error parsing a formula happens.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.ETokenException">
            <summary>
            Creates an empty ETokenException.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.ETokenException(System.Int32)">
            <param name="aToken" />
            <summary>
            Creates a new ETokenException for a specific Token.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.ETokenException(System.String)">
            <param name="message" />
            <summary>
            Creates a new ETokenException with a message.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.ETokenException(System.String,System.Exception)">
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
            <summary>
            Creates a nested Exception.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.ETokenException.Token">
            <summary>
            Formula token with the error.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.XlsAdapter.FlexCelXlsAdapterException">
            <summary>
            Exception thrown when an exception on the XlsAdapter engine happens. 
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.FlexCelXlsAdapterException">
            <summary>
            Creates a new FlexCelXlsAdapterException
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.FlexCelXlsAdapterException(System.String)">
            <param name="message">Error Message.</param>
            <summary>
            Creates a new FlexCelXlsAdapterException with an error message.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.FlexCelXlsAdapterException(System.String,FlexCel.XlsAdapter.XlsErr)">
            <param name="message">Error Message</param>
            <param name="aErrorCode">Error code of the exception.</param>
            <summary>
            Creates a new FlexCelXlsAdapterException with an error message and an exception code.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.FlexCelXlsAdapterException(System.String,System.Exception)">
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
            <summary>
            Creates a nested Exception.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.FlexCelXlsAdapterException.ErrorCode">
            <summary>
            Error code on the Exception.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsChart">
            <summary>
            Implements an ExcelChart interface.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.AddSeries(FlexCel.Core.ChartSeries)">
            <param name="value">Definition of the new series</param>
            <summary>
            Adds a series to the chart.
            </summary>
            <returns>Index of the newly added series.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.AutoScalePlotArea">
            <summary>
            If true, plot area dimensions should be ignored, and the plot area should be autosized to fit the legend and axis.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.Background">
            <summary>
            Options for the background of the full chart. If this member is null, the options for the Autoshape will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.ChartOptions">
            <summary>
            Returns the type of chart and the options specific for that kind of chart.
            There might be more than one ChartOptions returned, since you can mix more than one type of 
            chart on a simple chart. (One for each series). You need to look at the series ChartOptionsIndex to 
            know to which one it refers.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.DefaultAxisFont">
            <summary>
            Returns the default font for the Axis in the chart that do not have a font defined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.DefaultFont">
            <summary>
            Returns the default font for all text in the chart that does not have a font defined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.DefaultLabelFont">
            <summary>
            Returns the default font for all labels in the chart that do not have a font defined.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.DeleteObject(System.Int32)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.DeleteSeries(System.Int32)">
            <param name="index" />
            <summary>
            Deletes the series at position index.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetChartAxis">
            <summary>
            Returns the axis information for this chart. Note that this might be more than one, if the chart has a secondary axis.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetChartLegend">
            <summary>
            Information about the Legend of the chart.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetDataLabels">
            <summary>
            Returns all the labels for the chart and the main title. Note that Axis have their labels defined inside their own definition.
            </summary>
            <returns>Label values.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream,System.Boolean)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            ObjectIndexToImageIndex which is a slow method, by setting this parameter to true.</param>
            <summary>
            Returns an image and its type.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetObjectProperties(System.Int32,System.Boolean)">
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount" /></param>
            <param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            An object embedded inside a chart.
            </summary>
            <returns>The properties for the embedded object.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetSeries(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <param name="index">Index of the series you want to return. (1 based)</param>
            <param name="getDefinitions">If false, this method will not return the series formulas, so it will be a little faster.</param>
            <param name="getValues">If false, this method will not return the series values, so it will be a little faster and use less memory.</param>
            <param name="getOptions">If false, this method will not return the series options.</param>
            <summary>
            Returns a series definition.
            </summary>
            <returns>series description.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.ObjectCount">
            <summary>
            The number of objects that are embedded inside this chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.PlotEmptyCells">
            <summary>
            Defines how null cells will be plotted on the chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.RemoveChartLegend">
            <summary>
            Removes the Legend from the chart.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.SeriesCount">
            <summary>
            Returns the count of series on this chart.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.SetDataLabels(FlexCel.Core.TDataLabel[])">
            <param name="labels">New labels for the chart.</param>
            <summary>
            Changes the labels for the chart. You should always get the values with <see cref="M:FlexCel.Core.ExcelChart.GetDataLabels" />,
            modify them, and change them back with this method.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.SetObjectText(System.Int32,System.String,FlexCel.Core.TDrawingRichString)">
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount" /></param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Changes the text inside an object of the chart.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the rich string properties of the object text,
            and preserve those things not available in a TRichString like wordArt effects.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.SetObjectText(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the text of the object,
            and preserve the existing formatting in the object if there was one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.SetSeries(System.Int32,FlexCel.Core.ChartSeries)">
            <param name="index">Index of the serie to set.</param>
            <param name="value">Series definition.</param>
            <summary>
            Sets a Serie value.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.ShowDataInEmptyRowsAndCols">
            <summary>
            Defines if empty rows and columns will be used when plotting values.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsErr">
            <summary>
            Error Codes. We use this and not actual strings to make sure all are correctly spelled.
            </summary>
            <remarks />
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.BaseSheetName">
            <summary>eSheetName</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadCF">
            <summary>BadCF</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadChartFormula">
            <summary>BadChartFormula</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadCopyCols">
            <summary>BadCopyCols</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadCopyRows">
            <summary>BadCopyRows</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadFormula">
            <summary>BadFormula</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadMoveCall">
            <summary>BadMoveCall</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadName">
            <summary>BadName</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadRowCount">
            <summary>BadRowCount</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadToken">
            <summary>BadToken</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBStoreDuplicated">
            <summary>BStoreDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantCopyPictFmla">
            <summary>CantCopyPictFmla</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantDeleteSheetWithMacros">
            <summary>CantDeleteSheetWithMacros</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantMovePartOfArrayFormula">
            <summary>
            Can't move a part of an Array formula.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantMovePartOfTable">
            <summary>
            Can't move a part of a table.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantRenameSheetCodenameWithMacros">
            <summary>ErrCantRenameSheetCodenameWithMacros</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrChangingEscher">
            <summary>ChangingEscher</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCustomPropIdInvalid">
            <summary>
            The id is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCustomPropIdRepeated">
            <summary>
            The id is repeated.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla1Null">
            <summary>
            First formula of Data validation is null.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla1TooLong">
            <summary>
            First formula of Data validation has more than 255 characters.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla2Null">
            <summary>
            Second formula of Data validation is null.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla2TooLong">
            <summary>
            Second Formula of Data validation has more than 255 characters.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDgDuplicated">
            <summary>DgDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDggDuplicated">
            <summary>DggDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDuplicatedSheetName">
            <summary>DuplicatedSheetName</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDupRow">
            <summary>DupRow</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrEofReached">
            <summary>EofReached</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrEscherNotLoaded">
            <summary>EscherNotLoaded</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrExcelInvalid">
            <summary>ExcelInvalid</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrFileIsNotSupported">
            <summary>The file is not on any on the formats supported by FlexCel (Excel 97 or newer, pxl).</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrFileIsNotXLS">
            <summary>FileIsNotXLS</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrFileIsPasswordProtected">
            <summary>FileIsPasswordProtected</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrFileSize0">
            <summary>
            The file we are trying to open has zero size.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrHeaderFooterStringTooLong">
            <summary>The string for a header or footer is longer than the maximum allowed by Excel.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrHiddenSheetSelected">
            <summary>HiddenSheetSelected</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInternal">
            <summary>Internal</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidArrayElement">
            <summary>The array element is not any of the supported types.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidCF">
            <summary>InvalidCF</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidChart">
            <summary>Chart is invalid.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidCol">
            <summary>InvalidCol</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidContinue">
            <summary>InvalidContinue</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidDrawing">
            <summary>InvalidDrawing</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidFormatId">
            <summary>
            Too many custom numeric formats.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidFormatStringLength">
            <summary>
            Maximum length for a format string is 255 characters.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidHyperLinkType">
            <summary>
            Invalid type of Hyperlink.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidNameForARange">
            <summary>The name for a named range is invalid. It should have no more than 255 characters, must no start with a number, and must not contain some special characters. </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidPassword">
            <summary>Invalid password.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidPropertySector">
            <summary>Cannot read the properties of this file.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidRow">
            <summary>InvalidRow</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidSheetNo">
            <summary>InvalidSheetNo</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidStream">
            <summary>InvalidStream</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidStringRecord">
            <summary>InvalidStringRecord</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidVersion">
            <summary>InvalidVersion</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrLoadingEscher">
            <summary>LoadingEscher</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrMalformedXml">
            <summary>
            File has malformed xml, and .net 3.5 can't read it.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrMissingPart">
            <summary>
            There is a part missing from the xlsx file.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrMoveRangeOutsideBounds">
            <summary>
            Trying to move a range outside bounds.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrMoveRangesCanNotIntersect">
            <summary>
            Ranges in move calls cannot intersect.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNoSheetVisible">
            <summary>NoSheetVisible</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNotImplemented">
            <summary>NotImplemented</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNotSupportedEncryption">
            <summary>Encryption method is not supported. </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNotSupportedOnCE">
            <summary>NotSupportedOnCE</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNullGradient">
            <summary>
            If you specify a gradient pattern, then gradient definition can't be null
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrObjectNotFound">
            <summary>Could not find the object path inside the shape.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPasswordTooLong">
            <summary>Password too long.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPxlDoesNotHaveExternalFormulas">
            <summary>Pocket Excel does not have support for formulas that reference external files.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPxlIsInvalid">
            <summary>The Pocket Excel file (pxl) is not on a format FlexCel can understand.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPxlIsInvalidToken">
            <summary>The Pocket Excel file (pxl) is not on a format FlexCel can understand. Token invalid.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrRangeMustHaveSameSheet">
            <summary>
            Both sheets in the range must be the same
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrReadingRecord">
            <summary>ReadingRecord</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrRowMissing">
            <summary>RowMissing</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrSectionNotLoaded">
            <summary>SectionNotLoaded</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrShrFmlaNotFound">
            <summary>ShrFmlaNotFound</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrSolverDuplicated">
            <summary>SolverDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrStreamAtEnd">
            <summary>
            Stream is at the end.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrStreamNeedsReadAccess">
            <summary>
            In order to save as xlsx, the stream needs to have read access besides write.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrStringEmpty">
            <summary>The string can't be empty.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrStringTooLong">
            <summary>The string is longer than the maximum allowed by Excel.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyCFRules">
            <summary>
            Too many Conditional format rules.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyColumns">
            <summary>TooManyColumns</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyEntries">
            <summary>TooManyEntries</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyPageBreaks">
            <summary>TooManyPageBreaks</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyRows">
            <summary>TooManyRows</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManySheets">
            <summary>Trying to insert more than 65536 sheets.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyXFDefs">
            <summary>
            Too many format definitions.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrWrongExcelRecord">
            <summary>WrongExcelRecord</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrWrongType">
            <summary>WrongType</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrXlsIndexOutBounds">
            <summary>XlsIndexOutBounds</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.RecoveryInvalidFmla">
            <summary>
            A corrupt file has an invalid formula.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.RecoveryInvalidName">
            <summary>
            A corrupt file has an invalid name.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.SheetAlreadyProcessed">
            <summary>
            Sheet has already been processed.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsFile">
            <summary>
            This is the FlexCel Native Engine. Use this class to natively read or write an Excel 5 or newer file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.XlsFile">
            <summary>
            Creates a new XlsFile. After creating an XlsFile with this constructor, you need to either open or create a new file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.XlsFile(System.Boolean)">
            <param name="aAllowOverwritingFiles">When true calling "Save" will overwrite existing files. See <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /></param>
            <summary>
            Creates a new XlsFile and sets the desired Overwriting mode for files. After creating an XlsFile with this constructor, you need to either open or create a new file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.XlsFile(System.String)">
            <param name="aFileName">Name of the file to open.</param>
            <summary>
            Creates a new XlsFile and opens the desired file.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.XlsFile(System.Int32,System.Boolean)">
            <param name="aSheetCount">Number of sheets for the new empty file.</param>
            <param name="aAllowOverwritingFiles">When true calling "Save" will overwrite existing files. See <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /></param>
            <summary>
            Creates a new XlsFile and creates a new empty file with the desired number of sheets.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.XlsFile(System.IO.Stream,System.Boolean)">
            <param name="aStream">Stream with the file to open.</param>
            <param name="aAllowOverwritingFiles">When true calling "Save" will overwrite existing files. See <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /></param>
            <summary>
            Creates a new XlsFile and opens the desired file from a stream. Sets the desired Overwriting mode for files.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.XlsFile(System.String,System.Boolean)">
            <param name="aFileName">Name of the file to open.</param>
            <param name="aAllowOverwritingFiles">When true calling "Save" will overwrite existing files. See <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /></param>
            <summary>
            Creates a new XlsFile and opens the desired file. Sets the desired Overwriting mode for files.
            </summary>
            <remarks />
        </member>
        <member name="C:FlexCel.XlsAdapter.XlsFile(System.Int32,FlexCel.Core.TExcelFileFormat,System.Boolean)">
            <param name="aSheetCount">Number of sheets for the new empty file.</param>
            <param name="aFileFormat">Version of Excel used to create the new file. Different version can have different default fonts, column widths, etc.</param>
            <param name="aAllowOverwritingFiles">When true calling "Save" will overwrite existing files. See <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /></param>
            <summary>
            Creates a new XlsFile and creates a new empty file with the desired number of sheets and file format.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ActiveFileName">
            <summary>
            The file we are working on. When we save the file with another name, it changes.
            When we open a stream, it is set to "".
            This value is also used to get the text of Headers and Footers (when using the filename macro).
            When using the filename macro on headers/footers, make sure you set this value to what you want.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ActiveSheet">
            <summary>
            The Sheet where we are working on, 1-based(First sheet is 1, not 0). 
            Always set this property before working on a file.
            You can read or write this value.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ActiveSheetByName">
            <summary>
            The sheet where we are working on, referred by name instead of by index.
            To change the active sheet name, use <see cref="P:FlexCel.Core.ExcelFile.SheetName" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String,System.String)">
            <param name="anchor">Position for the button.</param>
            <param name="text">Text that will be shown in the button.</param>
            <param name="name">Name for the inserted button.</param>
            <param name="macro">Macro associated with the button.</param>
            <summary>
            Adds a button to the sheet, with the associated macro.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddCheckbox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,FlexCel.Core.TCheckboxState,FlexCel.Core.TCellAddress,System.String)">
            <param name="anchor">Position for the checkbox.</param>
            <param name="text">Text for the checkbox.</param>
            <param name="value">Value of the checkbox.</param>
            <param name="linkedCell">Cell that will be linked to the checkbox. If you don't want to link the checkbox to a cell, make this parameter null.</param>
            <param name="name">Name that will be given to the checkbox.</param>
            <summary>
            Adds a checkbox to the active sheet. 
            </summary>
            <returns>Object Index of the inserted checkbox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddComboBox(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TCellAddressRange,System.Int32)">
            <param name="anchor">Position for the combobox.</param>
            <param name="name">Name of the inserted combobox.</param>
            <param name="linkedCell">Cell that will be linked to the combobox. Set this to null to not link any cell.</param>
            <param name="inputRange">Range of cells with the values that the combobox will display.</param>
            <param name="selectedItem">Item that will be selected, starting at 1. 0 means no selected item.</param>
            <summary>
            Adds a ComboBox to the active sheet. 
            </summary>
            <returns>Object Index of the inserted combobox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddCustomXmlPart(FlexCel.Core.TCustomXmlPart)">
            <param name="part">Part to add.</param>
            <summary>
            Adds a custom XML part to the file, as described in https://msdn.microsoft.com/en-us/library/bb608618.aspx
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddDataValidation(FlexCel.Core.TXlsCellRange,FlexCel.Core.TDataValidationInfo)">
            <param name="range">Range of cells where we will apply the Data Validation.</param>
            <param name="validationInfo">Validation information.</param>
            <summary>
            Adds a new Data Validation to a specified range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddFont(FlexCel.Core.TFlxFont)">
            <param name="font">Font to add to the list.</param>
            <summary>
            Adds a new font to the excel font list.  If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary>
            <returns>The position on the list for the added font.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddFormat(FlexCel.Core.TFlxFormat)">
            <param name="format">Format to add to the list.</param>
            <summary>
            Adds a new format to the Excel format list. If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary>
            <returns>Position on the list for the format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddGroupBox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String)">
            <param name="anchor">Position for the group box.</param>
            <param name="text">Text for the group box.</param>
            <param name="name">Name for the inserted Group box</param>
            <summary>
            Adds a Group box to the active sheet. Call <see cref="M:FlexCel.Core.ExcelFile.AddRadioButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)" /> to insert radio buttons inside the group box. 
            </summary>
            <returns>Object Index of the inserted group box (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)">
            <param name="cellRange">Range of cells the hyperlink will refer to.</param>
            <param name="value">Description of the hyperlink.</param>
            <summary>
            Adds a new hyperlink to the Active sheet. Use <see cref="M:FlexCel.Core.ExcelFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)" /> to modify an existing one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddImage(System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.TImageProperties)">
            <param name="data">byte array with the image data.</param>
            <param name="imageType">Type of image you are inserting (bmp, jpg, etc).</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
            <summary>
            Adds an image to the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddLabel(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String)">
            <param name="anchor">Position for the label.</param>
            <param name="text">Text for the label.</param>
            <param name="name">Name of the inserted label.</param>
            <summary>
            Adds a Label to the active sheet. 
            </summary>
            <returns>Object Index of the inserted listbox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddListBox(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TCellAddressRange,FlexCel.Core.TListBoxSelectionType,System.Int32)">
            <param name="anchor">Position for the listbox.</param>
            <param name="name">Name of the inserted listbox.</param>
            <param name="linkedCell">Cell that will be linked to the listbox. Set this to null to not link any cell.</param>
            <param name="inputRange">Range of cells with the values that the listbox will display.</param>
            <param name="selectionType">How items are selected in the listbox.</param>
            <param name="selectedItem">Item that will be selected, starting at 1. 0 means no selected item.</param>
            <summary>
            Adds a ListBox to the active sheet. 
            </summary>
            <returns>Object Index of the inserted listbox (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddRadioButton(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString,System.String)">
            <param name="anchor">Position for the radio button.</param>
            <param name="text">Text for the radio button.</param>
            <param name="name">Name of the inserted radio button.</param>
            <summary>
            Adds a radio button to the active sheet. Call <see cref="M:FlexCel.Core.ExcelFile.AddGroupBox(FlexCel.Core.TClientAnchor,FlexCel.Core.TRichString)" /> to insert a group box for grouping the radio buttons. 
            </summary>
            <returns>Object Index of the inserted radio button (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddScrollBar(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TSpinProperties)">
            <param name="anchor">Position for the ScrollBar.</param>
            <param name="name">Name of the inserted ScrollBar.</param>
            <param name="linkedCell">Cell that will be linked to the ScrollBar. Set this to null to not link any cell.</param>
            <param name="spinProps">Properties for the ScrollBar.</param>
            <summary>
            Adds a ScrollBar to the active sheet. 
            </summary>
            <returns>Object Index of the inserted ScrollBar (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddSpinner(FlexCel.Core.TClientAnchor,System.String,FlexCel.Core.TCellAddress,FlexCel.Core.TSpinProperties)">
            <param name="anchor">Position for the spinner.</param>
            <param name="name">Name of the inserted spinner.</param>
            <param name="linkedCell">Cell that will be linked to the spinner. Set this to null to not link any cell.</param>
            <param name="spinProps">Properties for the spinner.</param>
            <summary>
            Adds a Spinner to the active sheet. 
            </summary>
            <returns>Object Index of the inserted spinner (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)">
            <param name="scope">Defines if the custom function will be available globally to all ExcelFile instances or only to the ExcelFile instance where
            it was added. It is recommended to add functions globally, unless you have different xls files with functions that might have the same name but could be implemented different.</param>
            <param name="location">Defines if the function will be inserted as a reference to a macro in the local sheet or in an external book or addin.
            This parameter is used only when adding formulas with user defined functions to a sheet. It is not needed or used when recalculating those functions or when
            reading the text of a formula.</param>
            <param name="userFunction">Formula function we want to add.</param>
            <summary>
            Adds a custom formula function to the FlexCel recalculation engine. Note that this formulas are only valid for Excel custom formulas, not for internal ones.
            For example, you could define "EDATE" since it is a custom formula defined in the Analysis Addin, but you cannot redefine "SUM". 
            Note that if a custom formula with the name already exists, it will be replaced. Names are Case insensitive ("Date" is the same as "DATE").
            <br />Also note that some user defined functions come already built in FlexCel, so you might not need to define them.
            For more information on adding Custom Formulas make sure you read the PDF documentation and take a look at the demo.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.AllowEnteringEmptyStrings">
            <summary>
            By default, FlexCel won't allow you to enter empty or null strings into a cell; it will create a blank record instead.
            If for any reason you need to enter actual empty strings (which might be confusing to the Excel user) set this property to true.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.AllowEnteringUnknownFunctionsAndNames">
            <summary>
            Whenever you try to use an unknown function in a formula, like "=MYFUNCTION()", FlexCel will raise an Exception. Same happens with unknown names.
            This is normally the expected behavior, so you don't enter a misspelled name by mistake, and you can add used defined function to FlexCel so it understands it. 
            <br /> 
            But in some cases, you might want to allow any function to be entered, no matter if is known or not: Excel behaves this way.
            For those cases, set this property to true. The unknown functions will return #NAME! as formula result.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitCol(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="col1">First column to Autofit.</param>
            <param name="col2">Last column to Autofit.</param>
            <param name="minRow">First row that will be used to autofit the column. If you want for example to autofit a column
            based only in the cells from row 3 to 10, you would use 3 as minRow.</param>
            <param name="maxRow">Last row that will be used to autofit the column. If you want for example to autofit a column
            based only in the cells from row 3 to 10, you would use 10 as maxRow.
            <br /><b>Specify any value &lt;=0 here to use all rows for the autofit.</b></param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the column will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <param name="autofitMerged">Specifies which column in a merged cell using more than one column will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last column.</param>
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitComment(FlexCel.Core.TRichString,System.Double,System.Boolean,System.Double,System.Double,FlexCel.Core.TClientAnchor)">
            <param name="text">Text for the comment.</param>
            <param name="aspectRatio">If you pass 0 as aspect ratio, FlexCel will only resize the height of the
            comment, keeping the same width as it already had. If you pass another number like 4.0/3.0 or 16.0/10.0,
            FlexCel will try to create a comment box with that approximate aspect ratio. Note that the ratio won't be the exact 
            aspect ratio, just approximate.</param>
            <param name="dontShrink">If true, the box will grow if the text needs more space, but it won't be made smaller if the text fits in a smaller height than the existing anchor.</param>
            <param name="adjustment">The final height will be multiplied by this number. Because of small differences between how FlexCel and Excel render the text, 
            it might happen that the size calculated by FlexCel is smaller than what it needs to be to display correctly in Excel. By setting 
            this number bigger than 1, you can add a margin for those errors.</param>
            <param name="adjustmentFixed">This number will be added to the final calculated height. Use it to add some margin around the comment box.</param>
            <param name="anchor" />
            <summary>
            Will return the resized anchor so the size of the comment is enough to fit all the text inside.
            </summary>
            <returns>The new anchor so the size of the box fits the text.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the sizes when printing/export to PDF from Excel will be the same as FlexCel, even when some cells might appear "cut" when printing on Excel.
            </param>
            <param name="ignoreStringsOnColumnFit">When true, cells containing strings will not be autofitted.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns and rows will be adjusted to 110% percent of what their calculated width and height was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <param name="autofitMerged">Specifies which row in a merged cell using more than one row, or which column in a merged cell with more than one column will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last row or column in the merged range.</param>
            <summary>
            Autofits all the rows and columns on a sheet that have been previously marked with the <see cref="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Double)" />  and <see cref="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Double)" /> methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitRow(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="row1">First row to autofit.</param>
            <param name="row2">Last row to autofit.</param>
            <param name="minCol">First column that will be used to calculate the height of the row. If for
            example you wanted to calculate the row height based in the contents of the columns 3 to 9, you would specify 3 here.</param>
            <param name="maxCol">Last column that will be used to calculate the height of the row. If for
            example you wanted to calculate the row height based in the contents of the columns 3 to 9, you would specify 9 here.
            <br /><b>Specify any value &lt;=0 here to use all columns for the autofit.</b></param>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="autofitMerged">Specifies which row in a merged cell using more than one row will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last row.</param>
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believes is best. You can change this behavior specifying keepHeightAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitRowsOnWorkbook(System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,FlexCel.Core.TAutofitMerged)">
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the printing/export to PDF from Excel will be the same as FlexCel.
            </param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="autofitMerged">Specifies which row in a merged cell using more than one row will be used to autofit the merged cell.
            If you don't specify this parameter, it will be the last row.</param>
            <summary>
            Autofits all the rows on all sheets on a workbook that are set to autofit so they adapt their height to show all the text inside. 
            Note that due to GDI+ / GDI incompatibilities,
            the heights calculated by FlexCel will not be exactly the same than the ones calculated by Excel. So when you open this workbook
            in Excel, Excel might re calculate the row heights to what it believes is best. You can change this behavior specifying keepSizesAutomatic = false.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutoPageBreaks(System.Int32,FlexCel.Core.TUIRectangle)">
            <param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br />
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br />
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br /></param>
            <param name="PageBounds">You can customize a custom page size here. If width or height of this parameter is 0, the paper size specified in the file
            will be used. There is normally no need to set this parameter, unless you want to fine tune the results.</param>
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" /> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks" />) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutoPageBreaks(System.Int32,System.Int32)">
            <param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br />
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br />
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br /></param>
            <param name="PageScale">This parameter must be between 50 and 100, and means how much smaller page will be considered in order to calculate the page breaks.
            <br /> A value of 100 means that the size used in the calculation will be the real size of the page, and while this will always work fine when exporting to PDF 
            or exporting to images, when printing from Excel might result in a page break that is placed a little after where it should go and an empty page for certain printers.
            (Page size in Excel is different for different printers) Normally a value around 95 is the recommended value for this parameter.<br />
            If you need to do a finer grain adjustment, you can use <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,FlexCel.Core.TUIRectangle)" />.
            </param>
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" /> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks" />) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.BringToFront(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
            Sends the graphical object to the top layer on the display (z-order) position. It will show above and will cover all other objects on the sheet. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.CellMarginFactor">
            <summary>
            This property can be used to add a margin to the cells when rendering, so text is rendered smaller and can have more line breaks.
            The default value of 1.0 means normal cells. The bigger this value, the bigger the margins and the smaller the real cell width
            for rendering the text. You might want to make this value a little larger than 1 if autofitting and Excel is wrapping text that
            FlexCel fits into one line.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CellMergedBounds(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
            Merged Range where the cell is.
            <seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /></summary>
            <returns>The range where the cell is</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CellMergedList(System.Int32)">
            <param name="index">index on the list (1 based)</param>
            <summary>
            The Merged cell at position index on the mergedcell list.
            <b>Important:</b> Using CellMergedList/CellMergedListCount in a loop can be slow. For a faster way to enumerate all merged cells, use <see cref="M:FlexCel.Core.ExcelFile.CellMergedNext(FlexCel.Core.TCellMergedState@)" /> instead.
            <seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /></summary>
            <returns>The merged cell at position index.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.CellMergedListCount">
            <summary>
            For using with <see cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /> on a loop: for (int i=1;i &lt;= CellMergedListCount;i++) DoSomething(CellMergedList(i))...
            <b>Important:</b> Using CellMergedList/CellMergedListCount in a loop can be slow. For a faster way to enumerate all merged cells, use <see cref="M:FlexCel.Core.ExcelFile.CellMergedNext(FlexCel.Core.TCellMergedState@)" /> instead.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CellMergedNext(FlexCel.Core.TCellMergedState@)">
            <param name="state">This struct holds the current merged cell being enumerated and is used by the method to return the next
            cell in the enumeration. To get the first value, create it with TCellMergedState.Init()</param>
            <summary>
            Use this method to enumerate all merged cells in a sheet. Using it is faster than using CellMergedList/CellMergedListCount when
            there are many merged cells.
            </summary>
            <returns>The next merged cell in the sheet.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CellRangeDimensions(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="row1">First row (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="col1">First column (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="row2">Last row (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="col2">Last column (1 based). If you use a value less or equal than 0 here, this method will return the full sheet dimensions.</param>
            <param name="includeMargins">If true, the dimensions reported will include all margins in the sheet.</param>
            <summary>
            Returns the height and width that would be used by a range of cells (in Points, or 1/72 inches). 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ChartCount">
            <summary>
            Returns the count of charts on this sheet. Please take note that this method <b>will not return the number of embedded objects with charts inside in a sheet, but just the number of charts in the sheet.</b><br />In simpler terms, this method will return 0 for all worksheets, and 1 for all chart sheets. 
            This is not a very useful method, but it needs to be this way to be consistent
            with <see cref="M:FlexCel.Core.ExcelFile.GetChart(System.Int32,System.String)" />. So, looping like this:
            <code>
            for (int i=1; i&lt;= xls.ChartCount; i++)
            {
               xls.GetChart(i, null);
            }
            </code>
            will loop 0 times for worksheets and 1 time for workbooks.
            <br /> To see how to loop over all objects in a sheet, use the example in the example section of the <see cref="M:FlexCel.Core.ExcelFile.GetChart(System.Int32,System.String)" /> topic.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearDataValidation">
            <summary>
            Clears all data validation entries in the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearDataValidation(FlexCel.Core.TXlsCellRange)">
            <param name="range">Range of cells where data validation will be cleared.</param>
            <summary>
            Clears all data validation entries inside the specified range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearImage(System.Int32)">
            <param name="imageIndex">Index of the image to clear. (1 based)</param>
            <summary>
            Clears the image at position imageIndex, leaving an empty white box.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearPageBreaks">
            <summary>
            Deletes all manual page breaks on the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearSheet">
            <summary>
            Clears all data on the active sheet, but does not delete it. <seealso cref="M:FlexCel.Core.ExcelFile.DeleteSheet(System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearUserDefinedFunctions(FlexCel.Core.TUserDefinedFunctionScope)">
            <param name="scope" />
            <summary>
            Removes all the custom formula functions from the FlexCel recalculation engine.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ColCount">
            <summary>
            Number of columns actually used on the active sheet, including formatted columns. <br /> You will normally want to use <see cref="P:FlexCel.Core.ExcelFile.ColCountOnlyData" /> instead.<br /><b>Note that this method is *slow*</b> as it needs to loop over all the rows to find out
            the biggest used column. <b>Never</b> use it in a loop like "for (int  col = 1; col &lt;= xls.ColCount; col++)". Instead try to use <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" />.
            If you *need* to use ColCount, cache its value first:
            <code>
            int RowCount = xls.RowCount;
            int ColCount = xls.ColCount;
            for (int  row = 1; row &lt;= RowCount; row++)
            {
               for (int  col = 1; col &lt;= ColCount; col++)
               {
            </code>
            Remember that loops in C# will evaluate the second parameter every time the loop is executed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColCountInRow(System.Int32)">
            <param name="row">Row index. (1-based)</param>
            <summary>
             This method returns the existing columns on ONE ROW.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)" /> to iterate faster on a block.
             </summary>
            <returns>The number of existing columns on one row.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColCountInRow(System.Int32,System.Int32)">
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row index. (1-based)</param>
            <summary>
             This method returns the existing columns on ONE ROW, for a given sheet.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)" /> to iterate faster on a block.
             </summary>
            <returns>The number of existing columns on one row.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ColCountOnlyData">
            <summary>
            While <see cref="P:FlexCel.Core.ExcelFile.ColCount" /> will return the maximum column including both data and formatted cols, this method
            doesn't include formatted cols, only cells with data, and it is normally what you need to use.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ColFormatCount">
            <summary>
            Returns the number of formatted columns in the file. Note that in xlsx files this number can be very big.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColFromIndex(System.Int32,System.Int32)">
            <param name="row">Row (1 based)</param>
            <param name="colIndex">The index on the column list for the row. (1 based)</param>
            <summary>
            This is the column (1 based) for a given ColIndex. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" /> for an example.
            </summary>
            <returns>The column (1 based) for the corresponding item.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColFromIndex(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row (1 based)</param>
            <param name="colIndex">The index on the column list for the row. (1 based)</param>
            <summary>
            This is the column (1 based) for a given ColIndex and sheet. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" /> for an example.
            </summary>
            <returns>The column (1 based) for the corresponding item.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <param name="level">Level that we want to display from the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the left of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <param name="firstCol">This defines the first column of the range to collapse/expand. Only columns inside that range will be modified.</param>
            <param name="lastCol">This defines the last column of the range to collapse/expand. Only columns inside that range will be modified.</param>
            <summary>
            Collapses or expands the column outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineNodeCol(System.Int32,System.Boolean)">
            <param name="col">Column to expand or collapse. (1 based)</param>
            <param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
            <summary>
            Use this method to collapse a node of the outline. If the column is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeCol(System.Int32)" /> is false) this method does nothing.
            While this method allows a better control of the columns expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode)" /> to collapse or
            expand all columns in a sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineNodeRow(System.Int32,System.Boolean)">
            <param name="row">Row to expand or collapse (1 based)</param>
            <param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
            <summary>
            Use this method to collapse a node of the outline. If the row is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeRow(System.Int32)" /> is false) this method does nothing.
            While this method allows a better control of the rows expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode)" /> to collapse or
            expand all rows in a sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <param name="level">Level that we want to show of the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the top of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <param name="firstRow">This defines the first row of the range to collapse/expand. Only rows inside that range will be modified.</param>
            <param name="lastRow">This defines the last row of the range to collapse/expand. Only rows inside that range will be modified.</param>
            <summary>
            Collapses or expands the row outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColToIndex(System.Int32,System.Int32)">
            <param name="row">Row (1 based)</param>
            <param name="col">Column (1 based)</param>
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" />. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary>
            <returns>The index on the column list for the row. (1 based)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColToIndex(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row (1 based)</param>
            <param name="col">Column (1 based)</param>
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)" />. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary>
            <returns>The index on the column list for the row. (1 based)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CommentCountRow(System.Int32)">
            <param name="row">Row index (1 based)</param>
            <summary>
            Number of comments on a given row.
            </summary>
            <returns>The number of comments on a given row.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CommentRowCount">
            <summary>
            Maximum row index including comments.
            </summary>
            <returns>The maximum row with a comment.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)">
            <param name="format">Original format of the cell.</param>
            <param name="row">Row of the cell (1 based)</param>
            <param name="col">Column of the cell (1 based)</param>
            <summary>
            Modifies the format of the specified cell if it has a conditional format active.
            Returns a modified format with the applied conditional format if there was any change, null otherwise.
            </summary>
            <returns>If the format is modified by a conditional format, it returns the new format.
            If there are no changes returns null, to avoid creating new instances of TFlxFormat.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConvertExternalNamesToRefErrors(System.Boolean)">
            <param name="recalcBeforeConverting">If true (the default), FlexCel will try to recalculate the file before converting the formulas.
            Use false when for any reason FlexCel can't recalculate the values (for example if you have links to other files that don't exist anymore)</param>
            <summary>
            Use it to convert the external names in a sheet to #REF! . It can be useful when you need to remove all external links in a file. 
            NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)" /> too.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConvertFormulasToValues(System.Boolean,System.Boolean)">
            <param name="onlyExternal">When true, it will only convert the formulas that do not refer to the same sheet.
            For example "=A1+Sheet2!A1" will be converted, but "=A2+A3" will not.
            </param>
            <param name="recalcBeforeConverting">If true (the default), FlexCel will try to recalculate the file before converting the formulas.
            Use false when for any reason FlexCel can't recalculate the values (for example if you have links to other files that don't exist anymore)</param>
            <summary>
            Use it to convert formulas to their values. It can be useful if for example you are copying the sheet to
            another workbook, and you don't want any references to it. NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors(System.Boolean)" /> too, to convert named ranges besides the formulas.<br />
            Also note that if you want to convert a whole file, you need to call ConvertFormulasToValues in every sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConvertString(FlexCel.Core.TRichString,System.Int32@,System.String[])">
            <param name="value">RichString to convert.</param>
            <param name="XF">XF of the cell. It might be modified, for example, if you are entering a date.</param>
            <param name="dateFormats">A list of formats allowed for dates and times. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values.</param>
            <summary>
            Converts a string into the best datatype (a boolean, a number, etc)
            </summary>
            <returns>value converted to the best datatype.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CopyCell(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TRangeCopyMode)">
            <param name="sourceWorkbook">File from where we want to copy the cell.</param>
            <param name="sourceSheet">Sheet in sourceWorkbook where the data is.</param>
            <param name="destSheet">Sheet in this file where we want to copy the data.</param>
            <param name="sourceRow">Row on the source file of the cell (1 based)</param>
            <param name="sourceCol">Column on the source file of the cell (1 based)</param>
            <param name="destRow">Row on the destination file of the cell (1 based)</param>
            <param name="destCol">Column on the destination file of the cell (1 based)</param>
            <param name="copyMode">How the cell will be copied.</param>
            <summary>
            Copies <b>one</b> cell from one workbook to another. If the cell has a formula, it will be offset so it matches the new destination.
            <b>Note:</b> You will normally not need this method. To copy a range of cells from a workbook to another use 
            <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32)" /> instead.
            To copy a full sheet from one file to another, use <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CopyColFormats(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="sourceWorkbook">The workbook from where the column formats will be copied. If you set this to null, the column formats will
            be copied from the same file.</param>
            <param name="sourceSheet">Sheet in the source workbook from where we will copy the column formats.</param>
            <param name="sourceCol">First column format to copy</param>
            <param name="destCol">First column where the format will be copied.</param>
            <param name="colCount">Number of columns to copy.</param>
            <summary>
            Copies the column definitions, that is formats, widths, hidden/visible, etc from one workbook or sheet to another.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CopyToClipboardFormat(FlexCel.Core.FlexCelClipboardFormat,FlexCel.Core.TXlsCellRange,System.IO.Stream)">
            <param name="clipboardFormat">Format you want to copy into outStream.</param>
            <param name="range">Range with the cells to copy.</param>
            <param name="outStream">Stream where the clipboard info will be copied. If null, nothing will be copied.</param>
            <summary>
            Copies a range on the active sheet to a clipboard stream, on the specified format.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.CustomXmlPartCount">
            <summary>
            Returns the number of custom xml parts in the active document.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DataValidationCount">
            <summary>
            Returns the number of DataValidation structures in the active sheet. 
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number"><item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)" /> to return the data validation in the cell.</item><item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount" />, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)" /> to loop over all existing data validations.</item></list></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DefaultColWidth">
            <summary>
            The default width for empty columns, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DefaultRowHeight">
            <summary>
            The default height for empty rows, in Excel internal units. (1/20th of a point). <b>IMPORTANT: </b> For this property
            to have any effect, you also need to set <see cref="P:FlexCel.Core.ExcelFile.DefaultRowHeightAutomatic" /> = false
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DefaultRowHeightAutomatic">
            <summary>
            When this property is true, the row height for empty rows is calculated with the height of the "Normal" font and will
            change if you change the Normal style. When false, the value in <see cref="P:FlexCel.Core.ExcelFile.DefaultRowHeight" /> will be used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DefaultRowHidden">
            <summary>
            When this property is true, rows with no data are hidden by default.
            Note that this property only affects the visibility of empty rows. If for example row 6 is empty and you have this property true,
            then row 6 will be hidden. But if you write any value in a cell in row 6, then the row won't be empty anymore, and it won't be
            hidden anymore either.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteHPageBreak(System.Int32)">
            <param name="row">Row where to delete the Page break.</param>
            <summary>
            Deletes all manual page breaks at row. If there is no manual page break on row, this method will do nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteHyperLink(System.Int32)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <summary>
            Deletes an existing hyperlink.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteImage(System.Int32)">
            <param name="imageIndex">Index of the image to delete. (1 based)</param>
            <summary>
            Deletes the image at position imageIndex.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteNamedRange(System.Int32)">
            <param name="index">Index of the name to delete (1 based).</param>
            <summary>
            Deletes the name at the specified position. <b>Important:</b> If the name you are trying to delete is referenced by any formula/chart/whatever in your file,
            the name will <b>not actually be deleted</b> but hidden. <br /> 
            You won't see the name in Excel or in the formula, but it will be there and you can see it from FlexCel.<br />You can use <see cref="M:FlexCel.Core.ExcelFile.GetUsedNamedRanges" /> to learn if a range might be deleted.<br /><i>Also, note that if you later delete the formulas that reference those ranges FlexCel will remove those hanging ranges when saving.</i>
            The only hidden ranges that will be present in the final file will be those that have active formulas referencing them.
            <br /><br /><b>Important:</b>If the name wasn't deleted, <see cref="P:FlexCel.Core.ExcelFile.NamedRangeCount" /> will not change. This means that you can't have code like this:
            <code>
              while (xls.NamedRangeCount &gt; 0) //WRONG! This loop might never end.
              {
                xls.DeleteNamedRange(1);  //Might not be deleted, and NamedRangeCount will never be 0.
              }
            </code><br />
            The correct code in this case would be:
            <code>
              for (int i = xls.NamedRangeCount; i &gt; 0; i--) xls.DeleteNamedRange(i);
            </code><br /><code lang="vbnet">
              For i = xls.NamedRangeCount To 1 Step -1 xls.DeleteNamedRange(i);
            </code><br /><code lang="Delphi .NET" title="Delphi .NET">
              for i := xls.NamedRangeCount downto 1 do xls.DeleteNamedRange(i);
            </code></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteObject(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteRange(FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode)">
            <param name="cellRange">Range of cells to delete.</param>
            <param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteRange(System.Int32,System.Int32,FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode,System.Boolean)">
            <param name="sheet1">First sheet where to delete cells.</param>
            <param name="sheet2">Last sheet where to delete cells.</param>
            <param name="cellRange">Range of cells to delete.</param>
            <param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
            <param name="removeFormats">If true, both formatting and data will be removed from the range, when clearing a range.
            This parameter has no effect if insertmode isn't one of the "none" options, because if it isn't the full range will move up or left.
            </param>
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteSheet(System.Int32)">
            <param name="aSheetCount">The number of sheets to delete</param>
            <summary>
            Deletes the active sheet and aSheetCount-1 sheets more to the right. 
            It will change all formula references to those sheets to invalid. 
            Note that to add a sheet, you need to use <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.ClearSheet" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteStyle(System.String)">
            <param name="name">Name for the style. It must be an user defined name.</param>
            <summary>
            Returns a named style for the workbook.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteVPageBreak(System.Int32)">
            <param name="col">Column where to delete the Page break</param>
            <summary>
            Deletes all manual page breaks at col. If there is no manual page break on col, this method will do nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.EvaluateUserDefinedFunction(System.String,FlexCel.Core.TUdfEventArgs,System.Object[])">
            <param name="functionName">Function you want to evaluate.</param>
            <param name="arguments">Extra arguments you can use to evaluate the formula.</param>
            <param name="parameters">Parameters for the formula.</param>
            <summary>
            Evaluates a custom function you have added earlier with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)" />. You will not normally need to call this method, but it could be used for testing.
            If the function has not been added with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)" />, this method will return <see cref="F:FlexCel.Core.TFlxFormulaErrorValue.ErrName" />.
            </summary>
            <returns>The result of evaluating the formula. It might be a string, a double, a boolean, a TFlxFormulaError or an Array.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ExcelFileFormat">
            <summary>
            Empty files created by different versions of Excel can have different characteristics. For example, the default font in an Excel 2003 
            file is Arial, while the default in 2007 is Calibri. This property returns the version of file that is loaded into FlexCel.
            When calling <see cref="M:FlexCel.Core.ExcelFile.NewFile(System.Int32,FlexCel.Core.TExcelFileFormat)" /> or when opening a new file, FlexCel will update the value of this property.
            /// </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Export(System.IO.TextWriter,FlexCel.Core.TXlsCellRange,System.Char,System.Boolean)">
            <param name="aTextWriter">TextWriter where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="delimiter">Character used to delimit the fields in the exported file. You might normally use a comma (',') or a tab here. </param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (character delimited columns).
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Export(System.IO.TextWriter,FlexCel.Core.TXlsCellRange,System.Int32,System.Int32[],System.Boolean,System.Boolean)">
            <param name="aTextWriter">TextWriter where we want to save the file.</param>
            <param name="range">Range of cells to export. If you want to export the full sheet, set it to null.</param>
            <param name="charactersForFirstColumn">This value only has effect if columnWidths is null. It will specify how many characters
            to use for the first column, and all other columns will be determined according to their ratio with the first.<br />For example, if the first column is 150 pixels wide and you specify "8" for this parameter, the first column will be padded to 8 characters when exporting.
            If the second column is 300 pixels wide, then it will be padded to 16 characters and so on. As this might not be 100% exact and depend in pixel measurements,
            you might want to specify columnWidths parameter instead of using this one. <br />
            Note: Setting this parameter to a negative value will assume the text in the columns is already padded, and won't attempt to do any padding.
            Use this value if your data is padded in the spreadsheet itself.
            </param>
            <param name="columnWidths">Array with the number of characters that will be assigned to every column when exporting. Supplying this array
            allows you to specify exactly how many characters you want for every field, and that might be really necessary to interop with other applications.
            But you can also leave this parameter null and specify "charactersForFirstColumn" to let FlexCel calculate how many characters to apply for every field.</param>
            <param name="exportHiddenRowsOrColumns">If true, hidden rows and columns will be exported. If false, they will be ignored.</param>
            <param name="exportTextOutsideCells">If true and the cell text spans over more than one empty cell to the right, that text will be exported. When false (the default) only text that fits in the cell will be exported.
            When this value is true the printout will look better, but it will not be possible to reimport the data as the columns are lost.</param>
            <summary>
            Exports a range of cells from the active sheet into a text file (fixed length columns).
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.FileFormatWhenOpened">
            <summary>
            Returns the file format that the file had when it was opened. If the file was created with <see cref="M:FlexCel.Core.ExcelFile.NewFile" />, the
            file format when opened is xls.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)">
            <param name="fullText">Header or footer text.</param>
            <param name="leftText">Text that should be left justified.</param>
            <param name="centerText">Text that should be centered.</param>
            <param name="rightText">Text that should be right justified.</param>
            <summary>
            Given a Page Header or footer string including macros (like [FileName] or [PageNo]), this method
            will return the strings that go into the left, right and middle sections.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Find(System.Object,FlexCel.Core.TXlsCellRange,FlexCel.Core.TCellAddress,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="value">Value we are searching.</param>
            <param name="Range">Range to Search. Null means the whole worksheet.</param>
            <param name="Start">Cell where to start searching. For the first time, use null. After this, you can use the result of this method to get the next cell.</param>
            <param name="ByRows">If true, the value will be searched down then left. If false, the search will go left then down. SEARCH IS FASTER WHEN BYROWS = FALSE</param>
            <param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param>
            <param name="SearchInFormulas">If true, the search will cover formulas too.</param>
            <param name="WholeCellContents">If true, only whole cells will be replaced.</param>
            <summary>
            Finds a value inside a cell and returns the position for the cell, or null if nothing was found.
            </summary>
            <returns>Cell where the string is found, or null if it is not found.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FindNamedRange(System.String,System.Int32)">
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param>
            <summary>
            Returns the index (1 based) on the list of named ranges for a given name and local sheet. If the range is not found, this method will return -1
            You could use <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.Int32)" /> to get the name definition, or directly call <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)" />
            to get a named range knowing its name and sheet position.
            </summary>
            <returns>The index (1 based) in the list of named ranges, or -1 if the range is not found.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FindObjectByShapeId(System.Int64)">
            <param name="ShapeId">Shape id of the object.</param>
            <summary>
            Finds an object given its internal shape id, and returns the object index you need to access the same object in FlexCel.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FindObjectPath(System.String)">
            <param name="objectName">Name of the object we are looking for.</param>
            <summary>
            Finds an object by its name, and returns the ObjectPath you need to use this object.
            Note that if there is more than an object with the same name in the sheet, this method 
            will return null
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.FirstSheetVisible">
            <summary>
            This is the first sheet that will be visible in the bar of sheet tabs at the bottom. Normally you will want this to be 1.
            Note that every time you change <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> this value gets reset, because it makes no sense to preserve it.
            <br />If you want to change it, change it before saving. The same way, to read it, read it just after opening the file.
            <br />Please also note that if the first sheet you select is hidden, FlexCel will ignore this value and select a visible sheet. (otherwise Excel would crash)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.FontCount">
            <summary>
            Number of fonts defined in all the sheet. When calling GetFont(fontIndex), 0&lt;=fontIndex&lt;FormatCount.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.FormatCount">
            <summary>
            Number of custom formats defined in all the file. When calling GetFormat(XF), 0&lt;=XF&lt;FormatCount.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FreezePanes(FlexCel.Core.TCellAddress)">
            <param name="cell">All rows and columns above and to the left of this cell will be frozen. Set it to null or "A1" to unfreeze the panes.</param>
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Freeze Panes. It will freeze
            the rows and columns above and to the left from cell. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)" /> the panes are suppressed and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetFrozenPanes" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetAutoFilterRange">
            <summary>
            Returns the range of cells with AutoFilter in the Active sheet, or null if there is not AutoFilter. The "Bottom"
            coordinate of the returned range has no meaning, only Top, left and right are used. (since AutoFilters only have one row).
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetAutoRowHeight(System.Int32)">
            <param name="row">Row index (1-based)</param>
            <summary>
            Returns if the row is adjusting its size to the cell (the default) or if it has a fixed height.
            </summary>
            <returns>True if AutoFit is on for the row, False if it has a fixed size</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetBuiltInFormat(System.Int32)">
            <param name="formatIndex">Index of the format we want to retrieve.</param>
            <summary>
            Returns one of the 49 built in formats Excel supports. For more information see <see cref="M:FlexCel.XlsAdapter.XlsFile.SetBuiltInFormat(System.Int32,System.String)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)">
            <param name="style">Style you want find out the name.</param>
            <param name="level">Used only if style is <see cref="F:FlexCel.Core.TBuiltInStyle.RowLevel" /> or <see cref="F:FlexCel.Core.TBuiltInStyle.ColLevel" />. It specifies the level of the outline,
            and must be a number between 1 and 7. Keep it 0 for all other styles.</param>
            <summary>
            Returns the name for a built-in style.
            </summary>
            <returns>The name for the Built in style.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCachedFont0">
            <summary>
            This method is used by FlexCel itself, you shouldn't call it directly.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellFormat(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
             Cell Format for a given cell
             This method gets the Format number (XF) of a cell. 
             You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
             <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)" /></summary>
            <returns>XF for the cell.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellFormat(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based).</param>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <summary>
             Cell Format for a given cell
             This method gets the Format number (XF) of a cell. 
             You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
             <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)" /></summary>
            <returns>XF for the cell.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellValue(System.Int32,System.Int32,System.Int32@)">
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="XF">XF format.</param>
            <summary>
            Reads a Cell Value and Format.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             a <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellValue(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <param name="sheet">Sheet where is the cell you want to get the value.</param>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="XF">XF format.</param>
            <summary>
            Reads a Cell Value and Format from a sheet that is not the active sheet.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             a <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellValueIndexed(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <param name="sheet">Sheet where the cell is, 1 based.</param>
            <param name="row">Row, 1 based.</param>
            <param name="colIndex">Column index, 1 based.</param>
            <param name="XF">XF format.</param>
            <summary>
            Reads a Cell Value and Format, using a column index for faster access. Normal GetCellValue(row, col)
            has to search for the column on a sorted list. If you are looping from 1 to <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)" />
            this method is faster.
            </summary>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula" />, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue" /> or
             a <see cref="T:FlexCel.Core.TRichString" />. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetChart(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object where the chart is.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns a chart from an object position and path. If the object does not contain a chart, it returns null.
            Note that charts can be first-level objects (in chart sheets), or they can be embedded inside other objects, that can be
            themselves embedded inside other objects. So you need to recursively look inside all objects to see if there are charts anywhere. <br />
            Look at the example in this topic to see how to get all charts in a sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCheckboxLinkedCell(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the cell that is linked to the checkbox. If the object isn't a checkbox or it isn't linked, this method
            will return null. Note that when you change the value in the cell linked to this checkbox, the value of the checkbox will change.
            <br />The sheet returned in the TCellAddress might be null, in which case the reference is to a cell in the same sheet, or it might
            contain another sheet name.
            </summary>
            <returns>The cell address this checkbox is linked to, or null if it isn't linked. </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCheckboxState(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Gets the value of a checkbox in the active sheet. Note that this only works for <b>checkboxes added through the Forms toolbar.</b> 
            It won't return the values of ActiveX checkboxes.
            </summary>
            <returns>If the checkbox is checked or not.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColCount(System.Int32,System.Boolean)">
            <param name="sheet">Sheet index where you want to find the columns (1 based)</param>
            <param name="includeFormattedColumns">If true (the default) formatted columns (for example a column you selected and painted yellow)
            will be included in the count, even if it doesn't have data.
            </param>
            <summary>
            Number of columns actually used on a given sheet. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColFormat(System.Int32)">
            <param name="col">Column index (1-based)</param>
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColFormat(System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based).</param>
            <param name="col">Column index (1-based)</param>
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColHidden(System.Int32)">
            <param name="col">Column index (1 based)</param>
            <summary>
            Returns true if the column is hidden.
            </summary>
            <returns>True if the column is hidden.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColOptions(System.Int32)">
            <param name="col">Column Index (1 based)</param>
            <summary>
            Returns all Column options at once (if the column is hidden, etc). 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColorPalette(System.Int32)">
            <param name="index">Index of the entry to return. Must be 1&lt;=index&lt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" /></param>
            <summary>
            Returns a color from the color palette. This method will throw an exception if its "index" parameter
            is bigger than <see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" />, (for example, for an automatic color).
            To get the real color, use <see cref="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32,FlexCel.Core.TUIColor)" /></summary>
            <returns>Color at position index.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColorPaletteVersion">
            <summary>
            Internal use. Every time the palette changes, the number returned is incremented. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColorTheme(FlexCel.Core.TThemeColor)">
            <param name="themeColor">Color of the theme to get.</param>
            <summary>
            Returns a color from the active theme palette. 
            Only has effect in Excel 2007.
            <br /> To get the full theme, look at <see cref="M:FlexCel.Core.ExcelFile.GetTheme" /></summary>
            <returns>Color for the given theme.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColOutlineLevel(System.Int32)">
            <param name="col">Column index (1 based)</param>
            <summary>
            Returns the Outline level for a column.
            </summary>
            <returns>Outline level for a column. It is a number between 0 and 7.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColumnBlocks(System.Int32,System.Int32,System.Int32)">
            <param name="sourceSheet">Sheet where we want to read the columns. Pass ActiveSheet if you want to read the current sheet.</param>
            <param name="firstCol">First column of the range where we want to get information. The first block returned might have a firstCol
            smaller than this value, if the block actually starts before in the file.</param>
            <param name="lastCol">Last column of the range where we want to get information. The last block returned might have a lastCol
            bigger than this value, if the block in the file continues after this column.</param>
            <summary>
            This method returns a list of blocks of column information, grouped by columns that have the same properties.
            Since an xlsx file can have 16384 columns, querying every one of them might be slow. With this method, if columns from
            5 to 16384 are hidden, you will get a single block with firstCol = 5 and lastCol = 16384 that is hidden. If you used <see cref="M:FlexCel.Core.ExcelFile.GetColHidden(System.Int32)" />
            instead you would have to call it 16384 times to get the same information.
            </summary>
            <returns>A list of blocks of columns that include all the columns between firstCol and lastCol. The blocks might include more columns outside the range too,
            and null columns inside the range will not be returned. All blocks are sorted in ascending order.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColWidth(System.Int32)">
            <param name="col">Column Index (1 based)</param>
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of "font 0" / 256)
            </summary>
            <returns>Column width in internal excel units.(Character width of "font 0" / 256)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColWidth(System.Int32,System.Boolean)">
            <param name="col">Column Index (1 based)</param>
            <param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param>
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColWidth(System.Int32,System.Int32,System.Boolean)">
            <param name="sheet">Sheet where to look for the width.</param>
            <param name="col">Column Index (1 based)</param>
            <param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param>
            <summary>
            Returns the current Column width for a given sheet, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetComment(System.Int32,System.Int32)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <summary>
            Returns the comment at the specified row and column, or an empty string if there is no comment on that cell.
            </summary>
            <returns>The comment on the specified cell, String.Empty if there is no comment on it.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentProperties(System.Int32,System.Int32)">
            <param name="row">Row index (1 based).</param>
            <param name="col">Column index (1 based)</param>
            <summary>
            Gets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will return null.
            </summary>
            <returns>Placement of the comment popup.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentPropertiesRow(System.Int32,System.Int32)">
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <summary>
            Returns the comment properties for the popup at position commentIndex
            </summary>
            <returns>The comment properties.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentRow(System.Int32,System.Int32)">
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based). See <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)" /></param>
            <summary>
            Returns the comment at position commentIndex on the specified row.
            </summary>
            <returns>Comment at the specified position.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentRowCol(System.Int32,System.Int32)">
            <param name="row">Row with the comment. (1 based)</param>
            <param name="commentIndex">Index of the comment (1 based)</param>
            <summary>
            Returns the column for comment at position commentIndex
            </summary>
            <returns>The column index corresponding to the comment.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCustomXmlPart(System.Int32)">
            <param name="position">1-based index in the collection of custom parts.</param>
            <summary>
            Returns the part at the given position. (1 based)
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetDataValidation(System.Int32,System.Int32,FlexCel.Core.TXlsCellRange@)">
            <param name="row">Row of the cell (1 based)</param>
            <param name="col">Column of the cell (1 based)</param>
            <param name="dvRange">Range of cells where the data validation is applied.</param>
            <summary>
            Returns the validation information for an specific cell. If the cell has no Data Validation associated, this method returns null.
            </summary>
            <returns>The data validation for a cell, or null if the cell has no Data Validation associated.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetDataValidationInfo(System.Int32)">
            <param name="index">Position in the list of data validations. (1 based)</param>
            <summary>
            Returns the data validation information for an entry of the index.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number"><item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)" /> to return the data validation in the cell.</item><item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount" />, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)" /> to loop over all existing data validations.</item></list></summary>
            <returns>Data validation information.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetDataValidationRanges(System.Int32)">
            <param name="index">Position in the list of data validations. (1 based)</param>
            <summary>
            Returns a list of ranges for which a data validation definition applies.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number"><item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)" /> to return the data validation in the cell.</item><item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount" />, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)" /> to loop over all existing data validations.</item></list></summary>
            <returns>A list of cell ranges.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GetDefaultFont">
            <summary>
            Returns Excel standard font for an empty cell.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GetDefaultFontNormalStyle">
            <summary>
            Returns Excel font for the "normal" style. This style is used to draw the row and column headings.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetFont(System.Int32)">
            <param name="fontIndex">Font index. 0-based</param>
            <summary>
            Returns the font definition for a given font index.
            </summary>
            <returns>Font definition</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetFormat(System.Int32)">
            <param name="XF">Format index 0-Based</param>
            <summary>
            Returns the format definition for a given format index. <b>Note that this method will only return
            Cell formats. If you want to read a Style format, use <see cref="M:FlexCel.Core.ExcelFile.GetStyle(System.Int32)" /></b></summary>
            <returns>Format definition</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetFormulaTokens(System.Int32,System.Int32,System.Int32)">
            <param name="sheet">Sheet where the formula is.</param>
            <param name="row">Row of the cell with the formula. (1 based)</param>
            <param name="col">Column of the cell with the formula. (1 based)</param>
            <summary>
            Returns the formula of a cell as an RPN list of tokens that you can use to analyze it. If the cell doesn't
            have a formula, then this method will return null.
            <para>
            Note that the result is an RPN expression, so for example the formula "= 1 * 2 + 3" would be returned as
            "1, 2, *, 3, +". While the formula "= 1 * (2 + 3)" would be returned as
            "1, 2, 3, +, *"
            </para></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetFrozenPanes">
            <summary>
            Returns the cell that is freezing the window, "A1" if no panes are frozen.
            See also <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)" /></summary>
            <returns>The cell that is freezing the window, "A1" if no panes are frozen.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <param name="headerAndFooterKind">Type of page for which we want to retrieve the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to retrieve the image.</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <summary>
            This method returns the images associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" />) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHeaderOrFooterImageProperties(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos)">
            <param name="headerAndFooterKind">Type of page for which we want to retrieve the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to retrieve the image properties.</param>
            <summary>
            Returns the image position and size.
            </summary>
            <returns>Image properties. Null if there is no image on this section.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="htmlVersion">Version of the HTML returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param>
            <param name="htmlStyle">Specifies if to use simple tags or for the returned HTML.</param>
            <param name="encoding">Encoding for the returned string. Use UTF-8 if in doubt.</param>
            <summary>
            Returns the contents of formatted cell as HTML. Conditional formats are not applied, you need to call <see cref="M:FlexCel.Core.ExcelFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)" /> to the cell style for that. 
            If <see cref="P:FlexCel.Core.ExcelFile.ShowFormulaText" /> is true, it will return the formula text instead of the value.
             For a list of HTML tags that might be returned, see the <b>Remarks</b> section.
            </summary>
            <returns>An HTML formatted string with the cell contents.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHyperLink(System.Int32)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <summary>
            Returns the hyperlink at position index on the list.
            </summary>
            <returns>Hyperlink description.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHyperLinkCellRange(System.Int32)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <summary>
            Returns the cell range a hyperlink refers to.
            </summary>
            <returns>Range the hyperlink applies to.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream,System.Boolean)">
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="imageType">
                <b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            <see cref="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)" /> which is a slow method, by setting this parameter to true.</param>
            <summary>
            Returns an image and its type.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetImageName(System.Int32)">
            <param name="imageIndex">Index of the image (1 based)</param>
            <summary>
            Returns the image name at position imageIndex.
            </summary>
            <returns>Image name.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetImageProperties(System.Int32)">
            <param name="imageIndex">Index of the image (1 based)</param>
            <summary>
            Returns image position and size.
            </summary>
            <returns>Image position and size.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetKeepColsTogether(System.Int32)">
            <param name="col">Column index. (1 based)</param>
            <summary>
            Returns the value of level for a column as set in <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepColsTogether(1, 3, 8, true); GetKeepColsTogether will return 8 for columns 1 and 2, and 0 for column 3.
            </summary>
            <returns>The Keep together level of the column.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetKeepRowsTogether(System.Int32)">
            <param name="row">Row index. (1 based)</param>
            <summary>
            Returns the value of level for a row as set in <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)" />. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepRowsTogether(1, 3, 8, true); GetKeepRowsTogether will return 8 for rows 1 and 2, and 0 for row 3.
            </summary>
            <returns>The Keep together level of the row.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetLink(System.Int32)">
            <param name="index">Index of the link (1 based). i goes between 1 and <see cref="P:FlexCel.Core.ExcelFile.LinkCount" /></param>
            <summary>
            Gets the external link at position i. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetNamedRange(System.Int32)">
            <param name="index">Index of the named range.</param>
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" /></summary>
            <returns>Named Range</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetNamedRange(System.String,System.Int32)">
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="refersToSheetIndex">Sheet where the range refers to. A range with the same name might be defined on more than one sheet.<br />
            To get the first range with the name, make refersToSheetIndex&lt;=0
            <br />Note that a name can be stored in one sheet and refer to a different sheet. Or it might not refer to any sheet at all. (for example, the name "=name1+1"
            doesn't refer to any sheet.) And you could have a name "=Sheet1!a1" defined in sheet2. This name will "refer to" sheet1, but be defined in sheet2.
            <br />While names are normally all defined globally (sheet 0), if you need to get the names that are stored in an specific sheet, use
            <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)" /> instead.</param>
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" /></summary>
            <returns>Named Range or null if the range does not exist.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetNamedRange(System.String,System.Int32,System.Int32)">
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="refersToSheetIndex">Sheet where the range refers to. Note that this is <b>not</b> where the name is stored. Normally names are all
            stored globally (in sheet 0), but they refer to an specific sheet. For example, if you define the name "=Sheet2!a1" globally, it will be stored in sheet 0, but will refer to sheet2.
            <br />A name like "=Sheet1:Sheet2!A1 doesn't refer to any sheet.</param>
            <param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param>
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" /></summary>
            <returns>Named Range or null if the range does not exist.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectAnchor(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3".
            You might also use the name of the object as objectpath, like GetObjectAnchor(-1, "@myobjectname");</param>
            <summary>
            Returns the placement of the object.
            </summary>
            <returns>Coordinates of the object.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectInputRange(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the input range for the object. 
            If the object isn't a combobox or listbox, or it doesn't have an input range, this method
            will return null.
            Note that when you change the value in the cell linked to this object, 
            the value of the object will change.
            <br />The sheet in the TCellAddresses returned might be null, in which case the reference is to a cell in the same sheet, or it might
            contain another sheet name.
            </summary>
            <returns>The input range, 
            or null if the object doesn't have an input range. </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectLinkedCell(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the cell that is linked to the object. If the object isn't an object that can be linked or it isn't linked, this method
            will return null.
            Note that when you change the value in the cell linked to this object, 
            the value of the object will change.
            <br />The sheet returned in the TCellAddress might be null, in which case the reference is to a cell in the same sheet, or it might
            contain another sheet name.
            </summary>
            <returns>The cell address this object is linked to, or null if it isn't linked. </returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectMacro(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the macro associated with an object, or null if there is no macro associated.
            </summary>
            <returns>The macro associated with the object, or null if there isn't any macro associated.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectName(System.Int32)">
            <param name="objectIndex">Object index. (1-based)</param>
            <summary>
            Returns the name of the object at objectIndex position.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectProperties(System.Int32,System.String,System.Boolean)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3".
            You might also use the name of the object as objectpath, like GetObjectProperties(-1, "@myobjectname", true);</param>
            <param name="getShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            Returns information on an object and all of its children. If the shape doesn't exist, this method returns null.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectPropertiesByShapeId(System.Int64,System.Boolean)">
            <param name="shapeId">Index of the object (1-based)</param>
            <param name="getShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <summary>
            Returns information on an object and all of its children. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectSelection(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Gets the selected item in an object from the "Forms" palette. It can be a combobox or a listbox. 
            0 means no selection, 1 the first item in the list. Note that this only works for <b>objects added through the Forms toolbar.</b> 
            It won't return the values of ActiveX objects.
            </summary>
            <returns>The position of the selected item in the object. 0 means no selection, 1 the first item is selected.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectShapeId(System.Int32)">
            <param name="objectIndex">Object index. (1-based)</param>
            <summary>
            Returns the shape id of the object at objectIndex position. Shape Ids are internal identifiers for the shape, that you can use to uniquely identify a shape.
            Note that the shape id can change when you load the file, once it is loaded, it will remain the same for the shape lifetime.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectsInRange(FlexCel.Core.TXlsCellRange,FlexCel.Core.TExcelObjectList)">
            <param name="range">Range of cells where we want to find the objects.</param>
            <param name="objectsInRange">In this list we will add all the objects found. note that the objects will be added to the list, so if you want just the objects
            in this range, make sure you clear the list before calling this method.</param>
            <summary>
            Returns a list with all the objects that are completely inside a range of cells.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectSpinProperties(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns maximum, minimum and increment in any control that has a spin or dropdown, like a listbox, combobox, spinner or scrollbar.
            </summary>
            <returns>The spin properties.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectSpinValue(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Returns the current selected value of a scrollbar.
            </summary>
            <returns>The spin position.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetPageHeaderAndFooter">
            <summary>
            This method will return all the headers and footers in a sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetPageHeaderOrFooterAsHtml(System.String,System.String,System.Int32,System.Int32,FlexCel.Core.THtmlVersion,System.Text.Encoding,FlexCel.Core.IHtmlFontEvent)">
            <param name="section">Text to convert. You will normally get this parameter calling <see cref="M:FlexCel.Core.ExcelFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)" /></param>
            <param name="imageTag">Tag to call an image for the section. It must be in the form: "&lt;img src=...&gt;" 
            and you can get the image with <see cref="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@)" /> . If null or empty, no img tag will be present in the resulting HTML, even if the section includes an image.</param>
            <param name="pageNumber">Page we are printing. This parameter will be used if you have text like "Page 1 of 3" in the header.<br />
            If you are exporting to HTML, this value should be 1, since there are no page breaks in an HTML doc.</param>
            <param name="pageCount">Number of pages in the document. This parameter will be used if you have text like "Page 1 of 3" in the header.<br />
            If you are exporting to HTML, this value should be 1, since there are no page breaks in an HTML doc</param>
            <param name="htmlVersion">Version of HTML we are targeting. In HTML 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param>
            <param name="encoding">Code page used to encode the string. Normally this is UTF-8</param>
            <param name="onFont">Method that can customize the fonts used in the resulting string. It can be null if you don't want to do any modification to the fonts.</param>
            <summary>
            Converts a section of a page header or footer into an HTML string. 
            </summary>
            <returns>An HTML string with the section.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetPrinterDriverSettings">
            <summary>
            Returns printer driver settings. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)" /> to copy printer driver information from a file
            to another.
            </summary>
            <returns>The printer driver settings.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetPrintMargins">
            <summary>
            Gets the Margins on the active sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRadioButtonState(System.Int32,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Gets if a radio button in the active sheet is selected or not. Note that this only works for <b>radio buttons added through the Forms toolbar.</b> 
            It won't return the values of ActiveX radio buttons.
            </summary>
            <returns>If the radio button is selected or not.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowCount(System.Int32)">
            <param name="sheet" />
            <summary>
            Number of rows actually used on a given sheet. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowFormat(System.Int32)">
            <param name="row">Row index (1-based)</param>
            <summary>
             Gets the XF format for the specified row, -1 if the row doesn't have format.
             </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowFormat(System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based).</param>
            <param name="row">Row index (1-based)</param>
            <summary>
             Gets the XF format for the specified row, -1 if the row doesn't have format.
             </summary>
            <returns>XF format.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHeight(System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <summary>
            Returns the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <returns>Row height in internal excel units.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHeight(System.Int32,System.Int32,System.Boolean)">
            <param name="sheet">Sheet where to look for the height.</param>
            <param name="row">Row Index (1 based)</param>
            <param name="HiddenIsZero">If true, the height returned for a hidden row will be 0 and not its real height.</param>
            <summary>
            Returns the current Row height for a given sheet, in Excel internal units. (1/20th of a point)
            </summary>
            <returns>Row height in internal Excel units.(1/20th of a point)</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHidden(System.Int32)">
            <param name="row">Row index (1 based).</param>
            <summary>
            Returns true if the row is hidden.
            </summary>
            <returns>True if the row is hidden.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHidden(System.Int32,System.Int32)">
            <param name="sheet">Sheet index (1 based) for the row.</param>
            <param name="row">Row index (1 based).</param>
            <summary>
            Returns true if the row is hidden. This method does not care about ActiveSheet.
            </summary>
            <returns>True if the row is hidden.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowOptions(System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <summary>
            Returns all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary>
            <returns>Row options</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowOutlineLevel(System.Int32)">
            <param name="row">Row index (1 based)</param>
            <summary>
            Returns the Outline level for a row.
            </summary>
            <returns>Outline level for a row. It is a number between 0 and 7.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSelectedCells">
            <summary>
            Returns the selected ranges on a sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetBackground(FlexCel.Core.TXlsImgType@)">
            <param name="imageType">Returns the image type of the bytes returned.</param>
            <summary>
            Gets the sheet background for the active sheet. It will return null if there isn't any background in the sheet.
            </summary>
            <returns>The image data as a byte array.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetIndex(System.String,System.Boolean)">
            <param name="sheetName">Sheet you want to find.</param>
            <param name="throwException">When sheetName does not exist, having
            throwException = true will raise an Exception. throwException = false will 
            return -1 if the sheet is not found.</param>
            <summary>
            Finds a sheet name on the workbook and returns its index.
            Depending on the "throwException" parameter, this method will raise
            an exception or return -1 if the sheet does not exist.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName" />. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetIndexFromID(System.Guid)">
            <param name="aSheetID" />
            <summary>
            Returns the ActiveSheet for a stored <see cref="P:FlexCel.Core.ExcelFile.SheetID" />. 
            You can use this method together with <see cref="P:FlexCel.Core.ExcelFile.SheetID" /> to save and restore
            an ActiveSheet when you are adding or removing sheets.
            <para>If the sheet ID doesn't exist, this method will return 0. </para></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetName(System.Int32)">
            <param name="sheetIndex" />
            <summary>
            Returns the sheet name for a given index.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName" />. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String)" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetSelected(System.Int32)">
            <param name="sheetIndex">Sheet index for the tab we want to know if it is selected. 1 based.</param>
            <summary>
            Returns true if a sheet is selected, false otherwise. Note that you might select many sheets in Excel by shift or ctrl-clicking the
            sheet tabs. Also note that when changing the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" />, the sheet selected will be reset to the active sheet.
            So if you want to find out which sheets are selected in a file, you should call this method after opening the file but before changing the active sheet.
            </summary>
            <returns>True is the sheet is selected, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetType(System.Int32)">
            <param name="sheet">Sheet 1 based.</param>
            <summary>
            Returns the sheet type for a given sheet.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetVisible(System.Int32)">
            <param name="sheet">Sheet index (1 based)</param>
            <summary>
            Returns if a given sheet is visible. 
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSplitWindow">
            <summary>
            Returns the horizontal and vertical offsets for the split windows. Zero means no split.
            See also <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)" /></summary>
            <returns>The horizontal and vertical offsets for the split windows. Zero means no split.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStringFromCell(System.Int32,System.Int32,System.Int32@,FlexCel.Core.TUIColor@)">
            <param name="row">Cell Row (1 based). </param>
            <param name="col">Cell Column (1 based)</param>
            <param name="XF">The resulting XF for the cell.</param>
            <param name="aColor">Resulting color of the string. If for example you define red for negative numbers, and the result is red, this will
            be returned on aColor. If there is not color info on the format, it will remain unchanged.</param>
            <summary>
            This method will return a rich string that is formatted similar to the way Excel shows it.
            For example, if you have "1.0" on a cell, and the cell is formatted as exponential, this method will return "1.0e+1"
            It might also change the color depending on the value and format. (for example, red for negative numbers) 
            </summary>
            <returns>A rich string with the cell value.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStyle(System.Int32)">
            <param name="index">Position in the list of styles (1 based).</param>
            <summary>
            Returns the named style at position index for the workbook
            </summary>
            <returns>The named style definition.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStyle(System.String,System.Boolean)">
            <param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of builtin names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)" /></param>
            <param name="convertToCellStyle">If true, the returned style will have the "IsStyle" property set to false, 
            so you can apply this TFlxFormat to a cell. If false IsStyle will be true and you can use the format definition in style definitions.
            Setting this parameter to true is exactly the same as setting it to false and setting "IsStyle" property in the result to false, and also setting
            the parent of the resulting cell format to the cell style.</param>
            <summary>
            Returns a named style for the workbook. You can also use this method to check if a style exists or not.
            </summary>
            <returns>The style definition, or null if the style doesn't exists.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStyleName(System.Int32)">
            <param name="index">Position in the list of styles (1 based).</param>
            <summary>
            Gets the name of the style at position index. (1 based).
            </summary>
            <returns>The name of the style.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetTable(System.Int32)">
            <param name="tableIndex">Position of the table in the workbook. (1-based)</param>
            <summary>
            Returns the table definition for the table at position tableIndex. (1 based)
            </summary>
            <returns>The table definition. If tableIndex is out of range, then it will throw an Exception.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetTable(System.String)">
            <param name="tableName">Name of the table.</param>
            <summary>
            Returns the definition for a table.
            </summary>
            <returns>Null if the table doesn't exist, or the table definition otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetTheme">
            <summary>
            This is an advanced method, that allows you to get the full theme in use. Normally you will just want to replace colors, and you can do this with
            <see cref="M:FlexCel.Core.ExcelFile.SetColorTheme(FlexCel.Core.TThemeColor,FlexCel.Core.TDrawingColor)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetColorTheme(FlexCel.Core.TThemeColor)" /> methods. Much of the functionality in a theme applies to PowerPoint, not Excel.<br /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetThemeFont(FlexCel.Core.TFontScheme)">
            <param name="fontScheme">Font Scheme we want to get (either minor or major). Using "none" here will return null.</param>
            <summary>
            Gets the major of minor font scheme in the theme.
            </summary>
            <returns>Font definition.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetThemeNoClone">
            <summary>
            Internal use. This won't clone the internal structure for more performance.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetUsedNamedRanges">
            <summary>
            Returns an array of booleans where each value indicates if the name at position "i-1" is used by any formula, chart, or object in the file. If the name is in use, it can't be deleted. Note that the index here is
            Zero-based, different from all other Name indexes in FlexCel, because arrays in C# are always 0-based. So UsedRange[0] corresponds to GetNamedRange(1) and so on.
            </summary>
            <returns>An array of booleans indicating whether each name is used or not.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GetUsedPaletteColors">
            <summary>
            Returns a list of the used colors on the palette. You can use it as an entry to <see cref="M:FlexCel.Core.ExcelFile.NearestColorIndex(FlexCel.Core.TUIColor)" />
            to modify the palette.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetWhatIfTable(System.Int32,System.Int32,System.Int32,FlexCel.Core.TCellAddress@,FlexCel.Core.TCellAddress@)">
            <param name="sheet">Sheet where the table is.</param>
            <param name="row">First cell from where we want to get a what-if table.</param>
            <param name="col">First cell from where we want to get a what-if table.</param>
            <param name="rowInputCell">Returns the row input cell for this table. If the table doesn't have a row input cell, this value is null.</param>
            <param name="colInputCell">Returns the column input cell for this table. If the table doesn't have a column input cell, this value is null.</param>
            <summary>
            Returns the range of cells that make the what-if table that starts at aRow and aCol.
            If there is no What-if table at aRow, aCol, this method returns null.
            <br />If both the returned rowInputCell and colInputCell are null, this means this table points to deleted references.
            </summary>
            <returns>The full range of the table, not including the formula headers. Only the cells where {=Table()} formulas are..</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetWhatIfTableList">
            <summary>
            Returns a list of the upper cells of the What-if tables in the page. You can then use <see cref="M:FlexCel.Core.ExcelFile.GetWhatIfTable(System.Int32,System.Int32,System.Int32,FlexCel.Core.TCellAddress@,FlexCel.Core.TCellAddress@)" /> to get the definition of each one.
            </summary>
            <returns>A list of the coordinates with the first row and column for every what-if table in the sheet.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetWindowScroll(FlexCel.Core.TPanePosition)">
            <param name="panePosition">Pane to return. </param>
            <summary>
            Returns the window scroll for a specified pane.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GridLinesColor">
            <summary>
            Color of the grid separator lines.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasAutoFilter">
            <summary>
            Returns true if the active sheet has any AutoFilter defined.
            </summary>
            <returns>True if the active sheet has an AutoFilter, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasAutoFilter(System.Int32,System.Int32)">
            <param name="row">Row of the cell we want to find out. (1 based)</param>
            <param name="col">Column of the cell we want to find out. (1 based)</param>
            <summary>
            Returns true if a cell has an AutoFilter.
            </summary>
            <returns>True if the cell has an AutoFilter, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasHPageBreak(System.Int32)">
            <param name="row">Row to check.</param>
            <summary>
            True if the sheet has a Manual Horizontal page break on the row.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasKeepColsTogether">
            <summary>
            Returns true if there is any column marked as keeptogether in the sheet.
            This method traverses every column to find out, so it can be somehow slow and you should not call it too often.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasKeepRowsTogether">
            <summary>
            Returns true if there is any row marked as keeptogether in the sheet.
            This method traverses every row to find out, so it can be somehow slow and you should not call it too often.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasMacros">
            <summary>
            Returns true if the file has any macros.
            </summary>
            <returns>True if the file has macros.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasVPageBreak(System.Int32)">
            <param name="col">Column to check</param>
            <summary>
            True if the sheet has a Manual Vertical page break on the column.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HeadingColWidth">
            <summary>
            Width that will be used by the added column with row numbers when <see cref="P:FlexCel.Core.ExcelFile.PrintHeadings" /> is true.
            The default value (0) means to use an automatic value which is fine if you don't have too many rows to print.
            A positive value will make the column wider or narrower. <b>A negative value will auto-calculate the width </b> depending in the 
            number of rows and normal font of the spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HeadingRowHeight">
            <summary>
            Height that will be used by the added row with column headers when <see cref="P:FlexCel.Core.ExcelFile.PrintHeadings" /> is true.
            The default value (0) means to use an automatic value which is fine with normal fonts.
            A positive value will make the column wider or narrower.<b>A negative value will auto-calculate the height </b> depending in the 
            normal font of the spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HeightCorrection">
            <summary>
            Factor to multiply default row heights. See remarks for a detailed explanation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HideZeroValues">
            <summary>
            When true number 0 will be shown as empty. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HPageBreakCount">
            <summary>
            The number of horizontal page breaks in the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HyperLinkCount">
            <summary>
            The count of hyperlinks on the active sheet
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ImageCount">
            <summary>
            The number of images on the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ImageIndexToObjectIndex(System.Int32)">
            <param name="imageIndex">Image index on the image array.</param>
            <summary>
            Returns the general index on the object list for an image. You can use then this index on SendToBack, for example.
            </summary>
            <returns>Image index on the total objects array.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Import(System.IO.TextReader,System.Int32,System.Int32,System.Int32[],FlexCel.Core.ColumnImportType[],System.String[])">
            <param name="aTextReader">StreamReader with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="columnWidths">An array with the column widths for every column you want to import.</param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <summary>
            Imports a text file (fixed length columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Import(System.IO.TextReader,System.Int32,System.Int32,System.Char,System.Char,FlexCel.Core.ColumnImportType[],System.String[])">
            <param name="aTextReader">TextReader with the text to import.</param>
            <param name="firstRow">Row in the Active sheet where we will start importing the text file.</param>
            <param name="firstCol">Column in the Active sheet where we will start importing the text file.</param>
            <param name="delimiter">Character used to separate columns.</param>
            <param name="textQualifier">Character used to quote strings when they contain the delimiter. This is normally the double quote (")
            but you might change it by a single quote or any other character. Use a char 0 if the original file isn't quoted. </param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
            in <see cref="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])" /> for more information on how to use it.
            </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <summary>
            Imports a text file (character-delimited columns) into the current sheet. Note that this method won't clear any existing data.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32,FlexCel.Core.TExcelObjectList)">
            <param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
             be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
             The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param>
            <param name="destRow">Destination row where the cells will be copied.</param>
            <param name="destCol">Destination column where the cells will be copied.</param>
            <param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
             If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param>
            <param name="insertMode">How the cells on destination will be inserted. They can shift down or left. 
             Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param>
            <param name="copyMode">Which cells on sourceRange will be copied. If you intend to replace values on the copied cells,
             you might specify OnlyFormulas. If you just want to <b>insert</b> cells and not copy, specify None.</param>
            <param name="sourceWorkbook">Workbook from where we are copying the cells. This might be the same workbook, and you would by copying from another sheet.</param>
            <param name="sourceSheet">Sheet index on the source workbook. If sourceWorkbook is the same instance as this, and sourceSheet is the active sheet on the instance, this method is equivalent to the simpler overloaded version.</param>
            <param name="ObjectsInRange">Returns the objects that are in the range to be copied. This is an optimization so you don't have to find those objects again. Set it to null to not return any objects</param>
            <summary>
             Inserts and/or copies a range of cells from one place to another.<br />
             This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
             adapting the formulas, images and everything as Excel would do it.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertAndCopySheets(System.Int32[],System.Int32,FlexCel.Core.ExcelFile)">
            <param name="copyFrom">The sheet index of all the sheets we are copying from (1 based).</param>
            <param name="insertBefore">The sheet before which we will insert (1 based). This might be SheetCount+1, to insert at the end of the Workbook.</param>
            <param name="sourceWorkbook">Workbook from where the sheet will be copied from. On this overloaded version it cannot be null.</param>
            <summary>
            Inserts and copies all the sheets in the "CopyFrom" array, before InsertBefore into another workbook.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)">
            <param name="copyFrom">The sheet index of the sheet we are copying from (1 based). Set it to 0 to insert Empty sheets.</param>
            <param name="insertBefore">The sheet before which we will insert (1 based). This might be SheetCount+1, to insert at the end of the Workbook.</param>
            <param name="aSheetCount">The number of sheets to insert.</param>
            <param name="sourceWorkbook">Workbook from where the sheet will be copied from. Null to copy from the same file.</param>
            <summary>
            Inserts and copies sheet "CopyFrom", SheetCount times before InsertBefore.
            If sourceWorkbook is not null, sheets will be copied from another file.
            To insert empty sheets, set CopyFrom=0. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsColMarkedForAutofit(System.Int32)">
            <param name="col">Column number(1 based)</param>
            <summary>
            Returns true is a column is marked for autofit.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsDefinedFunction(System.String,FlexCel.Core.TUserDefinedFunctionLocation@)">
            <param name="functionName">Name of the function. Case insensitive.</param>
            <param name="location">Returns if the function is defined as an internal or external function.</param>
            <summary>
            Returns true if the Custom formula function has been added to the FlexCel recalculating engine.
            Note that internal functions are not returned by this method, but user defined functions pre-defined in FlexCel will be.
            </summary>
            <returns>True if the name has been added, false if not.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsEmptyRow(System.Int32)">
            <param name="row">Row to test (1-based)</param>
            <summary>
            True if the specified row does not have any cells, nor any format on it.
            In short, this row has never been used.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsNotFormattedCol(System.Int32)">
            <param name="col">Column to test (1-based)</param>
            <summary>
            True if the specified column does not have any format applied on it.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeCol(System.Int32)">
            <param name="col">Column to test (1 based)</param>
            <summary>
            Returns true when the column is the one that is used for collapsing an outline. (it has a "+" at the top).
            </summary>
            <returns>True if the node has a "+" mark.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeCollapsedCol(System.Int32)">
            <param name="col">Column to test (1 based)</param>
            <summary>
            Returns true when the column is an outline node (it has a "+" at the top) and it is closed (all children are hidden).
            </summary>
            <returns>True if the column contains a node and it is collapsed, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeCollapsedRow(System.Int32)">
            <param name="row">Row to test (1 based)</param>
            <summary>
            Returns true when the row is an outline node (it has a "+" at the left) and it is closed (all children are hidden).
            </summary>
            <returns>True if the row contains a node and it is collapsed, false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeRow(System.Int32)">
            <param name="row">Row to test (1 based)</param>
            <summary>
            Returns true when the row is the one that is used for collapsing an outline. (it has a "+" at the left).
            </summary>
            <returns>True if the node has a "+" mark.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsRowMarkedForAutofit(System.Int32)">
            <param name="row">Row number(1 based)</param>
            <summary>
            Returns true is a row is marked for autofit.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.IsXltTemplate">
            <summary>
            Determines if the file is a template (xlt format instead of xls, xltx instead of xlsx, or xltm instead of xlsm). Both file formats are nearly identical, but there is an extra record
            needed so the file is a proper xlt template. Note that when saving to a file, FlexCel can detect if this is a template from the 
            extension, and so if you save to *.xlt, *.xltx or *.xltm the file will be saved as template, even if this property is false.
            When saving to a stream, you need to set this property correctly because FlexCel can't guess it from the filename.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="col1">First column of the group you want to keep together.</param>
            <param name="col2">Last column of the group you want to keep together.</param>
            <param name="level">Set this parameter to 0 to remove the condition to keep columns together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together,
            If all columns cannot be kept together in one page, FlexCel will try to keep as much columns with higher levels as possible. See the example for more information.</param>
            <param name="replaceLowerLevels">If true, all existing level values in the column range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in any order. <br />
            For example, if you first call KeepColsTogether(2, 3, 5, false) and then KeepColsTogether(1, 10, 1, false), columns 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of columns 2 and 3 to level 1, making all column levels between 1 and 10 equal to 1.</param>
            <summary>
            Tells FlexCel that it must try to keep together the columns between col1 and col2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks" /> after calling this method.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="row1">First row of the group you want to keep together.</param>
            <param name="row2">Last row of the group you want to keep together.</param>
            <param name="level">Set this parameter to 0 to remove the condition to keep rows together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together. 
            If all rows cannot be kept together in one page, FlexCel will try to keep as much rows with higher levels as possible. See the example for more information.</param>
            <param name="replaceLowerLevels">If true, all existing level values in the row range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in any order. <br />
            For example, if you first call KeepRowsTogether(2, 3, 5, false) and then KeepRowsTogether(1, 10, 1, false), rows 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of rows 2 and 3 to level 1, making all row levels between 1 and 10 equal to 1.</param>
            <summary>
            Tells FlexCel that it must try to keep together the rows between row1 and row2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks" /> after calling this method.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.LightClone">
            <summary>
            Returns a copy of this ExcelFile object with the same backing data, so the cells in both objects are the same.
            Using a light clone allows you to read from a single ExcelFile in two different threads, since while the data is the same
            (so you don't use twice the memory as a real clone would), you can have separate activesheets in both. So one thread can be reading
            from the "original" file with ActiveSheet = 1, and the other thread could be reading from the light clone with activeSheet = 3.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.Linespacing">
            <summary>
            A Linespacing of 1 means use the standard GDI+ linespace when a cell has more than one line. A linespace of 2 would mean
            double linespacing, and 0.5 would mean half linespacing. Normally linespacing in Excel is a little bigger than linespacing in GDI+,
            so you can use this property to fine tune what you need.<br /><b>This property doesn't alter the Excel file in any way. It is only used when rendering.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.LinkCount">
            <summary>
            Returns the number of external links for the file. You can access those links with <see cref="M:FlexCel.Core.ExcelFile.GetLink(System.Int32)" /> and <see cref="M:FlexCel.Core.ExcelFile.SetLink(System.Int32,System.String)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MarkColForAutofit(System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="col">Column index (1 based)</param>
            <param name="autofit">Set this to true to mark the column for autofitting, false for removing the column from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br />A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br />maxWidth = 0 means no maxWidth.
            <br />A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
            <param name="isMerged">If true, only the cell will be autofitted, not the whole column.</param>
            <summary>
            Marks a column as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the column 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double)" />.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Double,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="row">Row index (1 based)</param>
            <param name="autofit">Set this to true to mark the row for autofitting, false for removing the row from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that amount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br />A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br />maxHeight = 0 means no maxHeight.
            <br />A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="isMerged">If true, only the cell will be autofitted, not the whole row.</param>
            <summary>
            Marks a row as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the row 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Double)" />. To change the actual autofit status on the xls file, use <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)" /><b>NOTE</b>: This method will not mark empty rows.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">First row of the merged cell.</param>
            <param name="firstCol">First column of the merged cell.</param>
            <param name="lastRow">Last row of the merged cell.</param>
            <param name="lastCol">Last column of the merged cell.</param>
            <summary>
            Merges a number of cells into one.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MoveRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.Boolean)">
            <param name="cellRange">Range you want to move.</param>
            <param name="newRow">Row where the range will be relocated.</param>
            <param name="newCol">Column where the range will be relocated.</param>
            <param name="insertMode">This parameter switches between 2 different working modes:
            <list type="bullet"><item>
            Modes NoneDown and NoneRight are the same, and work the same way as when you drag a range of cells in Excel to 
            a new location. Cells on the new range will be replaced by the old, and cells where the old range was located will be cleared(not deleted).
            No cells are inserted or deleted.
            </item><item>
            The other modes behave like when you select a range in Excel, cut it, and then right click and select "Insert Cut Cells...". The old range will be inserted
            where the new range goes, cells where the old range was will be deleted(not cleared). 
            Using for example MoveRange(CellRange, newRow, newCol, TFlxInsertMode.ShiftRight) is equivalent to:
            1) InsertAndCopyRange(CellRange, newRow, newCol, 1, TFlxInsertMode.ShiftRight, TRangeCopyMode.None); 
            2) MoveRange(CellRange, newRow, newCol, TFlxInsertMode.NoneRight);  
            3) DeleteRange(CellRange, TFlxInsertMode.ShiftRight);
            </item></list></param>
            <param name="fixAllFormulas">If true (the default) FlexCel will correctly adapt all the references in all formulas
            everywhere. If false only the formulas being moved will be changed. The results with this parameter = false are incorrect
            if you have formulas pointing to the range moved, but is faster if you know no formulas point to cells inside the range moved.
            You should normally keep this parameter = true. FlexCel uses it false to emulate the way Excel sorts (which is wrong).</param>
            <summary>
            Moves a range of cells, the same way Excel does it. All references pointing to the old range will be relocated to the new, and all
            existing references to the new range will be relocated to #ref. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.NamedRangeCount">
            <summary>
            The count of all named ranges on the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NearestColorIndex(FlexCel.Core.TUIColor)">
            <param name="value">Color we want to use.</param>
            <summary>
            Returns the most similar entry on the excel palette for a given color.
            </summary>
            <returns>Most similar color on the Excel palette.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NearestColorIndex(FlexCel.Core.TUIColor,System.Boolean[])">
            <param name="value">Color we want to use.</param>
            <param name="UsedColors">If null, this behaves like the standard NearestColorIndex. 
            To get a list of used colors for the first call, use <see cref="P:FlexCel.Core.ExcelFile.GetUsedPaletteColors" />.
            After the first call, keep using the same UsedColors structure and do not call GetUsedPaletteColors again, to avoid overwriting colors
            that are not yet inserted into the xls file with new ones. You can call GetUsedPaletteColors only after you added the format with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /></param>
            <summary>
                <b>IMPORTANT:</b> Since FlexCel 5.1, using <see cref="M:FlexCel.Core.ExcelFile.OptimizeColorPalette" /> before saving should normally be used instead of this method
            to get an optimized palette. Just enter the true colors in FlexCel, and call <see cref="M:FlexCel.Core.ExcelFile.OptimizeColorPalette" /> before saving.<br />
            Returns the most similar entry on the excel palette for a given color.
            If UsedColors is not null, it will try to modify the Excel color palette
            to get a better match on the color, modifying among the not used colors. 
            Note that modifying the standard palette
            might result on a file that is not easy to edit on Excel later, since it does not have the standard Excel colors.
            </summary>
            <returns>Most similar color on the Excel palette.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NearestColorTheme(FlexCel.Core.TUIColor,System.Double@)">
            <param name="value">Color we want to use.</param>
            <param name="tint">Returns the tint to apply to the theme color.</param>
            <summary>
            Returns the most similar entry on the theme palette for a given color.
            </summary>
            <returns>Most similar color on the theme palette.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.NeedsRecalc">
            <summary>
            Internal use.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NewFile(System.Int32,FlexCel.Core.TExcelFileFormat)">
            <param name="aSheetCount">Number of sheets for the new file.</param>
            <param name="fileFormat">Different Excel versions save different empty files. By default, FlexCel will create a new file that looks
            like a file created by Excel 2003, but you can change the version of the new file created with this parameter.</param>
            <summary>
            Creates a new empty file, with the specified number of sheets.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ObjectCount">
            <summary>
            Count of all graphical objects on the sheet. They can be charts, images, shapes, etc.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ObjectIndexToImageIndex(System.Int32)">
            <param name="objectIndex">General index of the image on the Object collection.</param>
            <summary>
            Returns the index on the image collection of an object. <b>Note that this method is slow</b> when there are many images, so use it sparingly.
            </summary>
            <returns>-1 if the object is not an image, else the index on the image collection.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.OffsetRelativeFormula(System.Int32,System.Int32,System.Int32,System.String)">
            <param name="activeSheet">Sheet where you are positioned when doing the calculation. You might pass xls.ActiveSheet here.</param>
            <param name="cellRow">Row of the cell where the relative formula is. </param>
            <param name="cellCol">Column of the cell where the relative formula is.</param>
            <param name="expression">Formula to offset. It must start with "=", and be a valid Excel formula.</param>
            <summary>
            Use this method to know the actual formula that applies to a cell when the formula is relative.
            In some places, mostly data validations and names, Excel returns relative formulas. <br />
            So for example you might have a name with
            a definition of "=Sheet1!A2" when you are positioned at cell A1. If you now move the cursor to cell A2 in Excel, the name definition will
            be "=Sheet1!A3" since the reference is relative to the cell where the cursor is. If you retrieve the name formula with FlexCel, as FlexCel 
            doesn't have a cursor, it will always return the canonical formula as if you were positioned at A1. If you want to know the real formula
            when you are positioned at A2, you need to call this method with cellRow =3, cellCol = 1 and expression = "=Sheet1!A2". It will return
            "=Sheet1!A3". 
            </summary>
            <returns>The formula with relative references changed to match the cell at cellRow, cellCol</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param>
            <param name="fileFormat">List with possible file formats to try.</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.<br /> See the example
             for more information on how to use it.
             </param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
             like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt).
             If you specify an encoding for xls95 files, it will overwrite the default encoding specified in the file, and this can be used to read 
             buggy or corrupted xls95 files. But in general for xls95 you should keep this parameter null.<br />
             This parameter has no effect on xls 97 files or xlsx. If null when reading text files, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
             Loads a new Spreadsheet from a stream, on one of the specified formats.
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Open(System.String,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.String[],System.Text.Encoding,System.Boolean)">
            <param name="fileName">File to open</param>
            <param name="fileFormat">List with possible file formats to try</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="firstCol">First column where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType" /> elements, telling how each column should be imported.</param>
            <param name="dateFormats">A list of formats allowed for dates and times, when opening text files. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values. This value has no meaning in normal xls files, only text files.</param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt).
            If you specify an encoding for xls95 files, it will overwrite the default encoding specified in the file, and this can be used to read 
            buggy or corrupted xls95 files. But in general for xls95 you should keep this parameter null.<br />
            This parameter has no effect on xls 97 files or xlsx. If null when reading text files, it is assumed to be Encoding.UTF8.</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
            <summary>
            Loads a new Spreadsheet form disk, on one of the specified formats.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.OptimizeColorPalette">
            <summary>
            Changes the colors in the color palette so they can represent better the colors in use. This method will change the colors not used in the palette
            by colors used in the sheet. If there are more unique colors in the sheet than the 56 available in the palette, only the first colors will be changed.
            <br />
            When FlexCel saves an xls file, it saves the color information twice: The real color for Excel 2007 and newer, and the indexed color
            for older Excel versions. This method optimizes the palette of indexed colors so they look better in Excel 2003 or older. It doesn't effect
            Excel 2007 or newer at all.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsAutoCompressPictures">
            <summary>
            If true, Excel will try to compress the pictures to keep sizes down.
            This option only applies to Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsBackup">
            <summary>
            Defines whether to save a backup copy of the workbook or not.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsCheckCompatibility">
            <summary>
            Whether the "Check for compatibility" dialog will pop up when saving as xls in Excel 2007 or newer.
            This option only applies to Excel 2007 or newer. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsDates1904">
            <summary>
            Excel has 2 different date systems. On windows systems it uses 1900 based dates, and on Macintosh systems it uses 1904 dates.
            You can change this on Excel under Options, and this property allows you to know and change which format is being used.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsForceFullRecalc">
            <summary>
            If true, the full workbook will be recalculated when open in Excel.
            This option only applies to Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsMultithreadRecalc">
            <summary>
            Number of threads that can be used at the same time by Excel when recalculating. Set it to 0 to disable multithread recalculation, and to -1
            to let Excel decide the best number of threads to use. The maximum value for this property is 1024.<br />
            This option only applies to Excel 2007 or newer.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsPrecisionAsDisplayed">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsR1C1">
            <summary>
            Use this property to change the reference system used in the file. Note that this option <b>only changes how Excel and
            FlexCel will display the file.</b> Internally, the formulas will always be stored in A1 format, and converted by Excel
            to and from R1C1 if this property is true. FlexCel will also use this property to render the file when it is set to print formulas.
            <br /><br />Also, this property doesn't change how FlexCel will parse or return the formula text in the cells or names. 
            By default, even if this property is true, you will need to enter the formulas in FlexCel in A1 mode. To change the
            entry mode in FlexCel, please use <see cref="P:FlexCel.Core.ExcelFile.FormulaReferenceStyle" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsRecalcCircularReferences">
            <summary>
            If true, Excel and FlexCel will do iterative calculating over cells with circular references,
            until <see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcMaxIterations" /> is reached or the difference is less than <see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcMaxChange" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsRecalcMaxChange">
            <summary>
            Maximum difference between 2 iterations when calculating circular references (<see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcCircularReferences" /> is true),
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsRecalcMaxIterations">
            <summary>
            Maximum number of iterations when calculating circular references (<see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcCircularReferences" /> is true),
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsRecalcMode">
            <summary>
            Reads and writes the recalculating options in the file. 
            <b>Note that this only affects the file and how Excel will recalculate, not how FlexCel does its recalculation.</b>
            FlexCel ignores this setting and uses <see cref="P:FlexCel.Core.ExcelFile.RecalcMode" /> instead.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsSaveExternalLinkValues">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OutlineAutomaticStyles">
            <summary>
            This handles the setting of Automatic Styles inside the outline options.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OutlineSummaryColsRightToDetail">
            <summary>
            Determines whether the summary columns should be right to or left to the details on outline.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OutlineSummaryRowsBelowDetail">
            <summary>
            Determines whether the summary rows should be below or above details on outline.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PageFooter">
            <summary>
            Page footer on the active sheet. For a description on the format of the string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PageHeader">
            <summary>
             Page header on the active sheet.
             <b>Note that this property sets the same header for the all the pages.</b> In Excel 2007 or newer you can set a different
             header for the first page, or odd/even pages. If you want to control these options, see <see cref="M:FlexCel.Core.ExcelFile.GetPageHeaderAndFooter" /> and <see cref="M:FlexCel.Core.ExcelFile.SetPageHeaderAndFooter(FlexCel.Core.THeaderAndFooter)" />.
             <br />
             A page header is a string that contains the text for the 3 parts of the header.<p />
             The Left section begins with &amp;L, the Center section with &amp;C and the Right with &amp;R<p />
             For example, the text"&amp;LThis goes at the left!&amp;CThis is centered!&amp;RThis is right aligned"
             will write text to all the sections.
             <p /><p />
             This is the full list of macros you can include:
            <p /><list type="bullet"><item>&amp;&amp; The "&amp;" character itself</item><item>&amp;L Start of the left section</item><item>&amp;C Start of the centered section</item><item>&amp;R Start of the right section</item><item>&amp;P Current page number</item><item>&amp;N Page count</item><item>&amp;D Current date</item><item>&amp;T Current time</item><item>&amp;A Sheet name</item><item>&amp;F File name without path</item><item>&amp;Z File path without file name (XP or Newer)</item><item>&amp;G Picture (XP or Newer)</item><item>&amp;U Underlining on/off</item><item>&amp;E Double underlining on/off</item><item>&amp;S Strikeout on/off</item><item>&amp;X Superscript on/off</item><item>&amp;Y Subscript on/off</item><item>&amp;"&lt;fontname&gt;" Set new font &lt;fontname&gt;</item><item>&amp;"&lt;fontname&gt;,&lt;fontstyle&gt;" Set new font with specified style &lt;fontstyle&gt;. The style &lt;fontstyle&gt; is in most cases
             one of "Regular", "Bold", "Italic", or "Bold Italic". But this setting is dependent on the
             used font, it may differ (localized style names, or "Standard", "Oblique", ...).</item><item>&amp;&lt;fontheight&gt; Set font height in points (&lt;fontheight&gt; is a decimal value). If this command is followed
             by a plain number to be printed in the header, it will be separated from the font height
             with a space character.</item></list><p />
             Normally, the easiest way to find out which header string you need is to create an xls file on Excel, add a header, open the file
             with FlexCel and take a look at the generated header (You can use the ApiMate tool for that).
             </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.PaletteContainsColor(FlexCel.Core.TExcelColor)">
            <param name="value">Color to check.</param>
            <summary>
            Returns true if the internal color palette contains the exact specified color. Note that Excel 2007 doesn't use the color palette, so this
            method is not needed there.
            </summary>
            <returns>True if color is defined.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.PasteFromTextClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.String)">
            <param name="row">First row where to paste.</param>
            <param name="col">First column where to paste.</param>
            <param name="insertMode">How the pasted cells will be inserted on the file.</param>
            <param name="data">A string containing a tab separated text format.</param>
            <summary>
            Pastes the clipboard contents beginning on cells row, col.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.PasteFromXlsClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.IO.Stream,System.Boolean)">
            <param name="row">First row where to paste.</param>
            <param name="col">First column where to paste.</param>
            <param name="insertMode">How the pasted cells will be inserted on the file.</param>
            <param name="data">A stream containing a Native xls format.</param>
            <param name="convertFormulasToValues">If true, the formulas will be converted to values.</param>
            <summary>
            Pastes the clipboard contents beginning on cells row, col, with the option to convert formulas to their values.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintCopies">
            <summary>
            Number of copies to print.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintFirstPageNumber">
            <summary>
            Page number that will be assigned to the first sheet when printing. (So it will show in page headers/footers).
            You might set this value to null to keep the page automatic. Also, the value returned here will be null it
            this value is not set (Set to Automatic)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintGridLines">
            <summary>
            True if the gray grid lines are printed when printing the spreadsheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintHCentered">
            <summary>
            When true the sheet will print horizontally centered on the page.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintHeadings">
            <summary>
            When true the row and column labels (A,B...etc for columns, 1,2... for rows) will be printed.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintLandscape">
            <summary>
            If true, page will be printed landscape, else portrait.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintNumberOfHorizontalPages">
            <summary>
            If set, the sheet will be printed on at most this number of horizontal pages. Use 0 to have unlimited horizontal pages while still limiting the vertical pages with <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages" />. (see "Preparing for printing" in the PDF Api Guide) <seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintNumberOfVerticalPages">
            <summary>
            If set, the sheet will be printed on at most this number of vertical pages. Use 0 to have unlimited vertical pages while still limiting the horizontal pages with <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages" />. (see "Preparing for printing" in the PDF Api Guide)<seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintOptions">
            <summary>
            All print options in a single place.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintPaperDimensions">
            <summary>
            Returns the dimensions for the selected paper. See also <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintPaperSize">
            <summary>
            Pre-defined standard paper size. If you want to set up a printer specific paper size, see <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintScale">
            <summary>
            Percent to grow/shrink the sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintToFit">
            <summary>
            If true, sheet will be configured to fit on <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages" /> x <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages" />.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintVCentered">
            <summary>
            When true the sheet will print vertically centered on the page.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintXResolution">
            <summary>
            Horizontal printer resolution on DPI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintYResolution">
            <summary>
            Vertical printer resolution on DPI.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Recalc(System.Boolean)">
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            When <see cref="P:FlexCel.Core.ExcelFile.RecalcMode" /> is manual, use this method to force a recalculation of the spreadsheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RecalcAndVerify">
            <summary>
            Use this method to validate a file. FlexCel does not support all the range of functions from Excel
            when recalculating, so unknown functions will return "#NAME!" errors. Using this function you can validate
            your user worksheets and see if all the formulas they use are supported.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RecalcCell(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="sheet">Sheet for the cell we want to recalculate. Use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> here to refer to the active sheet.</param>
            <param name="row">Row for the cell we want to recalculate. (1 based)</param>
            <param name="col">Column for the cell we want to recalculate. (1 based)</param>
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            This method will recalculate a single cell and all of it's dependencies, but not the whole workbook.<br /><b>USE THIS METHOD WITH CARE!</b> You will normally want to simply call <see cref="M:FlexCel.Core.ExcelFile.Recalc" /> or just save the file and let FlexCel calculate the workbook for you. 
            This method is for rare situations where you are making thousands of recalculations and the speed of Recalc is not enough, 
            and you have a big part of the spreadsheet that you know that didn't change.
            </summary>
            <returns>The result of the formula at the cell, or null if there is no formula.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RecalcExpression(System.String,System.Boolean)">
            <param name="expression">Formula to evaluate. It must start with "=" and be a valid Excel formula.</param>
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            Calculates the value of any formula and returns the result. The expression must be a valid Excel formula, it must start with "=",
            and cell references that don't specify a sheet (like for example "=A2") will refer to the active sheet. Cells used by the formula will be recalculated as needed too.<br />
            You can use this method as a simple calculator, or to calculate things like the sum
            of a range of cells in the spreadsheet. Look at the example for more information on how to use it. <br />
            Note that we will consider the expression to be located in
            the cell A1 of the Active sheet. So for example "=ROW()" will return 1, and "=A2" will return the value of A2 in the active sheet.
            </summary>
            <returns>The value of the calculated formula.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.RecalcMode">
            <summary>
             Set this property to change how the file will be recalculated. Note that this affects only
             how FlexCel recalculates the file, but not how Excel will recalculate it. It doesn't change anything in 
             the generated file. To change the options for the file, use <see cref="P:FlexCel.Core.ExcelFile.OptionsRecalcMode" /> instead.
             </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RecalcRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <param name="activeSheet">Sheet where you are positioned when doing the calculation. You might pass xls.ActiveSheet here.</param>
            <param name="activeRow">Row where you are positioned when doing the calculation. This only matters if you have functions
            that change depending on the cell you are in. (Mainly =Row() and =Column() functions).
            If you are not sure, specify 1 here.</param>
            <param name="activeCol">Column where you are positioned when doing the calculation. This only matters if you have functions
            that change depending on the cell you are in. (Mainly =Row() and =Column() functions).
            If you are not sure, specify 1 here.</param>
            <param name="rowOffset">Offset from the first cell of a range. This only matters if you have relative
            references that change depending on the cell you are in. (This is the case with named ranges or data validations and relative references like A1 instead of $A$1).
            If you are not sure, specify 0 here.</param>
            <param name="colOffset">Offset from the first cell of a range. This only matters if you have relative
            references that change depending on the cell you are in. (This is the case with named ranges or data validations and relative references like A1 instead of $A$1).
            If you are not sure, specify 0 here.</param>
            <param name="expression">Formula to evaluate. It must start with "=", be a valid Excel formula and resolve to a range of cells.</param>
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet.
            While for performance reasons you will normally want to keep this false, you might need to set it to true if the formulas refer to functions like "=NOW()" or "=RANDOM()"
            that change every time you recalculate.</param>
            <summary>
            This method recalculates a formula that returns a range, and returns the cells that compose it. Note that normally
            ranges are a single rectangle (like in "=A1:B2"), and in this case this method will return a single element in the array.
            But you might have a formula like "=A1:A10, C6:C7" which will return two different ranges. In this case, the returned array will have more than one TCellAddressRange.
            If the formula doesn't resolve to a range or group of ranges, this method will return null.
            </summary>
            <returns>The array of ranges that the formula refers to.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RecalcRelativeFormula(System.Int32,System.Int32,System.Int32,System.String)">
            <param name="activeSheet">Sheet where you are positioned when doing the calculation. You might pass xls.ActiveSheet here.</param>
            <param name="cellRow">Row of the cell where the relative formula is. </param>
            <param name="cellCol">Column of the cell where the relative formula is.</param>
            <param name="expression">Formula to offset. It must start with "=", and be a valid Excel formula.</param>
            <summary>
            Use this method to know the value of a formula that applies to a cell when the formula is relative.
            In some places, mostly data validations and names, Excel returns relative formulas. <br />
            So for example you might have a name with
            a definition of "=Sheet1!A2" when you are positioned at cell A1. If you now move the cursor to cell A2 in Excel, the name definition will
            be "=Sheet1!A3" since the reference is relative to the cell where the cursor is. If you use <see cref="M:FlexCel.Core.ExcelFile.RecalcExpression(System.String)" />
            to know the result of the formula, as FlexCel 
            doesn't have a cursor, it will always return the canonical formula as if you were positioned at A1. If you want to know the real formula
            when you are positioned at A2, you need to call this method with cellRow =3, cellCol = 1 and expression = "=Sheet1!A2". It will return
            the result of the formula "=Sheet1!A3". 
            </summary>
            <returns>The value of the calculated formula</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.Recalculating">
            <summary>
            Internal use.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.RecalcVersion">
            <summary>
             Defines which version of Excel recalculation engine will be saved in the file. This affects
             how Excel will recalculate the file on open.<br /><br />
             If you set this property for example to Excel2007, then any Excel version newer than Excel 2007 
             will recalculate all formulas when you load the file, so it will
             modify the workbook and will ask for saving changes when closing. Even if you just open and close the file.
             Note that this will only happen if there are formulas on the sheet.
            <p><b>If there are any formulas that FlexCel can't recalculate, you should set this property to AlwaysRecalc.</b>
             For example, if you have the formula:
            <code>"=GETPIVOTDATA("a";"b")"</code> 
            FlexCel will return #NAME!, as it doesn't implement this function. If you open this file on Excel and 
            RecalcVersion was not AlwaysRecalc when saving, Excel will not calculate it and will show also #NAME!.
            If RecalcVersion was AlwaysRecalc, Excel will show the right answer, but will ask for saving the file when closing.
            </p></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RemoveAutoFilter">
            <summary>
            Removes the AutoFilter from the active sheet. If there is no AutoFilter in the sheet, this method does nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RemoveCustomXmlPart(System.Int32)">
            <param name="position">1-based index in the collection of custom parts.</param>
            <summary>
            Deletes the part at the given position. ( 1 based) 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RemoveMacros">
            <summary>
            If the file has macros, this method will remove them.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RemoveUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,System.String)">
            <param name="scope" />
            <param name="functionName">Name of the function. Case insensitive.</param>
            <summary>
            Removes a single function from the FlexCel recalculation engine. If the function doesn't exist, this 
            method will return false.
            </summary>
            <returns>True if the function existed and was removed, false if it didn't exist.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenameStyle(System.String,System.String)">
            <param name="oldName">Name of the existing style in the workbook.</param>
            <param name="newName">New name for the style. It must not exist.</param>
            <summary>
            Renames an existing style. Note that this might be an user-defined style, you can't rename built-in styles.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenderCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Double,FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUIInterpolationMode,System.Boolean,System.Double)">
            <param name="row1">Index of the first row to render. (1 based).</param>
            <param name="col1">Index of the first column to render (1 based).</param>
            <param name="row2">Index of the last row to render. (1 based).</param>
            <param name="col2">Index of the last column to render (1 based).</param>
            <param name="drawBackground">If true, the image will have a solid background with the color of the cells. If false, the image will have
            a transparent background.</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see "System.Drawing.Drawing2D.SmoothingMode"</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see "System.Drawing.Drawing2D.InterpolationMode"</param>
            <param name="antiAliased">If true text will be antialiased when rendering.</param>
            <param name="aPrintScale" />
            <summary>
            This method renders a range of cells into an image, and returns it.<br /> 
            No objects will be drawn on the cells, you can use <see cref="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)" /> to draw those.<br /><b>Important note:</b> This method will only render the text inside the cell, not the borders or anything else. If you want to 
            export an xls file to images, you probably want to use <see cref="T:FlexCel.Render.FlexCelImgExport" /></summary>
            <returns>An image with the rendered cells.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenderObject(System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUISmoothingMode,FlexCel.Core.TUIInterpolationMode,System.Boolean,System.Boolean,FlexCel.Core.TUIColor,System.Double,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@,FlexCel.Core.TUISize@)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see "System.Drawing.Drawing2D.SmoothingMode"</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see "System.Drawing.Drawing2D.InterpolationMode"</param>
            <param name="antiAliased">If true text will be antialiased when rendering for example a chart.</param>
            <param name="returnImage">If false, this method will return null. Use it if you need to know the image dimensions, but do not care about the real image since it is faster and uses less resources.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="aPrintScale" />
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image. You can get the image size in pixels just by looking at the image returned.</param>
            <param name="imageSizePixels">Size of the returned image in pixels. You only need to use this if returnImage is false, since the returned bitmap will be null. Otherwise, you can just read the bitmap size.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenderObjectAsSVG(System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUIColor,FlexCel.Core.TSVGExportType,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{FlexCel.Core.TSVGAttribute},System.Text.Encoding,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@)">
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="aPageScale">Page scale. Use 1 for 100%</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="exportType">How much of the SVG will be exported.</param>
            <param name="idPrefix">
            Prefix to be used in all definitions inside the svg file. For normal SVG files you can leave this null,
            but if you are embedding the files inside an html file, you need to ensure every image has unique identifiers.
            All SVG identifiers from different images inside an html file must be unique.
            </param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="extraSVGAttributes">Extra attributes to be added to the svg tag.</param>
            <param name="encoding">Encoding that will be declared for the xml file if exportType is All.
            Note that the result string will always be UTF16 encoded, but if you want to save it to an UTF8 file,
            you will have to set encoding = utf8. Also note that this parameter is only used if the exportType parameter is All.
            It only affects the xml declaration.<br />If null, utf-8 will be used.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image.</param>
            <summary>
            This method renders any object (chart, image, autoshape, etc) into an SVG image, and returns the XML for the image.
            </summary>
            <returns>Might return null if the image is not visible.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenderObjectAsSVG(System.IO.Stream,System.Int32,System.Double,FlexCel.Core.TShapeProperties,FlexCel.Core.TUIColor,FlexCel.Core.TSVGExportType,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{FlexCel.Core.TSVGAttribute},System.Text.Encoding,FlexCel.Core.TPointF@,FlexCel.Core.TUIRectangle@)">
            <param name="resultStream">Stream where the data will be saved.</param>
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="aPageScale">Page scale. Use 1 for 100%</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" />.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use TUIColor.Empty.</param>
            <param name="exportType">How much of the SVG will be exported.</param>
            <param name="idPrefix">
            Prefix to be used in all definitions inside the svg file. For normal SVG files you can leave this null,
            but if you are embedding the files inside an html file, you need to ensure every image has unique identifiers.
            All SVG identifiers from different images inside an html file must be unique.
            </param>
            <param name="title">Title for the image. It will be saved inside the SVG file.</param>
            <param name="description">Description for the image. It will be saved inside the SVG file.</param>
            <param name="extraSVGAttributes">Extra attributes to be added to the svg tag.</param>
            <param name="encoding">Encoding that will be used for the xml.<br />If null, utf-8 will be used.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)" /> because shadows or rotation of the image.</param>
            <summary>
            This method saves any object (chart, image, autoshape, etc) into an SVG image inside a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Replace(System.Object,System.Object,FlexCel.Core.TXlsCellRange,System.Boolean,System.Boolean,System.Boolean,System.Action{FlexCel.Core.TReplaceAction})">
            <param name="oldValue">Value we want to replace.</param>
            <param name="newValue">Value we want to use to replace oldValue.</param>
            <param name="Range">Range to Search. Null means the whole worksheet.</param>
            <param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param>
            <param name="SearchInFormulas">If true, the search will cover formulas too.</param>
            <param name="WholeCellContents">If true, only whole cells will be replaced.</param>
            <param name="ReplaceAction">Action to be performed in every replacement.</param>
            <summary>
            Replaces the instances of oldValue by newValue in the active sheet, and allows to specify the cell format and value for every replaced cell.
            </summary>
            <returns>The number of replacements done.</returns>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.RowCount">
            <summary>
            Number of rows actually used on the sheet. 
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <param name="fileFormat">File format. Automatic will try to guess it from the filename, if present.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls files. If omitted, Encoding.UTF8 will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Saves the file to a stream.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Save(System.String,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles" /> is false, then fileName MUST NOT exist.</param>
            <param name="fileFormat">File format.  Automatic will try to guess it from the filename, if present.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text" /></param>
            <param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls/x files. If omitted, Encoding.UTF8 will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
            <summary>
            Saves the file to a disk.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SaveForHashing(System.IO.Stream,FlexCel.Core.TExcludedRecords)">
            <param name="aStream">Stream where the file will be saved. You will probably want to hash this stream to store the corresponding hash.</param>
            <param name="excludedRecords">A list with all the records you don't wish to include in the saved file (like for example cell selection). You will normally will want to 
            specify <b>TExcludedRecords.All</b> here, but you can OR different members of the TExcludedRecords enumerations for more control on what is saved.</param>
            <summary>
            This method will save the file in a format that will remain the same if the file is not modified. Normal xls files contain TimeStamp
            fields that might be modified when the file is downloaded or just copied.<br />
            While you will not be able to load the file saved, you might use this method to create a hash of a file and compare it to others to know if something changed. 
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ScreenScaling">
            <summary>
            This property lets you specify the screen scaling that FlexCel will assume for reading xlsx files in 
            percent. (default is 100 which means 100%). The values can be between 100 and 500.
            <para>
            Column widths in xlsx files which don't have a fixed column width set will be different in different screen 
            resolutions. So we need to know which resolution to emulate in order to read those file correctly.
            You will probably want to leave this property to the default value of 100, but you can change it if needed.
            </para>
            For more information, please read http://www.tmssoftware.com/site/blog.asp?post=311
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ScrollWindow(FlexCel.Core.TPanePosition,System.Int32,System.Int32)">
            <param name="panePosition">Pane to move. Note that if you move for example the left column of the upper left pane, you will also move the left column of the lower left pane.</param>
            <param name="row">First visible row.</param>
            <param name="col">First visible column.</param>
            <summary>
            Scrolls the window to an specified place. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SelectCells(FlexCel.Core.TXlsCellRange[])">
            <param name="cellRange">Cells to select.</param>
            <summary>
            Selects a group of cells on a given pane. If you just want to select just one cell, you can use the simpler method <see cref="M:FlexCel.Core.ExcelFile.SelectCell(System.Int32,System.Int32,System.Boolean)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SendBack(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
            Sends the graphical object one layer down. It will show below and will be covered by image at objectIndex-1. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SendForward(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
            Sends the graphical object one layer up on the display (z-order) position. It will show above and will cover the image at objectIndex+1. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SendToBack(System.Int32)">
            <param name="objectIndex">Index of the object to move. (1 based)</param>
            <summary>
             Sends the graphical object to the bottom layer on the display (z-order) position. It will show below and will be covered by all other objects on the sheet. 
             </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetAutoFilter(System.Int32,System.Int32,System.Int32)">
            <param name="row">Row where the AutoFilter will be placed (1 based).</param>
            <param name="col1">First column for the AutoFilter range (1 based).</param>
            <param name="col2">Last column for the AutoFilter range (1 based).</param>
            <summary>
            Sets the AutoFilter in the Active sheet to point to the range specified.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetAutoRowHeight(System.Int32,System.Boolean)">
            <param name="row">Row index (1-based)</param>
            <param name="autoRowHeight">If true, row will have autofit.</param>
            <summary>
            Sets the current row to automatically autosize to the biggest cell or not.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetBuiltInFormat(System.Int32,System.String)">
            <param name="formatIndex">Format index to modify. Must be one of the formats in the table above.</param>
            <param name="format">String specifying the format you want to use with the built in format index.</param>
            <summary>
             Excel has 49 predefined formats which aren't stored in the xls/x file, only the format id is stored. <br />
             When opening the file in Excel, the cells formatted with those internal formats will be formatted according to
             the language and version of Excel, not all of them return the same. For example, some Excel versions will display
             format 38 as "#,##0 ;[Red](#,##0) " (negative numbers in parenthesis) while others will display the same format 38 as
             "#,##0 _$;[Red]-#,##0 _$" (negative numbers have "-" sign).<br /><br />
             FlexCel by default comes with the following formats defined, which correspond to an English Excel 2010:
            <list type="table"><listheader><term>ID</term><description>Format code</description></listheader><item><term>1</term><description>0</description></item><item><term>2</term><description>0.00</description></item><item><term>3</term><description>#,##0</description></item><item><term>4</term><description>#,##0.00</description></item><item><term>9</term><description>0%</description></item><item><term>10</term><description>0.00%</description></item><item><term>11</term><description>0.00E+00</description></item><item><term>12</term><description># ?/?</description></item><item><term>13</term><description># ??/??</description></item><item><term>14</term><description>mm-dd-yyyy</description></item><item><term>15</term><description>d-mmm-yy</description></item><item><term>16</term><description>d-mmm</description></item><item><term>17</term><description>mmm-yy</description></item><item><term>18</term><description>h:mm AM/PM</description></item><item><term>19</term><description>h:mm:ss AM/PM</description></item><item><term>20</term><description>h:mm</description></item><item><term>21</term><description>h:mm:ss</description></item><item><term>22</term><description>m/d/yyyy h:mm</description></item><item><term>37</term><description>#,##0 _$;-#,##0 _$</description></item><item><term>38</term><description>#,##0 _$;[Red]-#,##0 _$</description></item><item><term>39</term><description>#,##0.00 _$;-#,##0.00 _$</description></item><item><term>40</term><description>#,##0.00 _$;[Red]-#,##0.00 _$</description></item><item><term>45</term><description>mm:ss</description></item><item><term>46</term><description>[h]:mm:ss</description></item><item><term>47</term><description>mmss.0</description></item><item><term>48</term><description>##0.0E+0</description></item></list>
            When you export to pdf/html, print, or render the spreadsheet in any way, FlexCel will use the formats above
            to display the cells with those built in ids. If you want to make FlexCel behave like a different Excel version or
            language, you might change those values. <br /><br /> 
            Note that in general, if you care about the cell formats looking the same in
            all Excel versions, you should avoid using built in formats. While changing this array will change how FlexCel
            renders those formats, an user with a different Excel version will still see whatever that Excel version defines for 
            the format id. <br /><br />
            This method doesn't change anything in the generated xls/x files, it will only change how the generated pdf/html files look.
            This method also affects all threads and XlsFile objects, it is a global setting which you probably shouldn't change;
            but if you want to change it, you should do so when starting your application.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCachedFont0(FlexCel.Core.TCachedFontWidth)">
            <param name="cachedFont" />
            <summary>
            This method is used by FlexCel itself, you shouldn't call it directly.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFormat(System.Int32,System.Int32,System.Int32)">
            <param name="row">Row index of the cell (1 based)</param>
            <param name="col">Column index of the cell (1 based)</param>
            <param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
            <summary>
            Sets the Cell format (XF) on a given cell.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
            <summary>
            Sets the Cell format (XF) on a range of cells.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="newFormat">Format to apply to the cells.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param>
            <param name="exteriorBorders">When true, the format for the border will be applied only to the outer cells in the range. This can
            be useful for example to draw a box around a range of cells, but not drawing borders inside the range. 
            Other parameters, like the cell background, will still be applied to the full range.</param>
            <summary>
            Changes part of the Cell format on a range of cells. WARNING! This method is slower than the other SetCellFormat versions, use it only
            if you do not care about maximum performance or if you just can't use the other SetCellFormat versions.
            This particular version of SetCellFormat has to read the format on each cell, modify it and write it back.
            While still very fast, it is not as fast as just setting the format on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="htmlText">Text with an HTML formatted string.</param>
            <param name="XF">Format for the cell. It can be -1 to keep the existing format.</param>
            <summary>
            Enters an HTML formatted string into a cell, and tries to match the Excel formats with the HTML formatting tags.
            Note that the rich text inside Excel is more limited than xls (you are limited to only changing font attributes),
            so many tags from the HTML tags might be ignored. Whenever a tag is not understood or cannot be mapped into Excel,
            it will just be omitted. For a list of supported tags, see the <b>Remarks</b> section.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32,System.String[])">
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
            <param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
            <param name="dateFormats">A list of formats allowed for dates and times. Windows is a little liberal in what it thinks can be a date, and it can convert things 
            like "1.2" into dates. By setting this property, you can ensure the dates are only in the formats you expect. If you leave it null, we will trust "DateTime.TryParse" to guess the correct values.</param>
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellValue(System.Int32,System.Int32,System.Object,System.Int32)">
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="value">Value to set.</param>
            <param name="XF">Format to Set. You normally get this number with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function. Use -1 to keep format unchanged.</param>
            <summary>
            Sets the value and format on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellValue(System.Int32,System.Int32,System.Int32,System.Object,System.Int32)">
            <param name="sheet">Sheet number, 1 based</param>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="value">Value to set.</param>
            <param name="XF">Format to Set. You normally get this number with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)" /> function. Use -1 to keep format unchanged.</param>
            <summary>
            Sets the value on a cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCheckboxLinkedCell(System.Int32,System.String,FlexCel.Core.TCellAddress)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="linkedCell">Cell that will be linked to the checkbox. To unlink the checkbox, make this parameter null.</param>
            <summary>
            Links the checkbox to a cell, so when the cell changes the checkbox changes too, and vice-versa. To unlink the cell, make linkedCell null.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCheckboxState(System.Int32,System.String,FlexCel.Core.TCheckboxState)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="value">Value to set.</param>
            <summary>
            Sets the value of a checkbox in the active sheet. Note that this only works for <b>checkboxes added through the Forms toolbar.</b> 
            It won't return the values of ActiveX checkboxes.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColFormat(System.Int32,System.Int32,System.Boolean)">
            <param name="col">Column to set.</param>
            <param name="XF">XF Format index.</param>
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format for an entire column. If you want to set the format for more than one column, use <see cref="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32,System.Int32,System.Boolean)" /> instead.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <param name="col">Column to set.</param>
            <param name="newFormat">Format to apply.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param>
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire column.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColFormat(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="col1">First column in the range to set.</param>
            <param name="col2">Last column in the range to set.</param>
            <param name="XF">XF Format index.</param>
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format for a range of columns.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColHidden(System.Int32,System.Boolean)">
            <param name="col">Column index (1 based).</param>
            <param name="hide">If true, column will be hidden, if false it will be visible.</param>
            <summary>
            Hides or shows an specific column. Note: If you are hiding many columns at the same time, 
            you can call <see cref="M:FlexCel.Core.ExcelFile.SetColHidden(System.Int32,System.Int32,System.Boolean)" /> as it is faster.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColHidden(System.Int32,System.Int32,System.Boolean)">
            <param name="col1">Column index of the first column in the range. (1 based)</param>
            <param name="col2">Column index of the last column in the range. (1 based)</param>
            <param name="hide">If true, column will be hidden, if false it will be visible.</param>
            <summary>
            Hides or shows a range of columns.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColOptions(System.Int32,System.Int32)">
            <param name="col">Column Index (1 based)</param>
            <param name="options">A flag with all column options.</param>
            <summary>
            Sets all Column options at once (if the column is hidden, etc). 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColorPalette(System.Int32,FlexCel.Core.TUIColor)">
            <param name="index">Index of the entry to change. Must be 1&lt;=indexlt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount" /></param>
            <param name="value">Color to set.</param>
            <summary>
            Changes a color on the Excel color palette.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColorTheme(FlexCel.Core.TThemeColor,FlexCel.Core.TDrawingColor)">
            <param name="themeColor">Color of the theme to change.</param>
            <param name="value">Color to set.</param>
            <summary>
            Changes a color on the Excel theme. Only has effect in Excel 2007.
            <br />If you want to change the full theme, use <see cref="M:FlexCel.Core.ExcelFile.GetTheme" /> and <see cref="M:FlexCel.Core.ExcelFile.SetTheme(FlexCel.Core.TTheme)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <param name="firstCol">Column index of the first column on the range. (1 based)</param>
            <param name="lastCol">Column index of the last column on the range. (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
            <summary>
            Sets the Outline level for a column range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColWidth(System.Int32,System.Int32)">
            <param name="col">Column index (1 based)</param>
            <param name="width">Column width, in Excel internal units. (Character width of font 0 / 256). See <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.IRowColSize)" /></param>
            <summary>
            Sets the current Column width, in Excel internal units. (Character width of font 0 / 256)
            Note: if possible, set many column widths at once by calling <see cref="M:FlexCel.Core.ExcelFile.SetColWidth(System.Int32,System.Int32,System.Int32)" />. It is faster.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColWidth(System.Int32,System.Int32,System.Int32)">
            <param name="col1">Column index of the first column in the range. (1 based)</param>
            <param name="col2">Column index of the last column in the range. (1 based)</param>
            <param name="width">Column width, in Excel internal units. (Character width of font 0 / 256). See <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.IRowColSize)" /></param>
            <summary>
            Sets the width of a range of columns, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString,System.String,FlexCel.Core.TImageProperties)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param>
            <param name="author">Author of the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="commentProperties">Placement and properties of the comment popup. Null if there is no comment on the cell. This parameter can be a TImageProperties, or the more complete derived class TCommentProperties, if you need to set extra information like the text alignment.</param>
            <summary>
            Sets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will create an empty one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="commentProperties">Comment properties. This parameter can be a TImageProperties, or the more complete derived class TCommentProperties, if you need to set extra information like the text alignment.</param>
            <summary>
            Sets the comment properties at the specified index.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCommentRow(System.Int32,System.Int32,FlexCel.Core.TRichString,FlexCel.Core.TImageProperties)">
            <param name="row">Row Index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="value">Text of the comment. Set it to "new TRichString()" to remove the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <summary>
            Changes the properties (text and position of the popup) for an existing comment at commentIndex.
            To delete a comment, set a "new TRichString()" as the "value" param. To add a new comment, use <see cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)" />. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetFont(System.Int32,FlexCel.Core.TFlxFont)">
            <param name="fontIndex">Font index. 0-based</param>
            <param name="aFont">Font definition</param>
            <summary>
            Sets the font definition for a given font index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default font format. (using SetFont(0, font); )
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetFormat(System.Int32,FlexCel.Core.TFlxFormat)">
            <param name="formatIndex">Format index. 0-based</param>
            <param name="aFormat">Format definition</param>
            <summary>
            Sets the font definition for a given format index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default format. (using SetFormat(0, fmt); ). This method will change style XFs and CellXfs, depending if aFormat 
            is a StyleXF or a CellXF.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetFormulaTokens(System.Int32,System.Int32,System.Int32,FlexCel.Core.TToken[])">
            <param name="sheet">Sheet of the cell with the formula. (1 based)</param>
            <param name="row">Row of the cell with the formula. (1 based)</param>
            <param name="col">Column of the cell with the formula. (1 based)</param>
            <param name="tokens">A collection of tokens which define the formula.</param>
            <summary>
            Sets a cell with the formula specified by its tokens. Normally you will get the tokens by modifying the result 
            of <see cref="M:FlexCel.Core.ExcelFile.GetFormulaTokens(System.Int32,System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterKind,FlexCel.Core.THeaderAndFooterPos,System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.THeaderOrFooterImageProperties)">
            <param name="headerAndFooterKind">Type of page for which we want to set the image. You will normally get this value from <see cref="M:FlexCel.Core.THeaderAndFooter.GetHeaderAndFooterKind(System.Int32)" />.</param>
            <param name="section">Section of the header or footer for which we want to set the image.</param>
            <param name="data">Image data.</param>
            <param name="imageType">The image type for the data sent. (If it is a bmp, jpg or other)</param>
            <param name="properties">Image size.</param>
            <summary>
            This method sets the image associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" />) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            ALSO, NOTE that only setting the image will not display it. You need to write &amp;G in 
            the corresponding <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> or <see cref="P:FlexCel.Core.ExcelFile.PageFooter" /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <param name="value">Hyperlink description.</param>
            <summary>
            Modifies an existing Hyperlink. Use <see cref="M:FlexCel.Core.ExcelFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)" /> to add a new one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetHyperLinkCellRange(System.Int32,FlexCel.Core.TXlsCellRange)">
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <param name="cellRange">Range of cells the hyperlink will refer to.</param>
            <summary>
            Changes the cells an hyperlink is linked to.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetImage(System.Int32,System.Byte[],FlexCel.Core.TXlsImgType,System.Boolean,System.String)">
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="data">Image data.</param>
            <param name="imageType">Image type of the new data.</param>
            <param name="usesObjectIndex">If false (the default) then imageIndex is an index to the list of images.
            When true imageIndex is an index to the list of all objects in the sheet. When you have the object id, you can avoid calling
            <see cref="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)" /> which is a slow method, by setting this parameter to true.</param>
            <param name="objectPath">Path to the object, when the object is grouped with others. This parameter only
            has meaning if usesObjectIndex is true. <br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <summary>
            Sets the image data and / or image properties of an existing image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetImageProperties(System.Int32,FlexCel.Core.TImageProperties)">
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="imageProperties">Image size, placement, etc. </param>
            <summary>
            Sets the image properties of an existing image.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetLink(System.Int32,System.String)">
            <param name="index">Index of the link (1 based). i goes between 1 and <see cref="P:FlexCel.Core.ExcelFile.LinkCount" /></param>
            <param name="value">Please make sure this is a VALID filename, or you are likely to crash Excel. Also, xls file format doesn't like
            paths starting with "..", so you might need to enter the full path here.</param>
            <summary>
            Changes the external link at position i for a new value. Note that you can't add new links with this method, external links
            are added automatically when you add formulas that reference other worksheets. This method is only to change existing links to point to
            other place. All formulas pointing to the old link will point to the new.<br />
            Note that the replacing filename should have the same sheets as the original, or the formulas might break.
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)">
            <param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
            <summary>
            Modifies or adds a Named Range. If the named range exists, it will be modified, else it will be added.
            If the range is not user defined (like "Print_Area")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange" />
            Look at the example for more information.
            </summary>
            <returns>The name index of the inserted or modified range (1 based).</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetNamedRange(System.Int32,FlexCel.Core.TXlsNamedRange)">
            <param name="index">Index of the named range we are trying to modify.</param>
            <param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
            <summary>
            Modifies a Named Range in the specified position. You could normally use <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)" /> to do this,
            but if you want to modify the name of the named range, then you need to use this overloaded version. <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)" />
            would add a new range instead of modifying the existing one if you change the name.
            Look at the example for more information on how to use it.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectAnchor(System.Int32,System.String,FlexCel.Core.TClientAnchor)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Object path t the shape if this is a grouped shape.</param>
            <param name="objectAnchor">Coordinates of the object.</param>
            <summary>
            Sets the object placement.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectInputRange(System.Int32,System.String,FlexCel.Core.TCellAddressRange)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="inputRange">Input range for the object.</param>
            <summary>
            Sets the input range for a ListBox or a ComboBox. When applied to other objects, this method does nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectLinkedCell(System.Int32,System.String,FlexCel.Core.TCellAddress)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="linkedCell">Cell that will be linked to the radio button. To unlink the radio button, make this parameter null.</param>
            <summary>
            Links the object to a cell, if the object can be linked. If the object is a radio button then all the other radio buttons in the group will be linked
            to the same cell, 
            so when the cell changes the radio buttons too, and vice-versa. To unlink the cell, make linkedCell null.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectMacro(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="macro">Macro that will be associated with the object. Look at ApiMate to know the exact name you have to enter here.</param>
            <summary>
            Associates an object with a macro. While this will normally be used in buttons, you can associate macros to
            almost any object.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectName(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="name">Name for the autoshape. Use null to remove the name from an AutoShape.</param>
            <summary>
            Sets the name for an autoshape.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,FlexCel.Core.TDrawingHyperlink)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change. For hyperlinks it should be <see cref="F:FlexCel.Core.TShapeOption.pihlShape" /></param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets an Hyperlink property for an autoshape. Verify the property expects a Hyperlink, currently only <see cref="F:FlexCel.Core.TShapeOption.pihlShape" /> expects hyperlinks.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Double)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets a DOUBLE (Encoded as 16.16) property for an autoshape. Verify the property expects a DOUBLE.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int64)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets a LONG property for an autoshape. Verify the property expects a LONG.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="text">Text you want to use.</param>
            <summary>
            Sets a STRING property for an autoshape. Verify the property expects a STRING.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods. (like SetObjectText)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int32,System.Boolean)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="shapeProperty">Property you want to change. MAKE SURE it is the LAST property in the set.</param>
            <param name="positionInSet">Boolean properties are grouped so all properties on one set are in only
            one value. So, the last bool property on the set is the first bit, and so on. ONLY THE LAST PROPERTY
            ON THE SET IS PRESENT.</param>
            <param name="value">Value you want to use.</param>
            <summary>
            Sets a BOOLEAN property for an autoshape. Verify the property expects a BOOLEAN.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            Note that boolean properties are all stored in the same byte of the last property in the set.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectSelection(System.Int32,System.String,System.Int32)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="selectedItem">Position of the selected item in the object. 0 means no selection, 1 means that the
            first item is selected.</param>
            <summary>
            Sets the selected item of an object from the "Forms" palette. It can be a combobox, a listbox, a spinbox or a scrollbar. Note that this only works for <b>objects added through the Forms toolbar.</b> 
            It won't return the values of ActiveX objects.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectSpinProperties(System.Int32,System.String,FlexCel.Core.TSpinProperties)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="spinProps">Properties of the spinner.</param>
            <summary>
            Sets the spin properties of an object. You should apply this only to scrollbars and spinners.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectSpinValue(System.Int32,System.String,System.Int32)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="value">Position for the scrollbar.</param>
            <summary>
            Sets the position in a scrollbar object. If the object is linked to a cell, the cell will be updated.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectText(System.Int32,System.String,FlexCel.Core.TDrawingRichString)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the rich string properties of the object text,
            and preserve those things not available in a TRichString like wordArt effects.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectText(System.Int32,System.String,System.String)">
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            This version of the method will only modify the text of the object,
            and preserve the existing formatting in the object if there was one.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetPageHeaderAndFooter(FlexCel.Core.THeaderAndFooter)">
            <param name="headerAndFooter">Structure with the headers and footers definition.</param>
            <summary>
            This method will set all the headers and footers in a sheet. If you want a simple header or footer for all the pages, you might want to use <see cref="P:FlexCel.Core.ExcelFile.PageHeader" /> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter" /></summary>
            <returns />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)">
            <param name="settings">Printer driver information obtained with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings" />. Use null to remove the printer settings.</param>
            <summary>
            Sets printer driver information. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings" /> to copy printer driver information from a file
            to another.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetPrintMargins(FlexCel.Core.TXlsMargins)">
            <param name="value" />
            <summary>
            Sets the Margins on the active sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRadioButtonState(System.Int32,System.String,System.Boolean)">
            <param name="objectIndex">Index of the object (1 based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)" /><br />
            If it is "absolute"(it starts with "\\"), then the path includes the objectIndex, and the objectIndex is
            not used. An object path of "\\1\\2\\3" is exactly the same as using objectIndex = 1 and objectPath = "2\\3"</param>
            <param name="selected">If true, the option button will be set, and all other buttons in the range will be deselected.
            When false the radio button will be deselected.</param>
            <summary>
            Sets the value of a radio button in the active sheet. Note that this only works for <b>radio buttons added through the Forms toolbar.</b> 
            It won't return the values of ActiveX radio buttons
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowFormat(System.Int32,System.Int32,System.Boolean)">
            <param name="row">Row index (1-based)</param>
            <param name="XF">XF format.</param>
            <param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the XF format for the entire row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <param name="row">Row index (1-based)</param>
            <param name="newFormat">Format to apply.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param>
            <param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowHeight(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="height">Row height, in Excel internal units. (1/20th of a point). See <see cref="F:FlexCel.Core.FlxConsts.RowMult" /></param>
            <summary>
            Sets the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowHidden(System.Int32,System.Boolean)">
            <param name="row">Row index (1 based)</param>
            <param name="hide">If true, row will be hidden, if false it will be visible.</param>
            <summary>
            Hides or shows an specific row.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowOptions(System.Int32,System.Int32)">
            <param name="row">Row Index (1 based)</param>
            <param name="options">A flag with all row options</param>
            <summary>
            Sets all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">Row index of the first row on the range. (1 based)</param>
            <param name="lastRow">Row index of the last row on the range. (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
            <summary>
            Sets the Outline level for a row range.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetSheetBackground(System.Byte[])">
            <param name="imgData">Bytes with the image data.</param>
            <summary>
            Sets the sheet background for the active sheet. Set it to null to remove the background.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetSheetSelected(System.Int32,System.Boolean)">
            <param name="sheetIndex">Sheet index for the sheet we want to select or unselect.(1 based)</param>
            <param name="selected">If true the sheet will be selected, otherwise it will be unselected.</param>
            <summary>
            This method will set a sheet tab as selected. Note that this is different from <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> in that
            you might have only a single active sheet, but you might select many tabs by ctrl-clicking them. Also note that whenever
            you change the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" />, the selected sheets will be reset to the active sheet only. So if you want to save
            a file with more than one selected sheet, you should call this method <b>after</b> the last call to activesheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetStyle(System.String,FlexCel.Core.TFlxFormat)">
            <param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of built-in names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)" /></param>
            <param name="fmt">The new style definition.</param>
            <summary>
            Modifies an existing style if name already exists, or creates a new style if it doesn't. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetTheme(FlexCel.Core.TTheme)">
            <param name="aTheme">Theme to set. You would normally use the result from <see cref="M:FlexCel.Core.ExcelFile.GetTheme" /> here, or you might load a method from a ".tmx" file.
            There are many standard tmx files available in an Office installation under the "Document Themes Version" folder</param>
            <summary>
            This is an advanced method, that allows you to set the full theme in use. Normally you will just want to replace colors, and you can do this with
            <see cref="M:FlexCel.Core.ExcelFile.SetColorTheme(FlexCel.Core.TThemeColor,FlexCel.Core.TDrawingColor)" /> and <see cref="M:FlexCel.Core.ExcelFile.GetColorTheme(FlexCel.Core.TThemeColor)" /> methods.<br /></summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetThemeFont(FlexCel.Core.TFontScheme,FlexCel.Core.TThemeFont)">
            <param name="fontScheme">Font Scheme we want to set (either minor or major). Using "none" here will do nothing.</param>
            <param name="font">Font definition.</param>
            <summary>
            Sets either the minor or the major font for the theme.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetWhatIfTable(FlexCel.Core.TXlsCellRange,FlexCel.Core.TCellAddress,FlexCel.Core.TCellAddress)">
            <param name="range">Range for the table. This is the range of cells that will have "={TABLE()}" formulas.</param>
            <param name="rowInputCell">Row input cell for the table. Make it null if you don't want a row input cell. If both rowInputCell and colInputCell are null, a table with deleted references will be added.<br />
            Note that the sheet here is ignored, What-if tables need the input cells to be in the same sheet as the table.</param>
            <param name="colInputCell">Column input cell for the table. Make it null if you don't want a column input cell.  If both rowInputCell and colInputCell are null, a table with deleted references will be added.<br />
            Note that the sheet here is ignored, What-if tables need the input cells to be in the same sheet as the table.</param>
            <summary>
            Creates an Excel What-if table in the range of cells specified by Range. Calling this method is the same as setting a cell value
            with a TFormula where TFormula.Span has more than one cell, and TFormula.Text is something like "{=TABLE(,A4)}". The parameters
            for the =TABLE function are rowInputCell and colInputCell, and they look the same a Excel will show them.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetCodeName">
            <summary>
            Returns or sets the codename of a sheet, that is an unique identifier assigned to the sheet when it is created. 
            Codenames are useful because they never change once the file is created, and they are what macros reference.
            <b>Very important! We don't support changing codenames if the file has macros, because we can't modify the required macros
            to use the modified codename. Also, Excel 2003 or older will ignore the codename if the file doesn't have macros.
            Excel 2007 or newer will preserve the codenames even if the file doesn't have macros.</b></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetCount">
            <summary>
            The number of sheets on the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetCountVisible">
            <summary>
            Number of visible sheets in the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetID">
            <summary>
            Returns an unique identifier for the active sheet. This is a value that is only used by FlexCel,
            and you can use it together with <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndexFromID(System.Guid)" /> to retrieve a sheet after deleting or adding sheets.
            While normally you can use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> to store and retrieve a sheet, if you plan to delete or add sheets before restoring the active sheet, the 
            stored ActiveSheet could become invalid. <b>Note that this is a value internal for FlexCel, and not stored in the xls/x file.</b> SheetIDs will change every time you open the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetName">
            <summary>
            Reads and changes the name of the active sheet. To switch to another sheet by its name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetOptions">
            <summary>
            This property groups a lot of properties of the sheet, like for example if it is showing formula texts or the results.
            Most of this properties can be changed directly from XlsFile, but this method allows you to change them all together,
            or to easily copy the options from one file to another.  Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetWindowOptions" /> for options that affect all sheets.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetTabColor">
            <summary>
            Reads/Writes the color of the current sheet tab. <see cref="P:FlexCel.Core.TExcelColor.Automatic" /> to specify no color.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetType">
            <summary>
            Use this property to know it the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet" /> is a worksheet, a chart sheet or other.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetView">
            <summary>
            Returns and sets the page view mode with their corresponding zooms. Note that changing the zoom here changes <see cref="P:FlexCel.Core.ExcelFile.SheetZoom" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetVisible">
            <summary>
            Sets the visibility of the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetWindowOptions">
            <summary>
            This property groups a lot of properties of all the sheets in the workbook, like for example if the sheet tab bar at the bottom is visible.
             Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /> for options that affect only the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetZoom">
            <summary>
            Reads/Writes the zoom of the current sheet. Note that this property refers to the zoom in the current page view mode.
            If you are for example in Page Break Preview mode, this would be the zoom for Page Break Preview. You can change of page view mode
            and the zoom for all of the modes with <see cref="P:FlexCel.Core.ExcelFile.SheetView" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ShowFormulaText">
            <summary>
            When true, the formula text will be displayed instead of the formula value. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ShowGridHeadings">
            <summary>
            True is the column headings ("A", "B", etc) and row headings ("1", "2", etc) are shown. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /> by changing TSheetOptions.ShowRowAndColumnHeaders
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ShowGridLines">
            <summary>
            True if the gray grid lines are shown on the Active sheet. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions" /></summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Sort(FlexCel.Core.TXlsCellRange,System.Boolean,System.Int32[],FlexCel.Core.TSortOrder[],System.Collections.IComparer,FlexCel.Core.TSortFormulaMode)">
            <param name="Range">Range to sort. It must not include headers.</param>
            <param name="ByRows">If true, rows will be sorted. If false, columns will.</param>
            <param name="Keys">An array of integers indicating the columns or rows you want to use for sorting. Note that this number is absolute, for example column 1 always means column "A" no matter if the range we are sorting begins at column "B".
            A null array means sort by the first column or row, then by the second, etc. up to 8 entries.</param>
            <param name="SortOrder">An array of flags indicating whether to sort ascending or descending for each Key. If null, all sorts will be ascending. If not null and the array size is less than the size of the "Keys" parameter, all missing entries are assumed to be Ascending.</param>
            <param name="Comparer">Comparer to create a custom way to compare the different items. Set it to null to use default ordering.</param>
            <param name="SortFormulaMode">Defines how formulas in the file will be changed when sorting.</param>
            <summary>
            Sorts a range on the current sheet.
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SplitWindow(System.Int32,System.Int32)">
            <param name="xOffset">Offset from the left on 1/20 of a point. Zero for no vertical split.</param>
            <param name="yOffset">Offset from the top on 1/20 of a point. Zero for no horizontal split.</param>
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Split. It will split the
            window in 4 regions. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)" /> the windows are unsplitted and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetSplitWindow" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.StyleCount">
            <summary>
            Returns the number of named styles in the file.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Subtotal(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32[],System.Func{System.Object,System.String},System.String,System.Func{FlexCel.Core.TFlxFormat,System.Object,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,System.Object,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,System.Object,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat},System.Func{FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat})">
            <param name="range">Range where to apply the subtotals. If null, the whole sheet will be used.</param>
            <param name="atChangeInColumn">Index of the column where we want to group in. Every time a value in this column
            changes from the previous row, a new subtotal will be added.</param>
            <param name="aggFunction">Function that will be used in the =Subtotal(...) formula added. To do a sum, set this value to 9.
            For other values, see the Excel reference in the =Subtotal function.</param>
            <param name="subtotalColumns">We will add a subtotal formula in each one of the columns in this array.</param>
            <param name="SubtotalText">In this function you need to return the text that will be written in every "Subtotal" line. 
            The parameter to this function is the value of the cell we are aggregating. If this function is null, "aggregatedcolumn Total" will be written.
            </param>
            <param name="grandtotalText">Text for the grand total line. If null or empty, no grand total line will be added.</param>
            <param name="SubTotalRowFormat">Row format for the subtotal rows added. You get a TFlxFormat and the cell value for the column you are aggregating, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to the rows.</param>
            <param name="SubTotalCellTextFormat">Cell format for the subtotal cells which contain text like "Food Subtotal". You get a TFlxFormat and the cell value for the column you are aggregating, and you must return a changed one with the format you want. You might leave this function null, and <b>bold</b> will be applied to all subtotal texts.</param>
            <param name="SubTotalCellFormulaFormat">Cell format for the subtotal cells which contain formulas like =Subtotal(...). You get a TFlxFormat and the cell value for the column you are aggregating, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to subtotal formulas.</param>
            <param name="GrandTotalRowFormat">Row format for the grand total row added. You get a TFlxFormat, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to the grand total row.</param>
            <param name="GrandTotalCellTextFormat">Cell format for the grand total cells which contain text like "Food Total". You get a TFlxFormat, and you must return a changed one with the format you want. You might leave this function null, and <b>bold</b> will be applied to all grand total texts.</param>
            <param name="GrandTotalCellFormulaFormat">Cell format for the grand total cells which contain formulas like =Subtotal(...). You get a TFlxFormat, and you must return a changed one with the format you want. You might leave this function null, and no special format will be applied to grand total formulas.</param>
            <summary>
            This method works like the "Subtotal" command in Excel in the "Data" tab of the ribbon. It will take a number of
            cells and group them by similar values, adding a subtotal formula every new different value and a grand total at the end.
            It will also add outlines at the right.
            </summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.TableCount">
            <summary>
            Returns the number of tables in the whole workbook. (Not just the active sheet)
            </summary>
            <value />
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.TryGetBuiltInStyleType(System.String,FlexCel.Core.TBuiltInStyle@,System.Int32@)">
            <param name="styleName">Style that we want to convert to built-in style.</param>
            <param name="style">Returns the built-in style. This value is only valid if this method returns true.</param>
            <param name="level">Returns the level built-in style (1 based). This value is only valid if this method returns true, and only applies to outline styles. It will be 0 for non outline styles.</param>
            <summary>
            Tries to convert a string into an built-in style identifier. Will return true if styleName can be converted, false otherwise.
            </summary>
            <returns>True is styleNameis a built-in style (and thus style and level are valid), false otherwise.</returns>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.UnMergeAllCellsInRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="firstRow">First row of the range.</param>
            <param name="firstCol">First column of the range.</param>
            <param name="lastRow">Last row of the range.</param>
            <param name="lastCol">Last column of the range.</param>
            <param name="fullyInside">If true, the merged cells have to be completely inside the range to be deleted.
            For example, if the file has a merged cell A1:A5, and you call UnMergeAllCellsInRange(1, 1, 1, 1, true) A1:A5 won't
            be unmerged because it isn't completely inside the range. If false, all merged cells that have at least one cell inside the
            range will be deleted. In the example with the merged cell A1:A5, UnMergeAllCellsInRange(1, 1, 1, 1, false) would
            remove the merged cell, because it has the cell A1 inside the range.</param>
            <summary>
            This method will unmerge all the cells that are inside a range of cells. 
            </summary>
            <remarks />
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">First row of the merged cell.</param>
            <param name="firstCol">First column of the merged cell.</param>
            <param name="lastRow">Last row of the merged cell.</param>
            <param name="lastCol">Last column of the merged cell.</param>
            <summary>
            Unmerges the range of cells. The coordinates have to be exact, if there is no
            merged cell with the exact coordinates, nothing will be done. If you want to unmerge all cells inside a range, use <see cref="M:FlexCel.Core.ExcelFile.UnMergeAllCellsInRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" /> instead.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)" /><seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)" /><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount" /><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)" /></summary>
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.VPageBreakCount">
            <summary>
            The number of vertical page breaks in the active sheet.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.WidthCorrection">
            <summary>
            Factor to multiply default column widths. See remarks for a detailed explanation.
            </summary>
            <value />
            <remarks />
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.XlsxExtraCompatibility">
            <summary>
            By default, FlexCel creates xlsx files that conform to the published xlsx spec, but are not necessarily the same
            as a file Excel would create. FlexCel might use different prefixes, etc, as the ones Excel choose to use.
            While this is ok, some third party tools might have problems opening the xlsx files if they are not exactly as Excel would
            create them. If you are having issues with third party tools and the xlsx files created by FlexCel, you can try
            setting this property to true. <b>Note: </b> setting this property to true might result in files that contain invalid Ids, because the Ids
            are used by FlexCel and Excel. This is a very unlikely possibility, but the risk is there. If possible, it is best to keep this
            property false.
            </summary>
            <value />
            <remarks />
        </member>
    </members>
</doc>
