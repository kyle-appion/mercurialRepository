{"Name":"TMS FlexCel Studio for .NET ","Id":2736,"Alias":"FlexCel","Description":"FlexCel Studio is a library to read and write xls and xlsx files, export them to html or pdf and print and preview them. \nAll code is written in C#, and full sources are included.\n\nIt is available for Xamarin.Mac, Xamarin.iOS, Xamarin.Android, Windows Phone, Windows Store (WinRT), Mono for Linux and Desktop .NET. A single license is valid for all supported platforms.\n\nAt its core, FlexCel has three main components:\n\n## 1. An xls/x engine\nThis is the most lower level component in the pack. It contains an API to read and write xls or xlsx files,\nand the main object you use for it is the XlsFile object.\n\n####Example:\n\n```csharp\npublic void CreateFile()\n{\n   XlsFile xls = new XlsFile(1, true);\n   xls.SetCellValue(1, 1, \"FlexCel says Hello!\");\n   xls.Save(\"result.xlsx\");\n}\n\n```\n\nThere is a tool available for Windows and OSX that you can use to find out how to use the xls/x engine.\nJust create the file you want to create in Excel, and open the file with:\n\n  * [APIMate for OSX](http://www.tmssoftware.biz/flexcel/tools/net/ApiMate.dmg)\n  * [APIMate for Windows](http://www.tmssoftware.biz/flexcel/tools/net/ApiMate.zip)\n  \nAPIMate will show you the needed code (in C# or VB.NET) to create the file. Full source for APIMate is included, so you can study how it works too.\n\n## 2. A reporting engine \nThis is a higher level component for creating xls or xlsx files. When using it, you create a file in Excel which will be\nused as a template where the reporting engine will fill the values. Internally, this component uses the xls/x engine to create the files,\nbut it allows you to do it in a more declarative way. It allows you to use Excel as the report designer.\n\n####Example:\nIn Excel, create a file and write:\n\n\u003cpre\u003e\n|   |         A          |           B              |        C                          |\n|---|--------------------|--------------------------|-----------------------------------|\n| 1 | \u003c#Customer.Name\u003e   | \u003c#if(\u003c#Customer.Vip\u003e;VIP;)\u003e | \u003c#Customer.Age\u003e                   |\n| 2 |                    |                          |                                   |\n| 3 |                    |                          | =\"Average Age: \" \u0026 Average(C1:C2) |\n\u003c/pre\u003e\n\nAdd a named range (in the ribbon-\u003e Formula tab-\u003eName Manager). Name it \"__Customer__\", and\nmake it go from A1 to C1. This name must have 2 underscores at the beginning and end, and the\ntext between the underscores must be the same as the text between \u003c#.... .\u003e tags. It tells \nFlexCel which rows are used for each record in the database.\n\nSave the file as \"template.xlsx\"\n\nThen write the following code:\n\n```csharp\nclass Customer\n{  \n   public string Name { get; set; }\n   public bool Vip { get; set; }\n   public int Age {get; set; }\n}\n\npublic void CreateFile()\n{\n   List\u003cCustomer\u003e Customers = GetCustomers();\n   \n   using (FlexCelReport fr = new FlexCelReport(true))\n   {\n      fr.AddTable(\"Customer\", Customers);\n      fr.Run(\"template.xlsx\", \"result.xlsx\");\n   }\n}\n```\n\nThis is a basic report, but you can do a lot more, like multiple level master-detail reports, cross ref\nreports, etc. Take a look at the Windows examples for a list of possible reports.\n\n## 3. A rendering engine\nThis component is used to convert any xls or xlsx file to pdf, images, html or to print them. Internally it\nalso uses the xls/x engine, as the reporting engine does.\n\n####Example:\nTo convert a file to pdf:\n\n```csharp\n\tXlsFile xls = new XlsFile(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.xlsx\"));\n\n\tusing (var pdf = new FlexCelPdfExport(xls, true))\n\t{\n\t\tpdf.Export(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.pdf\"));\n\t}\n```\n\nTo convert a file to html:\n\n```csharp\n    XlsFile xls = new XlsFile(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.xlsx\"));\n\n    using (var html = new FlexCelHtmlExport(xls, true))\n    {\n        html.Export(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.html\"), null);\n    }\n```\n","Version":"6.8.0","Summary":"Manipulate Excel files, create reports based on templates, and export Excel files to Pdf and HTML.","QuickStart":"#Getting Started with FlexCel Studio for Xamarin\n\n## 0. Before starting: A note on encodings\n\nWhen you create a Xamarin iOS or Android application, by default it will come with a limited number of encodings.\nThis is to keep application size small. Those encodings include for example ASCII and Unicode, but no Win1252 (encoding used in \nwestern Windows machines) or IBM 437 (encoding used in zip files).\n\nFlexCel will work in most cases with the reduced number of encodings, but there are some rare cases where we need the full list of encodings. An example is \nwhen reading an Excel 95 file, and there are a couple of other cases more.\n\nSo in order to not have problems with non existing encodings, it might be a good idea to click in your project properties and add \"west\" encodings.\n\n* In iOS: Go to Build-\u003eiOS Build and select the \"Advanced\" tab. There in the \"Internationalization\" section choose \"west\".\n* In Android: Go to Build-\u003eAndroid Build and select the \"Linker\" tab. There in the \"Internationalization\" section choose \"west\".\n\nIf you are worried about the extra size you can skip this step. FlexCel will still work in most of the cases without the extra encodings.\n\n## 1. Creating an Excel file with code\n\nThe simplest way to use FlexCel is to use the XlsFile class to manipulate files:\n\n```csharp\nusing System;\nusing FlexCel.Core;\nusing FlexCel.XlsAdapter;\n\nnamespace Samples\n{\n    class MainClass\n    {\n        public static void Main(string[] args)\n        {\n            XlsFile xls = new XlsFile(1, TExcelFileFormat.v2016, true);\n            xls.SetCellValue(1, 1, \"Hello from FlexCel!\");\n            xls.SetCellValue(2, 1, 7);\n            xls.SetCellValue(3, 1, 11);\n            xls.SetCellValue(4, 1, new TFormula(\"=Sum(A2:A3)\")); \n            xls.Save(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"test.xlsx\"));\n        }\n    }\n}\n```\n\nNote that this sample deduces the file format from the file name. If you saved as \"test.xls\", the file format would be xls, not xlsx.\nYou can specify the correct file format in a parameter to the \"Save\" method if needed; for example when saving to streams.\n\n## 2. Creating a more complex file with code\nWhile creating a simple file is simple (as it should), the functionality in Excel is quite big, and it can be hard to find out the exact method to do something.\nFlexCel comes with a tool that makes this simpler:\n\n#### 2.1 Download the correct APIMate for your operating system: \n  * [APIMate for OSX](http://www.tmssoftware.biz/flexcel/tools/net/ApiMate.dmg)\n  * [APIMate for Windows](http://www.tmssoftware.biz/flexcel/tools/net/ApiMate.zip)\n  \nOr compile it from source (sources are included in this package).\n\n#### 2.2. Create a file in Excel with the functionality you want.\no get the best results, keep the file simple. Say you want to find out how to add an autofilter, create an empty file in FlexCel and add an autofilter. If you want to find out how to format a cell with a gradient, create a different file and format one cell with a gradient.\n\nUsing simple files will make it much easier to find the relevant code in APIMate\n\n#### 2.3. Open the file with APIMate\nAPIMate will tell you the code you need to recreate the file you created in Excel with FlexCel. You can see the code as C# or VB.NET. \n\nYou can keep the xls/x file open in both Excel and APIMate, modify the file in Excel, save, press \"Refresh\" in APIMate to see the changes.\n\n## 3. Reading a file\nThere is a complete example on Reading files in the documentation for the Windows installation. But for simple reading, you can use the following code:\n\n```csharp\n\nusing System;\nusing FlexCel.Core;\nusing FlexCel.XlsAdapter;\n\nnamespace Samples\n{\n    class MainClass\n    {\n        public static void Main(string[] args)\n        {\n            XlsFile xls = new XlsFile(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"test.xlsx\"));\n\n            xls.ActiveSheetByName = \"Sheet1\";  //we\u0027ll read sheet1. We could loop over the existing sheets by using xls.SheetCount and xls.ActiveSheet \n            for (int row = 1; row \u003c= xls.RowCount; row++)\n            {\n                for (int colIndex = 1; colIndex \u003c= xls.ColCountInRow(row); colIndex++) //Don\u0027t use xls.ColCount as it is slow: See Performance.Pdf\n                {\n                    int XF = -1;\n                    object cell = xls.GetCellValueIndexed(row, colIndex, ref XF);\n\n                    TCellAddress addr = new TCellAddress(row, xls.ColFromIndex(row, colIndex));\n                    Console.Write(\"Cell \" + addr.CellRef + \" has \");\n                    if (cell is TRichString) Console.WriteLine(\"a rich string.\");\n                    else if (cell is string) Console.WriteLine(\"a string.\");\n                    else if (cell is Double) Console.WriteLine(\"a number.\");\n                    else if (cell is bool) Console.WriteLine(\"a bool.\");\n                    else if (cell is TFlxFormulaErrorValue) Console.WriteLine(\"an error.\");\n                    else if (cell is TFormula) Console.WriteLine(\"a formula.\");\n                    else Console.WriteLine(\"Error: Unknown cell type\");\n                }\n            }\n        }\n    }\n}\n\n```\n\n## 4. Manipulating files\n\nAPIMate will tell you about a huge number of things, like how to paint a cell in red, or how to insert an autofilter.\nBut there are some methods that APIMate can\u0027t tell you about, and from those the most important are the manipulating methods:\n\nUse **xls.InsertAndCopyRange** for inserting rows or column or ranges of cells. Also for copying ranges or cells or full rows or full columns.\nOr for inserting and copying cells/columns/rows in one operation (like pressing \"Copy/Insert copied cells\" in Excel). \nIt can also copy the cels from one sheet to the same sheet, to another sheet, or to another sheet in another file.\nInsertAndCopyRange is a heavily overloaded method, and it can do many things depending on the parameters you pass to it.\n\nUse **xls.DeleteRange** to delete ranges of cells, full rows or full columns.\n\nUse **xls.MoveRange** to move a range, full rows or full columns from one place to another.\n\nUse **xls.InsertAndCopySheets** to insert a sheet, to copy a sheet, or to insert and copy a sheet in the same operation.\n\nUse **xls.DeleteSheet** to delete a sheet.\n\n## 5. Creating Reports\n\nYou can create Excel files with code as shown above, but FlexCel also includes a reporting engine which uses Excel as the report designer. \nWhen using reports you create a template in Excel, write some tags on it, and run the report. \nFlexCel will replace those tags by the values from a database or memory.\n\n#### 5.1. Create an empty file in Excel\n\n#### 5.2. In cell A1 of the first sheet, write \u003c#Customer.Name\u003e. In cell B1 write \u003c#Customer.Address\u003e\n\n#### 5.3. In the ribbon, go to \"Formulas\" tab, and press \"Name manager\" (In Excel for OSX or Excel 2003, go to Menu-\u003eInsert-\u003eName-\u003eDefine)\n\n#### 5.3.1. Create a name \"__Customer__\" that refers to \"=Sheet1!$A$1\".  \nThe name is case insensitive, you can write it in any mix of upper and lower case letters.\nIt needs to start with two underscores (\"\\_\") and end with two underscores too. We could use a single underscore for bands that don\u0027t take the full row or \"I\\_\" or \"I\\_\\_\" for column reports instead, but this is for more advanced uses.\n\n\n#### 5.4. Save the file as \"report.template.xlsx\"\n\n#### 5.5. Write this code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing FlexCel.Core;\nusing FlexCel.Report;\n\nnamespace Samples\n{\n    class MainClass\n    {\n        public static void Main(string[] args)\n        {\n            //Uncomment if in a console app: MonoMac.AppKit.NSApplication.Init();\n            var Customers = new List\u003cCustomer\u003e();\n            Customers.Add(new Customer{ Name = \"Bill\", Address = \"555 demo line\" });\n            Customers.Add(new Customer{ Name = \"Joe\", Address = \"556 demo line\" });\n\n            using (FlexCelReport fr = new FlexCelReport(true))\n            {\n                fr.AddTable(\"Customer\", Customers);\n                fr.Run(\n                    System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"report.template.xlsx\"),\n                    System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.xlsx\")\n                );\n            }\n        }\n    }\n\n    class Customer\n    {\n        public string Name { get; set; }\n        public string Address { get; set; }\n    }\n```\n\n##### 5.5.1. **Notes**. \nIf doing an OSX Console application, you will need to add a reference to System.Data, System.Xml and XamMac or MonoMac\nto the app. You might also need to copy XamMac.dll or MonoMac.dll you your output folder. And in a console application, you will\nneed to initialize the Cocoa framework by calling MonoMac.AppKit.NSApplication.Init()  (As commented in the code). \nFor normal applications, you will probably not need to do anything.\n\n## 6. Exporting a file to pdf\nFlexCel offers a lot of options to export to pdf, like PDF/A, exporting font subsets, signing the generated pdf documents, etc. This is all shown in the examples and documentation. But for a simple export you can use the following code:\n\n```csharp\nusing System;\nusing FlexCel.Core;\nusing FlexCel.XlsAdapter;\nusing FlexCel.Render;\n\nnamespace Samples\n{\n    class MainClass\n    {\n        public static void Main(string[] args)\n        {\n            MonoMac.AppKit.NSApplication.Init();\n \n            XlsFile xls = new XlsFile(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.xlsx\"));\n\n            using (var pdf = new FlexCelPdfExport(xls, true))\n            {\n                pdf.Export(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.pdf\"));\n            }\n        }\n    }\n}\n```\n\n#### 6.1. The same notes in 5.5.1 apply here.\n\n## 7. Exporting a file to html\nAs usual, there are too many options when exporting to html to show here: Exporting as html 3.2, 4 or 5, embedding images or css, exporting each sheet as a tab and a big long list of etc. And as usual, you can find all the options in the documentation and examples. \n\nFor this getting started guide, we will show how to do an export with the default options of the active sheet.\n\n\n```csharp\nusing System;\nusing FlexCel.Core;\nusing FlexCel.XlsAdapter;\nusing FlexCel.Render;\n\nnamespace Samples\n{\n    class MainClass\n    {\n        public static void Main(string[] args)\n        { \n            XlsFile xls = new XlsFile(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.xlsx\"));\n\n            using (var html = new FlexCelHtmlExport(xls, true))\n            {\n                html.Export(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"result.html\"), null);\n            }\n        }\n    }\n}\n```\n\n#### 7.1. The same notes in 5.5.1 apply here.\n\n## 8.Browsing through the Examples\nFlexCel comes with more than 50 examples on how to do specific things. Those demos are written for Visual Studio and Windows, but the concepts they show apply also to Xamarin.\n\nSo the next step to truly see what can be done is to install FlexCel for Visual Studio and open the main demo. You can open each demo as a standalone project, but you can also use the included \"Demo Browser\" (this is MainDemo.csproj) to look at them all in a single place. \n\nYou can search for specific keywords at the top right of the main screen, to locate the demos that deal with specific features. So for example if you are looking for demos which show encryption, you will write \"encrypt\" in the search box.\n\n\n## 9. This ends this small guide, but there is much more.\n To continue take a look at the over 50 examples in the main FlexCel distribution (currently available only for Windows), \n and read the following documents (which are also available offline in the FlexCel for Windows setup):\n \n* [What\u0027s new](http://www.tmssoftware.biz/flexcel/docs/net/whatsnew.htm)\n* [Using the FlexCel API to read or write files](http://www.tmssoftware.biz/flexcel/docs/net/UsingFlexCelAPI.pdf)\n* [Using FlexCel Reports to create files](http://www.tmssoftware.biz/flexcel/docs/net/UsingFlexCelReports.pdf)\n* [Designing templates for FlexCel Reports](http://www.tmssoftware.biz/flexcel/docs/net/EndUserGuide.pdf)\n* [Tags available in FlexCel Reports](http://www.tmssoftware.biz/flexcel/docs/net/FlexCelReportTags.xls)\n* [Notes about performance](http://www.tmssoftware.biz/flexcel/docs/net/Performance.pdf)\n* [Exporting files to pdf](http://www.tmssoftware.biz/flexcel/docs/net/UsingFlexCelPdfExport.pdf)\n* [Exporting files to html](http://www.tmssoftware.biz/flexcel/docs/net/UsingFlexCelHTMLExport.pdf)\n* [Using FlexCel in iOS](http://www.tmssoftware.biz/flexcel/docs/net/iOS.pdf)\n* [A tutorial on how to work with files in iOS](http://www.tmssoftware.biz/flexcel/docs/net/FlexCelViewTutorial.pdf) \n* [Using FlexCel with Windows Phone and Windows Store](http://www.tmssoftware.biz/flexcel/docs/net/WinPhoneAndStore.pdf)\n* [Using FlexCel with Android](http://www.tmssoftware.biz/flexcel/docs/net/Android.pdf)\n* [Using FlexCel with Mono and Linux](http://www.tmssoftware.biz/flexcel/docs/net/FlexCelAndMono.pdf)\n* [Functions supported in recalculation](http://www.tmssoftware.biz/flexcel/docs/net/SupportedFunctions.xls)\n* [Autoshapes supported when exporting to pdf or html](http://www.tmssoftware.biz/flexcel/docs/net/SupportedAutoshapes.xls)\n* [Deploying FlexCel](http://www.tmssoftware.biz/flexcel/docs/net/DEPLOYING_FLEXCEL.txt)\n* [Configuring FlexCel](http://www.tmssoftware.biz/flexcel/docs/net/CONFIGURING_FLEXCEL.txt)\n* [Copyright information](http://www.tmssoftware.biz/flexcel/docs/net/copyright.txt)\n* [Online help](http://www.tmssoftware.biz/flexcel/hlp/net/index.aspx)\n\n\n \n \n","Hash":"f7f415ca4768fc30ab87748b9e063919","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}